
HC_SR04_Ultrasonic_Sensing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ec4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000688  08003fd0  08003fd0  00004fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004658  08004658  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  08004658  08004658  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004658  08004658  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004658  08004658  00005658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800465c  0800465c  0000565c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004660  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  2000005c  080046bc  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  080046bc  000066bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c450  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f9b  00000000  00000000  000124d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00014470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a60  00000000  00000000  000151c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181c6  00000000  00000000  00015c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010296  00000000  00000000  0002ddee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b60e  00000000  00000000  0003e084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9692  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cfc  00000000  00000000  000c96d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000cd3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003fb8 	.word	0x08003fb8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003fb8 	.word	0x08003fb8

0800014c <oled_init>:
#include "stdio.h"
#include "main.h"


// OLED Initialization Function
void oled_init(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8000150:	f000 f874 	bl	800023c <ssd1306_Init>
}
 8000154:	bf00      	nop
 8000156:	bd80      	pop	{r7, pc}

08000158 <oled_display_wavelength_and_distance>:


void oled_display_wavelength_and_distance(int wavelength, int distance)
{
 8000158:	b580      	push	{r7, lr}
 800015a:	b08c      	sub	sp, #48	@ 0x30
 800015c:	af02      	add	r7, sp, #8
 800015e:	6078      	str	r0, [r7, #4]
 8000160:	6039      	str	r1, [r7, #0]
    char buffer[30];
    ssd1306_Fill(Black);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f8d4 	bl	8000310 <ssd1306_Fill>

    ssd1306_SetCursor(2, 2);
 8000168:	2102      	movs	r1, #2
 800016a:	2002      	movs	r0, #2
 800016c:	f000 fa18 	bl	80005a0 <ssd1306_SetCursor>
    sprintf(buffer, "wavelength: %d microseconds", wavelength);  // use %d for int
 8000170:	f107 0308 	add.w	r3, r7, #8
 8000174:	687a      	ldr	r2, [r7, #4]
 8000176:	4912      	ldr	r1, [pc, #72]	@ (80001c0 <oled_display_wavelength_and_distance+0x68>)
 8000178:	4618      	mov	r0, r3
 800017a:	f003 fa6d 	bl	8003658 <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 800017e:	4b11      	ldr	r3, [pc, #68]	@ (80001c4 <oled_display_wavelength_and_distance+0x6c>)
 8000180:	f107 0008 	add.w	r0, r7, #8
 8000184:	2201      	movs	r2, #1
 8000186:	9200      	str	r2, [sp, #0]
 8000188:	cb0e      	ldmia	r3, {r1, r2, r3}
 800018a:	f000 f9e3 	bl	8000554 <ssd1306_WriteString>

    ssd1306_SetCursor(2, 12);
 800018e:	210c      	movs	r1, #12
 8000190:	2002      	movs	r0, #2
 8000192:	f000 fa05 	bl	80005a0 <ssd1306_SetCursor>
    sprintf(buffer, "distance: %d cm", distance);      // use %% to print literal '%'
 8000196:	f107 0308 	add.w	r3, r7, #8
 800019a:	683a      	ldr	r2, [r7, #0]
 800019c:	490a      	ldr	r1, [pc, #40]	@ (80001c8 <oled_display_wavelength_and_distance+0x70>)
 800019e:	4618      	mov	r0, r3
 80001a0:	f003 fa5a 	bl	8003658 <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 80001a4:	4b07      	ldr	r3, [pc, #28]	@ (80001c4 <oled_display_wavelength_and_distance+0x6c>)
 80001a6:	f107 0008 	add.w	r0, r7, #8
 80001aa:	2201      	movs	r2, #1
 80001ac:	9200      	str	r2, [sp, #0]
 80001ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80001b0:	f000 f9d0 	bl	8000554 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 80001b4:	f000 f8c4 	bl	8000340 <ssd1306_UpdateScreen>
}
 80001b8:	bf00      	nop
 80001ba:	3728      	adds	r7, #40	@ 0x28
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	08003fd0 	.word	0x08003fd0
 80001c4:	080045ec 	.word	0x080045ec
 80001c8:	08003fec 	.word	0x08003fec

080001cc <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 80001d0:	bf00      	nop
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr

080001d8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b086      	sub	sp, #24
 80001dc:	af04      	add	r7, sp, #16
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1,
 80001e2:	f04f 33ff 	mov.w	r3, #4294967295
 80001e6:	9302      	str	r3, [sp, #8]
 80001e8:	2301      	movs	r3, #1
 80001ea:	9301      	str	r3, [sp, #4]
 80001ec:	1dfb      	adds	r3, r7, #7
 80001ee:	9300      	str	r3, [sp, #0]
 80001f0:	2301      	movs	r3, #1
 80001f2:	2200      	movs	r2, #0
 80001f4:	2178      	movs	r1, #120	@ 0x78
 80001f6:	4803      	ldr	r0, [pc, #12]	@ (8000204 <ssd1306_WriteCommand+0x2c>)
 80001f8:	f001 fa88 	bl	800170c <HAL_I2C_Mem_Write>
			HAL_MAX_DELAY);
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	20000480 	.word	0x20000480

08000208 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t *buffer, size_t buff_size) {
 8000208:	b580      	push	{r7, lr}
 800020a:	b086      	sub	sp, #24
 800020c:	af04      	add	r7, sp, #16
 800020e:	6078      	str	r0, [r7, #4]
 8000210:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer,
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	b29b      	uxth	r3, r3
 8000216:	f04f 32ff 	mov.w	r2, #4294967295
 800021a:	9202      	str	r2, [sp, #8]
 800021c:	9301      	str	r3, [sp, #4]
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	9300      	str	r3, [sp, #0]
 8000222:	2301      	movs	r3, #1
 8000224:	2240      	movs	r2, #64	@ 0x40
 8000226:	2178      	movs	r1, #120	@ 0x78
 8000228:	4803      	ldr	r0, [pc, #12]	@ (8000238 <ssd1306_WriteData+0x30>)
 800022a:	f001 fa6f 	bl	800170c <HAL_I2C_Mem_Write>
			buff_size, HAL_MAX_DELAY);
}
 800022e:	bf00      	nop
 8000230:	3708      	adds	r7, #8
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	20000480 	.word	0x20000480

0800023c <ssd1306_Init>:
	}
	return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8000240:	f7ff ffc4 	bl	80001cc <ssd1306_Reset>

	// Wait for the screen to boot
	HAL_Delay(100);
 8000244:	2064      	movs	r0, #100	@ 0x64
 8000246:	f000 fe4f 	bl	8000ee8 <HAL_Delay>

	// Init OLED
	ssd1306_SetDisplayOn(0); //display off
 800024a:	2000      	movs	r0, #0
 800024c:	f000 f9d4 	bl	80005f8 <ssd1306_SetDisplayOn>

	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000250:	2020      	movs	r0, #32
 8000252:	f7ff ffc1 	bl	80001d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000256:	2000      	movs	r0, #0
 8000258:	f7ff ffbe 	bl	80001d8 <ssd1306_WriteCommand>
								// 10b,Page Addressing Mode (RESET); 11b,Invalid

	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800025c:	20b0      	movs	r0, #176	@ 0xb0
 800025e:	f7ff ffbb 	bl	80001d8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000262:	20c8      	movs	r0, #200	@ 0xc8
 8000264:	f7ff ffb8 	bl	80001d8 <ssd1306_WriteCommand>
#endif

	ssd1306_WriteCommand(0x00); //---set low column address
 8000268:	2000      	movs	r0, #0
 800026a:	f7ff ffb5 	bl	80001d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 800026e:	2010      	movs	r0, #16
 8000270:	f7ff ffb2 	bl	80001d8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000274:	2040      	movs	r0, #64	@ 0x40
 8000276:	f7ff ffaf 	bl	80001d8 <ssd1306_WriteCommand>

	ssd1306_SetContrast(0xFF);
 800027a:	20ff      	movs	r0, #255	@ 0xff
 800027c:	f000 f9a8 	bl	80005d0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000280:	20a1      	movs	r0, #161	@ 0xa1
 8000282:	f7ff ffa9 	bl	80001d8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
	ssd1306_WriteCommand(0xA6); //--set normal color
 8000286:	20a6      	movs	r0, #166	@ 0xa6
 8000288:	f7ff ffa6 	bl	80001d8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800028c:	20a8      	movs	r0, #168	@ 0xa8
 800028e:	f7ff ffa3 	bl	80001d8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x3F); //
 8000292:	203f      	movs	r0, #63	@ 0x3f
 8000294:	f7ff ffa0 	bl	80001d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000298:	20a4      	movs	r0, #164	@ 0xa4
 800029a:	f7ff ff9d 	bl	80001d8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800029e:	20d3      	movs	r0, #211	@ 0xd3
 80002a0:	f7ff ff9a 	bl	80001d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80002a4:	2000      	movs	r0, #0
 80002a6:	f7ff ff97 	bl	80001d8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80002aa:	20d5      	movs	r0, #213	@ 0xd5
 80002ac:	f7ff ff94 	bl	80001d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80002b0:	20f0      	movs	r0, #240	@ 0xf0
 80002b2:	f7ff ff91 	bl	80001d8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80002b6:	20d9      	movs	r0, #217	@ 0xd9
 80002b8:	f7ff ff8e 	bl	80001d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80002bc:	2022      	movs	r0, #34	@ 0x22
 80002be:	f7ff ff8b 	bl	80001d8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80002c2:	20da      	movs	r0, #218	@ 0xda
 80002c4:	f7ff ff88 	bl	80001d8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x12);
 80002c8:	2012      	movs	r0, #18
 80002ca:	f7ff ff85 	bl	80001d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xDB); //--set vcomh
 80002ce:	20db      	movs	r0, #219	@ 0xdb
 80002d0:	f7ff ff82 	bl	80001d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80002d4:	2020      	movs	r0, #32
 80002d6:	f7ff ff7f 	bl	80001d8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80002da:	208d      	movs	r0, #141	@ 0x8d
 80002dc:	f7ff ff7c 	bl	80001d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 80002e0:	2014      	movs	r0, #20
 80002e2:	f7ff ff79 	bl	80001d8 <ssd1306_WriteCommand>
	ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80002e6:	2001      	movs	r0, #1
 80002e8:	f000 f986 	bl	80005f8 <ssd1306_SetDisplayOn>

	// Clear screen
	ssd1306_Fill(Black);
 80002ec:	2000      	movs	r0, #0
 80002ee:	f000 f80f 	bl	8000310 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 80002f2:	f000 f825 	bl	8000340 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 80002f6:	4b05      	ldr	r3, [pc, #20]	@ (800030c <ssd1306_Init+0xd0>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80002fc:	4b03      	ldr	r3, [pc, #12]	@ (800030c <ssd1306_Init+0xd0>)
 80002fe:	2200      	movs	r2, #0
 8000300:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8000302:	4b02      	ldr	r3, [pc, #8]	@ (800030c <ssd1306_Init+0xd0>)
 8000304:	2201      	movs	r2, #1
 8000306:	711a      	strb	r2, [r3, #4]
}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000478 	.word	0x20000478

08000310 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF,
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d101      	bne.n	8000324 <ssd1306_Fill+0x14>
 8000320:	2300      	movs	r3, #0
 8000322:	e000      	b.n	8000326 <ssd1306_Fill+0x16>
 8000324:	23ff      	movs	r3, #255	@ 0xff
 8000326:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800032a:	4619      	mov	r1, r3
 800032c:	4803      	ldr	r0, [pc, #12]	@ (800033c <ssd1306_Fill+0x2c>)
 800032e:	f003 f9b3 	bl	8003698 <memset>
			sizeof(SSD1306_Buffer));
}
 8000332:	bf00      	nop
 8000334:	3708      	adds	r7, #8
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000078 	.word	0x20000078

08000340 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
	// depends on the screen height:
	//
	//  * 32px   ==  4 pages
	//  * 64px   ==  8 pages
	//  * 128px  ==  16 pages
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 8000346:	2300      	movs	r3, #0
 8000348:	71fb      	strb	r3, [r7, #7]
 800034a:	e016      	b.n	800037a <ssd1306_UpdateScreen+0x3a>
		ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	3b50      	subs	r3, #80	@ 0x50
 8000350:	b2db      	uxtb	r3, r3
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff ff40 	bl	80001d8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000358:	2000      	movs	r0, #0
 800035a:	f7ff ff3d 	bl	80001d8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800035e:	2010      	movs	r0, #16
 8000360:	f7ff ff3a 	bl	80001d8 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	01db      	lsls	r3, r3, #7
 8000368:	4a08      	ldr	r2, [pc, #32]	@ (800038c <ssd1306_UpdateScreen+0x4c>)
 800036a:	4413      	add	r3, r2
 800036c:	2180      	movs	r1, #128	@ 0x80
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ff4a 	bl	8000208 <ssd1306_WriteData>
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	3301      	adds	r3, #1
 8000378:	71fb      	strb	r3, [r7, #7]
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	2b07      	cmp	r3, #7
 800037e:	d9e5      	bls.n	800034c <ssd1306_UpdateScreen+0xc>
	}
}
 8000380:	bf00      	nop
 8000382:	bf00      	nop
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	20000078 	.word	0x20000078

08000390 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
 800039a:	460b      	mov	r3, r1
 800039c:	71bb      	strb	r3, [r7, #6]
 800039e:	4613      	mov	r3, r2
 80003a0:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80003a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db3d      	blt.n	8000426 <ssd1306_DrawPixel+0x96>
 80003aa:	79bb      	ldrb	r3, [r7, #6]
 80003ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80003ae:	d83a      	bhi.n	8000426 <ssd1306_DrawPixel+0x96>
		// Don't write outside the buffer
		return;
	}

	// Draw in the right color
	if (color == White) {
 80003b0:	797b      	ldrb	r3, [r7, #5]
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	d11a      	bne.n	80003ec <ssd1306_DrawPixel+0x5c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80003b6:	79fa      	ldrb	r2, [r7, #7]
 80003b8:	79bb      	ldrb	r3, [r7, #6]
 80003ba:	08db      	lsrs	r3, r3, #3
 80003bc:	b2d8      	uxtb	r0, r3
 80003be:	4603      	mov	r3, r0
 80003c0:	01db      	lsls	r3, r3, #7
 80003c2:	4413      	add	r3, r2
 80003c4:	4a1a      	ldr	r2, [pc, #104]	@ (8000430 <ssd1306_DrawPixel+0xa0>)
 80003c6:	5cd3      	ldrb	r3, [r2, r3]
 80003c8:	b25a      	sxtb	r2, r3
 80003ca:	79bb      	ldrb	r3, [r7, #6]
 80003cc:	f003 0307 	and.w	r3, r3, #7
 80003d0:	2101      	movs	r1, #1
 80003d2:	fa01 f303 	lsl.w	r3, r1, r3
 80003d6:	b25b      	sxtb	r3, r3
 80003d8:	4313      	orrs	r3, r2
 80003da:	b259      	sxtb	r1, r3
 80003dc:	79fa      	ldrb	r2, [r7, #7]
 80003de:	4603      	mov	r3, r0
 80003e0:	01db      	lsls	r3, r3, #7
 80003e2:	4413      	add	r3, r2
 80003e4:	b2c9      	uxtb	r1, r1
 80003e6:	4a12      	ldr	r2, [pc, #72]	@ (8000430 <ssd1306_DrawPixel+0xa0>)
 80003e8:	54d1      	strb	r1, [r2, r3]
 80003ea:	e01d      	b.n	8000428 <ssd1306_DrawPixel+0x98>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80003ec:	79fa      	ldrb	r2, [r7, #7]
 80003ee:	79bb      	ldrb	r3, [r7, #6]
 80003f0:	08db      	lsrs	r3, r3, #3
 80003f2:	b2d8      	uxtb	r0, r3
 80003f4:	4603      	mov	r3, r0
 80003f6:	01db      	lsls	r3, r3, #7
 80003f8:	4413      	add	r3, r2
 80003fa:	4a0d      	ldr	r2, [pc, #52]	@ (8000430 <ssd1306_DrawPixel+0xa0>)
 80003fc:	5cd3      	ldrb	r3, [r2, r3]
 80003fe:	b25a      	sxtb	r2, r3
 8000400:	79bb      	ldrb	r3, [r7, #6]
 8000402:	f003 0307 	and.w	r3, r3, #7
 8000406:	2101      	movs	r1, #1
 8000408:	fa01 f303 	lsl.w	r3, r1, r3
 800040c:	b25b      	sxtb	r3, r3
 800040e:	43db      	mvns	r3, r3
 8000410:	b25b      	sxtb	r3, r3
 8000412:	4013      	ands	r3, r2
 8000414:	b259      	sxtb	r1, r3
 8000416:	79fa      	ldrb	r2, [r7, #7]
 8000418:	4603      	mov	r3, r0
 800041a:	01db      	lsls	r3, r3, #7
 800041c:	4413      	add	r3, r2
 800041e:	b2c9      	uxtb	r1, r1
 8000420:	4a03      	ldr	r2, [pc, #12]	@ (8000430 <ssd1306_DrawPixel+0xa0>)
 8000422:	54d1      	strb	r1, [r2, r3]
 8000424:	e000      	b.n	8000428 <ssd1306_DrawPixel+0x98>
		return;
 8000426:	bf00      	nop
	}
}
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	20000078 	.word	0x20000078

08000434 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000434:	b590      	push	{r4, r7, lr}
 8000436:	b089      	sub	sp, #36	@ 0x24
 8000438:	af00      	add	r7, sp, #0
 800043a:	4604      	mov	r4, r0
 800043c:	4638      	mov	r0, r7
 800043e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000442:	4623      	mov	r3, r4
 8000444:	73fb      	strb	r3, [r7, #15]
	uint32_t i, b, j;

	// Check if character is valid
	if (ch < 32 || ch > 126)
 8000446:	7bfb      	ldrb	r3, [r7, #15]
 8000448:	2b1f      	cmp	r3, #31
 800044a:	d902      	bls.n	8000452 <ssd1306_WriteChar+0x1e>
 800044c:	7bfb      	ldrb	r3, [r7, #15]
 800044e:	2b7e      	cmp	r3, #126	@ 0x7e
 8000450:	d901      	bls.n	8000456 <ssd1306_WriteChar+0x22>
		return 0;
 8000452:	2300      	movs	r3, #0
 8000454:	e077      	b.n	8000546 <ssd1306_WriteChar+0x112>

	// Check remaining space on current line
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000456:	4b3e      	ldr	r3, [pc, #248]	@ (8000550 <ssd1306_WriteChar+0x11c>)
 8000458:	881b      	ldrh	r3, [r3, #0]
 800045a:	461a      	mov	r2, r3
 800045c:	783b      	ldrb	r3, [r7, #0]
 800045e:	4413      	add	r3, r2
 8000460:	2b80      	cmp	r3, #128	@ 0x80
 8000462:	dc06      	bgt.n	8000472 <ssd1306_WriteChar+0x3e>
	SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height)) {
 8000464:	4b3a      	ldr	r3, [pc, #232]	@ (8000550 <ssd1306_WriteChar+0x11c>)
 8000466:	885b      	ldrh	r3, [r3, #2]
 8000468:	461a      	mov	r2, r3
 800046a:	787b      	ldrb	r3, [r7, #1]
 800046c:	4413      	add	r3, r2
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800046e:	2b40      	cmp	r3, #64	@ 0x40
 8000470:	dd01      	ble.n	8000476 <ssd1306_WriteChar+0x42>
		// Not enough space on current line
		return 0;
 8000472:	2300      	movs	r3, #0
 8000474:	e067      	b.n	8000546 <ssd1306_WriteChar+0x112>
	}

	// Use the font to write
	for (i = 0; i < Font.height; i++) {
 8000476:	2300      	movs	r3, #0
 8000478:	61fb      	str	r3, [r7, #28]
 800047a:	e04e      	b.n	800051a <ssd1306_WriteChar+0xe6>
		b = Font.data[(ch - 32) * Font.height + i];
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	7bfb      	ldrb	r3, [r7, #15]
 8000480:	3b20      	subs	r3, #32
 8000482:	7879      	ldrb	r1, [r7, #1]
 8000484:	fb01 f303 	mul.w	r3, r1, r3
 8000488:	4619      	mov	r1, r3
 800048a:	69fb      	ldr	r3, [r7, #28]
 800048c:	440b      	add	r3, r1
 800048e:	005b      	lsls	r3, r3, #1
 8000490:	4413      	add	r3, r2
 8000492:	881b      	ldrh	r3, [r3, #0]
 8000494:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.width; j++) {
 8000496:	2300      	movs	r3, #0
 8000498:	61bb      	str	r3, [r7, #24]
 800049a:	e036      	b.n	800050a <ssd1306_WriteChar+0xd6>
			if ((b << j) & 0x8000) {
 800049c:	697a      	ldr	r2, [r7, #20]
 800049e:	69bb      	ldr	r3, [r7, #24]
 80004a0:	fa02 f303 	lsl.w	r3, r2, r3
 80004a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d013      	beq.n	80004d4 <ssd1306_WriteChar+0xa0>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 80004ac:	4b28      	ldr	r3, [pc, #160]	@ (8000550 <ssd1306_WriteChar+0x11c>)
 80004ae:	881b      	ldrh	r3, [r3, #0]
 80004b0:	b2da      	uxtb	r2, r3
 80004b2:	69bb      	ldr	r3, [r7, #24]
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	4413      	add	r3, r2
 80004b8:	b2d8      	uxtb	r0, r3
 80004ba:	4b25      	ldr	r3, [pc, #148]	@ (8000550 <ssd1306_WriteChar+0x11c>)
 80004bc:	885b      	ldrh	r3, [r3, #2]
 80004be:	b2da      	uxtb	r2, r3
 80004c0:	69fb      	ldr	r3, [r7, #28]
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	4413      	add	r3, r2
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80004cc:	4619      	mov	r1, r3
 80004ce:	f7ff ff5f 	bl	8000390 <ssd1306_DrawPixel>
 80004d2:	e017      	b.n	8000504 <ssd1306_WriteChar+0xd0>
						(SSD1306_COLOR) color);
			} else {
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 80004d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000550 <ssd1306_WriteChar+0x11c>)
 80004d6:	881b      	ldrh	r3, [r3, #0]
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	69bb      	ldr	r3, [r7, #24]
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	4413      	add	r3, r2
 80004e0:	b2d8      	uxtb	r0, r3
 80004e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000550 <ssd1306_WriteChar+0x11c>)
 80004e4:	885b      	ldrh	r3, [r3, #2]
 80004e6:	b2da      	uxtb	r2, r3
 80004e8:	69fb      	ldr	r3, [r7, #28]
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	4413      	add	r3, r2
 80004ee:	b2d9      	uxtb	r1, r3
 80004f0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	bf0c      	ite	eq
 80004f8:	2301      	moveq	r3, #1
 80004fa:	2300      	movne	r3, #0
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	461a      	mov	r2, r3
 8000500:	f7ff ff46 	bl	8000390 <ssd1306_DrawPixel>
		for (j = 0; j < Font.width; j++) {
 8000504:	69bb      	ldr	r3, [r7, #24]
 8000506:	3301      	adds	r3, #1
 8000508:	61bb      	str	r3, [r7, #24]
 800050a:	783b      	ldrb	r3, [r7, #0]
 800050c:	461a      	mov	r2, r3
 800050e:	69bb      	ldr	r3, [r7, #24]
 8000510:	4293      	cmp	r3, r2
 8000512:	d3c3      	bcc.n	800049c <ssd1306_WriteChar+0x68>
	for (i = 0; i < Font.height; i++) {
 8000514:	69fb      	ldr	r3, [r7, #28]
 8000516:	3301      	adds	r3, #1
 8000518:	61fb      	str	r3, [r7, #28]
 800051a:	787b      	ldrb	r3, [r7, #1]
 800051c:	461a      	mov	r2, r3
 800051e:	69fb      	ldr	r3, [r7, #28]
 8000520:	4293      	cmp	r3, r2
 8000522:	d3ab      	bcc.n	800047c <ssd1306_WriteChar+0x48>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8000524:	4b0a      	ldr	r3, [pc, #40]	@ (8000550 <ssd1306_WriteChar+0x11c>)
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	68ba      	ldr	r2, [r7, #8]
 800052a:	2a00      	cmp	r2, #0
 800052c:	d005      	beq.n	800053a <ssd1306_WriteChar+0x106>
 800052e:	68b9      	ldr	r1, [r7, #8]
 8000530:	7bfa      	ldrb	r2, [r7, #15]
 8000532:	3a20      	subs	r2, #32
 8000534:	440a      	add	r2, r1
 8000536:	7812      	ldrb	r2, [r2, #0]
 8000538:	e000      	b.n	800053c <ssd1306_WriteChar+0x108>
 800053a:	783a      	ldrb	r2, [r7, #0]
 800053c:	4413      	add	r3, r2
 800053e:	b29a      	uxth	r2, r3
 8000540:	4b03      	ldr	r3, [pc, #12]	@ (8000550 <ssd1306_WriteChar+0x11c>)
 8000542:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8000544:	7bfb      	ldrb	r3, [r7, #15]
}
 8000546:	4618      	mov	r0, r3
 8000548:	3724      	adds	r7, #36	@ 0x24
 800054a:	46bd      	mov	sp, r7
 800054c:	bd90      	pop	{r4, r7, pc}
 800054e:	bf00      	nop
 8000550:	20000478 	.word	0x20000478

08000554 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char *str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af02      	add	r7, sp, #8
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	4638      	mov	r0, r7
 800055e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	while (*str) {
 8000562:	e013      	b.n	800058c <ssd1306_WriteString+0x38>
		if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	7818      	ldrb	r0, [r3, #0]
 8000568:	7e3b      	ldrb	r3, [r7, #24]
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	463b      	mov	r3, r7
 800056e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000570:	f7ff ff60 	bl	8000434 <ssd1306_WriteChar>
 8000574:	4603      	mov	r3, r0
 8000576:	461a      	mov	r2, r3
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	429a      	cmp	r2, r3
 800057e:	d002      	beq.n	8000586 <ssd1306_WriteString+0x32>
			// Char could not be written
			return *str;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	e008      	b.n	8000598 <ssd1306_WriteString+0x44>
		}
		str++;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	3301      	adds	r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d1e7      	bne.n	8000564 <ssd1306_WriteString+0x10>
	}

	// Everything ok
	return *str;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	781b      	ldrb	r3, [r3, #0]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	460a      	mov	r2, r1
 80005aa:	71fb      	strb	r3, [r7, #7]
 80005ac:	4613      	mov	r3, r2
 80005ae:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	4b05      	ldr	r3, [pc, #20]	@ (80005cc <ssd1306_SetCursor+0x2c>)
 80005b6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80005b8:	79bb      	ldrb	r3, [r7, #6]
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	4b03      	ldr	r3, [pc, #12]	@ (80005cc <ssd1306_SetCursor+0x2c>)
 80005be:	805a      	strh	r2, [r3, #2]
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc80      	pop	{r7}
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000478 	.word	0x20000478

080005d0 <ssd1306_SetContrast>:
		}
	}
	return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	const uint8_t kSetContrastControlRegister = 0x81;
 80005da:	2381      	movs	r3, #129	@ 0x81
 80005dc:	73fb      	strb	r3, [r7, #15]
	ssd1306_WriteCommand(kSetContrastControlRegister);
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff fdf9 	bl	80001d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(value);
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff fdf5 	bl	80001d8 <ssd1306_WriteCommand>
}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	if (on) {
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d005      	beq.n	8000614 <ssd1306_SetDisplayOn+0x1c>
		value = 0xAF;   // Display on
 8000608:	23af      	movs	r3, #175	@ 0xaf
 800060a:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 1;
 800060c:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <ssd1306_SetDisplayOn+0x38>)
 800060e:	2201      	movs	r2, #1
 8000610:	715a      	strb	r2, [r3, #5]
 8000612:	e004      	b.n	800061e <ssd1306_SetDisplayOn+0x26>
	} else {
		value = 0xAE;   // Display off
 8000614:	23ae      	movs	r3, #174	@ 0xae
 8000616:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 0;
 8000618:	4b05      	ldr	r3, [pc, #20]	@ (8000630 <ssd1306_SetDisplayOn+0x38>)
 800061a:	2200      	movs	r2, #0
 800061c:	715a      	strb	r2, [r3, #5]
	}
	ssd1306_WriteCommand(value);
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff fdd9 	bl	80001d8 <ssd1306_WriteCommand>
}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000478 	.word	0x20000478

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000638:	f000 fbf4 	bl	8000e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063c:	f000 f850 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000640:	f000 f9b4 	bl	80009ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8000644:	f000 f892 	bl	800076c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000648:	f000 f8be 	bl	80007c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800064c:	f000 f914 	bl	8000878 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  oled_init();
 8000650:	f7ff fd7c 	bl	800014c <oled_init>
  DWT_Delay_Init();
 8000654:	f000 fa0e 	bl	8000a74 <DWT_Delay_Init>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000658:	2100      	movs	r1, #0
 800065a:	481b      	ldr	r0, [pc, #108]	@ (80006c8 <main+0x94>)
 800065c:	f002 f862 	bl	8002724 <HAL_TIM_IC_Start_IT>

  distance_update_flag = 0;
 8000660:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <main+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //trigger signal
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800066c:	4818      	ldr	r0, [pc, #96]	@ (80006d0 <main+0x9c>)
 800066e:	f000 fef1 	bl	8001454 <HAL_GPIO_WritePin>
	  delay_us(10);
 8000672:	200a      	movs	r0, #10
 8000674:	f000 fa18 	bl	8000aa8 <delay_us>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800067e:	4814      	ldr	r0, [pc, #80]	@ (80006d0 <main+0x9c>)
 8000680:	f000 fee8 	bl	8001454 <HAL_GPIO_WritePin>

	  if(distance_update_flag)
 8000684:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <main+0x98>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d010      	beq.n	80006ae <main+0x7a>
	  {
		  distance_update_flag = 0;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <main+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
		  distance = (pulse_us+1) * 340/20000U; //distance calculated in cm
 8000692:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <main+0xa0>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	3301      	adds	r3, #1
 8000698:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 800069c:	fb02 f303 	mul.w	r3, r2, r3
 80006a0:	4a0d      	ldr	r2, [pc, #52]	@ (80006d8 <main+0xa4>)
 80006a2:	fba2 2303 	umull	r2, r3, r2, r3
 80006a6:	0b9b      	lsrs	r3, r3, #14
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	4b0c      	ldr	r3, [pc, #48]	@ (80006dc <main+0xa8>)
 80006ac:	801a      	strh	r2, [r3, #0]

	  }
	  oled_display_wavelength_and_distance(pulse_us, distance);
 80006ae:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <main+0xa0>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <main+0xa8>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	4619      	mov	r1, r3
 80006ba:	4610      	mov	r0, r2
 80006bc:	f7ff fd4c 	bl	8000158 <oled_display_wavelength_and_distance>
	  HAL_Delay(60);
 80006c0:	203c      	movs	r0, #60	@ 0x3c
 80006c2:	f000 fc11 	bl	8000ee8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);
 80006c6:	e7ce      	b.n	8000666 <main+0x32>
 80006c8:	2000051c 	.word	0x2000051c
 80006cc:	20000568 	.word	0x20000568
 80006d0:	40010800 	.word	0x40010800
 80006d4:	20000564 	.word	0x20000564
 80006d8:	d1b71759 	.word	0xd1b71759
 80006dc:	2000056a 	.word	0x2000056a

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b090      	sub	sp, #64	@ 0x40
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0318 	add.w	r3, r7, #24
 80006ea:	2228      	movs	r2, #40	@ 0x28
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 ffd2 	bl	8003698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000702:	2301      	movs	r3, #1
 8000704:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000706:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800070a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000714:	2302      	movs	r3, #2
 8000716:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000718:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800071c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800071e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000722:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0318 	add.w	r3, r7, #24
 8000728:	4618      	mov	r0, r3
 800072a:	f001 fb57 	bl	8001ddc <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000734:	f000 f9de 	bl	8000af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2302      	movs	r3, #2
 800073e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000744:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2102      	movs	r1, #2
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fdc4 	bl	80022e0 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800075e:	f000 f9c9 	bl	8000af4 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3740      	adds	r7, #64	@ 0x40
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000770:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <MX_I2C1_Init+0x50>)
 8000772:	4a13      	ldr	r2, [pc, #76]	@ (80007c0 <MX_I2C1_Init+0x54>)
 8000774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_I2C1_Init+0x50>)
 8000778:	4a12      	ldr	r2, [pc, #72]	@ (80007c4 <MX_I2C1_Init+0x58>)
 800077a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_I2C1_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_I2C1_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_I2C1_Init+0x50>)
 800078a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800078e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000790:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <MX_I2C1_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_I2C1_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800079c:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	@ (80007bc <MX_I2C1_Init+0x50>)
 80007aa:	f000 fe6b 	bl	8001484 <HAL_I2C_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007b4:	f000 f99e 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000480 	.word	0x20000480
 80007c0:	40005400 	.word	0x40005400
 80007c4:	000186a0 	.word	0x000186a0

080007c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ce:	f107 0308 	add.w	r3, r7, #8
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007dc:	463b      	mov	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007e4:	4b22      	ldr	r3, [pc, #136]	@ (8000870 <MX_TIM1_Init+0xa8>)
 80007e6:	4a23      	ldr	r2, [pc, #140]	@ (8000874 <MX_TIM1_Init+0xac>)
 80007e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80007ea:	4b21      	ldr	r3, [pc, #132]	@ (8000870 <MX_TIM1_Init+0xa8>)
 80007ec:	2247      	movs	r2, #71	@ 0x47
 80007ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000870 <MX_TIM1_Init+0xa8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10;
 80007f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000870 <MX_TIM1_Init+0xa8>)
 80007f8:	220a      	movs	r2, #10
 80007fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000870 <MX_TIM1_Init+0xa8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000802:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <MX_TIM1_Init+0xa8>)
 8000804:	2200      	movs	r2, #0
 8000806:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000808:	4b19      	ldr	r3, [pc, #100]	@ (8000870 <MX_TIM1_Init+0xa8>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800080e:	4818      	ldr	r0, [pc, #96]	@ (8000870 <MX_TIM1_Init+0xa8>)
 8000810:	f001 fee0 	bl	80025d4 <HAL_TIM_Base_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800081a:	f000 f96b 	bl	8000af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000822:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	4619      	mov	r1, r3
 800082a:	4811      	ldr	r0, [pc, #68]	@ (8000870 <MX_TIM1_Init+0xa8>)
 800082c:	f002 fa6b 	bl	8002d06 <HAL_TIM_ConfigClockSource>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000836:	f000 f95d 	bl	8000af4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800083a:	2108      	movs	r1, #8
 800083c:	480c      	ldr	r0, [pc, #48]	@ (8000870 <MX_TIM1_Init+0xa8>)
 800083e:	f002 f87d 	bl	800293c <HAL_TIM_OnePulse_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000848:	f000 f954 	bl	8000af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000854:	463b      	mov	r3, r7
 8000856:	4619      	mov	r1, r3
 8000858:	4805      	ldr	r0, [pc, #20]	@ (8000870 <MX_TIM1_Init+0xa8>)
 800085a:	f002 fe8d 	bl	8003578 <HAL_TIMEx_MasterConfigSynchronization>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000864:	f000 f946 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200004d4 	.word	0x200004d4
 8000874:	40012c00 	.word	0x40012c00

08000878 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b090      	sub	sp, #64	@ 0x40
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008b2:	4b3d      	ldr	r3, [pc, #244]	@ (80009a8 <MX_TIM2_Init+0x130>)
 80008b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80008ba:	4b3b      	ldr	r3, [pc, #236]	@ (80009a8 <MX_TIM2_Init+0x130>)
 80008bc:	2247      	movs	r2, #71	@ 0x47
 80008be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c0:	4b39      	ldr	r3, [pc, #228]	@ (80009a8 <MX_TIM2_Init+0x130>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80008c6:	4b38      	ldr	r3, [pc, #224]	@ (80009a8 <MX_TIM2_Init+0x130>)
 80008c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ce:	4b36      	ldr	r3, [pc, #216]	@ (80009a8 <MX_TIM2_Init+0x130>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d4:	4b34      	ldr	r3, [pc, #208]	@ (80009a8 <MX_TIM2_Init+0x130>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008da:	4833      	ldr	r0, [pc, #204]	@ (80009a8 <MX_TIM2_Init+0x130>)
 80008dc:	f001 fe7a 	bl	80025d4 <HAL_TIM_Base_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80008e6:	f000 f905 	bl	8000af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ee:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008f4:	4619      	mov	r1, r3
 80008f6:	482c      	ldr	r0, [pc, #176]	@ (80009a8 <MX_TIM2_Init+0x130>)
 80008f8:	f002 fa05 	bl	8002d06 <HAL_TIM_ConfigClockSource>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000902:	f000 f8f7 	bl	8000af4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000906:	4828      	ldr	r0, [pc, #160]	@ (80009a8 <MX_TIM2_Init+0x130>)
 8000908:	f001 feb3 	bl	8002672 <HAL_TIM_IC_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000912:	f000 f8ef 	bl	8000af4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000916:	2304      	movs	r3, #4
 8000918:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 800091a:	2360      	movs	r3, #96	@ 0x60
 800091c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	481e      	ldr	r0, [pc, #120]	@ (80009a8 <MX_TIM2_Init+0x130>)
 800092e:	f002 fab1 	bl	8002e94 <HAL_TIM_SlaveConfigSynchro>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8000938:	f000 f8dc 	bl	8000af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4619      	mov	r1, r3
 800094a:	4817      	ldr	r0, [pc, #92]	@ (80009a8 <MX_TIM2_Init+0x130>)
 800094c:	f002 fe14 	bl	8003578 <HAL_TIMEx_MasterConfigSynchronization>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000956:	f000 f8cd 	bl	8000af4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800095a:	2302      	movs	r3, #2
 800095c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800095e:	2302      	movs	r3, #2
 8000960:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2200      	movs	r2, #0
 800096e:	4619      	mov	r1, r3
 8000970:	480d      	ldr	r0, [pc, #52]	@ (80009a8 <MX_TIM2_Init+0x130>)
 8000972:	f002 f92c 	bl	8002bce <HAL_TIM_IC_ConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 800097c:	f000 f8ba 	bl	8000af4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000980:	2300      	movs	r3, #0
 8000982:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000984:	2301      	movs	r3, #1
 8000986:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2204      	movs	r2, #4
 800098c:	4619      	mov	r1, r3
 800098e:	4806      	ldr	r0, [pc, #24]	@ (80009a8 <MX_TIM2_Init+0x130>)
 8000990:	f002 f91d 	bl	8002bce <HAL_TIM_IC_ConfigChannel>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM2_Init+0x126>
  {
    Error_Handler();
 800099a:	f000 f8ab 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	3740      	adds	r7, #64	@ 0x40
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	2000051c 	.word	0x2000051c

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 0310 	add.w	r3, r7, #16
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a6c <MX_GPIO_Init+0xc0>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	4a29      	ldr	r2, [pc, #164]	@ (8000a6c <MX_GPIO_Init+0xc0>)
 80009c6:	f043 0310 	orr.w	r3, r3, #16
 80009ca:	6193      	str	r3, [r2, #24]
 80009cc:	4b27      	ldr	r3, [pc, #156]	@ (8000a6c <MX_GPIO_Init+0xc0>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f003 0310 	and.w	r3, r3, #16
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d8:	4b24      	ldr	r3, [pc, #144]	@ (8000a6c <MX_GPIO_Init+0xc0>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a23      	ldr	r2, [pc, #140]	@ (8000a6c <MX_GPIO_Init+0xc0>)
 80009de:	f043 0320 	orr.w	r3, r3, #32
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b21      	ldr	r3, [pc, #132]	@ (8000a6c <MX_GPIO_Init+0xc0>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f003 0320 	and.w	r3, r3, #32
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a6c <MX_GPIO_Init+0xc0>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a6c <MX_GPIO_Init+0xc0>)
 80009f6:	f043 0304 	orr.w	r3, r3, #4
 80009fa:	6193      	str	r3, [r2, #24]
 80009fc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a6c <MX_GPIO_Init+0xc0>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f003 0304 	and.w	r3, r3, #4
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a08:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <MX_GPIO_Init+0xc0>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	4a17      	ldr	r2, [pc, #92]	@ (8000a6c <MX_GPIO_Init+0xc0>)
 8000a0e:	f043 0308 	orr.w	r3, r3, #8
 8000a12:	6193      	str	r3, [r2, #24]
 8000a14:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <MX_GPIO_Init+0xc0>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f003 0308 	and.w	r3, r3, #8
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a26:	4812      	ldr	r0, [pc, #72]	@ (8000a70 <MX_GPIO_Init+0xc4>)
 8000a28:	f000 fd14 	bl	8001454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 0310 	add.w	r3, r7, #16
 8000a42:	4619      	mov	r1, r3
 8000a44:	480a      	ldr	r0, [pc, #40]	@ (8000a70 <MX_GPIO_Init+0xc4>)
 8000a46:	f000 fb81 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4804      	ldr	r0, [pc, #16]	@ (8000a70 <MX_GPIO_Init+0xc4>)
 8000a60:	f000 fb74 	bl	800114c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a64:	bf00      	nop
 8000a66:	3720      	adds	r7, #32
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40010800 	.word	0x40010800

08000a74 <DWT_Delay_Init>:

/* USER CODE BEGIN 4 */
static inline void DWT_Delay_Init(void){
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000a78:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <DWT_Delay_Init+0x2c>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	4a08      	ldr	r2, [pc, #32]	@ (8000aa0 <DWT_Delay_Init+0x2c>)
 8000a7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a82:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 8000a84:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <DWT_Delay_Init+0x30>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <DWT_Delay_Init+0x30>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a05      	ldr	r2, [pc, #20]	@ (8000aa4 <DWT_Delay_Init+0x30>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6013      	str	r3, [r2, #0]
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000edf0 	.word	0xe000edf0
 8000aa4:	e0001000 	.word	0xe0001000

08000aa8 <delay_us>:
static inline void delay_us(uint32_t us){
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 8000ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae8 <delay_us+0x40>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * (SystemCoreClock/1000000U);
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8000aec <delay_us+0x44>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a0d      	ldr	r2, [pc, #52]	@ (8000af0 <delay_us+0x48>)
 8000abc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac0:	0c9a      	lsrs	r2, r3, #18
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	fb02 f303 	mul.w	r3, r2, r3
 8000ac8:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks);
 8000aca:	bf00      	nop
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <delay_us+0x40>)
 8000ace:	685a      	ldr	r2, [r3, #4]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	68ba      	ldr	r2, [r7, #8]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d8f8      	bhi.n	8000acc <delay_us+0x24>
}
 8000ada:	bf00      	nop
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e0001000 	.word	0xe0001000
 8000aec:	20000000 	.word	0x20000000
 8000af0:	431bde83 	.word	0x431bde83

08000af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af8:	b672      	cpsid	i
}
 8000afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <Error_Handler+0x8>

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b06:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <HAL_MspInit+0x5c>)
 8000b08:	699b      	ldr	r3, [r3, #24]
 8000b0a:	4a14      	ldr	r2, [pc, #80]	@ (8000b5c <HAL_MspInit+0x5c>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6193      	str	r3, [r2, #24]
 8000b12:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <HAL_MspInit+0x5c>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <HAL_MspInit+0x5c>)
 8000b20:	69db      	ldr	r3, [r3, #28]
 8000b22:	4a0e      	ldr	r2, [pc, #56]	@ (8000b5c <HAL_MspInit+0x5c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b28:	61d3      	str	r3, [r2, #28]
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <HAL_MspInit+0x5c>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b36:	4b0a      	ldr	r3, [pc, #40]	@ (8000b60 <HAL_MspInit+0x60>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	4a04      	ldr	r2, [pc, #16]	@ (8000b60 <HAL_MspInit+0x60>)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b52:	bf00      	nop
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40010000 	.word	0x40010000

08000b64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a15      	ldr	r2, [pc, #84]	@ (8000bd4 <HAL_I2C_MspInit+0x70>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d123      	bne.n	8000bcc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b84:	4b14      	ldr	r3, [pc, #80]	@ (8000bd8 <HAL_I2C_MspInit+0x74>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a13      	ldr	r2, [pc, #76]	@ (8000bd8 <HAL_I2C_MspInit+0x74>)
 8000b8a:	f043 0308 	orr.w	r3, r3, #8
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <HAL_I2C_MspInit+0x74>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f003 0308 	and.w	r3, r3, #8
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b9c:	23c0      	movs	r3, #192	@ 0xc0
 8000b9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba0:	2312      	movs	r3, #18
 8000ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	4619      	mov	r1, r3
 8000bae:	480b      	ldr	r0, [pc, #44]	@ (8000bdc <HAL_I2C_MspInit+0x78>)
 8000bb0:	f000 facc 	bl	800114c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bb4:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <HAL_I2C_MspInit+0x74>)
 8000bb6:	69db      	ldr	r3, [r3, #28]
 8000bb8:	4a07      	ldr	r2, [pc, #28]	@ (8000bd8 <HAL_I2C_MspInit+0x74>)
 8000bba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bbe:	61d3      	str	r3, [r2, #28]
 8000bc0:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <HAL_I2C_MspInit+0x74>)
 8000bc2:	69db      	ldr	r3, [r3, #28]
 8000bc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000bcc:	bf00      	nop
 8000bce:	3720      	adds	r7, #32
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40005400 	.word	0x40005400
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40010c00 	.word	0x40010c00

08000be0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	@ 0x28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0318 	add.w	r3, r7, #24
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a26      	ldr	r2, [pc, #152]	@ (8000c94 <HAL_TIM_Base_MspInit+0xb4>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d114      	bne.n	8000c2a <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c00:	4b25      	ldr	r3, [pc, #148]	@ (8000c98 <HAL_TIM_Base_MspInit+0xb8>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a24      	ldr	r2, [pc, #144]	@ (8000c98 <HAL_TIM_Base_MspInit+0xb8>)
 8000c06:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c0a:	6193      	str	r3, [r2, #24]
 8000c0c:	4b22      	ldr	r3, [pc, #136]	@ (8000c98 <HAL_TIM_Base_MspInit+0xb8>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2019      	movs	r0, #25
 8000c1e:	f000 fa5e 	bl	80010de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000c22:	2019      	movs	r0, #25
 8000c24:	f000 fa77 	bl	8001116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c28:	e030      	b.n	8000c8c <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM2)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c32:	d12b      	bne.n	8000c8c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c34:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <HAL_TIM_Base_MspInit+0xb8>)
 8000c36:	69db      	ldr	r3, [r3, #28]
 8000c38:	4a17      	ldr	r2, [pc, #92]	@ (8000c98 <HAL_TIM_Base_MspInit+0xb8>)
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	61d3      	str	r3, [r2, #28]
 8000c40:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <HAL_TIM_Base_MspInit+0xb8>)
 8000c42:	69db      	ldr	r3, [r3, #28]
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4c:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <HAL_TIM_Base_MspInit+0xb8>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	4a11      	ldr	r2, [pc, #68]	@ (8000c98 <HAL_TIM_Base_MspInit+0xb8>)
 8000c52:	f043 0304 	orr.w	r3, r3, #4
 8000c56:	6193      	str	r3, [r2, #24]
 8000c58:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <HAL_TIM_Base_MspInit+0xb8>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 0318 	add.w	r3, r7, #24
 8000c74:	4619      	mov	r1, r3
 8000c76:	4809      	ldr	r0, [pc, #36]	@ (8000c9c <HAL_TIM_Base_MspInit+0xbc>)
 8000c78:	f000 fa68 	bl	800114c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2100      	movs	r1, #0
 8000c80:	201c      	movs	r0, #28
 8000c82:	f000 fa2c 	bl	80010de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c86:	201c      	movs	r0, #28
 8000c88:	f000 fa45 	bl	8001116 <HAL_NVIC_EnableIRQ>
}
 8000c8c:	bf00      	nop
 8000c8e:	3728      	adds	r7, #40	@ 0x28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40012c00 	.word	0x40012c00
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40010800 	.word	0x40010800

08000ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <NMI_Handler+0x4>

08000ca8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <HardFault_Handler+0x4>

08000cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <MemManage_Handler+0x4>

08000cb8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr

08000ce0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr

08000cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf0:	f000 f8de 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cfc:	4802      	ldr	r0, [pc, #8]	@ (8000d08 <TIM1_UP_IRQHandler+0x10>)
 8000cfe:	f001 fe76 	bl	80029ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200004d4 	.word	0x200004d4

08000d0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d10:	4802      	ldr	r0, [pc, #8]	@ (8000d1c <TIM2_IRQHandler+0x10>)
 8000d12:	f001 fe6c 	bl	80029ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2000051c 	.word	0x2000051c

08000d20 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
    if(htim->Instance==TIM2 && htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1){
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d30:	d10d      	bne.n	8000d4e <HAL_TIM_IC_CaptureCallback+0x2e>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	7f1b      	ldrb	r3, [r3, #28]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d109      	bne.n	8000d4e <HAL_TIM_IC_CaptureCallback+0x2e>
        pulse_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f002 f8eb 	bl	8002f18 <HAL_TIM_ReadCapturedValue>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4a04      	ldr	r2, [pc, #16]	@ (8000d58 <HAL_TIM_IC_CaptureCallback+0x38>)
 8000d46:	6013      	str	r3, [r2, #0]
        distance_update_flag = 1;
 8000d48:	4b04      	ldr	r3, [pc, #16]	@ (8000d5c <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]

    }
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000564 	.word	0x20000564
 8000d5c:	20000568 	.word	0x20000568

08000d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d68:	4a14      	ldr	r2, [pc, #80]	@ (8000dbc <_sbrk+0x5c>)
 8000d6a:	4b15      	ldr	r3, [pc, #84]	@ (8000dc0 <_sbrk+0x60>)
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d74:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <_sbrk+0x64>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	@ (8000dc8 <_sbrk+0x68>)
 8000d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d82:	4b10      	ldr	r3, [pc, #64]	@ (8000dc4 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d207      	bcs.n	8000da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d90:	f002 fc8a 	bl	80036a8 <__errno>
 8000d94:	4603      	mov	r3, r0
 8000d96:	220c      	movs	r2, #12
 8000d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9e:	e009      	b.n	8000db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da0:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da6:	4b07      	ldr	r3, [pc, #28]	@ (8000dc4 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	4a05      	ldr	r2, [pc, #20]	@ (8000dc4 <_sbrk+0x64>)
 8000db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db2:	68fb      	ldr	r3, [r7, #12]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20005000 	.word	0x20005000
 8000dc0:	00000400 	.word	0x00000400
 8000dc4:	2000056c 	.word	0x2000056c
 8000dc8:	200006c0 	.word	0x200006c0

08000dcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dd8:	f7ff fff8 	bl	8000dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ddc:	480b      	ldr	r0, [pc, #44]	@ (8000e0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dde:	490c      	ldr	r1, [pc, #48]	@ (8000e10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000de0:	4a0c      	ldr	r2, [pc, #48]	@ (8000e14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a09      	ldr	r2, [pc, #36]	@ (8000e18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000df4:	4c09      	ldr	r4, [pc, #36]	@ (8000e1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e02:	f002 fc57 	bl	80036b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e06:	f7ff fc15 	bl	8000634 <main>
  bx lr
 8000e0a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e14:	08004660 	.word	0x08004660
  ldr r2, =_sbss
 8000e18:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e1c:	200006bc 	.word	0x200006bc

08000e20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC1_2_IRQHandler>
	...

08000e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	4b08      	ldr	r3, [pc, #32]	@ (8000e4c <HAL_Init+0x28>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a07      	ldr	r2, [pc, #28]	@ (8000e4c <HAL_Init+0x28>)
 8000e2e:	f043 0310 	orr.w	r3, r3, #16
 8000e32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 f947 	bl	80010c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3a:	200f      	movs	r0, #15
 8000e3c:	f000 f808 	bl	8000e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e40:	f7ff fe5e 	bl	8000b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40022000 	.word	0x40022000

08000e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e58:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <HAL_InitTick+0x54>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <HAL_InitTick+0x58>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f95f 	bl	8001132 <HAL_SYSTICK_Config>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00e      	b.n	8000e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b0f      	cmp	r3, #15
 8000e82:	d80a      	bhi.n	8000e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e84:	2200      	movs	r2, #0
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f000 f927 	bl	80010de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e90:	4a06      	ldr	r2, [pc, #24]	@ (8000eac <HAL_InitTick+0x5c>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e000      	b.n	8000e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	20000004 	.word	0x20000004

08000eb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ecc <HAL_IncTick+0x1c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <HAL_IncTick+0x20>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a03      	ldr	r2, [pc, #12]	@ (8000ed0 <HAL_IncTick+0x20>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000570 	.word	0x20000570

08000ed4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b02      	ldr	r3, [pc, #8]	@ (8000ee4 <HAL_GetTick+0x10>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	20000570 	.word	0x20000570

08000ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef0:	f7ff fff0 	bl	8000ed4 <HAL_GetTick>
 8000ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f00:	d005      	beq.n	8000f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f02:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <HAL_Delay+0x44>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f0e:	bf00      	nop
 8000f10:	f7ff ffe0 	bl	8000ed4 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d8f7      	bhi.n	8000f10 <HAL_Delay+0x28>
  {
  }
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000008 	.word	0x20000008

08000f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f62:	4a04      	ldr	r2, [pc, #16]	@ (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60d3      	str	r3, [r2, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	@ (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db0b      	blt.n	8000fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 021f 	and.w	r2, r3, #31
 8000fac:	4906      	ldr	r1, [pc, #24]	@ (8000fc8 <__NVIC_EnableIRQ+0x34>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	095b      	lsrs	r3, r3, #5
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100

08000fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	db0a      	blt.n	8000ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	490c      	ldr	r1, [pc, #48]	@ (8001018 <__NVIC_SetPriority+0x4c>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	0112      	lsls	r2, r2, #4
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	440b      	add	r3, r1
 8000ff0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff4:	e00a      	b.n	800100c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4908      	ldr	r1, [pc, #32]	@ (800101c <__NVIC_SetPriority+0x50>)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	3b04      	subs	r3, #4
 8001004:	0112      	lsls	r2, r2, #4
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	440b      	add	r3, r1
 800100a:	761a      	strb	r2, [r3, #24]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000e100 	.word	0xe000e100
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	@ 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f1c3 0307 	rsb	r3, r3, #7
 800103a:	2b04      	cmp	r3, #4
 800103c:	bf28      	it	cs
 800103e:	2304      	movcs	r3, #4
 8001040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3304      	adds	r3, #4
 8001046:	2b06      	cmp	r3, #6
 8001048:	d902      	bls.n	8001050 <NVIC_EncodePriority+0x30>
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3b03      	subs	r3, #3
 800104e:	e000      	b.n	8001052 <NVIC_EncodePriority+0x32>
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	f04f 32ff 	mov.w	r2, #4294967295
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43da      	mvns	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001068:	f04f 31ff 	mov.w	r1, #4294967295
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43d9      	mvns	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	4313      	orrs	r3, r2
         );
}
 800107a:	4618      	mov	r0, r3
 800107c:	3724      	adds	r7, #36	@ 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001094:	d301      	bcc.n	800109a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001096:	2301      	movs	r3, #1
 8001098:	e00f      	b.n	80010ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109a:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <SysTick_Config+0x40>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a2:	210f      	movs	r1, #15
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f7ff ff90 	bl	8000fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <SysTick_Config+0x40>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b2:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <SysTick_Config+0x40>)
 80010b4:	2207      	movs	r2, #7
 80010b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	e000e010 	.word	0xe000e010

080010c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff2d 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f0:	f7ff ff42 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 80010f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	6978      	ldr	r0, [r7, #20]
 80010fc:	f7ff ff90 	bl	8001020 <NVIC_EncodePriority>
 8001100:	4602      	mov	r2, r0
 8001102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff5f 	bl	8000fcc <__NVIC_SetPriority>
}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff35 	bl	8000f94 <__NVIC_EnableIRQ>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ffa2 	bl	8001084 <SysTick_Config>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800114c:	b480      	push	{r7}
 800114e:	b08b      	sub	sp, #44	@ 0x2c
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001156:	2300      	movs	r3, #0
 8001158:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115e:	e169      	b.n	8001434 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001160:	2201      	movs	r2, #1
 8001162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	69fa      	ldr	r2, [r7, #28]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	429a      	cmp	r2, r3
 800117a:	f040 8158 	bne.w	800142e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	4a9a      	ldr	r2, [pc, #616]	@ (80013ec <HAL_GPIO_Init+0x2a0>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d05e      	beq.n	8001246 <HAL_GPIO_Init+0xfa>
 8001188:	4a98      	ldr	r2, [pc, #608]	@ (80013ec <HAL_GPIO_Init+0x2a0>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d875      	bhi.n	800127a <HAL_GPIO_Init+0x12e>
 800118e:	4a98      	ldr	r2, [pc, #608]	@ (80013f0 <HAL_GPIO_Init+0x2a4>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d058      	beq.n	8001246 <HAL_GPIO_Init+0xfa>
 8001194:	4a96      	ldr	r2, [pc, #600]	@ (80013f0 <HAL_GPIO_Init+0x2a4>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d86f      	bhi.n	800127a <HAL_GPIO_Init+0x12e>
 800119a:	4a96      	ldr	r2, [pc, #600]	@ (80013f4 <HAL_GPIO_Init+0x2a8>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d052      	beq.n	8001246 <HAL_GPIO_Init+0xfa>
 80011a0:	4a94      	ldr	r2, [pc, #592]	@ (80013f4 <HAL_GPIO_Init+0x2a8>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d869      	bhi.n	800127a <HAL_GPIO_Init+0x12e>
 80011a6:	4a94      	ldr	r2, [pc, #592]	@ (80013f8 <HAL_GPIO_Init+0x2ac>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d04c      	beq.n	8001246 <HAL_GPIO_Init+0xfa>
 80011ac:	4a92      	ldr	r2, [pc, #584]	@ (80013f8 <HAL_GPIO_Init+0x2ac>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d863      	bhi.n	800127a <HAL_GPIO_Init+0x12e>
 80011b2:	4a92      	ldr	r2, [pc, #584]	@ (80013fc <HAL_GPIO_Init+0x2b0>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d046      	beq.n	8001246 <HAL_GPIO_Init+0xfa>
 80011b8:	4a90      	ldr	r2, [pc, #576]	@ (80013fc <HAL_GPIO_Init+0x2b0>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d85d      	bhi.n	800127a <HAL_GPIO_Init+0x12e>
 80011be:	2b12      	cmp	r3, #18
 80011c0:	d82a      	bhi.n	8001218 <HAL_GPIO_Init+0xcc>
 80011c2:	2b12      	cmp	r3, #18
 80011c4:	d859      	bhi.n	800127a <HAL_GPIO_Init+0x12e>
 80011c6:	a201      	add	r2, pc, #4	@ (adr r2, 80011cc <HAL_GPIO_Init+0x80>)
 80011c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011cc:	08001247 	.word	0x08001247
 80011d0:	08001221 	.word	0x08001221
 80011d4:	08001233 	.word	0x08001233
 80011d8:	08001275 	.word	0x08001275
 80011dc:	0800127b 	.word	0x0800127b
 80011e0:	0800127b 	.word	0x0800127b
 80011e4:	0800127b 	.word	0x0800127b
 80011e8:	0800127b 	.word	0x0800127b
 80011ec:	0800127b 	.word	0x0800127b
 80011f0:	0800127b 	.word	0x0800127b
 80011f4:	0800127b 	.word	0x0800127b
 80011f8:	0800127b 	.word	0x0800127b
 80011fc:	0800127b 	.word	0x0800127b
 8001200:	0800127b 	.word	0x0800127b
 8001204:	0800127b 	.word	0x0800127b
 8001208:	0800127b 	.word	0x0800127b
 800120c:	0800127b 	.word	0x0800127b
 8001210:	08001229 	.word	0x08001229
 8001214:	0800123d 	.word	0x0800123d
 8001218:	4a79      	ldr	r2, [pc, #484]	@ (8001400 <HAL_GPIO_Init+0x2b4>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d013      	beq.n	8001246 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800121e:	e02c      	b.n	800127a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	623b      	str	r3, [r7, #32]
          break;
 8001226:	e029      	b.n	800127c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	3304      	adds	r3, #4
 800122e:	623b      	str	r3, [r7, #32]
          break;
 8001230:	e024      	b.n	800127c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	3308      	adds	r3, #8
 8001238:	623b      	str	r3, [r7, #32]
          break;
 800123a:	e01f      	b.n	800127c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	330c      	adds	r3, #12
 8001242:	623b      	str	r3, [r7, #32]
          break;
 8001244:	e01a      	b.n	800127c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d102      	bne.n	8001254 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800124e:	2304      	movs	r3, #4
 8001250:	623b      	str	r3, [r7, #32]
          break;
 8001252:	e013      	b.n	800127c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d105      	bne.n	8001268 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800125c:	2308      	movs	r3, #8
 800125e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69fa      	ldr	r2, [r7, #28]
 8001264:	611a      	str	r2, [r3, #16]
          break;
 8001266:	e009      	b.n	800127c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001268:	2308      	movs	r3, #8
 800126a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69fa      	ldr	r2, [r7, #28]
 8001270:	615a      	str	r2, [r3, #20]
          break;
 8001272:	e003      	b.n	800127c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
          break;
 8001278:	e000      	b.n	800127c <HAL_GPIO_Init+0x130>
          break;
 800127a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	2bff      	cmp	r3, #255	@ 0xff
 8001280:	d801      	bhi.n	8001286 <HAL_GPIO_Init+0x13a>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	e001      	b.n	800128a <HAL_GPIO_Init+0x13e>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3304      	adds	r3, #4
 800128a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	2bff      	cmp	r3, #255	@ 0xff
 8001290:	d802      	bhi.n	8001298 <HAL_GPIO_Init+0x14c>
 8001292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	e002      	b.n	800129e <HAL_GPIO_Init+0x152>
 8001298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129a:	3b08      	subs	r3, #8
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	210f      	movs	r1, #15
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	401a      	ands	r2, r3
 80012b0:	6a39      	ldr	r1, [r7, #32]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	fa01 f303 	lsl.w	r3, r1, r3
 80012b8:	431a      	orrs	r2, r3
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 80b1 	beq.w	800142e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012cc:	4b4d      	ldr	r3, [pc, #308]	@ (8001404 <HAL_GPIO_Init+0x2b8>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	4a4c      	ldr	r2, [pc, #304]	@ (8001404 <HAL_GPIO_Init+0x2b8>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6193      	str	r3, [r2, #24]
 80012d8:	4b4a      	ldr	r3, [pc, #296]	@ (8001404 <HAL_GPIO_Init+0x2b8>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012e4:	4a48      	ldr	r2, [pc, #288]	@ (8001408 <HAL_GPIO_Init+0x2bc>)
 80012e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e8:	089b      	lsrs	r3, r3, #2
 80012ea:	3302      	adds	r3, #2
 80012ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	220f      	movs	r2, #15
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	4013      	ands	r3, r2
 8001306:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a40      	ldr	r2, [pc, #256]	@ (800140c <HAL_GPIO_Init+0x2c0>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d013      	beq.n	8001338 <HAL_GPIO_Init+0x1ec>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a3f      	ldr	r2, [pc, #252]	@ (8001410 <HAL_GPIO_Init+0x2c4>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d00d      	beq.n	8001334 <HAL_GPIO_Init+0x1e8>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a3e      	ldr	r2, [pc, #248]	@ (8001414 <HAL_GPIO_Init+0x2c8>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d007      	beq.n	8001330 <HAL_GPIO_Init+0x1e4>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a3d      	ldr	r2, [pc, #244]	@ (8001418 <HAL_GPIO_Init+0x2cc>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d101      	bne.n	800132c <HAL_GPIO_Init+0x1e0>
 8001328:	2303      	movs	r3, #3
 800132a:	e006      	b.n	800133a <HAL_GPIO_Init+0x1ee>
 800132c:	2304      	movs	r3, #4
 800132e:	e004      	b.n	800133a <HAL_GPIO_Init+0x1ee>
 8001330:	2302      	movs	r3, #2
 8001332:	e002      	b.n	800133a <HAL_GPIO_Init+0x1ee>
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <HAL_GPIO_Init+0x1ee>
 8001338:	2300      	movs	r3, #0
 800133a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800133c:	f002 0203 	and.w	r2, r2, #3
 8001340:	0092      	lsls	r2, r2, #2
 8001342:	4093      	lsls	r3, r2
 8001344:	68fa      	ldr	r2, [r7, #12]
 8001346:	4313      	orrs	r3, r2
 8001348:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800134a:	492f      	ldr	r1, [pc, #188]	@ (8001408 <HAL_GPIO_Init+0x2bc>)
 800134c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134e:	089b      	lsrs	r3, r3, #2
 8001350:	3302      	adds	r3, #2
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d006      	beq.n	8001372 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001364:	4b2d      	ldr	r3, [pc, #180]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	492c      	ldr	r1, [pc, #176]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	608b      	str	r3, [r1, #8]
 8001370:	e006      	b.n	8001380 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001372:	4b2a      	ldr	r3, [pc, #168]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	43db      	mvns	r3, r3
 800137a:	4928      	ldr	r1, [pc, #160]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 800137c:	4013      	ands	r3, r2
 800137e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d006      	beq.n	800139a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800138c:	4b23      	ldr	r3, [pc, #140]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	4922      	ldr	r1, [pc, #136]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	60cb      	str	r3, [r1, #12]
 8001398:	e006      	b.n	80013a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800139a:	4b20      	ldr	r3, [pc, #128]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	491e      	ldr	r1, [pc, #120]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 80013a4:	4013      	ands	r3, r2
 80013a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d006      	beq.n	80013c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013b4:	4b19      	ldr	r3, [pc, #100]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	4918      	ldr	r1, [pc, #96]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
 80013c0:	e006      	b.n	80013d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013c2:	4b16      	ldr	r3, [pc, #88]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	4914      	ldr	r1, [pc, #80]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 80013cc:	4013      	ands	r3, r2
 80013ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d021      	beq.n	8001420 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013dc:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	490e      	ldr	r1, [pc, #56]	@ (800141c <HAL_GPIO_Init+0x2d0>)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	600b      	str	r3, [r1, #0]
 80013e8:	e021      	b.n	800142e <HAL_GPIO_Init+0x2e2>
 80013ea:	bf00      	nop
 80013ec:	10320000 	.word	0x10320000
 80013f0:	10310000 	.word	0x10310000
 80013f4:	10220000 	.word	0x10220000
 80013f8:	10210000 	.word	0x10210000
 80013fc:	10120000 	.word	0x10120000
 8001400:	10110000 	.word	0x10110000
 8001404:	40021000 	.word	0x40021000
 8001408:	40010000 	.word	0x40010000
 800140c:	40010800 	.word	0x40010800
 8001410:	40010c00 	.word	0x40010c00
 8001414:	40011000 	.word	0x40011000
 8001418:	40011400 	.word	0x40011400
 800141c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001420:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <HAL_GPIO_Init+0x304>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	43db      	mvns	r3, r3
 8001428:	4909      	ldr	r1, [pc, #36]	@ (8001450 <HAL_GPIO_Init+0x304>)
 800142a:	4013      	ands	r3, r2
 800142c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800142e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001430:	3301      	adds	r3, #1
 8001432:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143a:	fa22 f303 	lsr.w	r3, r2, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	f47f ae8e 	bne.w	8001160 <HAL_GPIO_Init+0x14>
  }
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	372c      	adds	r7, #44	@ 0x2c
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	40010400 	.word	0x40010400

08001454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
 8001460:	4613      	mov	r3, r2
 8001462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001464:	787b      	ldrb	r3, [r7, #1]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800146a:	887a      	ldrh	r2, [r7, #2]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001470:	e003      	b.n	800147a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001472:	887b      	ldrh	r3, [r7, #2]
 8001474:	041a      	lsls	r2, r3, #16
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	611a      	str	r2, [r3, #16]
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e12b      	b.n	80016ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d106      	bne.n	80014b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff fb5a 	bl	8000b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2224      	movs	r2, #36	@ 0x24
 80014b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0201 	bic.w	r2, r2, #1
 80014c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014e8:	f001 f842 	bl	8002570 <HAL_RCC_GetPCLK1Freq>
 80014ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4a81      	ldr	r2, [pc, #516]	@ (80016f8 <HAL_I2C_Init+0x274>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d807      	bhi.n	8001508 <HAL_I2C_Init+0x84>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4a80      	ldr	r2, [pc, #512]	@ (80016fc <HAL_I2C_Init+0x278>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	bf94      	ite	ls
 8001500:	2301      	movls	r3, #1
 8001502:	2300      	movhi	r3, #0
 8001504:	b2db      	uxtb	r3, r3
 8001506:	e006      	b.n	8001516 <HAL_I2C_Init+0x92>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4a7d      	ldr	r2, [pc, #500]	@ (8001700 <HAL_I2C_Init+0x27c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	bf94      	ite	ls
 8001510:	2301      	movls	r3, #1
 8001512:	2300      	movhi	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e0e7      	b.n	80016ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4a78      	ldr	r2, [pc, #480]	@ (8001704 <HAL_I2C_Init+0x280>)
 8001522:	fba2 2303 	umull	r2, r3, r2, r3
 8001526:	0c9b      	lsrs	r3, r3, #18
 8001528:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68ba      	ldr	r2, [r7, #8]
 800153a:	430a      	orrs	r2, r1
 800153c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	4a6a      	ldr	r2, [pc, #424]	@ (80016f8 <HAL_I2C_Init+0x274>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d802      	bhi.n	8001558 <HAL_I2C_Init+0xd4>
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	3301      	adds	r3, #1
 8001556:	e009      	b.n	800156c <HAL_I2C_Init+0xe8>
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800155e:	fb02 f303 	mul.w	r3, r2, r3
 8001562:	4a69      	ldr	r2, [pc, #420]	@ (8001708 <HAL_I2C_Init+0x284>)
 8001564:	fba2 2303 	umull	r2, r3, r2, r3
 8001568:	099b      	lsrs	r3, r3, #6
 800156a:	3301      	adds	r3, #1
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	430b      	orrs	r3, r1
 8001572:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800157e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	495c      	ldr	r1, [pc, #368]	@ (80016f8 <HAL_I2C_Init+0x274>)
 8001588:	428b      	cmp	r3, r1
 800158a:	d819      	bhi.n	80015c0 <HAL_I2C_Init+0x13c>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	1e59      	subs	r1, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	fbb1 f3f3 	udiv	r3, r1, r3
 800159a:	1c59      	adds	r1, r3, #1
 800159c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80015a0:	400b      	ands	r3, r1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00a      	beq.n	80015bc <HAL_I2C_Init+0x138>
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	1e59      	subs	r1, r3, #1
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80015b4:	3301      	adds	r3, #1
 80015b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ba:	e051      	b.n	8001660 <HAL_I2C_Init+0x1dc>
 80015bc:	2304      	movs	r3, #4
 80015be:	e04f      	b.n	8001660 <HAL_I2C_Init+0x1dc>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d111      	bne.n	80015ec <HAL_I2C_Init+0x168>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	1e58      	subs	r0, r3, #1
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6859      	ldr	r1, [r3, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	440b      	add	r3, r1
 80015d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015da:	3301      	adds	r3, #1
 80015dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	bf0c      	ite	eq
 80015e4:	2301      	moveq	r3, #1
 80015e6:	2300      	movne	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	e012      	b.n	8001612 <HAL_I2C_Init+0x18e>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	1e58      	subs	r0, r3, #1
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6859      	ldr	r1, [r3, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	0099      	lsls	r1, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001602:	3301      	adds	r3, #1
 8001604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001608:	2b00      	cmp	r3, #0
 800160a:	bf0c      	ite	eq
 800160c:	2301      	moveq	r3, #1
 800160e:	2300      	movne	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_I2C_Init+0x196>
 8001616:	2301      	movs	r3, #1
 8001618:	e022      	b.n	8001660 <HAL_I2C_Init+0x1dc>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10e      	bne.n	8001640 <HAL_I2C_Init+0x1bc>
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	1e58      	subs	r0, r3, #1
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6859      	ldr	r1, [r3, #4]
 800162a:	460b      	mov	r3, r1
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	440b      	add	r3, r1
 8001630:	fbb0 f3f3 	udiv	r3, r0, r3
 8001634:	3301      	adds	r3, #1
 8001636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800163a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800163e:	e00f      	b.n	8001660 <HAL_I2C_Init+0x1dc>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	1e58      	subs	r0, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6859      	ldr	r1, [r3, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	0099      	lsls	r1, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	fbb0 f3f3 	udiv	r3, r0, r3
 8001656:	3301      	adds	r3, #1
 8001658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800165c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	6809      	ldr	r1, [r1, #0]
 8001664:	4313      	orrs	r3, r2
 8001666:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69da      	ldr	r2, [r3, #28]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800168e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6911      	ldr	r1, [r2, #16]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	68d2      	ldr	r2, [r2, #12]
 800169a:	4311      	orrs	r1, r2
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	430b      	orrs	r3, r1
 80016a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695a      	ldr	r2, [r3, #20]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0201 	orr.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2220      	movs	r2, #32
 80016da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	000186a0 	.word	0x000186a0
 80016fc:	001e847f 	.word	0x001e847f
 8001700:	003d08ff 	.word	0x003d08ff
 8001704:	431bde83 	.word	0x431bde83
 8001708:	10624dd3 	.word	0x10624dd3

0800170c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af02      	add	r7, sp, #8
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	4608      	mov	r0, r1
 8001716:	4611      	mov	r1, r2
 8001718:	461a      	mov	r2, r3
 800171a:	4603      	mov	r3, r0
 800171c:	817b      	strh	r3, [r7, #10]
 800171e:	460b      	mov	r3, r1
 8001720:	813b      	strh	r3, [r7, #8]
 8001722:	4613      	mov	r3, r2
 8001724:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001726:	f7ff fbd5 	bl	8000ed4 <HAL_GetTick>
 800172a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b20      	cmp	r3, #32
 8001736:	f040 80d9 	bne.w	80018ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	2319      	movs	r3, #25
 8001740:	2201      	movs	r2, #1
 8001742:	496d      	ldr	r1, [pc, #436]	@ (80018f8 <HAL_I2C_Mem_Write+0x1ec>)
 8001744:	68f8      	ldr	r0, [r7, #12]
 8001746:	f000 f971 	bl	8001a2c <I2C_WaitOnFlagUntilTimeout>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001750:	2302      	movs	r3, #2
 8001752:	e0cc      	b.n	80018ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800175a:	2b01      	cmp	r3, #1
 800175c:	d101      	bne.n	8001762 <HAL_I2C_Mem_Write+0x56>
 800175e:	2302      	movs	r3, #2
 8001760:	e0c5      	b.n	80018ee <HAL_I2C_Mem_Write+0x1e2>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b01      	cmp	r3, #1
 8001776:	d007      	beq.n	8001788 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 0201 	orr.w	r2, r2, #1
 8001786:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001796:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2221      	movs	r2, #33	@ 0x21
 800179c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2240      	movs	r2, #64	@ 0x40
 80017a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6a3a      	ldr	r2, [r7, #32]
 80017b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80017b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017be:	b29a      	uxth	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4a4d      	ldr	r2, [pc, #308]	@ (80018fc <HAL_I2C_Mem_Write+0x1f0>)
 80017c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017ca:	88f8      	ldrh	r0, [r7, #6]
 80017cc:	893a      	ldrh	r2, [r7, #8]
 80017ce:	8979      	ldrh	r1, [r7, #10]
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	4603      	mov	r3, r0
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 f890 	bl	8001900 <I2C_RequestMemoryWrite>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d052      	beq.n	800188c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e081      	b.n	80018ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f000 fa36 	bl	8001c60 <I2C_WaitOnTXEFlagUntilTimeout>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00d      	beq.n	8001816 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d107      	bne.n	8001812 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001810:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e06b      	b.n	80018ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181a:	781a      	ldrb	r2, [r3, #0]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001830:	3b01      	subs	r3, #1
 8001832:	b29a      	uxth	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800183c:	b29b      	uxth	r3, r3
 800183e:	3b01      	subs	r3, #1
 8001840:	b29a      	uxth	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b04      	cmp	r3, #4
 8001852:	d11b      	bne.n	800188c <HAL_I2C_Mem_Write+0x180>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001858:	2b00      	cmp	r3, #0
 800185a:	d017      	beq.n	800188c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001860:	781a      	ldrb	r2, [r3, #0]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186c:	1c5a      	adds	r2, r3, #1
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001876:	3b01      	subs	r3, #1
 8001878:	b29a      	uxth	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001882:	b29b      	uxth	r3, r3
 8001884:	3b01      	subs	r3, #1
 8001886:	b29a      	uxth	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1aa      	bne.n	80017ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 fa29 	bl	8001cf0 <I2C_WaitOnBTFFlagUntilTimeout>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00d      	beq.n	80018c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d107      	bne.n	80018bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e016      	b.n	80018ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2220      	movs	r2, #32
 80018d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80018e8:	2300      	movs	r3, #0
 80018ea:	e000      	b.n	80018ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80018ec:	2302      	movs	r3, #2
  }
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	00100002 	.word	0x00100002
 80018fc:	ffff0000 	.word	0xffff0000

08001900 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b088      	sub	sp, #32
 8001904:	af02      	add	r7, sp, #8
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	4608      	mov	r0, r1
 800190a:	4611      	mov	r1, r2
 800190c:	461a      	mov	r2, r3
 800190e:	4603      	mov	r3, r0
 8001910:	817b      	strh	r3, [r7, #10]
 8001912:	460b      	mov	r3, r1
 8001914:	813b      	strh	r3, [r7, #8]
 8001916:	4613      	mov	r3, r2
 8001918:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001928:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	2200      	movs	r2, #0
 8001932:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 f878 	bl	8001a2c <I2C_WaitOnFlagUntilTimeout>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00d      	beq.n	800195e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800194c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001950:	d103      	bne.n	800195a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001958:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e05f      	b.n	8001a1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800195e:	897b      	ldrh	r3, [r7, #10]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	461a      	mov	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800196c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001970:	6a3a      	ldr	r2, [r7, #32]
 8001972:	492d      	ldr	r1, [pc, #180]	@ (8001a28 <I2C_RequestMemoryWrite+0x128>)
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f000 f8d3 	bl	8001b20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e04c      	b.n	8001a1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800199a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800199c:	6a39      	ldr	r1, [r7, #32]
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 f95e 	bl	8001c60 <I2C_WaitOnTXEFlagUntilTimeout>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00d      	beq.n	80019c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d107      	bne.n	80019c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e02b      	b.n	8001a1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80019c6:	88fb      	ldrh	r3, [r7, #6]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d105      	bne.n	80019d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80019cc:	893b      	ldrh	r3, [r7, #8]
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	611a      	str	r2, [r3, #16]
 80019d6:	e021      	b.n	8001a1c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80019d8:	893b      	ldrh	r3, [r7, #8]
 80019da:	0a1b      	lsrs	r3, r3, #8
 80019dc:	b29b      	uxth	r3, r3
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019e8:	6a39      	ldr	r1, [r7, #32]
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f000 f938 	bl	8001c60 <I2C_WaitOnTXEFlagUntilTimeout>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00d      	beq.n	8001a12 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d107      	bne.n	8001a0e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e005      	b.n	8001a1e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a12:	893b      	ldrh	r3, [r7, #8]
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	00010002 	.word	0x00010002

08001a2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a3c:	e048      	b.n	8001ad0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a44:	d044      	beq.n	8001ad0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a46:	f7ff fa45 	bl	8000ed4 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d302      	bcc.n	8001a5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d139      	bne.n	8001ad0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	0c1b      	lsrs	r3, r3, #16
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d10d      	bne.n	8001a82 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	43da      	mvns	r2, r3
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	4013      	ands	r3, r2
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	bf0c      	ite	eq
 8001a78:	2301      	moveq	r3, #1
 8001a7a:	2300      	movne	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	e00c      	b.n	8001a9c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	43da      	mvns	r2, r3
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	bf0c      	ite	eq
 8001a94:	2301      	moveq	r3, #1
 8001a96:	2300      	movne	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d116      	bne.n	8001ad0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2220      	movs	r2, #32
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abc:	f043 0220 	orr.w	r2, r3, #32
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e023      	b.n	8001b18 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	0c1b      	lsrs	r3, r3, #16
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d10d      	bne.n	8001af6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	43da      	mvns	r2, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	bf0c      	ite	eq
 8001aec:	2301      	moveq	r3, #1
 8001aee:	2300      	movne	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	461a      	mov	r2, r3
 8001af4:	e00c      	b.n	8001b10 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	43da      	mvns	r2, r3
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	4013      	ands	r3, r2
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	bf0c      	ite	eq
 8001b08:	2301      	moveq	r3, #1
 8001b0a:	2300      	movne	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	461a      	mov	r2, r3
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d093      	beq.n	8001a3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
 8001b2c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b2e:	e071      	b.n	8001c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b3e:	d123      	bne.n	8001b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b4e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2220      	movs	r2, #32
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b74:	f043 0204 	orr.w	r2, r3, #4
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e067      	b.n	8001c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8e:	d041      	beq.n	8001c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b90:	f7ff f9a0 	bl	8000ed4 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d302      	bcc.n	8001ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d136      	bne.n	8001c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	0c1b      	lsrs	r3, r3, #16
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d10c      	bne.n	8001bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	43da      	mvns	r2, r3
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	bf14      	ite	ne
 8001bc2:	2301      	movne	r3, #1
 8001bc4:	2300      	moveq	r3, #0
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	e00b      	b.n	8001be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	43da      	mvns	r2, r3
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	bf14      	ite	ne
 8001bdc:	2301      	movne	r3, #1
 8001bde:	2300      	moveq	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d016      	beq.n	8001c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c00:	f043 0220 	orr.w	r2, r3, #32
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e021      	b.n	8001c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	0c1b      	lsrs	r3, r3, #16
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d10c      	bne.n	8001c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	43da      	mvns	r2, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	bf14      	ite	ne
 8001c30:	2301      	movne	r3, #1
 8001c32:	2300      	moveq	r3, #0
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	e00b      	b.n	8001c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	43da      	mvns	r2, r3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	4013      	ands	r3, r2
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	bf14      	ite	ne
 8001c4a:	2301      	movne	r3, #1
 8001c4c:	2300      	moveq	r3, #0
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f47f af6d 	bne.w	8001b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c6c:	e034      	b.n	8001cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 f886 	bl	8001d80 <I2C_IsAcknowledgeFailed>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e034      	b.n	8001ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c84:	d028      	beq.n	8001cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c86:	f7ff f925 	bl	8000ed4 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	68ba      	ldr	r2, [r7, #8]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d302      	bcc.n	8001c9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d11d      	bne.n	8001cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca6:	2b80      	cmp	r3, #128	@ 0x80
 8001ca8:	d016      	beq.n	8001cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc4:	f043 0220 	orr.w	r2, r3, #32
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e007      	b.n	8001ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ce2:	2b80      	cmp	r3, #128	@ 0x80
 8001ce4:	d1c3      	bne.n	8001c6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cfc:	e034      	b.n	8001d68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 f83e 	bl	8001d80 <I2C_IsAcknowledgeFailed>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e034      	b.n	8001d78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d14:	d028      	beq.n	8001d68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d16:	f7ff f8dd 	bl	8000ed4 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	68ba      	ldr	r2, [r7, #8]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d302      	bcc.n	8001d2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d11d      	bne.n	8001d68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d016      	beq.n	8001d68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d54:	f043 0220 	orr.w	r2, r3, #32
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e007      	b.n	8001d78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d1c3      	bne.n	8001cfe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d96:	d11b      	bne.n	8001dd0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001da0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2220      	movs	r2, #32
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbc:	f043 0204 	orr.w	r2, r3, #4
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e272      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 8087 	beq.w	8001f0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dfc:	4b92      	ldr	r3, [pc, #584]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d00c      	beq.n	8001e22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e08:	4b8f      	ldr	r3, [pc, #572]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 030c 	and.w	r3, r3, #12
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d112      	bne.n	8001e3a <HAL_RCC_OscConfig+0x5e>
 8001e14:	4b8c      	ldr	r3, [pc, #560]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e20:	d10b      	bne.n	8001e3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e22:	4b89      	ldr	r3, [pc, #548]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d06c      	beq.n	8001f08 <HAL_RCC_OscConfig+0x12c>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d168      	bne.n	8001f08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e24c      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e42:	d106      	bne.n	8001e52 <HAL_RCC_OscConfig+0x76>
 8001e44:	4b80      	ldr	r3, [pc, #512]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a7f      	ldr	r2, [pc, #508]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	e02e      	b.n	8001eb0 <HAL_RCC_OscConfig+0xd4>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x98>
 8001e5a:	4b7b      	ldr	r3, [pc, #492]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a7a      	ldr	r2, [pc, #488]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	4b78      	ldr	r3, [pc, #480]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a77      	ldr	r2, [pc, #476]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	e01d      	b.n	8001eb0 <HAL_RCC_OscConfig+0xd4>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0xbc>
 8001e7e:	4b72      	ldr	r3, [pc, #456]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a71      	ldr	r2, [pc, #452]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	4b6f      	ldr	r3, [pc, #444]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a6e      	ldr	r2, [pc, #440]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e00b      	b.n	8001eb0 <HAL_RCC_OscConfig+0xd4>
 8001e98:	4b6b      	ldr	r3, [pc, #428]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a6a      	ldr	r2, [pc, #424]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	4b68      	ldr	r3, [pc, #416]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a67      	ldr	r2, [pc, #412]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d013      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff f80c 	bl	8000ed4 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7ff f808 	bl	8000ed4 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	@ 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e200      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	4b5d      	ldr	r3, [pc, #372]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0xe4>
 8001ede:	e014      	b.n	8001f0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7fe fff8 	bl	8000ed4 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee8:	f7fe fff4 	bl	8000ed4 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b64      	cmp	r3, #100	@ 0x64
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e1ec      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efa:	4b53      	ldr	r3, [pc, #332]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x10c>
 8001f06:	e000      	b.n	8001f0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d063      	beq.n	8001fde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f16:	4b4c      	ldr	r3, [pc, #304]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00b      	beq.n	8001f3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f22:	4b49      	ldr	r3, [pc, #292]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d11c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x18c>
 8001f2e:	4b46      	ldr	r3, [pc, #280]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d116      	bne.n	8001f68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3a:	4b43      	ldr	r3, [pc, #268]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d005      	beq.n	8001f52 <HAL_RCC_OscConfig+0x176>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e1c0      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f52:	4b3d      	ldr	r3, [pc, #244]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4939      	ldr	r1, [pc, #228]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f66:	e03a      	b.n	8001fde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d020      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f70:	4b36      	ldr	r3, [pc, #216]	@ (800204c <HAL_RCC_OscConfig+0x270>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f76:	f7fe ffad 	bl	8000ed4 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f7e:	f7fe ffa9 	bl	8000ed4 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e1a1      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f90:	4b2d      	ldr	r3, [pc, #180]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4927      	ldr	r1, [pc, #156]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	600b      	str	r3, [r1, #0]
 8001fb0:	e015      	b.n	8001fde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb2:	4b26      	ldr	r3, [pc, #152]	@ (800204c <HAL_RCC_OscConfig+0x270>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7fe ff8c 	bl	8000ed4 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc0:	f7fe ff88 	bl	8000ed4 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e180      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d03a      	beq.n	8002060 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d019      	beq.n	8002026 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff2:	4b17      	ldr	r3, [pc, #92]	@ (8002050 <HAL_RCC_OscConfig+0x274>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff8:	f7fe ff6c 	bl	8000ed4 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002000:	f7fe ff68 	bl	8000ed4 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e160      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002012:	4b0d      	ldr	r3, [pc, #52]	@ (8002048 <HAL_RCC_OscConfig+0x26c>)
 8002014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f0      	beq.n	8002000 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800201e:	2001      	movs	r0, #1
 8002020:	f000 faba 	bl	8002598 <RCC_Delay>
 8002024:	e01c      	b.n	8002060 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002026:	4b0a      	ldr	r3, [pc, #40]	@ (8002050 <HAL_RCC_OscConfig+0x274>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202c:	f7fe ff52 	bl	8000ed4 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002032:	e00f      	b.n	8002054 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002034:	f7fe ff4e 	bl	8000ed4 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d908      	bls.n	8002054 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e146      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000
 800204c:	42420000 	.word	0x42420000
 8002050:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002054:	4b92      	ldr	r3, [pc, #584]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1e9      	bne.n	8002034 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 80a6 	beq.w	80021ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800206e:	2300      	movs	r3, #0
 8002070:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002072:	4b8b      	ldr	r3, [pc, #556]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10d      	bne.n	800209a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800207e:	4b88      	ldr	r3, [pc, #544]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	4a87      	ldr	r2, [pc, #540]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002088:	61d3      	str	r3, [r2, #28]
 800208a:	4b85      	ldr	r3, [pc, #532]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002096:	2301      	movs	r3, #1
 8002098:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209a:	4b82      	ldr	r3, [pc, #520]	@ (80022a4 <HAL_RCC_OscConfig+0x4c8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d118      	bne.n	80020d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a6:	4b7f      	ldr	r3, [pc, #508]	@ (80022a4 <HAL_RCC_OscConfig+0x4c8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a7e      	ldr	r2, [pc, #504]	@ (80022a4 <HAL_RCC_OscConfig+0x4c8>)
 80020ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b2:	f7fe ff0f 	bl	8000ed4 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ba:	f7fe ff0b 	bl	8000ed4 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b64      	cmp	r3, #100	@ 0x64
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e103      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020cc:	4b75      	ldr	r3, [pc, #468]	@ (80022a4 <HAL_RCC_OscConfig+0x4c8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d106      	bne.n	80020ee <HAL_RCC_OscConfig+0x312>
 80020e0:	4b6f      	ldr	r3, [pc, #444]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	4a6e      	ldr	r2, [pc, #440]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6213      	str	r3, [r2, #32]
 80020ec:	e02d      	b.n	800214a <HAL_RCC_OscConfig+0x36e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10c      	bne.n	8002110 <HAL_RCC_OscConfig+0x334>
 80020f6:	4b6a      	ldr	r3, [pc, #424]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	4a69      	ldr	r2, [pc, #420]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	f023 0301 	bic.w	r3, r3, #1
 8002100:	6213      	str	r3, [r2, #32]
 8002102:	4b67      	ldr	r3, [pc, #412]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	4a66      	ldr	r2, [pc, #408]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002108:	f023 0304 	bic.w	r3, r3, #4
 800210c:	6213      	str	r3, [r2, #32]
 800210e:	e01c      	b.n	800214a <HAL_RCC_OscConfig+0x36e>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	2b05      	cmp	r3, #5
 8002116:	d10c      	bne.n	8002132 <HAL_RCC_OscConfig+0x356>
 8002118:	4b61      	ldr	r3, [pc, #388]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	4a60      	ldr	r2, [pc, #384]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	6213      	str	r3, [r2, #32]
 8002124:	4b5e      	ldr	r3, [pc, #376]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	4a5d      	ldr	r2, [pc, #372]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6213      	str	r3, [r2, #32]
 8002130:	e00b      	b.n	800214a <HAL_RCC_OscConfig+0x36e>
 8002132:	4b5b      	ldr	r3, [pc, #364]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	4a5a      	ldr	r2, [pc, #360]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	f023 0301 	bic.w	r3, r3, #1
 800213c:	6213      	str	r3, [r2, #32]
 800213e:	4b58      	ldr	r3, [pc, #352]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	4a57      	ldr	r2, [pc, #348]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002144:	f023 0304 	bic.w	r3, r3, #4
 8002148:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d015      	beq.n	800217e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002152:	f7fe febf 	bl	8000ed4 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002158:	e00a      	b.n	8002170 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215a:	f7fe febb 	bl	8000ed4 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002168:	4293      	cmp	r3, r2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e0b1      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002170:	4b4b      	ldr	r3, [pc, #300]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0ee      	beq.n	800215a <HAL_RCC_OscConfig+0x37e>
 800217c:	e014      	b.n	80021a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217e:	f7fe fea9 	bl	8000ed4 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002184:	e00a      	b.n	800219c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002186:	f7fe fea5 	bl	8000ed4 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002194:	4293      	cmp	r3, r2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e09b      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219c:	4b40      	ldr	r3, [pc, #256]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1ee      	bne.n	8002186 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021a8:	7dfb      	ldrb	r3, [r7, #23]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d105      	bne.n	80021ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ae:	4b3c      	ldr	r3, [pc, #240]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	4a3b      	ldr	r2, [pc, #236]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 8087 	beq.w	80022d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c4:	4b36      	ldr	r3, [pc, #216]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d061      	beq.n	8002294 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d146      	bne.n	8002266 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d8:	4b33      	ldr	r3, [pc, #204]	@ (80022a8 <HAL_RCC_OscConfig+0x4cc>)
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021de:	f7fe fe79 	bl	8000ed4 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e6:	f7fe fe75 	bl	8000ed4 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e06d      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f8:	4b29      	ldr	r3, [pc, #164]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f0      	bne.n	80021e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800220c:	d108      	bne.n	8002220 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800220e:	4b24      	ldr	r3, [pc, #144]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	4921      	ldr	r1, [pc, #132]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002220:	4b1f      	ldr	r3, [pc, #124]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a19      	ldr	r1, [r3, #32]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002230:	430b      	orrs	r3, r1
 8002232:	491b      	ldr	r1, [pc, #108]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002238:	4b1b      	ldr	r3, [pc, #108]	@ (80022a8 <HAL_RCC_OscConfig+0x4cc>)
 800223a:	2201      	movs	r2, #1
 800223c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223e:	f7fe fe49 	bl	8000ed4 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002246:	f7fe fe45 	bl	8000ed4 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e03d      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002258:	4b11      	ldr	r3, [pc, #68]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x46a>
 8002264:	e035      	b.n	80022d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002266:	4b10      	ldr	r3, [pc, #64]	@ (80022a8 <HAL_RCC_OscConfig+0x4cc>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7fe fe32 	bl	8000ed4 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002274:	f7fe fe2e 	bl	8000ed4 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e026      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002286:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0x498>
 8002292:	e01e      	b.n	80022d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d107      	bne.n	80022ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e019      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40007000 	.word	0x40007000
 80022a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022ac:	4b0b      	ldr	r3, [pc, #44]	@ (80022dc <HAL_RCC_OscConfig+0x500>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d106      	bne.n	80022ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d001      	beq.n	80022d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40021000 	.word	0x40021000

080022e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0d0      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022f4:	4b6a      	ldr	r3, [pc, #424]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d910      	bls.n	8002324 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002302:	4b67      	ldr	r3, [pc, #412]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 0207 	bic.w	r2, r3, #7
 800230a:	4965      	ldr	r1, [pc, #404]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	4313      	orrs	r3, r2
 8002310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002312:	4b63      	ldr	r3, [pc, #396]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0b8      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d020      	beq.n	8002372 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800233c:	4b59      	ldr	r3, [pc, #356]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	4a58      	ldr	r2, [pc, #352]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002346:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002354:	4b53      	ldr	r3, [pc, #332]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	4a52      	ldr	r2, [pc, #328]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800235e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002360:	4b50      	ldr	r3, [pc, #320]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	494d      	ldr	r1, [pc, #308]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	4313      	orrs	r3, r2
 8002370:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d040      	beq.n	8002400 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002386:	4b47      	ldr	r3, [pc, #284]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d115      	bne.n	80023be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e07f      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239e:	4b41      	ldr	r3, [pc, #260]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d109      	bne.n	80023be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e073      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ae:	4b3d      	ldr	r3, [pc, #244]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e06b      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023be:	4b39      	ldr	r3, [pc, #228]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f023 0203 	bic.w	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	4936      	ldr	r1, [pc, #216]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023d0:	f7fe fd80 	bl	8000ed4 <HAL_GetTick>
 80023d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d6:	e00a      	b.n	80023ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d8:	f7fe fd7c 	bl	8000ed4 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e053      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ee:	4b2d      	ldr	r3, [pc, #180]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 020c 	and.w	r2, r3, #12
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d1eb      	bne.n	80023d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002400:	4b27      	ldr	r3, [pc, #156]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d210      	bcs.n	8002430 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240e:	4b24      	ldr	r3, [pc, #144]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f023 0207 	bic.w	r2, r3, #7
 8002416:	4922      	ldr	r1, [pc, #136]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	4313      	orrs	r3, r2
 800241c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800241e:	4b20      	ldr	r3, [pc, #128]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d001      	beq.n	8002430 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e032      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800243c:	4b19      	ldr	r3, [pc, #100]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4916      	ldr	r1, [pc, #88]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	4313      	orrs	r3, r2
 800244c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d009      	beq.n	800246e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800245a:	4b12      	ldr	r3, [pc, #72]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	490e      	ldr	r1, [pc, #56]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800246e:	f000 f821 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 8002472:	4602      	mov	r2, r0
 8002474:	4b0b      	ldr	r3, [pc, #44]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	490a      	ldr	r1, [pc, #40]	@ (80024a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002480:	5ccb      	ldrb	r3, [r1, r3]
 8002482:	fa22 f303 	lsr.w	r3, r2, r3
 8002486:	4a09      	ldr	r2, [pc, #36]	@ (80024ac <HAL_RCC_ClockConfig+0x1cc>)
 8002488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800248a:	4b09      	ldr	r3, [pc, #36]	@ (80024b0 <HAL_RCC_ClockConfig+0x1d0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fcde 	bl	8000e50 <HAL_InitTick>

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40022000 	.word	0x40022000
 80024a4:	40021000 	.word	0x40021000
 80024a8:	080045f8 	.word	0x080045f8
 80024ac:	20000000 	.word	0x20000000
 80024b0:	20000004 	.word	0x20000004

080024b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x94>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d002      	beq.n	80024e4 <HAL_RCC_GetSysClockFreq+0x30>
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d003      	beq.n	80024ea <HAL_RCC_GetSysClockFreq+0x36>
 80024e2:	e027      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024e4:	4b19      	ldr	r3, [pc, #100]	@ (800254c <HAL_RCC_GetSysClockFreq+0x98>)
 80024e6:	613b      	str	r3, [r7, #16]
      break;
 80024e8:	e027      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	0c9b      	lsrs	r3, r3, #18
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	4a17      	ldr	r2, [pc, #92]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024f4:	5cd3      	ldrb	r3, [r2, r3]
 80024f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d010      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002502:	4b11      	ldr	r3, [pc, #68]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x94>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	0c5b      	lsrs	r3, r3, #17
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	4a11      	ldr	r2, [pc, #68]	@ (8002554 <HAL_RCC_GetSysClockFreq+0xa0>)
 800250e:	5cd3      	ldrb	r3, [r2, r3]
 8002510:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a0d      	ldr	r2, [pc, #52]	@ (800254c <HAL_RCC_GetSysClockFreq+0x98>)
 8002516:	fb03 f202 	mul.w	r2, r3, r2
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	e004      	b.n	800252e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a0c      	ldr	r2, [pc, #48]	@ (8002558 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002528:	fb02 f303 	mul.w	r3, r2, r3
 800252c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	613b      	str	r3, [r7, #16]
      break;
 8002532:	e002      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002534:	4b05      	ldr	r3, [pc, #20]	@ (800254c <HAL_RCC_GetSysClockFreq+0x98>)
 8002536:	613b      	str	r3, [r7, #16]
      break;
 8002538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800253a:	693b      	ldr	r3, [r7, #16]
}
 800253c:	4618      	mov	r0, r3
 800253e:	371c      	adds	r7, #28
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	007a1200 	.word	0x007a1200
 8002550:	08004610 	.word	0x08004610
 8002554:	08004620 	.word	0x08004620
 8002558:	003d0900 	.word	0x003d0900

0800255c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002560:	4b02      	ldr	r3, [pc, #8]	@ (800256c <HAL_RCC_GetHCLKFreq+0x10>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr
 800256c:	20000000 	.word	0x20000000

08002570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002574:	f7ff fff2 	bl	800255c <HAL_RCC_GetHCLKFreq>
 8002578:	4602      	mov	r2, r0
 800257a:	4b05      	ldr	r3, [pc, #20]	@ (8002590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	0a1b      	lsrs	r3, r3, #8
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	4903      	ldr	r1, [pc, #12]	@ (8002594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002586:	5ccb      	ldrb	r3, [r1, r3]
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800258c:	4618      	mov	r0, r3
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40021000 	.word	0x40021000
 8002594:	08004608 	.word	0x08004608

08002598 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025a0:	4b0a      	ldr	r3, [pc, #40]	@ (80025cc <RCC_Delay+0x34>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a0a      	ldr	r2, [pc, #40]	@ (80025d0 <RCC_Delay+0x38>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	0a5b      	lsrs	r3, r3, #9
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	fb02 f303 	mul.w	r3, r2, r3
 80025b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025b4:	bf00      	nop
  }
  while (Delay --);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1e5a      	subs	r2, r3, #1
 80025ba:	60fa      	str	r2, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f9      	bne.n	80025b4 <RCC_Delay+0x1c>
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr
 80025cc:	20000000 	.word	0x20000000
 80025d0:	10624dd3 	.word	0x10624dd3

080025d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e041      	b.n	800266a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7fe faf0 	bl	8000be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3304      	adds	r3, #4
 8002610:	4619      	mov	r1, r3
 8002612:	4610      	mov	r0, r2
 8002614:	f000 fce8 	bl	8002fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e041      	b.n	8002708 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d106      	bne.n	800269e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f839 	bl	8002710 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2202      	movs	r2, #2
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3304      	adds	r3, #4
 80026ae:	4619      	mov	r1, r3
 80026b0:	4610      	mov	r0, r2
 80026b2:	f000 fc99 	bl	8002fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
	...

08002724 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d104      	bne.n	8002742 <HAL_TIM_IC_Start_IT+0x1e>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800273e:	b2db      	uxtb	r3, r3
 8002740:	e013      	b.n	800276a <HAL_TIM_IC_Start_IT+0x46>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b04      	cmp	r3, #4
 8002746:	d104      	bne.n	8002752 <HAL_TIM_IC_Start_IT+0x2e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800274e:	b2db      	uxtb	r3, r3
 8002750:	e00b      	b.n	800276a <HAL_TIM_IC_Start_IT+0x46>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b08      	cmp	r3, #8
 8002756:	d104      	bne.n	8002762 <HAL_TIM_IC_Start_IT+0x3e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800275e:	b2db      	uxtb	r3, r3
 8002760:	e003      	b.n	800276a <HAL_TIM_IC_Start_IT+0x46>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002768:	b2db      	uxtb	r3, r3
 800276a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d104      	bne.n	800277c <HAL_TIM_IC_Start_IT+0x58>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002778:	b2db      	uxtb	r3, r3
 800277a:	e013      	b.n	80027a4 <HAL_TIM_IC_Start_IT+0x80>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2b04      	cmp	r3, #4
 8002780:	d104      	bne.n	800278c <HAL_TIM_IC_Start_IT+0x68>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002788:	b2db      	uxtb	r3, r3
 800278a:	e00b      	b.n	80027a4 <HAL_TIM_IC_Start_IT+0x80>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	2b08      	cmp	r3, #8
 8002790:	d104      	bne.n	800279c <HAL_TIM_IC_Start_IT+0x78>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002798:	b2db      	uxtb	r3, r3
 800279a:	e003      	b.n	80027a4 <HAL_TIM_IC_Start_IT+0x80>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80027a6:	7bbb      	ldrb	r3, [r7, #14]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d102      	bne.n	80027b2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80027ac:	7b7b      	ldrb	r3, [r7, #13]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d001      	beq.n	80027b6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e0b8      	b.n	8002928 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d104      	bne.n	80027c6 <HAL_TIM_IC_Start_IT+0xa2>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027c4:	e013      	b.n	80027ee <HAL_TIM_IC_Start_IT+0xca>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d104      	bne.n	80027d6 <HAL_TIM_IC_Start_IT+0xb2>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027d4:	e00b      	b.n	80027ee <HAL_TIM_IC_Start_IT+0xca>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d104      	bne.n	80027e6 <HAL_TIM_IC_Start_IT+0xc2>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027e4:	e003      	b.n	80027ee <HAL_TIM_IC_Start_IT+0xca>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2202      	movs	r2, #2
 80027ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d104      	bne.n	80027fe <HAL_TIM_IC_Start_IT+0xda>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027fc:	e013      	b.n	8002826 <HAL_TIM_IC_Start_IT+0x102>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b04      	cmp	r3, #4
 8002802:	d104      	bne.n	800280e <HAL_TIM_IC_Start_IT+0xea>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800280c:	e00b      	b.n	8002826 <HAL_TIM_IC_Start_IT+0x102>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2b08      	cmp	r3, #8
 8002812:	d104      	bne.n	800281e <HAL_TIM_IC_Start_IT+0xfa>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800281c:	e003      	b.n	8002826 <HAL_TIM_IC_Start_IT+0x102>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2202      	movs	r2, #2
 8002822:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2b0c      	cmp	r3, #12
 800282a:	d841      	bhi.n	80028b0 <HAL_TIM_IC_Start_IT+0x18c>
 800282c:	a201      	add	r2, pc, #4	@ (adr r2, 8002834 <HAL_TIM_IC_Start_IT+0x110>)
 800282e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002832:	bf00      	nop
 8002834:	08002869 	.word	0x08002869
 8002838:	080028b1 	.word	0x080028b1
 800283c:	080028b1 	.word	0x080028b1
 8002840:	080028b1 	.word	0x080028b1
 8002844:	0800287b 	.word	0x0800287b
 8002848:	080028b1 	.word	0x080028b1
 800284c:	080028b1 	.word	0x080028b1
 8002850:	080028b1 	.word	0x080028b1
 8002854:	0800288d 	.word	0x0800288d
 8002858:	080028b1 	.word	0x080028b1
 800285c:	080028b1 	.word	0x080028b1
 8002860:	080028b1 	.word	0x080028b1
 8002864:	0800289f 	.word	0x0800289f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0202 	orr.w	r2, r2, #2
 8002876:	60da      	str	r2, [r3, #12]
      break;
 8002878:	e01d      	b.n	80028b6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f042 0204 	orr.w	r2, r2, #4
 8002888:	60da      	str	r2, [r3, #12]
      break;
 800288a:	e014      	b.n	80028b6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0208 	orr.w	r2, r2, #8
 800289a:	60da      	str	r2, [r3, #12]
      break;
 800289c:	e00b      	b.n	80028b6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0210 	orr.w	r2, r2, #16
 80028ac:	60da      	str	r2, [r3, #12]
      break;
 80028ae:	e002      	b.n	80028b6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	73fb      	strb	r3, [r7, #15]
      break;
 80028b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d134      	bne.n	8002926 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2201      	movs	r2, #1
 80028c2:	6839      	ldr	r1, [r7, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 fe32 	bl	800352e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a18      	ldr	r2, [pc, #96]	@ (8002930 <HAL_TIM_IC_Start_IT+0x20c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00e      	beq.n	80028f2 <HAL_TIM_IC_Start_IT+0x1ce>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028dc:	d009      	beq.n	80028f2 <HAL_TIM_IC_Start_IT+0x1ce>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a14      	ldr	r2, [pc, #80]	@ (8002934 <HAL_TIM_IC_Start_IT+0x210>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d004      	beq.n	80028f2 <HAL_TIM_IC_Start_IT+0x1ce>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a12      	ldr	r2, [pc, #72]	@ (8002938 <HAL_TIM_IC_Start_IT+0x214>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d111      	bne.n	8002916 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b06      	cmp	r3, #6
 8002902:	d010      	beq.n	8002926 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002914:	e007      	b.n	8002926 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f042 0201 	orr.w	r2, r2, #1
 8002924:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002926:	7bfb      	ldrb	r3, [r7, #15]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40012c00 	.word	0x40012c00
 8002934:	40000400 	.word	0x40000400
 8002938:	40000800 	.word	0x40000800

0800293c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e041      	b.n	80029d4 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d106      	bne.n	800296a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f839 	bl	80029dc <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2202      	movs	r2, #2
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3304      	adds	r3, #4
 800297a:	4619      	mov	r1, r3
 800297c:	4610      	mov	r0, r2
 800297e:	f000 fb33 	bl	8002fe8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0208 	bic.w	r2, r2, #8
 8002990:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6819      	ldr	r1, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr

080029ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d020      	beq.n	8002a52 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d01b      	beq.n	8002a52 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f06f 0202 	mvn.w	r2, #2
 8002a22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7fe f971 	bl	8000d20 <HAL_TIM_IC_CaptureCallback>
 8002a3e:	e005      	b.n	8002a4c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fab6 	bl	8002fb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 fabc 	bl	8002fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d020      	beq.n	8002a9e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d01b      	beq.n	8002a9e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f06f 0204 	mvn.w	r2, #4
 8002a6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7fe f94b 	bl	8000d20 <HAL_TIM_IC_CaptureCallback>
 8002a8a:	e005      	b.n	8002a98 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 fa90 	bl	8002fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 fa96 	bl	8002fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d020      	beq.n	8002aea <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d01b      	beq.n	8002aea <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f06f 0208 	mvn.w	r2, #8
 8002aba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2204      	movs	r2, #4
 8002ac0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7fe f925 	bl	8000d20 <HAL_TIM_IC_CaptureCallback>
 8002ad6:	e005      	b.n	8002ae4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fa6a 	bl	8002fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fa70 	bl	8002fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d020      	beq.n	8002b36 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 0310 	and.w	r3, r3, #16
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d01b      	beq.n	8002b36 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f06f 0210 	mvn.w	r2, #16
 8002b06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2208      	movs	r2, #8
 8002b0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f7fe f8ff 	bl	8000d20 <HAL_TIM_IC_CaptureCallback>
 8002b22:	e005      	b.n	8002b30 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 fa44 	bl	8002fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fa4a 	bl	8002fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00c      	beq.n	8002b5a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d007      	beq.n	8002b5a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f06f 0201 	mvn.w	r2, #1
 8002b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fa23 	bl	8002fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00c      	beq.n	8002b7e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d007      	beq.n	8002b7e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 fd64 	bl	8003646 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00c      	beq.n	8002ba2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d007      	beq.n	8002ba2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 fa1a 	bl	8002fd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00c      	beq.n	8002bc6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d007      	beq.n	8002bc6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f06f 0220 	mvn.w	r2, #32
 8002bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 fd37 	bl	8003634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bc6:	bf00      	nop
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b086      	sub	sp, #24
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_TIM_IC_ConfigChannel+0x1e>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e088      	b.n	8002cfe <HAL_TIM_IC_ConfigChannel+0x130>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d11b      	bne.n	8002c32 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002c0a:	f000 faed 	bl	80031e8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	699a      	ldr	r2, [r3, #24]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 020c 	bic.w	r2, r2, #12
 8002c1c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6999      	ldr	r1, [r3, #24]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	619a      	str	r2, [r3, #24]
 8002c30:	e060      	b.n	8002cf4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d11c      	bne.n	8002c72 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002c48:	f000 fb56 	bl	80032f8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699a      	ldr	r2, [r3, #24]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002c5a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6999      	ldr	r1, [r3, #24]
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	021a      	lsls	r2, r3, #8
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	619a      	str	r2, [r3, #24]
 8002c70:	e040      	b.n	8002cf4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d11b      	bne.n	8002cb0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002c88:	f000 fba1 	bl	80033ce <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	69da      	ldr	r2, [r3, #28]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 020c 	bic.w	r2, r2, #12
 8002c9a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	69d9      	ldr	r1, [r3, #28]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	61da      	str	r2, [r3, #28]
 8002cae:	e021      	b.n	8002cf4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b0c      	cmp	r3, #12
 8002cb4:	d11c      	bne.n	8002cf0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002cc6:	f000 fbbd 	bl	8003444 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69da      	ldr	r2, [r3, #28]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002cd8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	69d9      	ldr	r1, [r3, #28]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	021a      	lsls	r2, r3, #8
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	61da      	str	r2, [r3, #28]
 8002cee:	e001      	b.n	8002cf4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b084      	sub	sp, #16
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_TIM_ConfigClockSource+0x1c>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e0b4      	b.n	8002e8c <HAL_TIM_ConfigClockSource+0x186>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d40:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d48:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d5a:	d03e      	beq.n	8002dda <HAL_TIM_ConfigClockSource+0xd4>
 8002d5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d60:	f200 8087 	bhi.w	8002e72 <HAL_TIM_ConfigClockSource+0x16c>
 8002d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d68:	f000 8086 	beq.w	8002e78 <HAL_TIM_ConfigClockSource+0x172>
 8002d6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d70:	d87f      	bhi.n	8002e72 <HAL_TIM_ConfigClockSource+0x16c>
 8002d72:	2b70      	cmp	r3, #112	@ 0x70
 8002d74:	d01a      	beq.n	8002dac <HAL_TIM_ConfigClockSource+0xa6>
 8002d76:	2b70      	cmp	r3, #112	@ 0x70
 8002d78:	d87b      	bhi.n	8002e72 <HAL_TIM_ConfigClockSource+0x16c>
 8002d7a:	2b60      	cmp	r3, #96	@ 0x60
 8002d7c:	d050      	beq.n	8002e20 <HAL_TIM_ConfigClockSource+0x11a>
 8002d7e:	2b60      	cmp	r3, #96	@ 0x60
 8002d80:	d877      	bhi.n	8002e72 <HAL_TIM_ConfigClockSource+0x16c>
 8002d82:	2b50      	cmp	r3, #80	@ 0x50
 8002d84:	d03c      	beq.n	8002e00 <HAL_TIM_ConfigClockSource+0xfa>
 8002d86:	2b50      	cmp	r3, #80	@ 0x50
 8002d88:	d873      	bhi.n	8002e72 <HAL_TIM_ConfigClockSource+0x16c>
 8002d8a:	2b40      	cmp	r3, #64	@ 0x40
 8002d8c:	d058      	beq.n	8002e40 <HAL_TIM_ConfigClockSource+0x13a>
 8002d8e:	2b40      	cmp	r3, #64	@ 0x40
 8002d90:	d86f      	bhi.n	8002e72 <HAL_TIM_ConfigClockSource+0x16c>
 8002d92:	2b30      	cmp	r3, #48	@ 0x30
 8002d94:	d064      	beq.n	8002e60 <HAL_TIM_ConfigClockSource+0x15a>
 8002d96:	2b30      	cmp	r3, #48	@ 0x30
 8002d98:	d86b      	bhi.n	8002e72 <HAL_TIM_ConfigClockSource+0x16c>
 8002d9a:	2b20      	cmp	r3, #32
 8002d9c:	d060      	beq.n	8002e60 <HAL_TIM_ConfigClockSource+0x15a>
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d867      	bhi.n	8002e72 <HAL_TIM_ConfigClockSource+0x16c>
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d05c      	beq.n	8002e60 <HAL_TIM_ConfigClockSource+0x15a>
 8002da6:	2b10      	cmp	r3, #16
 8002da8:	d05a      	beq.n	8002e60 <HAL_TIM_ConfigClockSource+0x15a>
 8002daa:	e062      	b.n	8002e72 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dbc:	f000 fb98 	bl	80034f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002dce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	609a      	str	r2, [r3, #8]
      break;
 8002dd8:	e04f      	b.n	8002e7a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dea:	f000 fb81 	bl	80034f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002dfc:	609a      	str	r2, [r3, #8]
      break;
 8002dfe:	e03c      	b.n	8002e7a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	f000 fa45 	bl	800329c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2150      	movs	r1, #80	@ 0x50
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 fb4f 	bl	80034bc <TIM_ITRx_SetConfig>
      break;
 8002e1e:	e02c      	b.n	8002e7a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	f000 fa9f 	bl	8003370 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2160      	movs	r1, #96	@ 0x60
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 fb3f 	bl	80034bc <TIM_ITRx_SetConfig>
      break;
 8002e3e:	e01c      	b.n	8002e7a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	f000 fa25 	bl	800329c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2140      	movs	r1, #64	@ 0x40
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 fb2f 	bl	80034bc <TIM_ITRx_SetConfig>
      break;
 8002e5e:	e00c      	b.n	8002e7a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	f000 fb26 	bl	80034bc <TIM_ITRx_SetConfig>
      break;
 8002e70:	e003      	b.n	8002e7a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	73fb      	strb	r3, [r7, #15]
      break;
 8002e76:	e000      	b.n	8002e7a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e78:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_TIM_SlaveConfigSynchro+0x18>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e031      	b.n	8002f10 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002ebc:	6839      	ldr	r1, [r7, #0]
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f900 	bl	80030c4 <TIM_SlaveTimer_SetConfig>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d009      	beq.n	8002ede <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e018      	b.n	8002f10 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002eec:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002efc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b0c      	cmp	r3, #12
 8002f2a:	d831      	bhi.n	8002f90 <HAL_TIM_ReadCapturedValue+0x78>
 8002f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f34 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f32:	bf00      	nop
 8002f34:	08002f69 	.word	0x08002f69
 8002f38:	08002f91 	.word	0x08002f91
 8002f3c:	08002f91 	.word	0x08002f91
 8002f40:	08002f91 	.word	0x08002f91
 8002f44:	08002f73 	.word	0x08002f73
 8002f48:	08002f91 	.word	0x08002f91
 8002f4c:	08002f91 	.word	0x08002f91
 8002f50:	08002f91 	.word	0x08002f91
 8002f54:	08002f7d 	.word	0x08002f7d
 8002f58:	08002f91 	.word	0x08002f91
 8002f5c:	08002f91 	.word	0x08002f91
 8002f60:	08002f91 	.word	0x08002f91
 8002f64:	08002f87 	.word	0x08002f87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f6e:	60fb      	str	r3, [r7, #12]

      break;
 8002f70:	e00f      	b.n	8002f92 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f78:	60fb      	str	r3, [r7, #12]

      break;
 8002f7a:	e00a      	b.n	8002f92 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f82:	60fb      	str	r3, [r7, #12]

      break;
 8002f84:	e005      	b.n	8002f92 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8c:	60fb      	str	r3, [r7, #12]

      break;
 8002f8e:	e000      	b.n	8002f92 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002f90:	bf00      	nop
  }

  return tmpreg;
 8002f92:	68fb      	ldr	r3, [r7, #12]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop

08002fa0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr

08002fb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr

08002fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a2f      	ldr	r2, [pc, #188]	@ (80030b8 <TIM_Base_SetConfig+0xd0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00b      	beq.n	8003018 <TIM_Base_SetConfig+0x30>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003006:	d007      	beq.n	8003018 <TIM_Base_SetConfig+0x30>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a2c      	ldr	r2, [pc, #176]	@ (80030bc <TIM_Base_SetConfig+0xd4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d003      	beq.n	8003018 <TIM_Base_SetConfig+0x30>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a2b      	ldr	r2, [pc, #172]	@ (80030c0 <TIM_Base_SetConfig+0xd8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d108      	bne.n	800302a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800301e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a22      	ldr	r2, [pc, #136]	@ (80030b8 <TIM_Base_SetConfig+0xd0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d00b      	beq.n	800304a <TIM_Base_SetConfig+0x62>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003038:	d007      	beq.n	800304a <TIM_Base_SetConfig+0x62>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a1f      	ldr	r2, [pc, #124]	@ (80030bc <TIM_Base_SetConfig+0xd4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d003      	beq.n	800304a <TIM_Base_SetConfig+0x62>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a1e      	ldr	r2, [pc, #120]	@ (80030c0 <TIM_Base_SetConfig+0xd8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d108      	bne.n	800305c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	4313      	orrs	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a0d      	ldr	r2, [pc, #52]	@ (80030b8 <TIM_Base_SetConfig+0xd0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d103      	bne.n	8003090 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	691a      	ldr	r2, [r3, #16]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f023 0201 	bic.w	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	611a      	str	r2, [r3, #16]
  }
}
 80030ae:	bf00      	nop
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr
 80030b8:	40012c00 	.word	0x40012c00
 80030bc:	40000400 	.word	0x40000400
 80030c0:	40000800 	.word	0x40000800

080030c4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030e0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	f023 0307 	bic.w	r3, r3, #7
 80030f2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b70      	cmp	r3, #112	@ 0x70
 800310c:	d01a      	beq.n	8003144 <TIM_SlaveTimer_SetConfig+0x80>
 800310e:	2b70      	cmp	r3, #112	@ 0x70
 8003110:	d860      	bhi.n	80031d4 <TIM_SlaveTimer_SetConfig+0x110>
 8003112:	2b60      	cmp	r3, #96	@ 0x60
 8003114:	d054      	beq.n	80031c0 <TIM_SlaveTimer_SetConfig+0xfc>
 8003116:	2b60      	cmp	r3, #96	@ 0x60
 8003118:	d85c      	bhi.n	80031d4 <TIM_SlaveTimer_SetConfig+0x110>
 800311a:	2b50      	cmp	r3, #80	@ 0x50
 800311c:	d046      	beq.n	80031ac <TIM_SlaveTimer_SetConfig+0xe8>
 800311e:	2b50      	cmp	r3, #80	@ 0x50
 8003120:	d858      	bhi.n	80031d4 <TIM_SlaveTimer_SetConfig+0x110>
 8003122:	2b40      	cmp	r3, #64	@ 0x40
 8003124:	d019      	beq.n	800315a <TIM_SlaveTimer_SetConfig+0x96>
 8003126:	2b40      	cmp	r3, #64	@ 0x40
 8003128:	d854      	bhi.n	80031d4 <TIM_SlaveTimer_SetConfig+0x110>
 800312a:	2b30      	cmp	r3, #48	@ 0x30
 800312c:	d055      	beq.n	80031da <TIM_SlaveTimer_SetConfig+0x116>
 800312e:	2b30      	cmp	r3, #48	@ 0x30
 8003130:	d850      	bhi.n	80031d4 <TIM_SlaveTimer_SetConfig+0x110>
 8003132:	2b20      	cmp	r3, #32
 8003134:	d051      	beq.n	80031da <TIM_SlaveTimer_SetConfig+0x116>
 8003136:	2b20      	cmp	r3, #32
 8003138:	d84c      	bhi.n	80031d4 <TIM_SlaveTimer_SetConfig+0x110>
 800313a:	2b00      	cmp	r3, #0
 800313c:	d04d      	beq.n	80031da <TIM_SlaveTimer_SetConfig+0x116>
 800313e:	2b10      	cmp	r3, #16
 8003140:	d04b      	beq.n	80031da <TIM_SlaveTimer_SetConfig+0x116>
 8003142:	e047      	b.n	80031d4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003154:	f000 f9cc 	bl	80034f0 <TIM_ETR_SetConfig>
      break;
 8003158:	e040      	b.n	80031dc <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b05      	cmp	r3, #5
 8003160:	d101      	bne.n	8003166 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e03b      	b.n	80031de <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6a1a      	ldr	r2, [r3, #32]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0201 	bic.w	r2, r2, #1
 800317c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800318c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	4313      	orrs	r3, r2
 8003198:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	621a      	str	r2, [r3, #32]
      break;
 80031aa:	e017      	b.n	80031dc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b8:	461a      	mov	r2, r3
 80031ba:	f000 f86f 	bl	800329c <TIM_TI1_ConfigInputStage>
      break;
 80031be:	e00d      	b.n	80031dc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031cc:	461a      	mov	r2, r3
 80031ce:	f000 f8cf 	bl	8003370 <TIM_TI2_ConfigInputStage>
      break;
 80031d2:	e003      	b.n	80031dc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	75fb      	strb	r3, [r7, #23]
      break;
 80031d8:	e000      	b.n	80031dc <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80031da:	bf00      	nop
  }

  return status;
 80031dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
 80031f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	f023 0201 	bic.w	r2, r3, #1
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4a1f      	ldr	r2, [pc, #124]	@ (8003290 <TIM_TI1_SetConfig+0xa8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00b      	beq.n	800322e <TIM_TI1_SetConfig+0x46>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800321c:	d007      	beq.n	800322e <TIM_TI1_SetConfig+0x46>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4a1c      	ldr	r2, [pc, #112]	@ (8003294 <TIM_TI1_SetConfig+0xac>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d003      	beq.n	800322e <TIM_TI1_SetConfig+0x46>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4a1b      	ldr	r2, [pc, #108]	@ (8003298 <TIM_TI1_SetConfig+0xb0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d101      	bne.n	8003232 <TIM_TI1_SetConfig+0x4a>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <TIM_TI1_SetConfig+0x4c>
 8003232:	2300      	movs	r3, #0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f023 0303 	bic.w	r3, r3, #3
 800323e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	e003      	b.n	8003252 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003258:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	b2db      	uxtb	r3, r3
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f023 030a 	bic.w	r3, r3, #10
 800326c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	f003 030a 	and.w	r3, r3, #10
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	621a      	str	r2, [r3, #32]
}
 8003286:	bf00      	nop
 8003288:	371c      	adds	r7, #28
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr
 8003290:	40012c00 	.word	0x40012c00
 8003294:	40000400 	.word	0x40000400
 8003298:	40000800 	.word	0x40000800

0800329c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800329c:	b480      	push	{r7}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	f023 0201 	bic.w	r2, r3, #1
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f023 030a 	bic.w	r3, r3, #10
 80032d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4313      	orrs	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	621a      	str	r2, [r3, #32]
}
 80032ee:	bf00      	nop
 80032f0:	371c      	adds	r7, #28
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr

080032f8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	f023 0210 	bic.w	r2, r3, #16
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003324:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	021b      	lsls	r3, r3, #8
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	031b      	lsls	r3, r3, #12
 800333c:	b29b      	uxth	r3, r3
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800334a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	4313      	orrs	r3, r2
 8003358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	621a      	str	r2, [r3, #32]
}
 8003366:	bf00      	nop
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr

08003370 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	f023 0210 	bic.w	r2, r3, #16
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800339a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	031b      	lsls	r3, r3, #12
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80033ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	621a      	str	r2, [r3, #32]
}
 80033c4:	bf00      	nop
 80033c6:	371c      	adds	r7, #28
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr

080033ce <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b087      	sub	sp, #28
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f023 0303 	bic.w	r3, r3, #3
 80033fa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800340a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	b2db      	uxtb	r3, r3
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800341e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	021b      	lsls	r3, r3, #8
 8003424:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	621a      	str	r2, [r3, #32]
}
 800343a:	bf00      	nop
 800343c:	371c      	adds	r7, #28
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr

08003444 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003470:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	021b      	lsls	r3, r3, #8
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003482:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	031b      	lsls	r3, r3, #12
 8003488:	b29b      	uxth	r3, r3
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003496:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	031b      	lsls	r3, r3, #12
 800349c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	621a      	str	r2, [r3, #32]
}
 80034b2:	bf00      	nop
 80034b4:	371c      	adds	r7, #28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr

080034bc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	f043 0307 	orr.w	r3, r3, #7
 80034de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	609a      	str	r2, [r3, #8]
}
 80034e6:	bf00      	nop
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800350a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	021a      	lsls	r2, r3, #8
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	431a      	orrs	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4313      	orrs	r3, r2
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	609a      	str	r2, [r3, #8]
}
 8003524:	bf00      	nop
 8003526:	371c      	adds	r7, #28
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr

0800352e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800352e:	b480      	push	{r7}
 8003530:	b087      	sub	sp, #28
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	f003 031f 	and.w	r3, r3, #31
 8003540:	2201      	movs	r2, #1
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a1a      	ldr	r2, [r3, #32]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	43db      	mvns	r3, r3
 8003550:	401a      	ands	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a1a      	ldr	r2, [r3, #32]
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f003 031f 	and.w	r3, r3, #31
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	fa01 f303 	lsl.w	r3, r1, r3
 8003566:	431a      	orrs	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	621a      	str	r2, [r3, #32]
}
 800356c:	bf00      	nop
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr
	...

08003578 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800358c:	2302      	movs	r3, #2
 800358e:	e046      	b.n	800361e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a16      	ldr	r2, [pc, #88]	@ (8003628 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d00e      	beq.n	80035f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035dc:	d009      	beq.n	80035f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a12      	ldr	r2, [pc, #72]	@ (800362c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d004      	beq.n	80035f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a10      	ldr	r2, [pc, #64]	@ (8003630 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d10c      	bne.n	800360c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	4313      	orrs	r3, r2
 8003602:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr
 8003628:	40012c00 	.word	0x40012c00
 800362c:	40000400 	.word	0x40000400
 8003630:	40000800 	.word	0x40000800

08003634 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr

08003646 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr

08003658 <siprintf>:
 8003658:	b40e      	push	{r1, r2, r3}
 800365a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800365e:	b500      	push	{lr}
 8003660:	b09c      	sub	sp, #112	@ 0x70
 8003662:	ab1d      	add	r3, sp, #116	@ 0x74
 8003664:	9002      	str	r0, [sp, #8]
 8003666:	9006      	str	r0, [sp, #24]
 8003668:	9107      	str	r1, [sp, #28]
 800366a:	9104      	str	r1, [sp, #16]
 800366c:	4808      	ldr	r0, [pc, #32]	@ (8003690 <siprintf+0x38>)
 800366e:	4909      	ldr	r1, [pc, #36]	@ (8003694 <siprintf+0x3c>)
 8003670:	f853 2b04 	ldr.w	r2, [r3], #4
 8003674:	9105      	str	r1, [sp, #20]
 8003676:	6800      	ldr	r0, [r0, #0]
 8003678:	a902      	add	r1, sp, #8
 800367a:	9301      	str	r3, [sp, #4]
 800367c:	f000 f9a0 	bl	80039c0 <_svfiprintf_r>
 8003680:	2200      	movs	r2, #0
 8003682:	9b02      	ldr	r3, [sp, #8]
 8003684:	701a      	strb	r2, [r3, #0]
 8003686:	b01c      	add	sp, #112	@ 0x70
 8003688:	f85d eb04 	ldr.w	lr, [sp], #4
 800368c:	b003      	add	sp, #12
 800368e:	4770      	bx	lr
 8003690:	2000000c 	.word	0x2000000c
 8003694:	ffff0208 	.word	0xffff0208

08003698 <memset>:
 8003698:	4603      	mov	r3, r0
 800369a:	4402      	add	r2, r0
 800369c:	4293      	cmp	r3, r2
 800369e:	d100      	bne.n	80036a2 <memset+0xa>
 80036a0:	4770      	bx	lr
 80036a2:	f803 1b01 	strb.w	r1, [r3], #1
 80036a6:	e7f9      	b.n	800369c <memset+0x4>

080036a8 <__errno>:
 80036a8:	4b01      	ldr	r3, [pc, #4]	@ (80036b0 <__errno+0x8>)
 80036aa:	6818      	ldr	r0, [r3, #0]
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	2000000c 	.word	0x2000000c

080036b4 <__libc_init_array>:
 80036b4:	b570      	push	{r4, r5, r6, lr}
 80036b6:	2600      	movs	r6, #0
 80036b8:	4d0c      	ldr	r5, [pc, #48]	@ (80036ec <__libc_init_array+0x38>)
 80036ba:	4c0d      	ldr	r4, [pc, #52]	@ (80036f0 <__libc_init_array+0x3c>)
 80036bc:	1b64      	subs	r4, r4, r5
 80036be:	10a4      	asrs	r4, r4, #2
 80036c0:	42a6      	cmp	r6, r4
 80036c2:	d109      	bne.n	80036d8 <__libc_init_array+0x24>
 80036c4:	f000 fc78 	bl	8003fb8 <_init>
 80036c8:	2600      	movs	r6, #0
 80036ca:	4d0a      	ldr	r5, [pc, #40]	@ (80036f4 <__libc_init_array+0x40>)
 80036cc:	4c0a      	ldr	r4, [pc, #40]	@ (80036f8 <__libc_init_array+0x44>)
 80036ce:	1b64      	subs	r4, r4, r5
 80036d0:	10a4      	asrs	r4, r4, #2
 80036d2:	42a6      	cmp	r6, r4
 80036d4:	d105      	bne.n	80036e2 <__libc_init_array+0x2e>
 80036d6:	bd70      	pop	{r4, r5, r6, pc}
 80036d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80036dc:	4798      	blx	r3
 80036de:	3601      	adds	r6, #1
 80036e0:	e7ee      	b.n	80036c0 <__libc_init_array+0xc>
 80036e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e6:	4798      	blx	r3
 80036e8:	3601      	adds	r6, #1
 80036ea:	e7f2      	b.n	80036d2 <__libc_init_array+0x1e>
 80036ec:	08004658 	.word	0x08004658
 80036f0:	08004658 	.word	0x08004658
 80036f4:	08004658 	.word	0x08004658
 80036f8:	0800465c 	.word	0x0800465c

080036fc <__retarget_lock_acquire_recursive>:
 80036fc:	4770      	bx	lr

080036fe <__retarget_lock_release_recursive>:
 80036fe:	4770      	bx	lr

08003700 <memcpy>:
 8003700:	440a      	add	r2, r1
 8003702:	4291      	cmp	r1, r2
 8003704:	f100 33ff 	add.w	r3, r0, #4294967295
 8003708:	d100      	bne.n	800370c <memcpy+0xc>
 800370a:	4770      	bx	lr
 800370c:	b510      	push	{r4, lr}
 800370e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003712:	4291      	cmp	r1, r2
 8003714:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003718:	d1f9      	bne.n	800370e <memcpy+0xe>
 800371a:	bd10      	pop	{r4, pc}

0800371c <_free_r>:
 800371c:	b538      	push	{r3, r4, r5, lr}
 800371e:	4605      	mov	r5, r0
 8003720:	2900      	cmp	r1, #0
 8003722:	d040      	beq.n	80037a6 <_free_r+0x8a>
 8003724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003728:	1f0c      	subs	r4, r1, #4
 800372a:	2b00      	cmp	r3, #0
 800372c:	bfb8      	it	lt
 800372e:	18e4      	addlt	r4, r4, r3
 8003730:	f000 f8de 	bl	80038f0 <__malloc_lock>
 8003734:	4a1c      	ldr	r2, [pc, #112]	@ (80037a8 <_free_r+0x8c>)
 8003736:	6813      	ldr	r3, [r2, #0]
 8003738:	b933      	cbnz	r3, 8003748 <_free_r+0x2c>
 800373a:	6063      	str	r3, [r4, #4]
 800373c:	6014      	str	r4, [r2, #0]
 800373e:	4628      	mov	r0, r5
 8003740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003744:	f000 b8da 	b.w	80038fc <__malloc_unlock>
 8003748:	42a3      	cmp	r3, r4
 800374a:	d908      	bls.n	800375e <_free_r+0x42>
 800374c:	6820      	ldr	r0, [r4, #0]
 800374e:	1821      	adds	r1, r4, r0
 8003750:	428b      	cmp	r3, r1
 8003752:	bf01      	itttt	eq
 8003754:	6819      	ldreq	r1, [r3, #0]
 8003756:	685b      	ldreq	r3, [r3, #4]
 8003758:	1809      	addeq	r1, r1, r0
 800375a:	6021      	streq	r1, [r4, #0]
 800375c:	e7ed      	b.n	800373a <_free_r+0x1e>
 800375e:	461a      	mov	r2, r3
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	b10b      	cbz	r3, 8003768 <_free_r+0x4c>
 8003764:	42a3      	cmp	r3, r4
 8003766:	d9fa      	bls.n	800375e <_free_r+0x42>
 8003768:	6811      	ldr	r1, [r2, #0]
 800376a:	1850      	adds	r0, r2, r1
 800376c:	42a0      	cmp	r0, r4
 800376e:	d10b      	bne.n	8003788 <_free_r+0x6c>
 8003770:	6820      	ldr	r0, [r4, #0]
 8003772:	4401      	add	r1, r0
 8003774:	1850      	adds	r0, r2, r1
 8003776:	4283      	cmp	r3, r0
 8003778:	6011      	str	r1, [r2, #0]
 800377a:	d1e0      	bne.n	800373e <_free_r+0x22>
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	4408      	add	r0, r1
 8003782:	6010      	str	r0, [r2, #0]
 8003784:	6053      	str	r3, [r2, #4]
 8003786:	e7da      	b.n	800373e <_free_r+0x22>
 8003788:	d902      	bls.n	8003790 <_free_r+0x74>
 800378a:	230c      	movs	r3, #12
 800378c:	602b      	str	r3, [r5, #0]
 800378e:	e7d6      	b.n	800373e <_free_r+0x22>
 8003790:	6820      	ldr	r0, [r4, #0]
 8003792:	1821      	adds	r1, r4, r0
 8003794:	428b      	cmp	r3, r1
 8003796:	bf01      	itttt	eq
 8003798:	6819      	ldreq	r1, [r3, #0]
 800379a:	685b      	ldreq	r3, [r3, #4]
 800379c:	1809      	addeq	r1, r1, r0
 800379e:	6021      	streq	r1, [r4, #0]
 80037a0:	6063      	str	r3, [r4, #4]
 80037a2:	6054      	str	r4, [r2, #4]
 80037a4:	e7cb      	b.n	800373e <_free_r+0x22>
 80037a6:	bd38      	pop	{r3, r4, r5, pc}
 80037a8:	200006b8 	.word	0x200006b8

080037ac <sbrk_aligned>:
 80037ac:	b570      	push	{r4, r5, r6, lr}
 80037ae:	4e0f      	ldr	r6, [pc, #60]	@ (80037ec <sbrk_aligned+0x40>)
 80037b0:	460c      	mov	r4, r1
 80037b2:	6831      	ldr	r1, [r6, #0]
 80037b4:	4605      	mov	r5, r0
 80037b6:	b911      	cbnz	r1, 80037be <sbrk_aligned+0x12>
 80037b8:	f000 fbaa 	bl	8003f10 <_sbrk_r>
 80037bc:	6030      	str	r0, [r6, #0]
 80037be:	4621      	mov	r1, r4
 80037c0:	4628      	mov	r0, r5
 80037c2:	f000 fba5 	bl	8003f10 <_sbrk_r>
 80037c6:	1c43      	adds	r3, r0, #1
 80037c8:	d103      	bne.n	80037d2 <sbrk_aligned+0x26>
 80037ca:	f04f 34ff 	mov.w	r4, #4294967295
 80037ce:	4620      	mov	r0, r4
 80037d0:	bd70      	pop	{r4, r5, r6, pc}
 80037d2:	1cc4      	adds	r4, r0, #3
 80037d4:	f024 0403 	bic.w	r4, r4, #3
 80037d8:	42a0      	cmp	r0, r4
 80037da:	d0f8      	beq.n	80037ce <sbrk_aligned+0x22>
 80037dc:	1a21      	subs	r1, r4, r0
 80037de:	4628      	mov	r0, r5
 80037e0:	f000 fb96 	bl	8003f10 <_sbrk_r>
 80037e4:	3001      	adds	r0, #1
 80037e6:	d1f2      	bne.n	80037ce <sbrk_aligned+0x22>
 80037e8:	e7ef      	b.n	80037ca <sbrk_aligned+0x1e>
 80037ea:	bf00      	nop
 80037ec:	200006b4 	.word	0x200006b4

080037f0 <_malloc_r>:
 80037f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037f4:	1ccd      	adds	r5, r1, #3
 80037f6:	f025 0503 	bic.w	r5, r5, #3
 80037fa:	3508      	adds	r5, #8
 80037fc:	2d0c      	cmp	r5, #12
 80037fe:	bf38      	it	cc
 8003800:	250c      	movcc	r5, #12
 8003802:	2d00      	cmp	r5, #0
 8003804:	4606      	mov	r6, r0
 8003806:	db01      	blt.n	800380c <_malloc_r+0x1c>
 8003808:	42a9      	cmp	r1, r5
 800380a:	d904      	bls.n	8003816 <_malloc_r+0x26>
 800380c:	230c      	movs	r3, #12
 800380e:	6033      	str	r3, [r6, #0]
 8003810:	2000      	movs	r0, #0
 8003812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003816:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80038ec <_malloc_r+0xfc>
 800381a:	f000 f869 	bl	80038f0 <__malloc_lock>
 800381e:	f8d8 3000 	ldr.w	r3, [r8]
 8003822:	461c      	mov	r4, r3
 8003824:	bb44      	cbnz	r4, 8003878 <_malloc_r+0x88>
 8003826:	4629      	mov	r1, r5
 8003828:	4630      	mov	r0, r6
 800382a:	f7ff ffbf 	bl	80037ac <sbrk_aligned>
 800382e:	1c43      	adds	r3, r0, #1
 8003830:	4604      	mov	r4, r0
 8003832:	d158      	bne.n	80038e6 <_malloc_r+0xf6>
 8003834:	f8d8 4000 	ldr.w	r4, [r8]
 8003838:	4627      	mov	r7, r4
 800383a:	2f00      	cmp	r7, #0
 800383c:	d143      	bne.n	80038c6 <_malloc_r+0xd6>
 800383e:	2c00      	cmp	r4, #0
 8003840:	d04b      	beq.n	80038da <_malloc_r+0xea>
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	4639      	mov	r1, r7
 8003846:	4630      	mov	r0, r6
 8003848:	eb04 0903 	add.w	r9, r4, r3
 800384c:	f000 fb60 	bl	8003f10 <_sbrk_r>
 8003850:	4581      	cmp	r9, r0
 8003852:	d142      	bne.n	80038da <_malloc_r+0xea>
 8003854:	6821      	ldr	r1, [r4, #0]
 8003856:	4630      	mov	r0, r6
 8003858:	1a6d      	subs	r5, r5, r1
 800385a:	4629      	mov	r1, r5
 800385c:	f7ff ffa6 	bl	80037ac <sbrk_aligned>
 8003860:	3001      	adds	r0, #1
 8003862:	d03a      	beq.n	80038da <_malloc_r+0xea>
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	442b      	add	r3, r5
 8003868:	6023      	str	r3, [r4, #0]
 800386a:	f8d8 3000 	ldr.w	r3, [r8]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	bb62      	cbnz	r2, 80038cc <_malloc_r+0xdc>
 8003872:	f8c8 7000 	str.w	r7, [r8]
 8003876:	e00f      	b.n	8003898 <_malloc_r+0xa8>
 8003878:	6822      	ldr	r2, [r4, #0]
 800387a:	1b52      	subs	r2, r2, r5
 800387c:	d420      	bmi.n	80038c0 <_malloc_r+0xd0>
 800387e:	2a0b      	cmp	r2, #11
 8003880:	d917      	bls.n	80038b2 <_malloc_r+0xc2>
 8003882:	1961      	adds	r1, r4, r5
 8003884:	42a3      	cmp	r3, r4
 8003886:	6025      	str	r5, [r4, #0]
 8003888:	bf18      	it	ne
 800388a:	6059      	strne	r1, [r3, #4]
 800388c:	6863      	ldr	r3, [r4, #4]
 800388e:	bf08      	it	eq
 8003890:	f8c8 1000 	streq.w	r1, [r8]
 8003894:	5162      	str	r2, [r4, r5]
 8003896:	604b      	str	r3, [r1, #4]
 8003898:	4630      	mov	r0, r6
 800389a:	f000 f82f 	bl	80038fc <__malloc_unlock>
 800389e:	f104 000b 	add.w	r0, r4, #11
 80038a2:	1d23      	adds	r3, r4, #4
 80038a4:	f020 0007 	bic.w	r0, r0, #7
 80038a8:	1ac2      	subs	r2, r0, r3
 80038aa:	bf1c      	itt	ne
 80038ac:	1a1b      	subne	r3, r3, r0
 80038ae:	50a3      	strne	r3, [r4, r2]
 80038b0:	e7af      	b.n	8003812 <_malloc_r+0x22>
 80038b2:	6862      	ldr	r2, [r4, #4]
 80038b4:	42a3      	cmp	r3, r4
 80038b6:	bf0c      	ite	eq
 80038b8:	f8c8 2000 	streq.w	r2, [r8]
 80038bc:	605a      	strne	r2, [r3, #4]
 80038be:	e7eb      	b.n	8003898 <_malloc_r+0xa8>
 80038c0:	4623      	mov	r3, r4
 80038c2:	6864      	ldr	r4, [r4, #4]
 80038c4:	e7ae      	b.n	8003824 <_malloc_r+0x34>
 80038c6:	463c      	mov	r4, r7
 80038c8:	687f      	ldr	r7, [r7, #4]
 80038ca:	e7b6      	b.n	800383a <_malloc_r+0x4a>
 80038cc:	461a      	mov	r2, r3
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	42a3      	cmp	r3, r4
 80038d2:	d1fb      	bne.n	80038cc <_malloc_r+0xdc>
 80038d4:	2300      	movs	r3, #0
 80038d6:	6053      	str	r3, [r2, #4]
 80038d8:	e7de      	b.n	8003898 <_malloc_r+0xa8>
 80038da:	230c      	movs	r3, #12
 80038dc:	4630      	mov	r0, r6
 80038de:	6033      	str	r3, [r6, #0]
 80038e0:	f000 f80c 	bl	80038fc <__malloc_unlock>
 80038e4:	e794      	b.n	8003810 <_malloc_r+0x20>
 80038e6:	6005      	str	r5, [r0, #0]
 80038e8:	e7d6      	b.n	8003898 <_malloc_r+0xa8>
 80038ea:	bf00      	nop
 80038ec:	200006b8 	.word	0x200006b8

080038f0 <__malloc_lock>:
 80038f0:	4801      	ldr	r0, [pc, #4]	@ (80038f8 <__malloc_lock+0x8>)
 80038f2:	f7ff bf03 	b.w	80036fc <__retarget_lock_acquire_recursive>
 80038f6:	bf00      	nop
 80038f8:	200006b0 	.word	0x200006b0

080038fc <__malloc_unlock>:
 80038fc:	4801      	ldr	r0, [pc, #4]	@ (8003904 <__malloc_unlock+0x8>)
 80038fe:	f7ff befe 	b.w	80036fe <__retarget_lock_release_recursive>
 8003902:	bf00      	nop
 8003904:	200006b0 	.word	0x200006b0

08003908 <__ssputs_r>:
 8003908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800390c:	461f      	mov	r7, r3
 800390e:	688e      	ldr	r6, [r1, #8]
 8003910:	4682      	mov	sl, r0
 8003912:	42be      	cmp	r6, r7
 8003914:	460c      	mov	r4, r1
 8003916:	4690      	mov	r8, r2
 8003918:	680b      	ldr	r3, [r1, #0]
 800391a:	d82d      	bhi.n	8003978 <__ssputs_r+0x70>
 800391c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003920:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003924:	d026      	beq.n	8003974 <__ssputs_r+0x6c>
 8003926:	6965      	ldr	r5, [r4, #20]
 8003928:	6909      	ldr	r1, [r1, #16]
 800392a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800392e:	eba3 0901 	sub.w	r9, r3, r1
 8003932:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003936:	1c7b      	adds	r3, r7, #1
 8003938:	444b      	add	r3, r9
 800393a:	106d      	asrs	r5, r5, #1
 800393c:	429d      	cmp	r5, r3
 800393e:	bf38      	it	cc
 8003940:	461d      	movcc	r5, r3
 8003942:	0553      	lsls	r3, r2, #21
 8003944:	d527      	bpl.n	8003996 <__ssputs_r+0x8e>
 8003946:	4629      	mov	r1, r5
 8003948:	f7ff ff52 	bl	80037f0 <_malloc_r>
 800394c:	4606      	mov	r6, r0
 800394e:	b360      	cbz	r0, 80039aa <__ssputs_r+0xa2>
 8003950:	464a      	mov	r2, r9
 8003952:	6921      	ldr	r1, [r4, #16]
 8003954:	f7ff fed4 	bl	8003700 <memcpy>
 8003958:	89a3      	ldrh	r3, [r4, #12]
 800395a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800395e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003962:	81a3      	strh	r3, [r4, #12]
 8003964:	6126      	str	r6, [r4, #16]
 8003966:	444e      	add	r6, r9
 8003968:	6026      	str	r6, [r4, #0]
 800396a:	463e      	mov	r6, r7
 800396c:	6165      	str	r5, [r4, #20]
 800396e:	eba5 0509 	sub.w	r5, r5, r9
 8003972:	60a5      	str	r5, [r4, #8]
 8003974:	42be      	cmp	r6, r7
 8003976:	d900      	bls.n	800397a <__ssputs_r+0x72>
 8003978:	463e      	mov	r6, r7
 800397a:	4632      	mov	r2, r6
 800397c:	4641      	mov	r1, r8
 800397e:	6820      	ldr	r0, [r4, #0]
 8003980:	f000 faac 	bl	8003edc <memmove>
 8003984:	2000      	movs	r0, #0
 8003986:	68a3      	ldr	r3, [r4, #8]
 8003988:	1b9b      	subs	r3, r3, r6
 800398a:	60a3      	str	r3, [r4, #8]
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	4433      	add	r3, r6
 8003990:	6023      	str	r3, [r4, #0]
 8003992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003996:	462a      	mov	r2, r5
 8003998:	f000 fad8 	bl	8003f4c <_realloc_r>
 800399c:	4606      	mov	r6, r0
 800399e:	2800      	cmp	r0, #0
 80039a0:	d1e0      	bne.n	8003964 <__ssputs_r+0x5c>
 80039a2:	4650      	mov	r0, sl
 80039a4:	6921      	ldr	r1, [r4, #16]
 80039a6:	f7ff feb9 	bl	800371c <_free_r>
 80039aa:	230c      	movs	r3, #12
 80039ac:	f8ca 3000 	str.w	r3, [sl]
 80039b0:	89a3      	ldrh	r3, [r4, #12]
 80039b2:	f04f 30ff 	mov.w	r0, #4294967295
 80039b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039ba:	81a3      	strh	r3, [r4, #12]
 80039bc:	e7e9      	b.n	8003992 <__ssputs_r+0x8a>
	...

080039c0 <_svfiprintf_r>:
 80039c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039c4:	4698      	mov	r8, r3
 80039c6:	898b      	ldrh	r3, [r1, #12]
 80039c8:	4607      	mov	r7, r0
 80039ca:	061b      	lsls	r3, r3, #24
 80039cc:	460d      	mov	r5, r1
 80039ce:	4614      	mov	r4, r2
 80039d0:	b09d      	sub	sp, #116	@ 0x74
 80039d2:	d510      	bpl.n	80039f6 <_svfiprintf_r+0x36>
 80039d4:	690b      	ldr	r3, [r1, #16]
 80039d6:	b973      	cbnz	r3, 80039f6 <_svfiprintf_r+0x36>
 80039d8:	2140      	movs	r1, #64	@ 0x40
 80039da:	f7ff ff09 	bl	80037f0 <_malloc_r>
 80039de:	6028      	str	r0, [r5, #0]
 80039e0:	6128      	str	r0, [r5, #16]
 80039e2:	b930      	cbnz	r0, 80039f2 <_svfiprintf_r+0x32>
 80039e4:	230c      	movs	r3, #12
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ec:	b01d      	add	sp, #116	@ 0x74
 80039ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039f2:	2340      	movs	r3, #64	@ 0x40
 80039f4:	616b      	str	r3, [r5, #20]
 80039f6:	2300      	movs	r3, #0
 80039f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80039fa:	2320      	movs	r3, #32
 80039fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a00:	2330      	movs	r3, #48	@ 0x30
 8003a02:	f04f 0901 	mov.w	r9, #1
 8003a06:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a0a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003ba4 <_svfiprintf_r+0x1e4>
 8003a0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a12:	4623      	mov	r3, r4
 8003a14:	469a      	mov	sl, r3
 8003a16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a1a:	b10a      	cbz	r2, 8003a20 <_svfiprintf_r+0x60>
 8003a1c:	2a25      	cmp	r2, #37	@ 0x25
 8003a1e:	d1f9      	bne.n	8003a14 <_svfiprintf_r+0x54>
 8003a20:	ebba 0b04 	subs.w	fp, sl, r4
 8003a24:	d00b      	beq.n	8003a3e <_svfiprintf_r+0x7e>
 8003a26:	465b      	mov	r3, fp
 8003a28:	4622      	mov	r2, r4
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	4638      	mov	r0, r7
 8003a2e:	f7ff ff6b 	bl	8003908 <__ssputs_r>
 8003a32:	3001      	adds	r0, #1
 8003a34:	f000 80a7 	beq.w	8003b86 <_svfiprintf_r+0x1c6>
 8003a38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a3a:	445a      	add	r2, fp
 8003a3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 809f 	beq.w	8003b86 <_svfiprintf_r+0x1c6>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a52:	f10a 0a01 	add.w	sl, sl, #1
 8003a56:	9304      	str	r3, [sp, #16]
 8003a58:	9307      	str	r3, [sp, #28]
 8003a5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a60:	4654      	mov	r4, sl
 8003a62:	2205      	movs	r2, #5
 8003a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a68:	484e      	ldr	r0, [pc, #312]	@ (8003ba4 <_svfiprintf_r+0x1e4>)
 8003a6a:	f000 fa61 	bl	8003f30 <memchr>
 8003a6e:	9a04      	ldr	r2, [sp, #16]
 8003a70:	b9d8      	cbnz	r0, 8003aaa <_svfiprintf_r+0xea>
 8003a72:	06d0      	lsls	r0, r2, #27
 8003a74:	bf44      	itt	mi
 8003a76:	2320      	movmi	r3, #32
 8003a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a7c:	0711      	lsls	r1, r2, #28
 8003a7e:	bf44      	itt	mi
 8003a80:	232b      	movmi	r3, #43	@ 0x2b
 8003a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a86:	f89a 3000 	ldrb.w	r3, [sl]
 8003a8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a8c:	d015      	beq.n	8003aba <_svfiprintf_r+0xfa>
 8003a8e:	4654      	mov	r4, sl
 8003a90:	2000      	movs	r0, #0
 8003a92:	f04f 0c0a 	mov.w	ip, #10
 8003a96:	9a07      	ldr	r2, [sp, #28]
 8003a98:	4621      	mov	r1, r4
 8003a9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a9e:	3b30      	subs	r3, #48	@ 0x30
 8003aa0:	2b09      	cmp	r3, #9
 8003aa2:	d94b      	bls.n	8003b3c <_svfiprintf_r+0x17c>
 8003aa4:	b1b0      	cbz	r0, 8003ad4 <_svfiprintf_r+0x114>
 8003aa6:	9207      	str	r2, [sp, #28]
 8003aa8:	e014      	b.n	8003ad4 <_svfiprintf_r+0x114>
 8003aaa:	eba0 0308 	sub.w	r3, r0, r8
 8003aae:	fa09 f303 	lsl.w	r3, r9, r3
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	46a2      	mov	sl, r4
 8003ab6:	9304      	str	r3, [sp, #16]
 8003ab8:	e7d2      	b.n	8003a60 <_svfiprintf_r+0xa0>
 8003aba:	9b03      	ldr	r3, [sp, #12]
 8003abc:	1d19      	adds	r1, r3, #4
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	9103      	str	r1, [sp, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	bfbb      	ittet	lt
 8003ac6:	425b      	neglt	r3, r3
 8003ac8:	f042 0202 	orrlt.w	r2, r2, #2
 8003acc:	9307      	strge	r3, [sp, #28]
 8003ace:	9307      	strlt	r3, [sp, #28]
 8003ad0:	bfb8      	it	lt
 8003ad2:	9204      	strlt	r2, [sp, #16]
 8003ad4:	7823      	ldrb	r3, [r4, #0]
 8003ad6:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ad8:	d10a      	bne.n	8003af0 <_svfiprintf_r+0x130>
 8003ada:	7863      	ldrb	r3, [r4, #1]
 8003adc:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ade:	d132      	bne.n	8003b46 <_svfiprintf_r+0x186>
 8003ae0:	9b03      	ldr	r3, [sp, #12]
 8003ae2:	3402      	adds	r4, #2
 8003ae4:	1d1a      	adds	r2, r3, #4
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	9203      	str	r2, [sp, #12]
 8003aea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003aee:	9305      	str	r3, [sp, #20]
 8003af0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003ba8 <_svfiprintf_r+0x1e8>
 8003af4:	2203      	movs	r2, #3
 8003af6:	4650      	mov	r0, sl
 8003af8:	7821      	ldrb	r1, [r4, #0]
 8003afa:	f000 fa19 	bl	8003f30 <memchr>
 8003afe:	b138      	cbz	r0, 8003b10 <_svfiprintf_r+0x150>
 8003b00:	2240      	movs	r2, #64	@ 0x40
 8003b02:	9b04      	ldr	r3, [sp, #16]
 8003b04:	eba0 000a 	sub.w	r0, r0, sl
 8003b08:	4082      	lsls	r2, r0
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	3401      	adds	r4, #1
 8003b0e:	9304      	str	r3, [sp, #16]
 8003b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b14:	2206      	movs	r2, #6
 8003b16:	4825      	ldr	r0, [pc, #148]	@ (8003bac <_svfiprintf_r+0x1ec>)
 8003b18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b1c:	f000 fa08 	bl	8003f30 <memchr>
 8003b20:	2800      	cmp	r0, #0
 8003b22:	d036      	beq.n	8003b92 <_svfiprintf_r+0x1d2>
 8003b24:	4b22      	ldr	r3, [pc, #136]	@ (8003bb0 <_svfiprintf_r+0x1f0>)
 8003b26:	bb1b      	cbnz	r3, 8003b70 <_svfiprintf_r+0x1b0>
 8003b28:	9b03      	ldr	r3, [sp, #12]
 8003b2a:	3307      	adds	r3, #7
 8003b2c:	f023 0307 	bic.w	r3, r3, #7
 8003b30:	3308      	adds	r3, #8
 8003b32:	9303      	str	r3, [sp, #12]
 8003b34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b36:	4433      	add	r3, r6
 8003b38:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b3a:	e76a      	b.n	8003a12 <_svfiprintf_r+0x52>
 8003b3c:	460c      	mov	r4, r1
 8003b3e:	2001      	movs	r0, #1
 8003b40:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b44:	e7a8      	b.n	8003a98 <_svfiprintf_r+0xd8>
 8003b46:	2300      	movs	r3, #0
 8003b48:	f04f 0c0a 	mov.w	ip, #10
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	3401      	adds	r4, #1
 8003b50:	9305      	str	r3, [sp, #20]
 8003b52:	4620      	mov	r0, r4
 8003b54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b58:	3a30      	subs	r2, #48	@ 0x30
 8003b5a:	2a09      	cmp	r2, #9
 8003b5c:	d903      	bls.n	8003b66 <_svfiprintf_r+0x1a6>
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0c6      	beq.n	8003af0 <_svfiprintf_r+0x130>
 8003b62:	9105      	str	r1, [sp, #20]
 8003b64:	e7c4      	b.n	8003af0 <_svfiprintf_r+0x130>
 8003b66:	4604      	mov	r4, r0
 8003b68:	2301      	movs	r3, #1
 8003b6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b6e:	e7f0      	b.n	8003b52 <_svfiprintf_r+0x192>
 8003b70:	ab03      	add	r3, sp, #12
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	462a      	mov	r2, r5
 8003b76:	4638      	mov	r0, r7
 8003b78:	4b0e      	ldr	r3, [pc, #56]	@ (8003bb4 <_svfiprintf_r+0x1f4>)
 8003b7a:	a904      	add	r1, sp, #16
 8003b7c:	f3af 8000 	nop.w
 8003b80:	1c42      	adds	r2, r0, #1
 8003b82:	4606      	mov	r6, r0
 8003b84:	d1d6      	bne.n	8003b34 <_svfiprintf_r+0x174>
 8003b86:	89ab      	ldrh	r3, [r5, #12]
 8003b88:	065b      	lsls	r3, r3, #25
 8003b8a:	f53f af2d 	bmi.w	80039e8 <_svfiprintf_r+0x28>
 8003b8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b90:	e72c      	b.n	80039ec <_svfiprintf_r+0x2c>
 8003b92:	ab03      	add	r3, sp, #12
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	462a      	mov	r2, r5
 8003b98:	4638      	mov	r0, r7
 8003b9a:	4b06      	ldr	r3, [pc, #24]	@ (8003bb4 <_svfiprintf_r+0x1f4>)
 8003b9c:	a904      	add	r1, sp, #16
 8003b9e:	f000 f87d 	bl	8003c9c <_printf_i>
 8003ba2:	e7ed      	b.n	8003b80 <_svfiprintf_r+0x1c0>
 8003ba4:	08004622 	.word	0x08004622
 8003ba8:	08004628 	.word	0x08004628
 8003bac:	0800462c 	.word	0x0800462c
 8003bb0:	00000000 	.word	0x00000000
 8003bb4:	08003909 	.word	0x08003909

08003bb8 <_printf_common>:
 8003bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bbc:	4616      	mov	r6, r2
 8003bbe:	4698      	mov	r8, r3
 8003bc0:	688a      	ldr	r2, [r1, #8]
 8003bc2:	690b      	ldr	r3, [r1, #16]
 8003bc4:	4607      	mov	r7, r0
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	bfb8      	it	lt
 8003bca:	4613      	movlt	r3, r2
 8003bcc:	6033      	str	r3, [r6, #0]
 8003bce:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003bd2:	460c      	mov	r4, r1
 8003bd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003bd8:	b10a      	cbz	r2, 8003bde <_printf_common+0x26>
 8003bda:	3301      	adds	r3, #1
 8003bdc:	6033      	str	r3, [r6, #0]
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	0699      	lsls	r1, r3, #26
 8003be2:	bf42      	ittt	mi
 8003be4:	6833      	ldrmi	r3, [r6, #0]
 8003be6:	3302      	addmi	r3, #2
 8003be8:	6033      	strmi	r3, [r6, #0]
 8003bea:	6825      	ldr	r5, [r4, #0]
 8003bec:	f015 0506 	ands.w	r5, r5, #6
 8003bf0:	d106      	bne.n	8003c00 <_printf_common+0x48>
 8003bf2:	f104 0a19 	add.w	sl, r4, #25
 8003bf6:	68e3      	ldr	r3, [r4, #12]
 8003bf8:	6832      	ldr	r2, [r6, #0]
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	42ab      	cmp	r3, r5
 8003bfe:	dc2b      	bgt.n	8003c58 <_printf_common+0xa0>
 8003c00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c04:	6822      	ldr	r2, [r4, #0]
 8003c06:	3b00      	subs	r3, #0
 8003c08:	bf18      	it	ne
 8003c0a:	2301      	movne	r3, #1
 8003c0c:	0692      	lsls	r2, r2, #26
 8003c0e:	d430      	bmi.n	8003c72 <_printf_common+0xba>
 8003c10:	4641      	mov	r1, r8
 8003c12:	4638      	mov	r0, r7
 8003c14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c18:	47c8      	blx	r9
 8003c1a:	3001      	adds	r0, #1
 8003c1c:	d023      	beq.n	8003c66 <_printf_common+0xae>
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	6922      	ldr	r2, [r4, #16]
 8003c22:	f003 0306 	and.w	r3, r3, #6
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	bf14      	ite	ne
 8003c2a:	2500      	movne	r5, #0
 8003c2c:	6833      	ldreq	r3, [r6, #0]
 8003c2e:	f04f 0600 	mov.w	r6, #0
 8003c32:	bf08      	it	eq
 8003c34:	68e5      	ldreq	r5, [r4, #12]
 8003c36:	f104 041a 	add.w	r4, r4, #26
 8003c3a:	bf08      	it	eq
 8003c3c:	1aed      	subeq	r5, r5, r3
 8003c3e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003c42:	bf08      	it	eq
 8003c44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	bfc4      	itt	gt
 8003c4c:	1a9b      	subgt	r3, r3, r2
 8003c4e:	18ed      	addgt	r5, r5, r3
 8003c50:	42b5      	cmp	r5, r6
 8003c52:	d11a      	bne.n	8003c8a <_printf_common+0xd2>
 8003c54:	2000      	movs	r0, #0
 8003c56:	e008      	b.n	8003c6a <_printf_common+0xb2>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	4652      	mov	r2, sl
 8003c5c:	4641      	mov	r1, r8
 8003c5e:	4638      	mov	r0, r7
 8003c60:	47c8      	blx	r9
 8003c62:	3001      	adds	r0, #1
 8003c64:	d103      	bne.n	8003c6e <_printf_common+0xb6>
 8003c66:	f04f 30ff 	mov.w	r0, #4294967295
 8003c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c6e:	3501      	adds	r5, #1
 8003c70:	e7c1      	b.n	8003bf6 <_printf_common+0x3e>
 8003c72:	2030      	movs	r0, #48	@ 0x30
 8003c74:	18e1      	adds	r1, r4, r3
 8003c76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c80:	4422      	add	r2, r4
 8003c82:	3302      	adds	r3, #2
 8003c84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c88:	e7c2      	b.n	8003c10 <_printf_common+0x58>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	4622      	mov	r2, r4
 8003c8e:	4641      	mov	r1, r8
 8003c90:	4638      	mov	r0, r7
 8003c92:	47c8      	blx	r9
 8003c94:	3001      	adds	r0, #1
 8003c96:	d0e6      	beq.n	8003c66 <_printf_common+0xae>
 8003c98:	3601      	adds	r6, #1
 8003c9a:	e7d9      	b.n	8003c50 <_printf_common+0x98>

08003c9c <_printf_i>:
 8003c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca0:	7e0f      	ldrb	r7, [r1, #24]
 8003ca2:	4691      	mov	r9, r2
 8003ca4:	2f78      	cmp	r7, #120	@ 0x78
 8003ca6:	4680      	mov	r8, r0
 8003ca8:	460c      	mov	r4, r1
 8003caa:	469a      	mov	sl, r3
 8003cac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003cae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003cb2:	d807      	bhi.n	8003cc4 <_printf_i+0x28>
 8003cb4:	2f62      	cmp	r7, #98	@ 0x62
 8003cb6:	d80a      	bhi.n	8003cce <_printf_i+0x32>
 8003cb8:	2f00      	cmp	r7, #0
 8003cba:	f000 80d3 	beq.w	8003e64 <_printf_i+0x1c8>
 8003cbe:	2f58      	cmp	r7, #88	@ 0x58
 8003cc0:	f000 80ba 	beq.w	8003e38 <_printf_i+0x19c>
 8003cc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ccc:	e03a      	b.n	8003d44 <_printf_i+0xa8>
 8003cce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003cd2:	2b15      	cmp	r3, #21
 8003cd4:	d8f6      	bhi.n	8003cc4 <_printf_i+0x28>
 8003cd6:	a101      	add	r1, pc, #4	@ (adr r1, 8003cdc <_printf_i+0x40>)
 8003cd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cdc:	08003d35 	.word	0x08003d35
 8003ce0:	08003d49 	.word	0x08003d49
 8003ce4:	08003cc5 	.word	0x08003cc5
 8003ce8:	08003cc5 	.word	0x08003cc5
 8003cec:	08003cc5 	.word	0x08003cc5
 8003cf0:	08003cc5 	.word	0x08003cc5
 8003cf4:	08003d49 	.word	0x08003d49
 8003cf8:	08003cc5 	.word	0x08003cc5
 8003cfc:	08003cc5 	.word	0x08003cc5
 8003d00:	08003cc5 	.word	0x08003cc5
 8003d04:	08003cc5 	.word	0x08003cc5
 8003d08:	08003e4b 	.word	0x08003e4b
 8003d0c:	08003d73 	.word	0x08003d73
 8003d10:	08003e05 	.word	0x08003e05
 8003d14:	08003cc5 	.word	0x08003cc5
 8003d18:	08003cc5 	.word	0x08003cc5
 8003d1c:	08003e6d 	.word	0x08003e6d
 8003d20:	08003cc5 	.word	0x08003cc5
 8003d24:	08003d73 	.word	0x08003d73
 8003d28:	08003cc5 	.word	0x08003cc5
 8003d2c:	08003cc5 	.word	0x08003cc5
 8003d30:	08003e0d 	.word	0x08003e0d
 8003d34:	6833      	ldr	r3, [r6, #0]
 8003d36:	1d1a      	adds	r2, r3, #4
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6032      	str	r2, [r6, #0]
 8003d3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d44:	2301      	movs	r3, #1
 8003d46:	e09e      	b.n	8003e86 <_printf_i+0x1ea>
 8003d48:	6833      	ldr	r3, [r6, #0]
 8003d4a:	6820      	ldr	r0, [r4, #0]
 8003d4c:	1d19      	adds	r1, r3, #4
 8003d4e:	6031      	str	r1, [r6, #0]
 8003d50:	0606      	lsls	r6, r0, #24
 8003d52:	d501      	bpl.n	8003d58 <_printf_i+0xbc>
 8003d54:	681d      	ldr	r5, [r3, #0]
 8003d56:	e003      	b.n	8003d60 <_printf_i+0xc4>
 8003d58:	0645      	lsls	r5, r0, #25
 8003d5a:	d5fb      	bpl.n	8003d54 <_printf_i+0xb8>
 8003d5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d60:	2d00      	cmp	r5, #0
 8003d62:	da03      	bge.n	8003d6c <_printf_i+0xd0>
 8003d64:	232d      	movs	r3, #45	@ 0x2d
 8003d66:	426d      	negs	r5, r5
 8003d68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d6c:	230a      	movs	r3, #10
 8003d6e:	4859      	ldr	r0, [pc, #356]	@ (8003ed4 <_printf_i+0x238>)
 8003d70:	e011      	b.n	8003d96 <_printf_i+0xfa>
 8003d72:	6821      	ldr	r1, [r4, #0]
 8003d74:	6833      	ldr	r3, [r6, #0]
 8003d76:	0608      	lsls	r0, r1, #24
 8003d78:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d7c:	d402      	bmi.n	8003d84 <_printf_i+0xe8>
 8003d7e:	0649      	lsls	r1, r1, #25
 8003d80:	bf48      	it	mi
 8003d82:	b2ad      	uxthmi	r5, r5
 8003d84:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d86:	6033      	str	r3, [r6, #0]
 8003d88:	bf14      	ite	ne
 8003d8a:	230a      	movne	r3, #10
 8003d8c:	2308      	moveq	r3, #8
 8003d8e:	4851      	ldr	r0, [pc, #324]	@ (8003ed4 <_printf_i+0x238>)
 8003d90:	2100      	movs	r1, #0
 8003d92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d96:	6866      	ldr	r6, [r4, #4]
 8003d98:	2e00      	cmp	r6, #0
 8003d9a:	bfa8      	it	ge
 8003d9c:	6821      	ldrge	r1, [r4, #0]
 8003d9e:	60a6      	str	r6, [r4, #8]
 8003da0:	bfa4      	itt	ge
 8003da2:	f021 0104 	bicge.w	r1, r1, #4
 8003da6:	6021      	strge	r1, [r4, #0]
 8003da8:	b90d      	cbnz	r5, 8003dae <_printf_i+0x112>
 8003daa:	2e00      	cmp	r6, #0
 8003dac:	d04b      	beq.n	8003e46 <_printf_i+0x1aa>
 8003dae:	4616      	mov	r6, r2
 8003db0:	fbb5 f1f3 	udiv	r1, r5, r3
 8003db4:	fb03 5711 	mls	r7, r3, r1, r5
 8003db8:	5dc7      	ldrb	r7, [r0, r7]
 8003dba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003dbe:	462f      	mov	r7, r5
 8003dc0:	42bb      	cmp	r3, r7
 8003dc2:	460d      	mov	r5, r1
 8003dc4:	d9f4      	bls.n	8003db0 <_printf_i+0x114>
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d10b      	bne.n	8003de2 <_printf_i+0x146>
 8003dca:	6823      	ldr	r3, [r4, #0]
 8003dcc:	07df      	lsls	r7, r3, #31
 8003dce:	d508      	bpl.n	8003de2 <_printf_i+0x146>
 8003dd0:	6923      	ldr	r3, [r4, #16]
 8003dd2:	6861      	ldr	r1, [r4, #4]
 8003dd4:	4299      	cmp	r1, r3
 8003dd6:	bfde      	ittt	le
 8003dd8:	2330      	movle	r3, #48	@ 0x30
 8003dda:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003dde:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003de2:	1b92      	subs	r2, r2, r6
 8003de4:	6122      	str	r2, [r4, #16]
 8003de6:	464b      	mov	r3, r9
 8003de8:	4621      	mov	r1, r4
 8003dea:	4640      	mov	r0, r8
 8003dec:	f8cd a000 	str.w	sl, [sp]
 8003df0:	aa03      	add	r2, sp, #12
 8003df2:	f7ff fee1 	bl	8003bb8 <_printf_common>
 8003df6:	3001      	adds	r0, #1
 8003df8:	d14a      	bne.n	8003e90 <_printf_i+0x1f4>
 8003dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8003dfe:	b004      	add	sp, #16
 8003e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e04:	6823      	ldr	r3, [r4, #0]
 8003e06:	f043 0320 	orr.w	r3, r3, #32
 8003e0a:	6023      	str	r3, [r4, #0]
 8003e0c:	2778      	movs	r7, #120	@ 0x78
 8003e0e:	4832      	ldr	r0, [pc, #200]	@ (8003ed8 <_printf_i+0x23c>)
 8003e10:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	6831      	ldr	r1, [r6, #0]
 8003e18:	061f      	lsls	r7, r3, #24
 8003e1a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e1e:	d402      	bmi.n	8003e26 <_printf_i+0x18a>
 8003e20:	065f      	lsls	r7, r3, #25
 8003e22:	bf48      	it	mi
 8003e24:	b2ad      	uxthmi	r5, r5
 8003e26:	6031      	str	r1, [r6, #0]
 8003e28:	07d9      	lsls	r1, r3, #31
 8003e2a:	bf44      	itt	mi
 8003e2c:	f043 0320 	orrmi.w	r3, r3, #32
 8003e30:	6023      	strmi	r3, [r4, #0]
 8003e32:	b11d      	cbz	r5, 8003e3c <_printf_i+0x1a0>
 8003e34:	2310      	movs	r3, #16
 8003e36:	e7ab      	b.n	8003d90 <_printf_i+0xf4>
 8003e38:	4826      	ldr	r0, [pc, #152]	@ (8003ed4 <_printf_i+0x238>)
 8003e3a:	e7e9      	b.n	8003e10 <_printf_i+0x174>
 8003e3c:	6823      	ldr	r3, [r4, #0]
 8003e3e:	f023 0320 	bic.w	r3, r3, #32
 8003e42:	6023      	str	r3, [r4, #0]
 8003e44:	e7f6      	b.n	8003e34 <_printf_i+0x198>
 8003e46:	4616      	mov	r6, r2
 8003e48:	e7bd      	b.n	8003dc6 <_printf_i+0x12a>
 8003e4a:	6833      	ldr	r3, [r6, #0]
 8003e4c:	6825      	ldr	r5, [r4, #0]
 8003e4e:	1d18      	adds	r0, r3, #4
 8003e50:	6961      	ldr	r1, [r4, #20]
 8003e52:	6030      	str	r0, [r6, #0]
 8003e54:	062e      	lsls	r6, r5, #24
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	d501      	bpl.n	8003e5e <_printf_i+0x1c2>
 8003e5a:	6019      	str	r1, [r3, #0]
 8003e5c:	e002      	b.n	8003e64 <_printf_i+0x1c8>
 8003e5e:	0668      	lsls	r0, r5, #25
 8003e60:	d5fb      	bpl.n	8003e5a <_printf_i+0x1be>
 8003e62:	8019      	strh	r1, [r3, #0]
 8003e64:	2300      	movs	r3, #0
 8003e66:	4616      	mov	r6, r2
 8003e68:	6123      	str	r3, [r4, #16]
 8003e6a:	e7bc      	b.n	8003de6 <_printf_i+0x14a>
 8003e6c:	6833      	ldr	r3, [r6, #0]
 8003e6e:	2100      	movs	r1, #0
 8003e70:	1d1a      	adds	r2, r3, #4
 8003e72:	6032      	str	r2, [r6, #0]
 8003e74:	681e      	ldr	r6, [r3, #0]
 8003e76:	6862      	ldr	r2, [r4, #4]
 8003e78:	4630      	mov	r0, r6
 8003e7a:	f000 f859 	bl	8003f30 <memchr>
 8003e7e:	b108      	cbz	r0, 8003e84 <_printf_i+0x1e8>
 8003e80:	1b80      	subs	r0, r0, r6
 8003e82:	6060      	str	r0, [r4, #4]
 8003e84:	6863      	ldr	r3, [r4, #4]
 8003e86:	6123      	str	r3, [r4, #16]
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e8e:	e7aa      	b.n	8003de6 <_printf_i+0x14a>
 8003e90:	4632      	mov	r2, r6
 8003e92:	4649      	mov	r1, r9
 8003e94:	4640      	mov	r0, r8
 8003e96:	6923      	ldr	r3, [r4, #16]
 8003e98:	47d0      	blx	sl
 8003e9a:	3001      	adds	r0, #1
 8003e9c:	d0ad      	beq.n	8003dfa <_printf_i+0x15e>
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	079b      	lsls	r3, r3, #30
 8003ea2:	d413      	bmi.n	8003ecc <_printf_i+0x230>
 8003ea4:	68e0      	ldr	r0, [r4, #12]
 8003ea6:	9b03      	ldr	r3, [sp, #12]
 8003ea8:	4298      	cmp	r0, r3
 8003eaa:	bfb8      	it	lt
 8003eac:	4618      	movlt	r0, r3
 8003eae:	e7a6      	b.n	8003dfe <_printf_i+0x162>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	4632      	mov	r2, r6
 8003eb4:	4649      	mov	r1, r9
 8003eb6:	4640      	mov	r0, r8
 8003eb8:	47d0      	blx	sl
 8003eba:	3001      	adds	r0, #1
 8003ebc:	d09d      	beq.n	8003dfa <_printf_i+0x15e>
 8003ebe:	3501      	adds	r5, #1
 8003ec0:	68e3      	ldr	r3, [r4, #12]
 8003ec2:	9903      	ldr	r1, [sp, #12]
 8003ec4:	1a5b      	subs	r3, r3, r1
 8003ec6:	42ab      	cmp	r3, r5
 8003ec8:	dcf2      	bgt.n	8003eb0 <_printf_i+0x214>
 8003eca:	e7eb      	b.n	8003ea4 <_printf_i+0x208>
 8003ecc:	2500      	movs	r5, #0
 8003ece:	f104 0619 	add.w	r6, r4, #25
 8003ed2:	e7f5      	b.n	8003ec0 <_printf_i+0x224>
 8003ed4:	08004633 	.word	0x08004633
 8003ed8:	08004644 	.word	0x08004644

08003edc <memmove>:
 8003edc:	4288      	cmp	r0, r1
 8003ede:	b510      	push	{r4, lr}
 8003ee0:	eb01 0402 	add.w	r4, r1, r2
 8003ee4:	d902      	bls.n	8003eec <memmove+0x10>
 8003ee6:	4284      	cmp	r4, r0
 8003ee8:	4623      	mov	r3, r4
 8003eea:	d807      	bhi.n	8003efc <memmove+0x20>
 8003eec:	1e43      	subs	r3, r0, #1
 8003eee:	42a1      	cmp	r1, r4
 8003ef0:	d008      	beq.n	8003f04 <memmove+0x28>
 8003ef2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ef6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003efa:	e7f8      	b.n	8003eee <memmove+0x12>
 8003efc:	4601      	mov	r1, r0
 8003efe:	4402      	add	r2, r0
 8003f00:	428a      	cmp	r2, r1
 8003f02:	d100      	bne.n	8003f06 <memmove+0x2a>
 8003f04:	bd10      	pop	{r4, pc}
 8003f06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f0e:	e7f7      	b.n	8003f00 <memmove+0x24>

08003f10 <_sbrk_r>:
 8003f10:	b538      	push	{r3, r4, r5, lr}
 8003f12:	2300      	movs	r3, #0
 8003f14:	4d05      	ldr	r5, [pc, #20]	@ (8003f2c <_sbrk_r+0x1c>)
 8003f16:	4604      	mov	r4, r0
 8003f18:	4608      	mov	r0, r1
 8003f1a:	602b      	str	r3, [r5, #0]
 8003f1c:	f7fc ff20 	bl	8000d60 <_sbrk>
 8003f20:	1c43      	adds	r3, r0, #1
 8003f22:	d102      	bne.n	8003f2a <_sbrk_r+0x1a>
 8003f24:	682b      	ldr	r3, [r5, #0]
 8003f26:	b103      	cbz	r3, 8003f2a <_sbrk_r+0x1a>
 8003f28:	6023      	str	r3, [r4, #0]
 8003f2a:	bd38      	pop	{r3, r4, r5, pc}
 8003f2c:	200006ac 	.word	0x200006ac

08003f30 <memchr>:
 8003f30:	4603      	mov	r3, r0
 8003f32:	b510      	push	{r4, lr}
 8003f34:	b2c9      	uxtb	r1, r1
 8003f36:	4402      	add	r2, r0
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	d101      	bne.n	8003f42 <memchr+0x12>
 8003f3e:	2000      	movs	r0, #0
 8003f40:	e003      	b.n	8003f4a <memchr+0x1a>
 8003f42:	7804      	ldrb	r4, [r0, #0]
 8003f44:	3301      	adds	r3, #1
 8003f46:	428c      	cmp	r4, r1
 8003f48:	d1f6      	bne.n	8003f38 <memchr+0x8>
 8003f4a:	bd10      	pop	{r4, pc}

08003f4c <_realloc_r>:
 8003f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f50:	4680      	mov	r8, r0
 8003f52:	4615      	mov	r5, r2
 8003f54:	460c      	mov	r4, r1
 8003f56:	b921      	cbnz	r1, 8003f62 <_realloc_r+0x16>
 8003f58:	4611      	mov	r1, r2
 8003f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f5e:	f7ff bc47 	b.w	80037f0 <_malloc_r>
 8003f62:	b92a      	cbnz	r2, 8003f70 <_realloc_r+0x24>
 8003f64:	f7ff fbda 	bl	800371c <_free_r>
 8003f68:	2400      	movs	r4, #0
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f70:	f000 f81a 	bl	8003fa8 <_malloc_usable_size_r>
 8003f74:	4285      	cmp	r5, r0
 8003f76:	4606      	mov	r6, r0
 8003f78:	d802      	bhi.n	8003f80 <_realloc_r+0x34>
 8003f7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003f7e:	d8f4      	bhi.n	8003f6a <_realloc_r+0x1e>
 8003f80:	4629      	mov	r1, r5
 8003f82:	4640      	mov	r0, r8
 8003f84:	f7ff fc34 	bl	80037f0 <_malloc_r>
 8003f88:	4607      	mov	r7, r0
 8003f8a:	2800      	cmp	r0, #0
 8003f8c:	d0ec      	beq.n	8003f68 <_realloc_r+0x1c>
 8003f8e:	42b5      	cmp	r5, r6
 8003f90:	462a      	mov	r2, r5
 8003f92:	4621      	mov	r1, r4
 8003f94:	bf28      	it	cs
 8003f96:	4632      	movcs	r2, r6
 8003f98:	f7ff fbb2 	bl	8003700 <memcpy>
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	4640      	mov	r0, r8
 8003fa0:	f7ff fbbc 	bl	800371c <_free_r>
 8003fa4:	463c      	mov	r4, r7
 8003fa6:	e7e0      	b.n	8003f6a <_realloc_r+0x1e>

08003fa8 <_malloc_usable_size_r>:
 8003fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fac:	1f18      	subs	r0, r3, #4
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	bfbc      	itt	lt
 8003fb2:	580b      	ldrlt	r3, [r1, r0]
 8003fb4:	18c0      	addlt	r0, r0, r3
 8003fb6:	4770      	bx	lr

08003fb8 <_init>:
 8003fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fba:	bf00      	nop
 8003fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fbe:	bc08      	pop	{r3}
 8003fc0:	469e      	mov	lr, r3
 8003fc2:	4770      	bx	lr

08003fc4 <_fini>:
 8003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc6:	bf00      	nop
 8003fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fca:	bc08      	pop	{r3}
 8003fcc:	469e      	mov	lr, r3
 8003fce:	4770      	bx	lr
