
HC_SR04_Ultrasonic_Sensing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eb4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  08004fc0  08004fc0  00005fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005668  08005668  0000705c  2**0
                  CONTENTS
  4 .ARM          00000000  08005668  08005668  0000705c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005668  08005668  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005668  08005668  00006668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800566c  0800566c  0000666c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005670  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000638  2000005c  080056cc  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000694  080056cc  00007694  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3e6  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c8  00000000  00000000  0001546b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00017b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be7  00000000  00000000  00018aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d1d  00000000  00000000  00019687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130a2  00000000  00000000  000323a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008db8c  00000000  00000000  00045446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2fd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044d4  00000000  00000000  000d3018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000d74ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004fa8 	.word	0x08004fa8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004fa8 	.word	0x08004fa8

0800014c <HC_SR04_Init>:

static inline void DWT_Delay_Init(void);
static inline void delay_us(uint32_t us);

void HC_SR04_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000150:	f000 f82e 	bl	80001b0 <DWT_Delay_Init>
}
 8000154:	bf00      	nop
 8000156:	bd80      	pop	{r7, pc}

08000158 <HC_SR04_Trigger>:

void HC_SR04_Trigger(void)
{
 8000158:	b580      	push	{r7, lr}
 800015a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);
 800015c:	2201      	movs	r2, #1
 800015e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000162:	4807      	ldr	r0, [pc, #28]	@ (8000180 <HC_SR04_Trigger+0x28>)
 8000164:	f001 fa02 	bl	800156c <HAL_GPIO_WritePin>
	  delay_us(10);
 8000168:	200a      	movs	r0, #10
 800016a:	f000 f83b 	bl	80001e4 <delay_us>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
 800016e:	2200      	movs	r2, #0
 8000170:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000174:	4802      	ldr	r0, [pc, #8]	@ (8000180 <HC_SR04_Trigger+0x28>)
 8000176:	f001 f9f9 	bl	800156c <HAL_GPIO_WritePin>
}
 800017a:	bf00      	nop
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	40010800 	.word	0x40010800

08000184 <HC_SR04_Distance_Calculate>:

uint16_t HC_SR04_Distance_Calculate(uint32_t pulse_us)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
	return (pulse_us+1) * 340/20000U;
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	3301      	adds	r3, #1
 8000190:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8000194:	fb02 f303 	mul.w	r3, r2, r3
 8000198:	4a04      	ldr	r2, [pc, #16]	@ (80001ac <HC_SR04_Distance_Calculate+0x28>)
 800019a:	fba2 2303 	umull	r2, r3, r2, r3
 800019e:	0b9b      	lsrs	r3, r3, #14
 80001a0:	b29b      	uxth	r3, r3
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	d1b71759 	.word	0xd1b71759

080001b0 <DWT_Delay_Init>:

static inline void DWT_Delay_Init(void){
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80001b4:	4b09      	ldr	r3, [pc, #36]	@ (80001dc <DWT_Delay_Init+0x2c>)
 80001b6:	68db      	ldr	r3, [r3, #12]
 80001b8:	4a08      	ldr	r2, [pc, #32]	@ (80001dc <DWT_Delay_Init+0x2c>)
 80001ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80001be:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 80001c0:	4b07      	ldr	r3, [pc, #28]	@ (80001e0 <DWT_Delay_Init+0x30>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80001c6:	4b06      	ldr	r3, [pc, #24]	@ (80001e0 <DWT_Delay_Init+0x30>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	4a05      	ldr	r2, [pc, #20]	@ (80001e0 <DWT_Delay_Init+0x30>)
 80001cc:	f043 0301 	orr.w	r3, r3, #1
 80001d0:	6013      	str	r3, [r2, #0]
}
 80001d2:	bf00      	nop
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	e000edf0 	.word	0xe000edf0
 80001e0:	e0001000 	.word	0xe0001000

080001e4 <delay_us>:

static inline void delay_us(uint32_t us){
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 80001ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000224 <delay_us+0x40>)
 80001ee:	685b      	ldr	r3, [r3, #4]
 80001f0:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * (SystemCoreClock/1000000U);
 80001f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000228 <delay_us+0x44>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a0d      	ldr	r2, [pc, #52]	@ (800022c <delay_us+0x48>)
 80001f8:	fba2 2303 	umull	r2, r3, r2, r3
 80001fc:	0c9a      	lsrs	r2, r3, #18
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	fb02 f303 	mul.w	r3, r2, r3
 8000204:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks);
 8000206:	bf00      	nop
 8000208:	4b06      	ldr	r3, [pc, #24]	@ (8000224 <delay_us+0x40>)
 800020a:	685a      	ldr	r2, [r3, #4]
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	1ad3      	subs	r3, r2, r3
 8000210:	68ba      	ldr	r2, [r7, #8]
 8000212:	429a      	cmp	r2, r3
 8000214:	d8f8      	bhi.n	8000208 <delay_us+0x24>
}
 8000216:	bf00      	nop
 8000218:	bf00      	nop
 800021a:	3714      	adds	r7, #20
 800021c:	46bd      	mov	sp, r7
 800021e:	bc80      	pop	{r7}
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	e0001000 	.word	0xe0001000
 8000228:	20000000 	.word	0x20000000
 800022c:	431bde83 	.word	0x431bde83

08000230 <oled_init>:
#include "stdio.h"
#include "main.h"


// OLED Initialization Function
void oled_init(void) {
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8000234:	f000 f88a 	bl	800034c <ssd1306_Init>
}
 8000238:	bf00      	nop
 800023a:	bd80      	pop	{r7, pc}

0800023c <oled_display_wavelength_distance_rtc>:


void oled_display_wavelength_distance_rtc(int wavelength, int distance, uint32_t rtc)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b08e      	sub	sp, #56	@ 0x38
 8000240:	af02      	add	r7, sp, #8
 8000242:	60f8      	str	r0, [r7, #12]
 8000244:	60b9      	str	r1, [r7, #8]
 8000246:	607a      	str	r2, [r7, #4]
    char buffer[30];
    ssd1306_Fill(Black);
 8000248:	2000      	movs	r0, #0
 800024a:	f000 f8e9 	bl	8000420 <ssd1306_Fill>

    ssd1306_SetCursor(2, 2);
 800024e:	2102      	movs	r1, #2
 8000250:	2002      	movs	r0, #2
 8000252:	f000 fa2d 	bl	80006b0 <ssd1306_SetCursor>
    sprintf(buffer, "wavelength: %d microseconds", wavelength);  // use %d for int
 8000256:	f107 0310 	add.w	r3, r7, #16
 800025a:	68fa      	ldr	r2, [r7, #12]
 800025c:	491b      	ldr	r1, [pc, #108]	@ (80002cc <oled_display_wavelength_distance_rtc+0x90>)
 800025e:	4618      	mov	r0, r3
 8000260:	f004 f9f2 	bl	8004648 <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 8000264:	4b1a      	ldr	r3, [pc, #104]	@ (80002d0 <oled_display_wavelength_distance_rtc+0x94>)
 8000266:	f107 0010 	add.w	r0, r7, #16
 800026a:	2201      	movs	r2, #1
 800026c:	9200      	str	r2, [sp, #0]
 800026e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000270:	f000 f9f8 	bl	8000664 <ssd1306_WriteString>

    ssd1306_SetCursor(2, 12);
 8000274:	210c      	movs	r1, #12
 8000276:	2002      	movs	r0, #2
 8000278:	f000 fa1a 	bl	80006b0 <ssd1306_SetCursor>
    sprintf(buffer, "distance: %d cm", distance);      // use %% to print literal '%'
 800027c:	f107 0310 	add.w	r3, r7, #16
 8000280:	68ba      	ldr	r2, [r7, #8]
 8000282:	4914      	ldr	r1, [pc, #80]	@ (80002d4 <oled_display_wavelength_distance_rtc+0x98>)
 8000284:	4618      	mov	r0, r3
 8000286:	f004 f9df 	bl	8004648 <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 800028a:	4b11      	ldr	r3, [pc, #68]	@ (80002d0 <oled_display_wavelength_distance_rtc+0x94>)
 800028c:	f107 0010 	add.w	r0, r7, #16
 8000290:	2201      	movs	r2, #1
 8000292:	9200      	str	r2, [sp, #0]
 8000294:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000296:	f000 f9e5 	bl	8000664 <ssd1306_WriteString>

    ssd1306_SetCursor(2, 22);
 800029a:	2116      	movs	r1, #22
 800029c:	2002      	movs	r0, #2
 800029e:	f000 fa07 	bl	80006b0 <ssd1306_SetCursor>
    sprintf(buffer, "rtc: %ld ", rtc);      // use %% to print literal '%'
 80002a2:	f107 0310 	add.w	r3, r7, #16
 80002a6:	687a      	ldr	r2, [r7, #4]
 80002a8:	490b      	ldr	r1, [pc, #44]	@ (80002d8 <oled_display_wavelength_distance_rtc+0x9c>)
 80002aa:	4618      	mov	r0, r3
 80002ac:	f004 f9cc 	bl	8004648 <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 80002b0:	4b07      	ldr	r3, [pc, #28]	@ (80002d0 <oled_display_wavelength_distance_rtc+0x94>)
 80002b2:	f107 0010 	add.w	r0, r7, #16
 80002b6:	2201      	movs	r2, #1
 80002b8:	9200      	str	r2, [sp, #0]
 80002ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80002bc:	f000 f9d2 	bl	8000664 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 80002c0:	f000 f8c6 	bl	8000450 <ssd1306_UpdateScreen>
}
 80002c4:	bf00      	nop
 80002c6:	3730      	adds	r7, #48	@ 0x30
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	08004fc0 	.word	0x08004fc0
 80002d0:	080055e8 	.word	0x080055e8
 80002d4:	08004fdc 	.word	0x08004fdc
 80002d8:	08004fec 	.word	0x08004fec

080002dc <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr

080002e8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b086      	sub	sp, #24
 80002ec:	af04      	add	r7, sp, #16
 80002ee:	4603      	mov	r3, r0
 80002f0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1,
 80002f2:	f04f 33ff 	mov.w	r3, #4294967295
 80002f6:	9302      	str	r3, [sp, #8]
 80002f8:	2301      	movs	r3, #1
 80002fa:	9301      	str	r3, [sp, #4]
 80002fc:	1dfb      	adds	r3, r7, #7
 80002fe:	9300      	str	r3, [sp, #0]
 8000300:	2301      	movs	r3, #1
 8000302:	2200      	movs	r2, #0
 8000304:	2178      	movs	r1, #120	@ 0x78
 8000306:	4803      	ldr	r0, [pc, #12]	@ (8000314 <ssd1306_WriteCommand+0x2c>)
 8000308:	f001 fa8c 	bl	8001824 <HAL_I2C_Mem_Write>
			HAL_MAX_DELAY);
}
 800030c:	bf00      	nop
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20000480 	.word	0x20000480

08000318 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t *buffer, size_t buff_size) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af04      	add	r7, sp, #16
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer,
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	b29b      	uxth	r3, r3
 8000326:	f04f 32ff 	mov.w	r2, #4294967295
 800032a:	9202      	str	r2, [sp, #8]
 800032c:	9301      	str	r3, [sp, #4]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	2301      	movs	r3, #1
 8000334:	2240      	movs	r2, #64	@ 0x40
 8000336:	2178      	movs	r1, #120	@ 0x78
 8000338:	4803      	ldr	r0, [pc, #12]	@ (8000348 <ssd1306_WriteData+0x30>)
 800033a:	f001 fa73 	bl	8001824 <HAL_I2C_Mem_Write>
			buff_size, HAL_MAX_DELAY);
}
 800033e:	bf00      	nop
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20000480 	.word	0x20000480

0800034c <ssd1306_Init>:
	}
	return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8000350:	f7ff ffc4 	bl	80002dc <ssd1306_Reset>

	// Wait for the screen to boot
	HAL_Delay(100);
 8000354:	2064      	movs	r0, #100	@ 0x64
 8000356:	f000 fe37 	bl	8000fc8 <HAL_Delay>

	// Init OLED
	ssd1306_SetDisplayOn(0); //display off
 800035a:	2000      	movs	r0, #0
 800035c:	f000 f9d4 	bl	8000708 <ssd1306_SetDisplayOn>

	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000360:	2020      	movs	r0, #32
 8000362:	f7ff ffc1 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000366:	2000      	movs	r0, #0
 8000368:	f7ff ffbe 	bl	80002e8 <ssd1306_WriteCommand>
								// 10b,Page Addressing Mode (RESET); 11b,Invalid

	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800036c:	20b0      	movs	r0, #176	@ 0xb0
 800036e:	f7ff ffbb 	bl	80002e8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000372:	20c8      	movs	r0, #200	@ 0xc8
 8000374:	f7ff ffb8 	bl	80002e8 <ssd1306_WriteCommand>
#endif

	ssd1306_WriteCommand(0x00); //---set low column address
 8000378:	2000      	movs	r0, #0
 800037a:	f7ff ffb5 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 800037e:	2010      	movs	r0, #16
 8000380:	f7ff ffb2 	bl	80002e8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000384:	2040      	movs	r0, #64	@ 0x40
 8000386:	f7ff ffaf 	bl	80002e8 <ssd1306_WriteCommand>

	ssd1306_SetContrast(0xFF);
 800038a:	20ff      	movs	r0, #255	@ 0xff
 800038c:	f000 f9a8 	bl	80006e0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000390:	20a1      	movs	r0, #161	@ 0xa1
 8000392:	f7ff ffa9 	bl	80002e8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
	ssd1306_WriteCommand(0xA6); //--set normal color
 8000396:	20a6      	movs	r0, #166	@ 0xa6
 8000398:	f7ff ffa6 	bl	80002e8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800039c:	20a8      	movs	r0, #168	@ 0xa8
 800039e:	f7ff ffa3 	bl	80002e8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x3F); //
 80003a2:	203f      	movs	r0, #63	@ 0x3f
 80003a4:	f7ff ffa0 	bl	80002e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80003a8:	20a4      	movs	r0, #164	@ 0xa4
 80003aa:	f7ff ff9d 	bl	80002e8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80003ae:	20d3      	movs	r0, #211	@ 0xd3
 80003b0:	f7ff ff9a 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80003b4:	2000      	movs	r0, #0
 80003b6:	f7ff ff97 	bl	80002e8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80003ba:	20d5      	movs	r0, #213	@ 0xd5
 80003bc:	f7ff ff94 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80003c0:	20f0      	movs	r0, #240	@ 0xf0
 80003c2:	f7ff ff91 	bl	80002e8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80003c6:	20d9      	movs	r0, #217	@ 0xd9
 80003c8:	f7ff ff8e 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80003cc:	2022      	movs	r0, #34	@ 0x22
 80003ce:	f7ff ff8b 	bl	80002e8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80003d2:	20da      	movs	r0, #218	@ 0xda
 80003d4:	f7ff ff88 	bl	80002e8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x12);
 80003d8:	2012      	movs	r0, #18
 80003da:	f7ff ff85 	bl	80002e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xDB); //--set vcomh
 80003de:	20db      	movs	r0, #219	@ 0xdb
 80003e0:	f7ff ff82 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80003e4:	2020      	movs	r0, #32
 80003e6:	f7ff ff7f 	bl	80002e8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80003ea:	208d      	movs	r0, #141	@ 0x8d
 80003ec:	f7ff ff7c 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 80003f0:	2014      	movs	r0, #20
 80003f2:	f7ff ff79 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80003f6:	2001      	movs	r0, #1
 80003f8:	f000 f986 	bl	8000708 <ssd1306_SetDisplayOn>

	// Clear screen
	ssd1306_Fill(Black);
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f80f 	bl	8000420 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8000402:	f000 f825 	bl	8000450 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8000406:	4b05      	ldr	r3, [pc, #20]	@ (800041c <ssd1306_Init+0xd0>)
 8000408:	2200      	movs	r2, #0
 800040a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800040c:	4b03      	ldr	r3, [pc, #12]	@ (800041c <ssd1306_Init+0xd0>)
 800040e:	2200      	movs	r2, #0
 8000410:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8000412:	4b02      	ldr	r3, [pc, #8]	@ (800041c <ssd1306_Init+0xd0>)
 8000414:	2201      	movs	r2, #1
 8000416:	711a      	strb	r2, [r3, #4]
}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000478 	.word	0x20000478

08000420 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF,
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d101      	bne.n	8000434 <ssd1306_Fill+0x14>
 8000430:	2300      	movs	r3, #0
 8000432:	e000      	b.n	8000436 <ssd1306_Fill+0x16>
 8000434:	23ff      	movs	r3, #255	@ 0xff
 8000436:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800043a:	4619      	mov	r1, r3
 800043c:	4803      	ldr	r0, [pc, #12]	@ (800044c <ssd1306_Fill+0x2c>)
 800043e:	f004 f923 	bl	8004688 <memset>
			sizeof(SSD1306_Buffer));
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	20000078 	.word	0x20000078

08000450 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
	// depends on the screen height:
	//
	//  * 32px   ==  4 pages
	//  * 64px   ==  8 pages
	//  * 128px  ==  16 pages
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 8000456:	2300      	movs	r3, #0
 8000458:	71fb      	strb	r3, [r7, #7]
 800045a:	e016      	b.n	800048a <ssd1306_UpdateScreen+0x3a>
		ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	3b50      	subs	r3, #80	@ 0x50
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ff40 	bl	80002e8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000468:	2000      	movs	r0, #0
 800046a:	f7ff ff3d 	bl	80002e8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800046e:	2010      	movs	r0, #16
 8000470:	f7ff ff3a 	bl	80002e8 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	01db      	lsls	r3, r3, #7
 8000478:	4a08      	ldr	r2, [pc, #32]	@ (800049c <ssd1306_UpdateScreen+0x4c>)
 800047a:	4413      	add	r3, r2
 800047c:	2180      	movs	r1, #128	@ 0x80
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff4a 	bl	8000318 <ssd1306_WriteData>
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	3301      	adds	r3, #1
 8000488:	71fb      	strb	r3, [r7, #7]
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	2b07      	cmp	r3, #7
 800048e:	d9e5      	bls.n	800045c <ssd1306_UpdateScreen+0xc>
	}
}
 8000490:	bf00      	nop
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	20000078 	.word	0x20000078

080004a0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]
 80004aa:	460b      	mov	r3, r1
 80004ac:	71bb      	strb	r3, [r7, #6]
 80004ae:	4613      	mov	r3, r2
 80004b0:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80004b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	db3d      	blt.n	8000536 <ssd1306_DrawPixel+0x96>
 80004ba:	79bb      	ldrb	r3, [r7, #6]
 80004bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80004be:	d83a      	bhi.n	8000536 <ssd1306_DrawPixel+0x96>
		// Don't write outside the buffer
		return;
	}

	// Draw in the right color
	if (color == White) {
 80004c0:	797b      	ldrb	r3, [r7, #5]
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d11a      	bne.n	80004fc <ssd1306_DrawPixel+0x5c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80004c6:	79fa      	ldrb	r2, [r7, #7]
 80004c8:	79bb      	ldrb	r3, [r7, #6]
 80004ca:	08db      	lsrs	r3, r3, #3
 80004cc:	b2d8      	uxtb	r0, r3
 80004ce:	4603      	mov	r3, r0
 80004d0:	01db      	lsls	r3, r3, #7
 80004d2:	4413      	add	r3, r2
 80004d4:	4a1a      	ldr	r2, [pc, #104]	@ (8000540 <ssd1306_DrawPixel+0xa0>)
 80004d6:	5cd3      	ldrb	r3, [r2, r3]
 80004d8:	b25a      	sxtb	r2, r3
 80004da:	79bb      	ldrb	r3, [r7, #6]
 80004dc:	f003 0307 	and.w	r3, r3, #7
 80004e0:	2101      	movs	r1, #1
 80004e2:	fa01 f303 	lsl.w	r3, r1, r3
 80004e6:	b25b      	sxtb	r3, r3
 80004e8:	4313      	orrs	r3, r2
 80004ea:	b259      	sxtb	r1, r3
 80004ec:	79fa      	ldrb	r2, [r7, #7]
 80004ee:	4603      	mov	r3, r0
 80004f0:	01db      	lsls	r3, r3, #7
 80004f2:	4413      	add	r3, r2
 80004f4:	b2c9      	uxtb	r1, r1
 80004f6:	4a12      	ldr	r2, [pc, #72]	@ (8000540 <ssd1306_DrawPixel+0xa0>)
 80004f8:	54d1      	strb	r1, [r2, r3]
 80004fa:	e01d      	b.n	8000538 <ssd1306_DrawPixel+0x98>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80004fc:	79fa      	ldrb	r2, [r7, #7]
 80004fe:	79bb      	ldrb	r3, [r7, #6]
 8000500:	08db      	lsrs	r3, r3, #3
 8000502:	b2d8      	uxtb	r0, r3
 8000504:	4603      	mov	r3, r0
 8000506:	01db      	lsls	r3, r3, #7
 8000508:	4413      	add	r3, r2
 800050a:	4a0d      	ldr	r2, [pc, #52]	@ (8000540 <ssd1306_DrawPixel+0xa0>)
 800050c:	5cd3      	ldrb	r3, [r2, r3]
 800050e:	b25a      	sxtb	r2, r3
 8000510:	79bb      	ldrb	r3, [r7, #6]
 8000512:	f003 0307 	and.w	r3, r3, #7
 8000516:	2101      	movs	r1, #1
 8000518:	fa01 f303 	lsl.w	r3, r1, r3
 800051c:	b25b      	sxtb	r3, r3
 800051e:	43db      	mvns	r3, r3
 8000520:	b25b      	sxtb	r3, r3
 8000522:	4013      	ands	r3, r2
 8000524:	b259      	sxtb	r1, r3
 8000526:	79fa      	ldrb	r2, [r7, #7]
 8000528:	4603      	mov	r3, r0
 800052a:	01db      	lsls	r3, r3, #7
 800052c:	4413      	add	r3, r2
 800052e:	b2c9      	uxtb	r1, r1
 8000530:	4a03      	ldr	r2, [pc, #12]	@ (8000540 <ssd1306_DrawPixel+0xa0>)
 8000532:	54d1      	strb	r1, [r2, r3]
 8000534:	e000      	b.n	8000538 <ssd1306_DrawPixel+0x98>
		return;
 8000536:	bf00      	nop
	}
}
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	20000078 	.word	0x20000078

08000544 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000544:	b590      	push	{r4, r7, lr}
 8000546:	b089      	sub	sp, #36	@ 0x24
 8000548:	af00      	add	r7, sp, #0
 800054a:	4604      	mov	r4, r0
 800054c:	4638      	mov	r0, r7
 800054e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000552:	4623      	mov	r3, r4
 8000554:	73fb      	strb	r3, [r7, #15]
	uint32_t i, b, j;

	// Check if character is valid
	if (ch < 32 || ch > 126)
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	2b1f      	cmp	r3, #31
 800055a:	d902      	bls.n	8000562 <ssd1306_WriteChar+0x1e>
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	2b7e      	cmp	r3, #126	@ 0x7e
 8000560:	d901      	bls.n	8000566 <ssd1306_WriteChar+0x22>
		return 0;
 8000562:	2300      	movs	r3, #0
 8000564:	e077      	b.n	8000656 <ssd1306_WriteChar+0x112>

	// Check remaining space on current line
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000566:	4b3e      	ldr	r3, [pc, #248]	@ (8000660 <ssd1306_WriteChar+0x11c>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	461a      	mov	r2, r3
 800056c:	783b      	ldrb	r3, [r7, #0]
 800056e:	4413      	add	r3, r2
 8000570:	2b80      	cmp	r3, #128	@ 0x80
 8000572:	dc06      	bgt.n	8000582 <ssd1306_WriteChar+0x3e>
	SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height)) {
 8000574:	4b3a      	ldr	r3, [pc, #232]	@ (8000660 <ssd1306_WriteChar+0x11c>)
 8000576:	885b      	ldrh	r3, [r3, #2]
 8000578:	461a      	mov	r2, r3
 800057a:	787b      	ldrb	r3, [r7, #1]
 800057c:	4413      	add	r3, r2
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800057e:	2b40      	cmp	r3, #64	@ 0x40
 8000580:	dd01      	ble.n	8000586 <ssd1306_WriteChar+0x42>
		// Not enough space on current line
		return 0;
 8000582:	2300      	movs	r3, #0
 8000584:	e067      	b.n	8000656 <ssd1306_WriteChar+0x112>
	}

	// Use the font to write
	for (i = 0; i < Font.height; i++) {
 8000586:	2300      	movs	r3, #0
 8000588:	61fb      	str	r3, [r7, #28]
 800058a:	e04e      	b.n	800062a <ssd1306_WriteChar+0xe6>
		b = Font.data[(ch - 32) * Font.height + i];
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	3b20      	subs	r3, #32
 8000592:	7879      	ldrb	r1, [r7, #1]
 8000594:	fb01 f303 	mul.w	r3, r1, r3
 8000598:	4619      	mov	r1, r3
 800059a:	69fb      	ldr	r3, [r7, #28]
 800059c:	440b      	add	r3, r1
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	4413      	add	r3, r2
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.width; j++) {
 80005a6:	2300      	movs	r3, #0
 80005a8:	61bb      	str	r3, [r7, #24]
 80005aa:	e036      	b.n	800061a <ssd1306_WriteChar+0xd6>
			if ((b << j) & 0x8000) {
 80005ac:	697a      	ldr	r2, [r7, #20]
 80005ae:	69bb      	ldr	r3, [r7, #24]
 80005b0:	fa02 f303 	lsl.w	r3, r2, r3
 80005b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d013      	beq.n	80005e4 <ssd1306_WriteChar+0xa0>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 80005bc:	4b28      	ldr	r3, [pc, #160]	@ (8000660 <ssd1306_WriteChar+0x11c>)
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	69bb      	ldr	r3, [r7, #24]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	4413      	add	r3, r2
 80005c8:	b2d8      	uxtb	r0, r3
 80005ca:	4b25      	ldr	r3, [pc, #148]	@ (8000660 <ssd1306_WriteChar+0x11c>)
 80005cc:	885b      	ldrh	r3, [r3, #2]
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	4413      	add	r3, r2
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80005dc:	4619      	mov	r1, r3
 80005de:	f7ff ff5f 	bl	80004a0 <ssd1306_DrawPixel>
 80005e2:	e017      	b.n	8000614 <ssd1306_WriteChar+0xd0>
						(SSD1306_COLOR) color);
			} else {
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 80005e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000660 <ssd1306_WriteChar+0x11c>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	69bb      	ldr	r3, [r7, #24]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	4413      	add	r3, r2
 80005f0:	b2d8      	uxtb	r0, r3
 80005f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000660 <ssd1306_WriteChar+0x11c>)
 80005f4:	885b      	ldrh	r3, [r3, #2]
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	69fb      	ldr	r3, [r7, #28]
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	4413      	add	r3, r2
 80005fe:	b2d9      	uxtb	r1, r3
 8000600:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000604:	2b00      	cmp	r3, #0
 8000606:	bf0c      	ite	eq
 8000608:	2301      	moveq	r3, #1
 800060a:	2300      	movne	r3, #0
 800060c:	b2db      	uxtb	r3, r3
 800060e:	461a      	mov	r2, r3
 8000610:	f7ff ff46 	bl	80004a0 <ssd1306_DrawPixel>
		for (j = 0; j < Font.width; j++) {
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	3301      	adds	r3, #1
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	783b      	ldrb	r3, [r7, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	69bb      	ldr	r3, [r7, #24]
 8000620:	4293      	cmp	r3, r2
 8000622:	d3c3      	bcc.n	80005ac <ssd1306_WriteChar+0x68>
	for (i = 0; i < Font.height; i++) {
 8000624:	69fb      	ldr	r3, [r7, #28]
 8000626:	3301      	adds	r3, #1
 8000628:	61fb      	str	r3, [r7, #28]
 800062a:	787b      	ldrb	r3, [r7, #1]
 800062c:	461a      	mov	r2, r3
 800062e:	69fb      	ldr	r3, [r7, #28]
 8000630:	4293      	cmp	r3, r2
 8000632:	d3ab      	bcc.n	800058c <ssd1306_WriteChar+0x48>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <ssd1306_WriteChar+0x11c>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	68ba      	ldr	r2, [r7, #8]
 800063a:	2a00      	cmp	r2, #0
 800063c:	d005      	beq.n	800064a <ssd1306_WriteChar+0x106>
 800063e:	68b9      	ldr	r1, [r7, #8]
 8000640:	7bfa      	ldrb	r2, [r7, #15]
 8000642:	3a20      	subs	r2, #32
 8000644:	440a      	add	r2, r1
 8000646:	7812      	ldrb	r2, [r2, #0]
 8000648:	e000      	b.n	800064c <ssd1306_WriteChar+0x108>
 800064a:	783a      	ldrb	r2, [r7, #0]
 800064c:	4413      	add	r3, r2
 800064e:	b29a      	uxth	r2, r3
 8000650:	4b03      	ldr	r3, [pc, #12]	@ (8000660 <ssd1306_WriteChar+0x11c>)
 8000652:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8000654:	7bfb      	ldrb	r3, [r7, #15]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3724      	adds	r7, #36	@ 0x24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd90      	pop	{r4, r7, pc}
 800065e:	bf00      	nop
 8000660:	20000478 	.word	0x20000478

08000664 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char *str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af02      	add	r7, sp, #8
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	4638      	mov	r0, r7
 800066e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	while (*str) {
 8000672:	e013      	b.n	800069c <ssd1306_WriteString+0x38>
		if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	7818      	ldrb	r0, [r3, #0]
 8000678:	7e3b      	ldrb	r3, [r7, #24]
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	463b      	mov	r3, r7
 800067e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000680:	f7ff ff60 	bl	8000544 <ssd1306_WriteChar>
 8000684:	4603      	mov	r3, r0
 8000686:	461a      	mov	r2, r3
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	429a      	cmp	r2, r3
 800068e:	d002      	beq.n	8000696 <ssd1306_WriteString+0x32>
			// Char could not be written
			return *str;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	e008      	b.n	80006a8 <ssd1306_WriteString+0x44>
		}
		str++;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	3301      	adds	r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1e7      	bne.n	8000674 <ssd1306_WriteString+0x10>
	}

	// Everything ok
	return *str;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	781b      	ldrb	r3, [r3, #0]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	460a      	mov	r2, r1
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	4613      	mov	r3, r2
 80006be:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	4b05      	ldr	r3, [pc, #20]	@ (80006dc <ssd1306_SetCursor+0x2c>)
 80006c6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80006c8:	79bb      	ldrb	r3, [r7, #6]
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	4b03      	ldr	r3, [pc, #12]	@ (80006dc <ssd1306_SetCursor+0x2c>)
 80006ce:	805a      	strh	r2, [r3, #2]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	20000478 	.word	0x20000478

080006e0 <ssd1306_SetContrast>:
		}
	}
	return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
	const uint8_t kSetContrastControlRegister = 0x81;
 80006ea:	2381      	movs	r3, #129	@ 0x81
 80006ec:	73fb      	strb	r3, [r7, #15]
	ssd1306_WriteCommand(kSetContrastControlRegister);
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fdf9 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(value);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff fdf5 	bl	80002e8 <ssd1306_WriteCommand>
}
 80006fe:	bf00      	nop
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	if (on) {
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d005      	beq.n	8000724 <ssd1306_SetDisplayOn+0x1c>
		value = 0xAF;   // Display on
 8000718:	23af      	movs	r3, #175	@ 0xaf
 800071a:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 1;
 800071c:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <ssd1306_SetDisplayOn+0x38>)
 800071e:	2201      	movs	r2, #1
 8000720:	715a      	strb	r2, [r3, #5]
 8000722:	e004      	b.n	800072e <ssd1306_SetDisplayOn+0x26>
	} else {
		value = 0xAE;   // Display off
 8000724:	23ae      	movs	r3, #174	@ 0xae
 8000726:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 0;
 8000728:	4b05      	ldr	r3, [pc, #20]	@ (8000740 <ssd1306_SetDisplayOn+0x38>)
 800072a:	2200      	movs	r2, #0
 800072c:	715a      	strb	r2, [r3, #5]
	}
	ssd1306_WriteCommand(value);
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fdd9 	bl	80002e8 <ssd1306_WriteCommand>
}
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000478 	.word	0x20000478

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000748:	f000 fbdc 	bl	8000f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074c:	f000 f87a 	bl	8000844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000750:	f000 f9b8 	bl	8000ac4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000754:	f000 f8d4 	bl	8000900 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000758:	f000 f91a 	bl	8000990 <MX_TIM2_Init>
  MX_RTC_Init();
 800075c:	f000 f8fe 	bl	800095c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  oled_init();
 8000760:	f7ff fd66 	bl	8000230 <oled_init>
  HC_SR04_Init();
 8000764:	f7ff fcf2 	bl	800014c <HC_SR04_Init>


  distance_update_flag = 0;
 8000768:	4b2d      	ldr	r3, [pc, #180]	@ (8000820 <main+0xdc>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
    {
      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
  	  //trigger signal
  	  HC_SR04_Trigger(); // trigger the HC_SR04 chip
 800076e:	f7ff fcf3 	bl	8000158 <HC_SR04_Trigger>

  	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // activate the interrupt for the falling edge of the echo wave
 8000772:	2100      	movs	r1, #0
 8000774:	482b      	ldr	r0, [pc, #172]	@ (8000824 <main+0xe0>)
 8000776:	f002 ff77 	bl	8003668 <HAL_TIM_IC_Start_IT>

  	  //while(!distance_update_flag); // wait the measure to be done
  	  distance_update_flag = 0; // reset the flag for next run
 800077a:	4b29      	ldr	r3, [pc, #164]	@ (8000820 <main+0xdc>)
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]

  	  HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8000780:	2100      	movs	r1, #0
 8000782:	4828      	ldr	r0, [pc, #160]	@ (8000824 <main+0xe0>)
 8000784:	f003 f87c 	bl	8003880 <HAL_TIM_IC_Stop_IT>

  	  distance = HC_SR04_Distance_Calculate(pulse_us); //distance calculated in cm 325cm & 280cm
 8000788:	4b27      	ldr	r3, [pc, #156]	@ (8000828 <main+0xe4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fcf9 	bl	8000184 <HC_SR04_Distance_Calculate>
 8000792:	4603      	mov	r3, r0
 8000794:	461a      	mov	r2, r3
 8000796:	4b25      	ldr	r3, [pc, #148]	@ (800082c <main+0xe8>)
 8000798:	801a      	strh	r2, [r3, #0]

  	  HAL_RTC_GetTime(&hrtc,&this_type,RTC_FORMAT_BIN);
 800079a:	2200      	movs	r2, #0
 800079c:	4924      	ldr	r1, [pc, #144]	@ (8000830 <main+0xec>)
 800079e:	4825      	ldr	r0, [pc, #148]	@ (8000834 <main+0xf0>)
 80007a0:	f002 f9f6 	bl	8002b90 <HAL_RTC_GetTime>
  	  oled_display_wavelength_distance_rtc(pulse_us, distance, this_type.Seconds); // update oled
 80007a4:	4b20      	ldr	r3, [pc, #128]	@ (8000828 <main+0xe4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4618      	mov	r0, r3
 80007aa:	4b20      	ldr	r3, [pc, #128]	@ (800082c <main+0xe8>)
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	4619      	mov	r1, r3
 80007b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000830 <main+0xec>)
 80007b2:	789b      	ldrb	r3, [r3, #2]
 80007b4:	461a      	mov	r2, r3
 80007b6:	f7ff fd41 	bl	800023c <oled_display_wavelength_distance_rtc>

  	  // entering the sleep mode
  	  // 1.prepare to stop

  	  HAL_RTC_GetTime(&hrtc,&this_rtc_alarm.AlarmTime ,RTC_FORMAT_BIN);
 80007ba:	2200      	movs	r2, #0
 80007bc:	491e      	ldr	r1, [pc, #120]	@ (8000838 <main+0xf4>)
 80007be:	481d      	ldr	r0, [pc, #116]	@ (8000834 <main+0xf0>)
 80007c0:	f002 f9e6 	bl	8002b90 <HAL_RTC_GetTime>
  	  // this code can cause minutes update issue, but As I just want to wake up the system
  	  //every 2 seconds, if you want to keep track of the time, please be weary of it
  	  this_rtc_alarm.AlarmTime.Seconds =(this_rtc_alarm.AlarmTime.Seconds+2)%60;
 80007c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <main+0xf4>)
 80007c6:	789b      	ldrb	r3, [r3, #2]
 80007c8:	1c9a      	adds	r2, r3, #2
 80007ca:	4b1c      	ldr	r3, [pc, #112]	@ (800083c <main+0xf8>)
 80007cc:	fb83 1302 	smull	r1, r3, r3, r2
 80007d0:	4413      	add	r3, r2
 80007d2:	1159      	asrs	r1, r3, #5
 80007d4:	17d3      	asrs	r3, r2, #31
 80007d6:	1ac9      	subs	r1, r1, r3
 80007d8:	460b      	mov	r3, r1
 80007da:	011b      	lsls	r3, r3, #4
 80007dc:	1a5b      	subs	r3, r3, r1
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	1ad1      	subs	r1, r2, r3
 80007e2:	b2ca      	uxtb	r2, r1
 80007e4:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <main+0xf4>)
 80007e6:	709a      	strb	r2, [r3, #2]


  	  HAL_RTC_SetAlarm_IT(&hrtc,&this_rtc_alarm,RTC_FORMAT_BIN);
 80007e8:	2200      	movs	r2, #0
 80007ea:	4913      	ldr	r1, [pc, #76]	@ (8000838 <main+0xf4>)
 80007ec:	4811      	ldr	r0, [pc, #68]	@ (8000834 <main+0xf0>)
 80007ee:	f002 faa7 	bl	8002d40 <HAL_RTC_SetAlarm_IT>

  	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80007f2:	4b13      	ldr	r3, [pc, #76]	@ (8000840 <main+0xfc>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a12      	ldr	r2, [pc, #72]	@ (8000840 <main+0xfc>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	6013      	str	r3, [r2, #0]
  	  HAL_SuspendTick();
 80007fe:	f000 fc07 	bl	8001010 <HAL_SuspendTick>
  	  // 2. Enter STOP mode (system is off here until interrupt)
  	  HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000802:	2101      	movs	r1, #1
 8000804:	2000      	movs	r0, #0
 8000806:	f001 fb89 	bl	8001f1c <HAL_PWR_EnterSTOPMode>
  	  // 3.wake up the system and do the work
  	  SystemClock_Config();
 800080a:	f000 f81b 	bl	8000844 <SystemClock_Config>
  	  HAL_ResumeTick();
 800080e:	f000 fc0d 	bl	800102c <HAL_ResumeTick>
  	  HAL_RTC_DeactivateAlarm(&hrtc,RTC_ALARM_A);
 8000812:	2100      	movs	r1, #0
 8000814:	4807      	ldr	r0, [pc, #28]	@ (8000834 <main+0xf0>)
 8000816:	f002 fb4b 	bl	8002eb0 <HAL_RTC_DeactivateAlarm>
  	  HC_SR04_Trigger(); // trigger the HC_SR04 chip
 800081a:	bf00      	nop
 800081c:	e7a7      	b.n	800076e <main+0x2a>
 800081e:	bf00      	nop
 8000820:	20000534 	.word	0x20000534
 8000824:	200004e8 	.word	0x200004e8
 8000828:	20000530 	.word	0x20000530
 800082c:	20000536 	.word	0x20000536
 8000830:	20000538 	.word	0x20000538
 8000834:	200004d4 	.word	0x200004d4
 8000838:	2000053c 	.word	0x2000053c
 800083c:	88888889 	.word	0x88888889
 8000840:	40007000 	.word	0x40007000

08000844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b094      	sub	sp, #80	@ 0x50
 8000848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800084e:	2228      	movs	r2, #40	@ 0x28
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f003 ff18 	bl	8004688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000874:	2305      	movs	r3, #5
 8000876:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000878:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800087c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000882:	2301      	movs	r3, #1
 8000884:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000886:	2301      	movs	r3, #1
 8000888:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088a:	2302      	movs	r3, #2
 800088c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000892:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000894:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000898:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800089e:	4618      	mov	r0, r3
 80008a0:	f001 fb6e 	bl	8001f80 <HAL_RCC_OscConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80008aa:	f000 f96f 	bl	8000b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ae:	230f      	movs	r3, #15
 80008b0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b2:	2302      	movs	r3, #2
 80008b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2102      	movs	r1, #2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 fdda 	bl	8002484 <HAL_RCC_ClockConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008d6:	f000 f959 	bl	8000b8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008da:	2301      	movs	r3, #1
 80008dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80008de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008e2:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 ff5a 	bl	80027a0 <HAL_RCCEx_PeriphCLKConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80008f2:	f000 f94b 	bl	8000b8c <Error_Handler>
  }
}
 80008f6:	bf00      	nop
 80008f8:	3750      	adds	r7, #80	@ 0x50
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000904:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <MX_I2C1_Init+0x50>)
 8000906:	4a13      	ldr	r2, [pc, #76]	@ (8000954 <MX_I2C1_Init+0x54>)
 8000908:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800090a:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_I2C1_Init+0x50>)
 800090c:	4a12      	ldr	r2, [pc, #72]	@ (8000958 <MX_I2C1_Init+0x58>)
 800090e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000910:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MX_I2C1_Init+0x50>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_I2C1_Init+0x50>)
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <MX_I2C1_Init+0x50>)
 800091e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000922:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000924:	4b0a      	ldr	r3, [pc, #40]	@ (8000950 <MX_I2C1_Init+0x50>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800092a:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <MX_I2C1_Init+0x50>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000930:	4b07      	ldr	r3, [pc, #28]	@ (8000950 <MX_I2C1_Init+0x50>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000936:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <MX_I2C1_Init+0x50>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	@ (8000950 <MX_I2C1_Init+0x50>)
 800093e:	f000 fe2d 	bl	800159c <HAL_I2C_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000948:	f000 f920 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000480 	.word	0x20000480
 8000954:	40005400 	.word	0x40005400
 8000958:	000186a0 	.word	0x000186a0

0800095c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000960:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <MX_RTC_Init+0x2c>)
 8000962:	4a0a      	ldr	r2, [pc, #40]	@ (800098c <MX_RTC_Init+0x30>)
 8000964:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000966:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <MX_RTC_Init+0x2c>)
 8000968:	f04f 32ff 	mov.w	r2, #4294967295
 800096c:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 800096e:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <MX_RTC_Init+0x2c>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000974:	4804      	ldr	r0, [pc, #16]	@ (8000988 <MX_RTC_Init+0x2c>)
 8000976:	f002 f87f 	bl	8002a78 <HAL_RTC_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_RTC_Init+0x28>
  {
    Error_Handler();
 8000980:	f000 f904 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200004d4 	.word	0x200004d4
 800098c:	40002800 	.word	0x40002800

08000990 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b090      	sub	sp, #64	@ 0x40
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000996:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009ca:	4b3d      	ldr	r3, [pc, #244]	@ (8000ac0 <MX_TIM2_Init+0x130>)
 80009cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80009d2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ac0 <MX_TIM2_Init+0x130>)
 80009d4:	2247      	movs	r2, #71	@ 0x47
 80009d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d8:	4b39      	ldr	r3, [pc, #228]	@ (8000ac0 <MX_TIM2_Init+0x130>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80009de:	4b38      	ldr	r3, [pc, #224]	@ (8000ac0 <MX_TIM2_Init+0x130>)
 80009e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e6:	4b36      	ldr	r3, [pc, #216]	@ (8000ac0 <MX_TIM2_Init+0x130>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ec:	4b34      	ldr	r3, [pc, #208]	@ (8000ac0 <MX_TIM2_Init+0x130>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009f2:	4833      	ldr	r0, [pc, #204]	@ (8000ac0 <MX_TIM2_Init+0x130>)
 80009f4:	f002 fd90 	bl	8003518 <HAL_TIM_Base_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80009fe:	f000 f8c5 	bl	8000b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a06:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a08:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	482c      	ldr	r0, [pc, #176]	@ (8000ac0 <MX_TIM2_Init+0x130>)
 8000a10:	f003 f970 	bl	8003cf4 <HAL_TIM_ConfigClockSource>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a1a:	f000 f8b7 	bl	8000b8c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000a1e:	4828      	ldr	r0, [pc, #160]	@ (8000ac0 <MX_TIM2_Init+0x130>)
 8000a20:	f002 fdc9 	bl	80035b6 <HAL_TIM_IC_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000a2a:	f000 f8af 	bl	8000b8c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000a2e:	2304      	movs	r3, #4
 8000a30:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8000a32:	2360      	movs	r3, #96	@ 0x60
 8000a34:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	481e      	ldr	r0, [pc, #120]	@ (8000ac0 <MX_TIM2_Init+0x130>)
 8000a46:	f003 fa1c 	bl	8003e82 <HAL_TIM_SlaveConfigSynchro>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8000a50:	f000 f89c 	bl	8000b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	4817      	ldr	r0, [pc, #92]	@ (8000ac0 <MX_TIM2_Init+0x130>)
 8000a64:	f003 fd80 	bl	8004568 <HAL_TIMEx_MasterConfigSynchronization>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000a6e:	f000 f88d 	bl	8000b8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000a72:	2302      	movs	r3, #2
 8000a74:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000a76:	2302      	movs	r3, #2
 8000a78:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2200      	movs	r2, #0
 8000a86:	4619      	mov	r1, r3
 8000a88:	480d      	ldr	r0, [pc, #52]	@ (8000ac0 <MX_TIM2_Init+0x130>)
 8000a8a:	f003 f897 	bl	8003bbc <HAL_TIM_IC_ConfigChannel>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000a94:	f000 f87a 	bl	8000b8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4806      	ldr	r0, [pc, #24]	@ (8000ac0 <MX_TIM2_Init+0x130>)
 8000aa8:	f003 f888 	bl	8003bbc <HAL_TIM_IC_ConfigChannel>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM2_Init+0x126>
  {
    Error_Handler();
 8000ab2:	f000 f86b 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	3740      	adds	r7, #64	@ 0x40
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200004e8 	.word	0x200004e8

08000ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aca:	f107 0310 	add.w	r3, r7, #16
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b84 <MX_GPIO_Init+0xc0>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	4a29      	ldr	r2, [pc, #164]	@ (8000b84 <MX_GPIO_Init+0xc0>)
 8000ade:	f043 0310 	orr.w	r3, r3, #16
 8000ae2:	6193      	str	r3, [r2, #24]
 8000ae4:	4b27      	ldr	r3, [pc, #156]	@ (8000b84 <MX_GPIO_Init+0xc0>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	f003 0310 	and.w	r3, r3, #16
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af0:	4b24      	ldr	r3, [pc, #144]	@ (8000b84 <MX_GPIO_Init+0xc0>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	4a23      	ldr	r2, [pc, #140]	@ (8000b84 <MX_GPIO_Init+0xc0>)
 8000af6:	f043 0320 	orr.w	r3, r3, #32
 8000afa:	6193      	str	r3, [r2, #24]
 8000afc:	4b21      	ldr	r3, [pc, #132]	@ (8000b84 <MX_GPIO_Init+0xc0>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f003 0320 	and.w	r3, r3, #32
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b08:	4b1e      	ldr	r3, [pc, #120]	@ (8000b84 <MX_GPIO_Init+0xc0>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000b84 <MX_GPIO_Init+0xc0>)
 8000b0e:	f043 0304 	orr.w	r3, r3, #4
 8000b12:	6193      	str	r3, [r2, #24]
 8000b14:	4b1b      	ldr	r3, [pc, #108]	@ (8000b84 <MX_GPIO_Init+0xc0>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	f003 0304 	and.w	r3, r3, #4
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b20:	4b18      	ldr	r3, [pc, #96]	@ (8000b84 <MX_GPIO_Init+0xc0>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a17      	ldr	r2, [pc, #92]	@ (8000b84 <MX_GPIO_Init+0xc0>)
 8000b26:	f043 0308 	orr.w	r3, r3, #8
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <MX_GPIO_Init+0xc0>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f003 0308 	and.w	r3, r3, #8
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b3e:	4812      	ldr	r0, [pc, #72]	@ (8000b88 <MX_GPIO_Init+0xc4>)
 8000b40:	f000 fd14 	bl	800156c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0310 	add.w	r3, r7, #16
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480a      	ldr	r0, [pc, #40]	@ (8000b88 <MX_GPIO_Init+0xc4>)
 8000b5e:	f000 fb81 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	4619      	mov	r1, r3
 8000b76:	4804      	ldr	r0, [pc, #16]	@ (8000b88 <MX_GPIO_Init+0xc4>)
 8000b78:	f000 fb74 	bl	8001264 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b7c:	bf00      	nop
 8000b7e:	3720      	adds	r7, #32
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40021000 	.word	0x40021000
 8000b88:	40010800 	.word	0x40010800

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <Error_Handler+0x8>

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b9e:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <HAL_MspInit+0x5c>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	4a14      	ldr	r2, [pc, #80]	@ (8000bf4 <HAL_MspInit+0x5c>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6193      	str	r3, [r2, #24]
 8000baa:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <HAL_MspInit+0x5c>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf4 <HAL_MspInit+0x5c>)
 8000bb8:	69db      	ldr	r3, [r3, #28]
 8000bba:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf4 <HAL_MspInit+0x5c>)
 8000bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc0:	61d3      	str	r3, [r2, #28]
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <HAL_MspInit+0x5c>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bce:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <HAL_MspInit+0x60>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	4a04      	ldr	r2, [pc, #16]	@ (8000bf8 <HAL_MspInit+0x60>)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40010000 	.word	0x40010000

08000bfc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0310 	add.w	r3, r7, #16
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a15      	ldr	r2, [pc, #84]	@ (8000c6c <HAL_I2C_MspInit+0x70>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d123      	bne.n	8000c64 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1c:	4b14      	ldr	r3, [pc, #80]	@ (8000c70 <HAL_I2C_MspInit+0x74>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a13      	ldr	r2, [pc, #76]	@ (8000c70 <HAL_I2C_MspInit+0x74>)
 8000c22:	f043 0308 	orr.w	r3, r3, #8
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <HAL_I2C_MspInit+0x74>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0308 	and.w	r3, r3, #8
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c34:	23c0      	movs	r3, #192	@ 0xc0
 8000c36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c38:	2312      	movs	r3, #18
 8000c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	4619      	mov	r1, r3
 8000c46:	480b      	ldr	r0, [pc, #44]	@ (8000c74 <HAL_I2C_MspInit+0x78>)
 8000c48:	f000 fb0c 	bl	8001264 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c4c:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <HAL_I2C_MspInit+0x74>)
 8000c4e:	69db      	ldr	r3, [r3, #28]
 8000c50:	4a07      	ldr	r2, [pc, #28]	@ (8000c70 <HAL_I2C_MspInit+0x74>)
 8000c52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c56:	61d3      	str	r3, [r2, #28]
 8000c58:	4b05      	ldr	r3, [pc, #20]	@ (8000c70 <HAL_I2C_MspInit+0x74>)
 8000c5a:	69db      	ldr	r3, [r3, #28]
 8000c5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c64:	bf00      	nop
 8000c66:	3720      	adds	r7, #32
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40005400 	.word	0x40005400
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40010c00 	.word	0x40010c00

08000c78 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc4 <HAL_RTC_MspInit+0x4c>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d118      	bne.n	8000cbc <HAL_RTC_MspInit+0x44>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000c8a:	f001 f93b 	bl	8001f04 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <HAL_RTC_MspInit+0x50>)
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc8 <HAL_RTC_MspInit+0x50>)
 8000c94:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000c98:	61d3      	str	r3, [r2, #28]
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc8 <HAL_RTC_MspInit+0x50>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ca6:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <HAL_RTC_MspInit+0x54>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2029      	movs	r0, #41	@ 0x29
 8000cb2:	f000 faa0 	bl	80011f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000cb6:	2029      	movs	r0, #41	@ 0x29
 8000cb8:	f000 fab9 	bl	800122e <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000cbc:	bf00      	nop
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40002800 	.word	0x40002800
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	4242043c 	.word	0x4242043c

08000cd0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	@ 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cee:	d13d      	bne.n	8000d6c <HAL_TIM_Base_MspInit+0x9c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cf0:	4b20      	ldr	r3, [pc, #128]	@ (8000d74 <HAL_TIM_Base_MspInit+0xa4>)
 8000cf2:	69db      	ldr	r3, [r3, #28]
 8000cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8000d74 <HAL_TIM_Base_MspInit+0xa4>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	61d3      	str	r3, [r2, #28]
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d74 <HAL_TIM_Base_MspInit+0xa4>)
 8000cfe:	69db      	ldr	r3, [r3, #28]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d08:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <HAL_TIM_Base_MspInit+0xa4>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a19      	ldr	r2, [pc, #100]	@ (8000d74 <HAL_TIM_Base_MspInit+0xa4>)
 8000d0e:	f043 0308 	orr.w	r3, r3, #8
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b17      	ldr	r3, [pc, #92]	@ (8000d74 <HAL_TIM_Base_MspInit+0xa4>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0308 	and.w	r3, r3, #8
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d20:	2308      	movs	r3, #8
 8000d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	4619      	mov	r1, r3
 8000d32:	4811      	ldr	r0, [pc, #68]	@ (8000d78 <HAL_TIM_Base_MspInit+0xa8>)
 8000d34:	f000 fa96 	bl	8001264 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000d38:	4b10      	ldr	r3, [pc, #64]	@ (8000d7c <HAL_TIM_Base_MspInit+0xac>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d48:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d56:	4a09      	ldr	r2, [pc, #36]	@ (8000d7c <HAL_TIM_Base_MspInit+0xac>)
 8000d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d5a:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2100      	movs	r1, #0
 8000d60:	201c      	movs	r0, #28
 8000d62:	f000 fa48 	bl	80011f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d66:	201c      	movs	r0, #28
 8000d68:	f000 fa61 	bl	800122e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d6c:	bf00      	nop
 8000d6e:	3728      	adds	r7, #40	@ 0x28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010c00 	.word	0x40010c00
 8000d7c:	40010000 	.word	0x40010000

08000d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <NMI_Handler+0x4>

08000d88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <MemManage_Handler+0x4>

08000d98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd0:	f000 f8de 	bl	8000f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ddc:	4802      	ldr	r0, [pc, #8]	@ (8000de8 <TIM2_IRQHandler+0x10>)
 8000dde:	f002 fdfd 	bl	80039dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200004e8 	.word	0x200004e8

08000dec <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000df0:	4802      	ldr	r0, [pc, #8]	@ (8000dfc <RTC_Alarm_IRQHandler+0x10>)
 8000df2:	f002 f8bd 	bl	8002f70 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200004d4 	.word	0x200004d4

08000e00 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
    if(htim->Instance==TIM2 && htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1){
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e10:	d10d      	bne.n	8000e2e <HAL_TIM_IC_CaptureCallback+0x2e>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	7f1b      	ldrb	r3, [r3, #28]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d109      	bne.n	8000e2e <HAL_TIM_IC_CaptureCallback+0x2e>
        pulse_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f003 f873 	bl	8003f08 <HAL_TIM_ReadCapturedValue>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4a04      	ldr	r2, [pc, #16]	@ (8000e38 <HAL_TIM_IC_CaptureCallback+0x38>)
 8000e26:	6013      	str	r3, [r2, #0]
        distance_update_flag = 1;
 8000e28:	4b04      	ldr	r3, [pc, #16]	@ (8000e3c <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	701a      	strb	r2, [r3, #0]

    }
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000530 	.word	0x20000530
 8000e3c:	20000534 	.word	0x20000534

08000e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e48:	4a14      	ldr	r2, [pc, #80]	@ (8000e9c <_sbrk+0x5c>)
 8000e4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <_sbrk+0x60>)
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e54:	4b13      	ldr	r3, [pc, #76]	@ (8000ea4 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <_sbrk+0x64>)
 8000e5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ea8 <_sbrk+0x68>)
 8000e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e62:	4b10      	ldr	r3, [pc, #64]	@ (8000ea4 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d207      	bcs.n	8000e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e70:	f003 fc12 	bl	8004698 <__errno>
 8000e74:	4603      	mov	r3, r0
 8000e76:	220c      	movs	r2, #12
 8000e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7e:	e009      	b.n	8000e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e80:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <_sbrk+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e86:	4b07      	ldr	r3, [pc, #28]	@ (8000ea4 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ea4 <_sbrk+0x64>)
 8000e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e92:	68fb      	ldr	r3, [r7, #12]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20005000 	.word	0x20005000
 8000ea0:	00000400 	.word	0x00000400
 8000ea4:	20000544 	.word	0x20000544
 8000ea8:	20000698 	.word	0x20000698

08000eac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eb8:	f7ff fff8 	bl	8000eac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ebc:	480b      	ldr	r0, [pc, #44]	@ (8000eec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ebe:	490c      	ldr	r1, [pc, #48]	@ (8000ef0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ec0:	4a0c      	ldr	r2, [pc, #48]	@ (8000ef4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a09      	ldr	r2, [pc, #36]	@ (8000ef8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ed4:	4c09      	ldr	r4, [pc, #36]	@ (8000efc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f003 fbdf 	bl	80046a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ee6:	f7ff fc2d 	bl	8000744 <main>
  bx lr
 8000eea:	4770      	bx	lr
  ldr r0, =_sdata
 8000eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ef4:	08005670 	.word	0x08005670
  ldr r2, =_sbss
 8000ef8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000efc:	20000694 	.word	0x20000694

08000f00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f00:	e7fe      	b.n	8000f00 <ADC1_2_IRQHandler>
	...

08000f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f08:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <HAL_Init+0x28>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a07      	ldr	r2, [pc, #28]	@ (8000f2c <HAL_Init+0x28>)
 8000f0e:	f043 0310 	orr.w	r3, r3, #16
 8000f12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f14:	2003      	movs	r0, #3
 8000f16:	f000 f963 	bl	80011e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1a:	200f      	movs	r0, #15
 8000f1c:	f000 f808 	bl	8000f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f20:	f7ff fe3a 	bl	8000b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40022000 	.word	0x40022000

08000f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f38:	4b12      	ldr	r3, [pc, #72]	@ (8000f84 <HAL_InitTick+0x54>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b12      	ldr	r3, [pc, #72]	@ (8000f88 <HAL_InitTick+0x58>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f97b 	bl	800124a <HAL_SYSTICK_Config>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00e      	b.n	8000f7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b0f      	cmp	r3, #15
 8000f62:	d80a      	bhi.n	8000f7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f64:	2200      	movs	r2, #0
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	f000 f943 	bl	80011f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f70:	4a06      	ldr	r2, [pc, #24]	@ (8000f8c <HAL_InitTick+0x5c>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e000      	b.n	8000f7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000000 	.word	0x20000000
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000004 	.word	0x20000004

08000f90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f94:	4b05      	ldr	r3, [pc, #20]	@ (8000fac <HAL_IncTick+0x1c>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <HAL_IncTick+0x20>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a03      	ldr	r2, [pc, #12]	@ (8000fb0 <HAL_IncTick+0x20>)
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	20000548 	.word	0x20000548

08000fb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b02      	ldr	r3, [pc, #8]	@ (8000fc4 <HAL_GetTick+0x10>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	20000548 	.word	0x20000548

08000fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd0:	f7ff fff0 	bl	8000fb4 <HAL_GetTick>
 8000fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe0:	d005      	beq.n	8000fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <HAL_Delay+0x44>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4413      	add	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fee:	bf00      	nop
 8000ff0:	f7ff ffe0 	bl	8000fb4 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d8f7      	bhi.n	8000ff0 <HAL_Delay+0x28>
  {
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000008 	.word	0x20000008

08001010 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001014:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <HAL_SuspendTick+0x18>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a03      	ldr	r2, [pc, #12]	@ (8001028 <HAL_SuspendTick+0x18>)
 800101a:	f023 0302 	bic.w	r3, r3, #2
 800101e:	6013      	str	r3, [r2, #0]
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr
 8001028:	e000e010 	.word	0xe000e010

0800102c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001030:	4b04      	ldr	r3, [pc, #16]	@ (8001044 <HAL_ResumeTick+0x18>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a03      	ldr	r2, [pc, #12]	@ (8001044 <HAL_ResumeTick+0x18>)
 8001036:	f043 0302 	orr.w	r3, r3, #2
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	e000e010 	.word	0xe000e010

08001048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001064:	4013      	ands	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001070:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001074:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	@ (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001094:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	f003 0307 	and.w	r3, r3, #7
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	db0b      	blt.n	80010d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f003 021f 	and.w	r2, r3, #31
 80010c4:	4906      	ldr	r1, [pc, #24]	@ (80010e0 <__NVIC_EnableIRQ+0x34>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	095b      	lsrs	r3, r3, #5
 80010cc:	2001      	movs	r0, #1
 80010ce:	fa00 f202 	lsl.w	r2, r0, r2
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	e000e100 	.word	0xe000e100

080010e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	db0a      	blt.n	800110e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	490c      	ldr	r1, [pc, #48]	@ (8001130 <__NVIC_SetPriority+0x4c>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	0112      	lsls	r2, r2, #4
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	440b      	add	r3, r1
 8001108:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800110c:	e00a      	b.n	8001124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4908      	ldr	r1, [pc, #32]	@ (8001134 <__NVIC_SetPriority+0x50>)
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	3b04      	subs	r3, #4
 800111c:	0112      	lsls	r2, r2, #4
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	440b      	add	r3, r1
 8001122:	761a      	strb	r2, [r3, #24]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	@ 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f1c3 0307 	rsb	r3, r3, #7
 8001152:	2b04      	cmp	r3, #4
 8001154:	bf28      	it	cs
 8001156:	2304      	movcs	r3, #4
 8001158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3304      	adds	r3, #4
 800115e:	2b06      	cmp	r3, #6
 8001160:	d902      	bls.n	8001168 <NVIC_EncodePriority+0x30>
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3b03      	subs	r3, #3
 8001166:	e000      	b.n	800116a <NVIC_EncodePriority+0x32>
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	f04f 32ff 	mov.w	r2, #4294967295
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	401a      	ands	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001180:	f04f 31ff 	mov.w	r1, #4294967295
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	43d9      	mvns	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	4313      	orrs	r3, r2
         );
}
 8001192:	4618      	mov	r0, r3
 8001194:	3724      	adds	r7, #36	@ 0x24
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011ac:	d301      	bcc.n	80011b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00f      	b.n	80011d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b2:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <SysTick_Config+0x40>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ba:	210f      	movs	r1, #15
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295
 80011c0:	f7ff ff90 	bl	80010e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c4:	4b05      	ldr	r3, [pc, #20]	@ (80011dc <SysTick_Config+0x40>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ca:	4b04      	ldr	r3, [pc, #16]	@ (80011dc <SysTick_Config+0x40>)
 80011cc:	2207      	movs	r2, #7
 80011ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	e000e010 	.word	0xe000e010

080011e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff2d 	bl	8001048 <__NVIC_SetPriorityGrouping>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
 8001202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001208:	f7ff ff42 	bl	8001090 <__NVIC_GetPriorityGrouping>
 800120c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	68b9      	ldr	r1, [r7, #8]
 8001212:	6978      	ldr	r0, [r7, #20]
 8001214:	f7ff ff90 	bl	8001138 <NVIC_EncodePriority>
 8001218:	4602      	mov	r2, r0
 800121a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff5f 	bl	80010e4 <__NVIC_SetPriority>
}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	4603      	mov	r3, r0
 8001236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff35 	bl	80010ac <__NVIC_EnableIRQ>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ffa2 	bl	800119c <SysTick_Config>
 8001258:	4603      	mov	r3, r0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001264:	b480      	push	{r7}
 8001266:	b08b      	sub	sp, #44	@ 0x2c
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001276:	e169      	b.n	800154c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001278:	2201      	movs	r2, #1
 800127a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	69fa      	ldr	r2, [r7, #28]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	429a      	cmp	r2, r3
 8001292:	f040 8158 	bne.w	8001546 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	4a9a      	ldr	r2, [pc, #616]	@ (8001504 <HAL_GPIO_Init+0x2a0>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d05e      	beq.n	800135e <HAL_GPIO_Init+0xfa>
 80012a0:	4a98      	ldr	r2, [pc, #608]	@ (8001504 <HAL_GPIO_Init+0x2a0>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d875      	bhi.n	8001392 <HAL_GPIO_Init+0x12e>
 80012a6:	4a98      	ldr	r2, [pc, #608]	@ (8001508 <HAL_GPIO_Init+0x2a4>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d058      	beq.n	800135e <HAL_GPIO_Init+0xfa>
 80012ac:	4a96      	ldr	r2, [pc, #600]	@ (8001508 <HAL_GPIO_Init+0x2a4>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d86f      	bhi.n	8001392 <HAL_GPIO_Init+0x12e>
 80012b2:	4a96      	ldr	r2, [pc, #600]	@ (800150c <HAL_GPIO_Init+0x2a8>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d052      	beq.n	800135e <HAL_GPIO_Init+0xfa>
 80012b8:	4a94      	ldr	r2, [pc, #592]	@ (800150c <HAL_GPIO_Init+0x2a8>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d869      	bhi.n	8001392 <HAL_GPIO_Init+0x12e>
 80012be:	4a94      	ldr	r2, [pc, #592]	@ (8001510 <HAL_GPIO_Init+0x2ac>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d04c      	beq.n	800135e <HAL_GPIO_Init+0xfa>
 80012c4:	4a92      	ldr	r2, [pc, #584]	@ (8001510 <HAL_GPIO_Init+0x2ac>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d863      	bhi.n	8001392 <HAL_GPIO_Init+0x12e>
 80012ca:	4a92      	ldr	r2, [pc, #584]	@ (8001514 <HAL_GPIO_Init+0x2b0>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d046      	beq.n	800135e <HAL_GPIO_Init+0xfa>
 80012d0:	4a90      	ldr	r2, [pc, #576]	@ (8001514 <HAL_GPIO_Init+0x2b0>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d85d      	bhi.n	8001392 <HAL_GPIO_Init+0x12e>
 80012d6:	2b12      	cmp	r3, #18
 80012d8:	d82a      	bhi.n	8001330 <HAL_GPIO_Init+0xcc>
 80012da:	2b12      	cmp	r3, #18
 80012dc:	d859      	bhi.n	8001392 <HAL_GPIO_Init+0x12e>
 80012de:	a201      	add	r2, pc, #4	@ (adr r2, 80012e4 <HAL_GPIO_Init+0x80>)
 80012e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e4:	0800135f 	.word	0x0800135f
 80012e8:	08001339 	.word	0x08001339
 80012ec:	0800134b 	.word	0x0800134b
 80012f0:	0800138d 	.word	0x0800138d
 80012f4:	08001393 	.word	0x08001393
 80012f8:	08001393 	.word	0x08001393
 80012fc:	08001393 	.word	0x08001393
 8001300:	08001393 	.word	0x08001393
 8001304:	08001393 	.word	0x08001393
 8001308:	08001393 	.word	0x08001393
 800130c:	08001393 	.word	0x08001393
 8001310:	08001393 	.word	0x08001393
 8001314:	08001393 	.word	0x08001393
 8001318:	08001393 	.word	0x08001393
 800131c:	08001393 	.word	0x08001393
 8001320:	08001393 	.word	0x08001393
 8001324:	08001393 	.word	0x08001393
 8001328:	08001341 	.word	0x08001341
 800132c:	08001355 	.word	0x08001355
 8001330:	4a79      	ldr	r2, [pc, #484]	@ (8001518 <HAL_GPIO_Init+0x2b4>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d013      	beq.n	800135e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001336:	e02c      	b.n	8001392 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	623b      	str	r3, [r7, #32]
          break;
 800133e:	e029      	b.n	8001394 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	3304      	adds	r3, #4
 8001346:	623b      	str	r3, [r7, #32]
          break;
 8001348:	e024      	b.n	8001394 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	3308      	adds	r3, #8
 8001350:	623b      	str	r3, [r7, #32]
          break;
 8001352:	e01f      	b.n	8001394 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	330c      	adds	r3, #12
 800135a:	623b      	str	r3, [r7, #32]
          break;
 800135c:	e01a      	b.n	8001394 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d102      	bne.n	800136c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001366:	2304      	movs	r3, #4
 8001368:	623b      	str	r3, [r7, #32]
          break;
 800136a:	e013      	b.n	8001394 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d105      	bne.n	8001380 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001374:	2308      	movs	r3, #8
 8001376:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	69fa      	ldr	r2, [r7, #28]
 800137c:	611a      	str	r2, [r3, #16]
          break;
 800137e:	e009      	b.n	8001394 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001380:	2308      	movs	r3, #8
 8001382:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69fa      	ldr	r2, [r7, #28]
 8001388:	615a      	str	r2, [r3, #20]
          break;
 800138a:	e003      	b.n	8001394 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800138c:	2300      	movs	r3, #0
 800138e:	623b      	str	r3, [r7, #32]
          break;
 8001390:	e000      	b.n	8001394 <HAL_GPIO_Init+0x130>
          break;
 8001392:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	2bff      	cmp	r3, #255	@ 0xff
 8001398:	d801      	bhi.n	800139e <HAL_GPIO_Init+0x13a>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	e001      	b.n	80013a2 <HAL_GPIO_Init+0x13e>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3304      	adds	r3, #4
 80013a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	2bff      	cmp	r3, #255	@ 0xff
 80013a8:	d802      	bhi.n	80013b0 <HAL_GPIO_Init+0x14c>
 80013aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	e002      	b.n	80013b6 <HAL_GPIO_Init+0x152>
 80013b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b2:	3b08      	subs	r3, #8
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	210f      	movs	r1, #15
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	fa01 f303 	lsl.w	r3, r1, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	401a      	ands	r2, r3
 80013c8:	6a39      	ldr	r1, [r7, #32]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	fa01 f303 	lsl.w	r3, r1, r3
 80013d0:	431a      	orrs	r2, r3
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 80b1 	beq.w	8001546 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013e4:	4b4d      	ldr	r3, [pc, #308]	@ (800151c <HAL_GPIO_Init+0x2b8>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a4c      	ldr	r2, [pc, #304]	@ (800151c <HAL_GPIO_Init+0x2b8>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b4a      	ldr	r3, [pc, #296]	@ (800151c <HAL_GPIO_Init+0x2b8>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013fc:	4a48      	ldr	r2, [pc, #288]	@ (8001520 <HAL_GPIO_Init+0x2bc>)
 80013fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001400:	089b      	lsrs	r3, r3, #2
 8001402:	3302      	adds	r3, #2
 8001404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001408:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800140a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	220f      	movs	r2, #15
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	4013      	ands	r3, r2
 800141e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a40      	ldr	r2, [pc, #256]	@ (8001524 <HAL_GPIO_Init+0x2c0>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d013      	beq.n	8001450 <HAL_GPIO_Init+0x1ec>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a3f      	ldr	r2, [pc, #252]	@ (8001528 <HAL_GPIO_Init+0x2c4>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d00d      	beq.n	800144c <HAL_GPIO_Init+0x1e8>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a3e      	ldr	r2, [pc, #248]	@ (800152c <HAL_GPIO_Init+0x2c8>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d007      	beq.n	8001448 <HAL_GPIO_Init+0x1e4>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a3d      	ldr	r2, [pc, #244]	@ (8001530 <HAL_GPIO_Init+0x2cc>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d101      	bne.n	8001444 <HAL_GPIO_Init+0x1e0>
 8001440:	2303      	movs	r3, #3
 8001442:	e006      	b.n	8001452 <HAL_GPIO_Init+0x1ee>
 8001444:	2304      	movs	r3, #4
 8001446:	e004      	b.n	8001452 <HAL_GPIO_Init+0x1ee>
 8001448:	2302      	movs	r3, #2
 800144a:	e002      	b.n	8001452 <HAL_GPIO_Init+0x1ee>
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <HAL_GPIO_Init+0x1ee>
 8001450:	2300      	movs	r3, #0
 8001452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001454:	f002 0203 	and.w	r2, r2, #3
 8001458:	0092      	lsls	r2, r2, #2
 800145a:	4093      	lsls	r3, r2
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	4313      	orrs	r3, r2
 8001460:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001462:	492f      	ldr	r1, [pc, #188]	@ (8001520 <HAL_GPIO_Init+0x2bc>)
 8001464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001466:	089b      	lsrs	r3, r3, #2
 8001468:	3302      	adds	r3, #2
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d006      	beq.n	800148a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800147c:	4b2d      	ldr	r3, [pc, #180]	@ (8001534 <HAL_GPIO_Init+0x2d0>)
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	492c      	ldr	r1, [pc, #176]	@ (8001534 <HAL_GPIO_Init+0x2d0>)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	4313      	orrs	r3, r2
 8001486:	608b      	str	r3, [r1, #8]
 8001488:	e006      	b.n	8001498 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800148a:	4b2a      	ldr	r3, [pc, #168]	@ (8001534 <HAL_GPIO_Init+0x2d0>)
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	43db      	mvns	r3, r3
 8001492:	4928      	ldr	r1, [pc, #160]	@ (8001534 <HAL_GPIO_Init+0x2d0>)
 8001494:	4013      	ands	r3, r2
 8001496:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d006      	beq.n	80014b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014a4:	4b23      	ldr	r3, [pc, #140]	@ (8001534 <HAL_GPIO_Init+0x2d0>)
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	4922      	ldr	r1, [pc, #136]	@ (8001534 <HAL_GPIO_Init+0x2d0>)
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	60cb      	str	r3, [r1, #12]
 80014b0:	e006      	b.n	80014c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014b2:	4b20      	ldr	r3, [pc, #128]	@ (8001534 <HAL_GPIO_Init+0x2d0>)
 80014b4:	68da      	ldr	r2, [r3, #12]
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	491e      	ldr	r1, [pc, #120]	@ (8001534 <HAL_GPIO_Init+0x2d0>)
 80014bc:	4013      	ands	r3, r2
 80014be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014cc:	4b19      	ldr	r3, [pc, #100]	@ (8001534 <HAL_GPIO_Init+0x2d0>)
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	4918      	ldr	r1, [pc, #96]	@ (8001534 <HAL_GPIO_Init+0x2d0>)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	604b      	str	r3, [r1, #4]
 80014d8:	e006      	b.n	80014e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014da:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <HAL_GPIO_Init+0x2d0>)
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	4914      	ldr	r1, [pc, #80]	@ (8001534 <HAL_GPIO_Init+0x2d0>)
 80014e4:	4013      	ands	r3, r2
 80014e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d021      	beq.n	8001538 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <HAL_GPIO_Init+0x2d0>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	490e      	ldr	r1, [pc, #56]	@ (8001534 <HAL_GPIO_Init+0x2d0>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	600b      	str	r3, [r1, #0]
 8001500:	e021      	b.n	8001546 <HAL_GPIO_Init+0x2e2>
 8001502:	bf00      	nop
 8001504:	10320000 	.word	0x10320000
 8001508:	10310000 	.word	0x10310000
 800150c:	10220000 	.word	0x10220000
 8001510:	10210000 	.word	0x10210000
 8001514:	10120000 	.word	0x10120000
 8001518:	10110000 	.word	0x10110000
 800151c:	40021000 	.word	0x40021000
 8001520:	40010000 	.word	0x40010000
 8001524:	40010800 	.word	0x40010800
 8001528:	40010c00 	.word	0x40010c00
 800152c:	40011000 	.word	0x40011000
 8001530:	40011400 	.word	0x40011400
 8001534:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001538:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <HAL_GPIO_Init+0x304>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	43db      	mvns	r3, r3
 8001540:	4909      	ldr	r1, [pc, #36]	@ (8001568 <HAL_GPIO_Init+0x304>)
 8001542:	4013      	ands	r3, r2
 8001544:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001548:	3301      	adds	r3, #1
 800154a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001552:	fa22 f303 	lsr.w	r3, r2, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	f47f ae8e 	bne.w	8001278 <HAL_GPIO_Init+0x14>
  }
}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	372c      	adds	r7, #44	@ 0x2c
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	40010400 	.word	0x40010400

0800156c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	807b      	strh	r3, [r7, #2]
 8001578:	4613      	mov	r3, r2
 800157a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800157c:	787b      	ldrb	r3, [r7, #1]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001582:	887a      	ldrh	r2, [r7, #2]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001588:	e003      	b.n	8001592 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800158a:	887b      	ldrh	r3, [r7, #2]
 800158c:	041a      	lsls	r2, r3, #16
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	611a      	str	r2, [r3, #16]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e12b      	b.n	8001806 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d106      	bne.n	80015c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff fb1a 	bl	8000bfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2224      	movs	r2, #36	@ 0x24
 80015cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0201 	bic.w	r2, r2, #1
 80015de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001600:	f001 f888 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 8001604:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	4a81      	ldr	r2, [pc, #516]	@ (8001810 <HAL_I2C_Init+0x274>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d807      	bhi.n	8001620 <HAL_I2C_Init+0x84>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4a80      	ldr	r2, [pc, #512]	@ (8001814 <HAL_I2C_Init+0x278>)
 8001614:	4293      	cmp	r3, r2
 8001616:	bf94      	ite	ls
 8001618:	2301      	movls	r3, #1
 800161a:	2300      	movhi	r3, #0
 800161c:	b2db      	uxtb	r3, r3
 800161e:	e006      	b.n	800162e <HAL_I2C_Init+0x92>
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4a7d      	ldr	r2, [pc, #500]	@ (8001818 <HAL_I2C_Init+0x27c>)
 8001624:	4293      	cmp	r3, r2
 8001626:	bf94      	ite	ls
 8001628:	2301      	movls	r3, #1
 800162a:	2300      	movhi	r3, #0
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e0e7      	b.n	8001806 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4a78      	ldr	r2, [pc, #480]	@ (800181c <HAL_I2C_Init+0x280>)
 800163a:	fba2 2303 	umull	r2, r3, r2, r3
 800163e:	0c9b      	lsrs	r3, r3, #18
 8001640:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	430a      	orrs	r2, r1
 8001654:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	4a6a      	ldr	r2, [pc, #424]	@ (8001810 <HAL_I2C_Init+0x274>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d802      	bhi.n	8001670 <HAL_I2C_Init+0xd4>
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	3301      	adds	r3, #1
 800166e:	e009      	b.n	8001684 <HAL_I2C_Init+0xe8>
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001676:	fb02 f303 	mul.w	r3, r2, r3
 800167a:	4a69      	ldr	r2, [pc, #420]	@ (8001820 <HAL_I2C_Init+0x284>)
 800167c:	fba2 2303 	umull	r2, r3, r2, r3
 8001680:	099b      	lsrs	r3, r3, #6
 8001682:	3301      	adds	r3, #1
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	430b      	orrs	r3, r1
 800168a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001696:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	495c      	ldr	r1, [pc, #368]	@ (8001810 <HAL_I2C_Init+0x274>)
 80016a0:	428b      	cmp	r3, r1
 80016a2:	d819      	bhi.n	80016d8 <HAL_I2C_Init+0x13c>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	1e59      	subs	r1, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80016b2:	1c59      	adds	r1, r3, #1
 80016b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80016b8:	400b      	ands	r3, r1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00a      	beq.n	80016d4 <HAL_I2C_Init+0x138>
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	1e59      	subs	r1, r3, #1
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80016cc:	3301      	adds	r3, #1
 80016ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d2:	e051      	b.n	8001778 <HAL_I2C_Init+0x1dc>
 80016d4:	2304      	movs	r3, #4
 80016d6:	e04f      	b.n	8001778 <HAL_I2C_Init+0x1dc>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d111      	bne.n	8001704 <HAL_I2C_Init+0x168>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1e58      	subs	r0, r3, #1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6859      	ldr	r1, [r3, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	440b      	add	r3, r1
 80016ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80016f2:	3301      	adds	r3, #1
 80016f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	bf0c      	ite	eq
 80016fc:	2301      	moveq	r3, #1
 80016fe:	2300      	movne	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	e012      	b.n	800172a <HAL_I2C_Init+0x18e>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	1e58      	subs	r0, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6859      	ldr	r1, [r3, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	0099      	lsls	r1, r3, #2
 8001714:	440b      	add	r3, r1
 8001716:	fbb0 f3f3 	udiv	r3, r0, r3
 800171a:	3301      	adds	r3, #1
 800171c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001720:	2b00      	cmp	r3, #0
 8001722:	bf0c      	ite	eq
 8001724:	2301      	moveq	r3, #1
 8001726:	2300      	movne	r3, #0
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_I2C_Init+0x196>
 800172e:	2301      	movs	r3, #1
 8001730:	e022      	b.n	8001778 <HAL_I2C_Init+0x1dc>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10e      	bne.n	8001758 <HAL_I2C_Init+0x1bc>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1e58      	subs	r0, r3, #1
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6859      	ldr	r1, [r3, #4]
 8001742:	460b      	mov	r3, r1
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	440b      	add	r3, r1
 8001748:	fbb0 f3f3 	udiv	r3, r0, r3
 800174c:	3301      	adds	r3, #1
 800174e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001756:	e00f      	b.n	8001778 <HAL_I2C_Init+0x1dc>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1e58      	subs	r0, r3, #1
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6859      	ldr	r1, [r3, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	0099      	lsls	r1, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	fbb0 f3f3 	udiv	r3, r0, r3
 800176e:	3301      	adds	r3, #1
 8001770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001774:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	6809      	ldr	r1, [r1, #0]
 800177c:	4313      	orrs	r3, r2
 800177e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69da      	ldr	r2, [r3, #28]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80017a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6911      	ldr	r1, [r2, #16]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68d2      	ldr	r2, [r2, #12]
 80017b2:	4311      	orrs	r1, r2
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	430b      	orrs	r3, r1
 80017ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695a      	ldr	r2, [r3, #20]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0201 	orr.w	r2, r2, #1
 80017e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2220      	movs	r2, #32
 80017f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	000186a0 	.word	0x000186a0
 8001814:	001e847f 	.word	0x001e847f
 8001818:	003d08ff 	.word	0x003d08ff
 800181c:	431bde83 	.word	0x431bde83
 8001820:	10624dd3 	.word	0x10624dd3

08001824 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af02      	add	r7, sp, #8
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	4608      	mov	r0, r1
 800182e:	4611      	mov	r1, r2
 8001830:	461a      	mov	r2, r3
 8001832:	4603      	mov	r3, r0
 8001834:	817b      	strh	r3, [r7, #10]
 8001836:	460b      	mov	r3, r1
 8001838:	813b      	strh	r3, [r7, #8]
 800183a:	4613      	mov	r3, r2
 800183c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800183e:	f7ff fbb9 	bl	8000fb4 <HAL_GetTick>
 8001842:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b20      	cmp	r3, #32
 800184e:	f040 80d9 	bne.w	8001a04 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	2319      	movs	r3, #25
 8001858:	2201      	movs	r2, #1
 800185a:	496d      	ldr	r1, [pc, #436]	@ (8001a10 <HAL_I2C_Mem_Write+0x1ec>)
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f000 f971 	bl	8001b44 <I2C_WaitOnFlagUntilTimeout>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001868:	2302      	movs	r3, #2
 800186a:	e0cc      	b.n	8001a06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001872:	2b01      	cmp	r3, #1
 8001874:	d101      	bne.n	800187a <HAL_I2C_Mem_Write+0x56>
 8001876:	2302      	movs	r3, #2
 8001878:	e0c5      	b.n	8001a06 <HAL_I2C_Mem_Write+0x1e2>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b01      	cmp	r3, #1
 800188e:	d007      	beq.n	80018a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f042 0201 	orr.w	r2, r2, #1
 800189e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2221      	movs	r2, #33	@ 0x21
 80018b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2240      	movs	r2, #64	@ 0x40
 80018bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6a3a      	ldr	r2, [r7, #32]
 80018ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80018d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4a4d      	ldr	r2, [pc, #308]	@ (8001a14 <HAL_I2C_Mem_Write+0x1f0>)
 80018e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018e2:	88f8      	ldrh	r0, [r7, #6]
 80018e4:	893a      	ldrh	r2, [r7, #8]
 80018e6:	8979      	ldrh	r1, [r7, #10]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	4603      	mov	r3, r0
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 f890 	bl	8001a18 <I2C_RequestMemoryWrite>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d052      	beq.n	80019a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e081      	b.n	8001a06 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f000 fa36 	bl	8001d78 <I2C_WaitOnTXEFlagUntilTimeout>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00d      	beq.n	800192e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	2b04      	cmp	r3, #4
 8001918:	d107      	bne.n	800192a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001928:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e06b      	b.n	8001a06 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001932:	781a      	ldrb	r2, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001948:	3b01      	subs	r3, #1
 800194a:	b29a      	uxth	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001954:	b29b      	uxth	r3, r3
 8001956:	3b01      	subs	r3, #1
 8001958:	b29a      	uxth	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b04      	cmp	r3, #4
 800196a:	d11b      	bne.n	80019a4 <HAL_I2C_Mem_Write+0x180>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001970:	2b00      	cmp	r3, #0
 8001972:	d017      	beq.n	80019a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001978:	781a      	ldrb	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001984:	1c5a      	adds	r2, r3, #1
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800198e:	3b01      	subs	r3, #1
 8001990:	b29a      	uxth	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800199a:	b29b      	uxth	r3, r3
 800199c:	3b01      	subs	r3, #1
 800199e:	b29a      	uxth	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1aa      	bne.n	8001902 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f000 fa29 	bl	8001e08 <I2C_WaitOnBTFFlagUntilTimeout>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d00d      	beq.n	80019d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d107      	bne.n	80019d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e016      	b.n	8001a06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2220      	movs	r2, #32
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	e000      	b.n	8001a06 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001a04:	2302      	movs	r3, #2
  }
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	00100002 	.word	0x00100002
 8001a14:	ffff0000 	.word	0xffff0000

08001a18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af02      	add	r7, sp, #8
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	4608      	mov	r0, r1
 8001a22:	4611      	mov	r1, r2
 8001a24:	461a      	mov	r2, r3
 8001a26:	4603      	mov	r3, r0
 8001a28:	817b      	strh	r3, [r7, #10]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	813b      	strh	r3, [r7, #8]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f000 f878 	bl	8001b44 <I2C_WaitOnFlagUntilTimeout>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00d      	beq.n	8001a76 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a68:	d103      	bne.n	8001a72 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a70:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e05f      	b.n	8001b36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a76:	897b      	ldrh	r3, [r7, #10]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001a84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a88:	6a3a      	ldr	r2, [r7, #32]
 8001a8a:	492d      	ldr	r1, [pc, #180]	@ (8001b40 <I2C_RequestMemoryWrite+0x128>)
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f000 f8d3 	bl	8001c38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e04c      	b.n	8001b36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ab4:	6a39      	ldr	r1, [r7, #32]
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f000 f95e 	bl	8001d78 <I2C_WaitOnTXEFlagUntilTimeout>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00d      	beq.n	8001ade <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d107      	bne.n	8001ada <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ad8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e02b      	b.n	8001b36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d105      	bne.n	8001af0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ae4:	893b      	ldrh	r3, [r7, #8]
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	611a      	str	r2, [r3, #16]
 8001aee:	e021      	b.n	8001b34 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001af0:	893b      	ldrh	r3, [r7, #8]
 8001af2:	0a1b      	lsrs	r3, r3, #8
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b00:	6a39      	ldr	r1, [r7, #32]
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 f938 	bl	8001d78 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00d      	beq.n	8001b2a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d107      	bne.n	8001b26 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e005      	b.n	8001b36 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b2a:	893b      	ldrh	r3, [r7, #8]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	00010002 	.word	0x00010002

08001b44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	4613      	mov	r3, r2
 8001b52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b54:	e048      	b.n	8001be8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5c:	d044      	beq.n	8001be8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b5e:	f7ff fa29 	bl	8000fb4 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d302      	bcc.n	8001b74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d139      	bne.n	8001be8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	0c1b      	lsrs	r3, r3, #16
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d10d      	bne.n	8001b9a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	43da      	mvns	r2, r3
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	bf0c      	ite	eq
 8001b90:	2301      	moveq	r3, #1
 8001b92:	2300      	movne	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	461a      	mov	r2, r3
 8001b98:	e00c      	b.n	8001bb4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	43da      	mvns	r2, r3
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	bf0c      	ite	eq
 8001bac:	2301      	moveq	r3, #1
 8001bae:	2300      	movne	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d116      	bne.n	8001be8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd4:	f043 0220 	orr.w	r2, r3, #32
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e023      	b.n	8001c30 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	0c1b      	lsrs	r3, r3, #16
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d10d      	bne.n	8001c0e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	43da      	mvns	r2, r3
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	bf0c      	ite	eq
 8001c04:	2301      	moveq	r3, #1
 8001c06:	2300      	movne	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	e00c      	b.n	8001c28 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	43da      	mvns	r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bf0c      	ite	eq
 8001c20:	2301      	moveq	r3, #1
 8001c22:	2300      	movne	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d093      	beq.n	8001b56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c46:	e071      	b.n	8001d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c56:	d123      	bne.n	8001ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c66:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8c:	f043 0204 	orr.w	r2, r3, #4
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e067      	b.n	8001d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca6:	d041      	beq.n	8001d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ca8:	f7ff f984 	bl	8000fb4 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d302      	bcc.n	8001cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d136      	bne.n	8001d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	0c1b      	lsrs	r3, r3, #16
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d10c      	bne.n	8001ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	bf14      	ite	ne
 8001cda:	2301      	movne	r3, #1
 8001cdc:	2300      	moveq	r3, #0
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	e00b      	b.n	8001cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	43da      	mvns	r2, r3
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	4013      	ands	r3, r2
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	bf14      	ite	ne
 8001cf4:	2301      	movne	r3, #1
 8001cf6:	2300      	moveq	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d016      	beq.n	8001d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2220      	movs	r2, #32
 8001d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d18:	f043 0220 	orr.w	r2, r3, #32
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e021      	b.n	8001d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	0c1b      	lsrs	r3, r3, #16
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d10c      	bne.n	8001d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	43da      	mvns	r2, r3
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	4013      	ands	r3, r2
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	bf14      	ite	ne
 8001d48:	2301      	movne	r3, #1
 8001d4a:	2300      	moveq	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	e00b      	b.n	8001d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	43da      	mvns	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	bf14      	ite	ne
 8001d62:	2301      	movne	r3, #1
 8001d64:	2300      	moveq	r3, #0
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f47f af6d 	bne.w	8001c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d84:	e034      	b.n	8001df0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f000 f886 	bl	8001e98 <I2C_IsAcknowledgeFailed>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e034      	b.n	8001e00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9c:	d028      	beq.n	8001df0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d9e:	f7ff f909 	bl	8000fb4 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d302      	bcc.n	8001db4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d11d      	bne.n	8001df0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dbe:	2b80      	cmp	r3, #128	@ 0x80
 8001dc0:	d016      	beq.n	8001df0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ddc:	f043 0220 	orr.w	r2, r3, #32
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e007      	b.n	8001e00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dfa:	2b80      	cmp	r3, #128	@ 0x80
 8001dfc:	d1c3      	bne.n	8001d86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e14:	e034      	b.n	8001e80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 f83e 	bl	8001e98 <I2C_IsAcknowledgeFailed>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e034      	b.n	8001e90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2c:	d028      	beq.n	8001e80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e2e:	f7ff f8c1 	bl	8000fb4 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d302      	bcc.n	8001e44 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d11d      	bne.n	8001e80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d016      	beq.n	8001e80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6c:	f043 0220 	orr.w	r2, r3, #32
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e007      	b.n	8001e90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d1c3      	bne.n	8001e16 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eae:	d11b      	bne.n	8001ee8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001eb8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed4:	f043 0204 	orr.w	r2, r3, #4
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <PWR_OverloadWfe>:
static void PWR_OverloadWfe(void);

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  __asm volatile( "wfe" );
 8001ef8:	bf20      	wfe
  __asm volatile( "nop" );
 8001efa:	bf00      	nop
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001f08:	4b03      	ldr	r3, [pc, #12]	@ (8001f18 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	420e0020 	.word	0x420e0020

08001f1c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 8001f28:	4b13      	ldr	r3, [pc, #76]	@ (8001f78 <HAL_PWR_EnterSTOPMode+0x5c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a12      	ldr	r2, [pc, #72]	@ (8001f78 <HAL_PWR_EnterSTOPMode+0x5c>)
 8001f2e:	f023 0302 	bic.w	r3, r3, #2
 8001f32:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 8001f34:	4b10      	ldr	r3, [pc, #64]	@ (8001f78 <HAL_PWR_EnterSTOPMode+0x5c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f023 0201 	bic.w	r2, r3, #1
 8001f3c:	490e      	ldr	r1, [pc, #56]	@ (8001f78 <HAL_PWR_EnterSTOPMode+0x5c>)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001f44:	4b0d      	ldr	r3, [pc, #52]	@ (8001f7c <HAL_PWR_EnterSTOPMode+0x60>)
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	4a0c      	ldr	r2, [pc, #48]	@ (8001f7c <HAL_PWR_EnterSTOPMode+0x60>)
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_PWR_EnterSTOPMode+0x3e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001f56:	bf30      	wfi
 8001f58:	e004      	b.n	8001f64 <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001f5a:	bf40      	sev
    PWR_OverloadWfe(); /* WFE redefine locally */
 8001f5c:	f7ff ffca 	bl	8001ef4 <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 8001f60:	f7ff ffc8 	bl	8001ef4 <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001f64:	4b05      	ldr	r3, [pc, #20]	@ (8001f7c <HAL_PWR_EnterSTOPMode+0x60>)
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	4a04      	ldr	r2, [pc, #16]	@ (8001f7c <HAL_PWR_EnterSTOPMode+0x60>)
 8001f6a:	f023 0304 	bic.w	r3, r3, #4
 8001f6e:	6113      	str	r3, [r2, #16]
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40007000 	.word	0x40007000
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e272      	b.n	8002478 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 8087 	beq.w	80020ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fa0:	4b92      	ldr	r3, [pc, #584]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 030c 	and.w	r3, r3, #12
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d00c      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fac:	4b8f      	ldr	r3, [pc, #572]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 030c 	and.w	r3, r3, #12
 8001fb4:	2b08      	cmp	r3, #8
 8001fb6:	d112      	bne.n	8001fde <HAL_RCC_OscConfig+0x5e>
 8001fb8:	4b8c      	ldr	r3, [pc, #560]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fc4:	d10b      	bne.n	8001fde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc6:	4b89      	ldr	r3, [pc, #548]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d06c      	beq.n	80020ac <HAL_RCC_OscConfig+0x12c>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d168      	bne.n	80020ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e24c      	b.n	8002478 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fe6:	d106      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x76>
 8001fe8:	4b80      	ldr	r3, [pc, #512]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a7f      	ldr	r2, [pc, #508]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 8001fee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	e02e      	b.n	8002054 <HAL_RCC_OscConfig+0xd4>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10c      	bne.n	8002018 <HAL_RCC_OscConfig+0x98>
 8001ffe:	4b7b      	ldr	r3, [pc, #492]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a7a      	ldr	r2, [pc, #488]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 8002004:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	4b78      	ldr	r3, [pc, #480]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a77      	ldr	r2, [pc, #476]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 8002010:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	e01d      	b.n	8002054 <HAL_RCC_OscConfig+0xd4>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002020:	d10c      	bne.n	800203c <HAL_RCC_OscConfig+0xbc>
 8002022:	4b72      	ldr	r3, [pc, #456]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a71      	ldr	r2, [pc, #452]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 8002028:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	4b6f      	ldr	r3, [pc, #444]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a6e      	ldr	r2, [pc, #440]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 8002034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	e00b      	b.n	8002054 <HAL_RCC_OscConfig+0xd4>
 800203c:	4b6b      	ldr	r3, [pc, #428]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a6a      	ldr	r2, [pc, #424]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 8002042:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	4b68      	ldr	r3, [pc, #416]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a67      	ldr	r2, [pc, #412]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 800204e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002052:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d013      	beq.n	8002084 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7fe ffaa 	bl	8000fb4 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002064:	f7fe ffa6 	bl	8000fb4 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b64      	cmp	r3, #100	@ 0x64
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e200      	b.n	8002478 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	4b5d      	ldr	r3, [pc, #372]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0xe4>
 8002082:	e014      	b.n	80020ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7fe ff96 	bl	8000fb4 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800208c:	f7fe ff92 	bl	8000fb4 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b64      	cmp	r3, #100	@ 0x64
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e1ec      	b.n	8002478 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209e:	4b53      	ldr	r3, [pc, #332]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x10c>
 80020aa:	e000      	b.n	80020ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d063      	beq.n	8002182 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ba:	4b4c      	ldr	r3, [pc, #304]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00b      	beq.n	80020de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020c6:	4b49      	ldr	r3, [pc, #292]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 030c 	and.w	r3, r3, #12
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d11c      	bne.n	800210c <HAL_RCC_OscConfig+0x18c>
 80020d2:	4b46      	ldr	r3, [pc, #280]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d116      	bne.n	800210c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020de:	4b43      	ldr	r3, [pc, #268]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <HAL_RCC_OscConfig+0x176>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d001      	beq.n	80020f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e1c0      	b.n	8002478 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f6:	4b3d      	ldr	r3, [pc, #244]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4939      	ldr	r1, [pc, #228]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210a:	e03a      	b.n	8002182 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d020      	beq.n	8002156 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002114:	4b36      	ldr	r3, [pc, #216]	@ (80021f0 <HAL_RCC_OscConfig+0x270>)
 8002116:	2201      	movs	r2, #1
 8002118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211a:	f7fe ff4b 	bl	8000fb4 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002122:	f7fe ff47 	bl	8000fb4 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e1a1      	b.n	8002478 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002134:	4b2d      	ldr	r3, [pc, #180]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0f0      	beq.n	8002122 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002140:	4b2a      	ldr	r3, [pc, #168]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4927      	ldr	r1, [pc, #156]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 8002150:	4313      	orrs	r3, r2
 8002152:	600b      	str	r3, [r1, #0]
 8002154:	e015      	b.n	8002182 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002156:	4b26      	ldr	r3, [pc, #152]	@ (80021f0 <HAL_RCC_OscConfig+0x270>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7fe ff2a 	bl	8000fb4 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002164:	f7fe ff26 	bl	8000fb4 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e180      	b.n	8002478 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002176:	4b1d      	ldr	r3, [pc, #116]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d03a      	beq.n	8002204 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d019      	beq.n	80021ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002196:	4b17      	ldr	r3, [pc, #92]	@ (80021f4 <HAL_RCC_OscConfig+0x274>)
 8002198:	2201      	movs	r2, #1
 800219a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219c:	f7fe ff0a 	bl	8000fb4 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a4:	f7fe ff06 	bl	8000fb4 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e160      	b.n	8002478 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b6:	4b0d      	ldr	r3, [pc, #52]	@ (80021ec <HAL_RCC_OscConfig+0x26c>)
 80021b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021c2:	2001      	movs	r0, #1
 80021c4:	f000 face 	bl	8002764 <RCC_Delay>
 80021c8:	e01c      	b.n	8002204 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ca:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <HAL_RCC_OscConfig+0x274>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d0:	f7fe fef0 	bl	8000fb4 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d6:	e00f      	b.n	80021f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d8:	f7fe feec 	bl	8000fb4 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d908      	bls.n	80021f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e146      	b.n	8002478 <HAL_RCC_OscConfig+0x4f8>
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000
 80021f0:	42420000 	.word	0x42420000
 80021f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f8:	4b92      	ldr	r3, [pc, #584]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 80021fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1e9      	bne.n	80021d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80a6 	beq.w	800235e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002212:	2300      	movs	r3, #0
 8002214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002216:	4b8b      	ldr	r3, [pc, #556]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10d      	bne.n	800223e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002222:	4b88      	ldr	r3, [pc, #544]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	4a87      	ldr	r2, [pc, #540]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 8002228:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800222c:	61d3      	str	r3, [r2, #28]
 800222e:	4b85      	ldr	r3, [pc, #532]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800223a:	2301      	movs	r3, #1
 800223c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223e:	4b82      	ldr	r3, [pc, #520]	@ (8002448 <HAL_RCC_OscConfig+0x4c8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002246:	2b00      	cmp	r3, #0
 8002248:	d118      	bne.n	800227c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800224a:	4b7f      	ldr	r3, [pc, #508]	@ (8002448 <HAL_RCC_OscConfig+0x4c8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a7e      	ldr	r2, [pc, #504]	@ (8002448 <HAL_RCC_OscConfig+0x4c8>)
 8002250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002254:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002256:	f7fe fead 	bl	8000fb4 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225e:	f7fe fea9 	bl	8000fb4 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b64      	cmp	r3, #100	@ 0x64
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e103      	b.n	8002478 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002270:	4b75      	ldr	r3, [pc, #468]	@ (8002448 <HAL_RCC_OscConfig+0x4c8>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f0      	beq.n	800225e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d106      	bne.n	8002292 <HAL_RCC_OscConfig+0x312>
 8002284:	4b6f      	ldr	r3, [pc, #444]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	4a6e      	ldr	r2, [pc, #440]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	6213      	str	r3, [r2, #32]
 8002290:	e02d      	b.n	80022ee <HAL_RCC_OscConfig+0x36e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10c      	bne.n	80022b4 <HAL_RCC_OscConfig+0x334>
 800229a:	4b6a      	ldr	r3, [pc, #424]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	4a69      	ldr	r2, [pc, #420]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	f023 0301 	bic.w	r3, r3, #1
 80022a4:	6213      	str	r3, [r2, #32]
 80022a6:	4b67      	ldr	r3, [pc, #412]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	4a66      	ldr	r2, [pc, #408]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	f023 0304 	bic.w	r3, r3, #4
 80022b0:	6213      	str	r3, [r2, #32]
 80022b2:	e01c      	b.n	80022ee <HAL_RCC_OscConfig+0x36e>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	2b05      	cmp	r3, #5
 80022ba:	d10c      	bne.n	80022d6 <HAL_RCC_OscConfig+0x356>
 80022bc:	4b61      	ldr	r3, [pc, #388]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	4a60      	ldr	r2, [pc, #384]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 80022c2:	f043 0304 	orr.w	r3, r3, #4
 80022c6:	6213      	str	r3, [r2, #32]
 80022c8:	4b5e      	ldr	r3, [pc, #376]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	4a5d      	ldr	r2, [pc, #372]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6213      	str	r3, [r2, #32]
 80022d4:	e00b      	b.n	80022ee <HAL_RCC_OscConfig+0x36e>
 80022d6:	4b5b      	ldr	r3, [pc, #364]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	4a5a      	ldr	r2, [pc, #360]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 80022dc:	f023 0301 	bic.w	r3, r3, #1
 80022e0:	6213      	str	r3, [r2, #32]
 80022e2:	4b58      	ldr	r3, [pc, #352]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	4a57      	ldr	r2, [pc, #348]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	f023 0304 	bic.w	r3, r3, #4
 80022ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d015      	beq.n	8002322 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f6:	f7fe fe5d 	bl	8000fb4 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fc:	e00a      	b.n	8002314 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fe:	f7fe fe59 	bl	8000fb4 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	f241 3288 	movw	r2, #5000	@ 0x1388
 800230c:	4293      	cmp	r3, r2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e0b1      	b.n	8002478 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002314:	4b4b      	ldr	r3, [pc, #300]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0ee      	beq.n	80022fe <HAL_RCC_OscConfig+0x37e>
 8002320:	e014      	b.n	800234c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002322:	f7fe fe47 	bl	8000fb4 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002328:	e00a      	b.n	8002340 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232a:	f7fe fe43 	bl	8000fb4 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002338:	4293      	cmp	r3, r2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e09b      	b.n	8002478 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002340:	4b40      	ldr	r3, [pc, #256]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1ee      	bne.n	800232a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800234c:	7dfb      	ldrb	r3, [r7, #23]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d105      	bne.n	800235e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002352:	4b3c      	ldr	r3, [pc, #240]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	4a3b      	ldr	r2, [pc, #236]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 8002358:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800235c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 8087 	beq.w	8002476 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002368:	4b36      	ldr	r3, [pc, #216]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 030c 	and.w	r3, r3, #12
 8002370:	2b08      	cmp	r3, #8
 8002372:	d061      	beq.n	8002438 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d146      	bne.n	800240a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237c:	4b33      	ldr	r3, [pc, #204]	@ (800244c <HAL_RCC_OscConfig+0x4cc>)
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002382:	f7fe fe17 	bl	8000fb4 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238a:	f7fe fe13 	bl	8000fb4 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e06d      	b.n	8002478 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239c:	4b29      	ldr	r3, [pc, #164]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1f0      	bne.n	800238a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023b0:	d108      	bne.n	80023c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023b2:	4b24      	ldr	r3, [pc, #144]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	4921      	ldr	r1, [pc, #132]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a19      	ldr	r1, [r3, #32]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d4:	430b      	orrs	r3, r1
 80023d6:	491b      	ldr	r1, [pc, #108]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023dc:	4b1b      	ldr	r3, [pc, #108]	@ (800244c <HAL_RCC_OscConfig+0x4cc>)
 80023de:	2201      	movs	r2, #1
 80023e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e2:	f7fe fde7 	bl	8000fb4 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ea:	f7fe fde3 	bl	8000fb4 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e03d      	b.n	8002478 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023fc:	4b11      	ldr	r3, [pc, #68]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0f0      	beq.n	80023ea <HAL_RCC_OscConfig+0x46a>
 8002408:	e035      	b.n	8002476 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240a:	4b10      	ldr	r3, [pc, #64]	@ (800244c <HAL_RCC_OscConfig+0x4cc>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7fe fdd0 	bl	8000fb4 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002418:	f7fe fdcc 	bl	8000fb4 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e026      	b.n	8002478 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800242a:	4b06      	ldr	r3, [pc, #24]	@ (8002444 <HAL_RCC_OscConfig+0x4c4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x498>
 8002436:	e01e      	b.n	8002476 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d107      	bne.n	8002450 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e019      	b.n	8002478 <HAL_RCC_OscConfig+0x4f8>
 8002444:	40021000 	.word	0x40021000
 8002448:	40007000 	.word	0x40007000
 800244c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002450:	4b0b      	ldr	r3, [pc, #44]	@ (8002480 <HAL_RCC_OscConfig+0x500>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	429a      	cmp	r2, r3
 8002462:	d106      	bne.n	8002472 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246e:	429a      	cmp	r2, r3
 8002470:	d001      	beq.n	8002476 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40021000 	.word	0x40021000

08002484 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0d0      	b.n	800263a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002498:	4b6a      	ldr	r3, [pc, #424]	@ (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d910      	bls.n	80024c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a6:	4b67      	ldr	r3, [pc, #412]	@ (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 0207 	bic.w	r2, r3, #7
 80024ae:	4965      	ldr	r1, [pc, #404]	@ (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b6:	4b63      	ldr	r3, [pc, #396]	@ (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0b8      	b.n	800263a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d020      	beq.n	8002516 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e0:	4b59      	ldr	r3, [pc, #356]	@ (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	4a58      	ldr	r2, [pc, #352]	@ (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024f8:	4b53      	ldr	r3, [pc, #332]	@ (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	4a52      	ldr	r2, [pc, #328]	@ (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002502:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002504:	4b50      	ldr	r3, [pc, #320]	@ (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	494d      	ldr	r1, [pc, #308]	@ (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	4313      	orrs	r3, r2
 8002514:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d040      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252a:	4b47      	ldr	r3, [pc, #284]	@ (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d115      	bne.n	8002562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e07f      	b.n	800263a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d107      	bne.n	8002552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002542:	4b41      	ldr	r3, [pc, #260]	@ (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d109      	bne.n	8002562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e073      	b.n	800263a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002552:	4b3d      	ldr	r3, [pc, #244]	@ (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e06b      	b.n	800263a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002562:	4b39      	ldr	r3, [pc, #228]	@ (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f023 0203 	bic.w	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	4936      	ldr	r1, [pc, #216]	@ (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	4313      	orrs	r3, r2
 8002572:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002574:	f7fe fd1e 	bl	8000fb4 <HAL_GetTick>
 8002578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	e00a      	b.n	8002592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800257c:	f7fe fd1a 	bl	8000fb4 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e053      	b.n	800263a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	4b2d      	ldr	r3, [pc, #180]	@ (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 020c 	and.w	r2, r3, #12
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d1eb      	bne.n	800257c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025a4:	4b27      	ldr	r3, [pc, #156]	@ (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d210      	bcs.n	80025d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b2:	4b24      	ldr	r3, [pc, #144]	@ (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 0207 	bic.w	r2, r3, #7
 80025ba:	4922      	ldr	r1, [pc, #136]	@ (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	4313      	orrs	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c2:	4b20      	ldr	r3, [pc, #128]	@ (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d001      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e032      	b.n	800263a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d008      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e0:	4b19      	ldr	r3, [pc, #100]	@ (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4916      	ldr	r1, [pc, #88]	@ (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d009      	beq.n	8002612 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025fe:	4b12      	ldr	r3, [pc, #72]	@ (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	490e      	ldr	r1, [pc, #56]	@ (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	4313      	orrs	r3, r2
 8002610:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002612:	f000 f821 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 8002616:	4602      	mov	r2, r0
 8002618:	4b0b      	ldr	r3, [pc, #44]	@ (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	490a      	ldr	r1, [pc, #40]	@ (800264c <HAL_RCC_ClockConfig+0x1c8>)
 8002624:	5ccb      	ldrb	r3, [r1, r3]
 8002626:	fa22 f303 	lsr.w	r3, r2, r3
 800262a:	4a09      	ldr	r2, [pc, #36]	@ (8002650 <HAL_RCC_ClockConfig+0x1cc>)
 800262c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800262e:	4b09      	ldr	r3, [pc, #36]	@ (8002654 <HAL_RCC_ClockConfig+0x1d0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7fe fc7c 	bl	8000f30 <HAL_InitTick>

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40022000 	.word	0x40022000
 8002648:	40021000 	.word	0x40021000
 800264c:	080055f4 	.word	0x080055f4
 8002650:	20000000 	.word	0x20000000
 8002654:	20000004 	.word	0x20000004

08002658 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	2300      	movs	r3, #0
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	2300      	movs	r3, #0
 800266c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002672:	4b1e      	ldr	r3, [pc, #120]	@ (80026ec <HAL_RCC_GetSysClockFreq+0x94>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	2b04      	cmp	r3, #4
 8002680:	d002      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0x30>
 8002682:	2b08      	cmp	r3, #8
 8002684:	d003      	beq.n	800268e <HAL_RCC_GetSysClockFreq+0x36>
 8002686:	e027      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002688:	4b19      	ldr	r3, [pc, #100]	@ (80026f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800268a:	613b      	str	r3, [r7, #16]
      break;
 800268c:	e027      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	0c9b      	lsrs	r3, r3, #18
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	4a17      	ldr	r2, [pc, #92]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002698:	5cd3      	ldrb	r3, [r2, r3]
 800269a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d010      	beq.n	80026c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026a6:	4b11      	ldr	r3, [pc, #68]	@ (80026ec <HAL_RCC_GetSysClockFreq+0x94>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	0c5b      	lsrs	r3, r3, #17
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	4a11      	ldr	r2, [pc, #68]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026b2:	5cd3      	ldrb	r3, [r2, r3]
 80026b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a0d      	ldr	r2, [pc, #52]	@ (80026f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ba:	fb03 f202 	mul.w	r2, r3, r2
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	e004      	b.n	80026d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a0c      	ldr	r2, [pc, #48]	@ (80026fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80026cc:	fb02 f303 	mul.w	r3, r2, r3
 80026d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	613b      	str	r3, [r7, #16]
      break;
 80026d6:	e002      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026d8:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80026da:	613b      	str	r3, [r7, #16]
      break;
 80026dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026de:	693b      	ldr	r3, [r7, #16]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	371c      	adds	r7, #28
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000
 80026f0:	007a1200 	.word	0x007a1200
 80026f4:	0800560c 	.word	0x0800560c
 80026f8:	0800561c 	.word	0x0800561c
 80026fc:	003d0900 	.word	0x003d0900

08002700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002704:	4b02      	ldr	r3, [pc, #8]	@ (8002710 <HAL_RCC_GetHCLKFreq+0x10>)
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr
 8002710:	20000000 	.word	0x20000000

08002714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002718:	f7ff fff2 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 800271c:	4602      	mov	r2, r0
 800271e:	4b05      	ldr	r3, [pc, #20]	@ (8002734 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	0a1b      	lsrs	r3, r3, #8
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	4903      	ldr	r1, [pc, #12]	@ (8002738 <HAL_RCC_GetPCLK1Freq+0x24>)
 800272a:	5ccb      	ldrb	r3, [r1, r3]
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002730:	4618      	mov	r0, r3
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000
 8002738:	08005604 	.word	0x08005604

0800273c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002740:	f7ff ffde 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 8002744:	4602      	mov	r2, r0
 8002746:	4b05      	ldr	r3, [pc, #20]	@ (800275c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	0adb      	lsrs	r3, r3, #11
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	4903      	ldr	r1, [pc, #12]	@ (8002760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002752:	5ccb      	ldrb	r3, [r1, r3]
 8002754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002758:	4618      	mov	r0, r3
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000
 8002760:	08005604 	.word	0x08005604

08002764 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800276c:	4b0a      	ldr	r3, [pc, #40]	@ (8002798 <RCC_Delay+0x34>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0a      	ldr	r2, [pc, #40]	@ (800279c <RCC_Delay+0x38>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	0a5b      	lsrs	r3, r3, #9
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	fb02 f303 	mul.w	r3, r2, r3
 800277e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002780:	bf00      	nop
  }
  while (Delay --);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1e5a      	subs	r2, r3, #1
 8002786:	60fa      	str	r2, [r7, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f9      	bne.n	8002780 <RCC_Delay+0x1c>
}
 800278c:	bf00      	nop
 800278e:	bf00      	nop
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	20000000 	.word	0x20000000
 800279c:	10624dd3 	.word	0x10624dd3

080027a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	2300      	movs	r3, #0
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d07d      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80027bc:	2300      	movs	r3, #0
 80027be:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c0:	4b4f      	ldr	r3, [pc, #316]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10d      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027cc:	4b4c      	ldr	r3, [pc, #304]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d6:	61d3      	str	r3, [r2, #28]
 80027d8:	4b49      	ldr	r3, [pc, #292]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e4:	2301      	movs	r3, #1
 80027e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e8:	4b46      	ldr	r3, [pc, #280]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d118      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027f4:	4b43      	ldr	r3, [pc, #268]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a42      	ldr	r2, [pc, #264]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002800:	f7fe fbd8 	bl	8000fb4 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002806:	e008      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002808:	f7fe fbd4 	bl	8000fb4 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b64      	cmp	r3, #100	@ 0x64
 8002814:	d901      	bls.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e06d      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281a:	4b3a      	ldr	r3, [pc, #232]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002826:	4b36      	ldr	r3, [pc, #216]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800282e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d02e      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	429a      	cmp	r2, r3
 8002842:	d027      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002844:	4b2e      	ldr	r3, [pc, #184]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800284c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800284e:	4b2e      	ldr	r3, [pc, #184]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002850:	2201      	movs	r2, #1
 8002852:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002854:	4b2c      	ldr	r3, [pc, #176]	@ (8002908 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800285a:	4a29      	ldr	r2, [pc, #164]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d014      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286a:	f7fe fba3 	bl	8000fb4 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002870:	e00a      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002872:	f7fe fb9f 	bl	8000fb4 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002880:	4293      	cmp	r3, r2
 8002882:	d901      	bls.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e036      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002888:	4b1d      	ldr	r3, [pc, #116]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0ee      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002894:	4b1a      	ldr	r3, [pc, #104]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	4917      	ldr	r1, [pc, #92]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028a6:	7dfb      	ldrb	r3, [r7, #23]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d105      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ac:	4b14      	ldr	r3, [pc, #80]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	4a13      	ldr	r2, [pc, #76]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	490b      	ldr	r1, [pc, #44]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0310 	and.w	r3, r3, #16
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d008      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028e2:	4b07      	ldr	r3, [pc, #28]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	4904      	ldr	r1, [pc, #16]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000
 8002904:	40007000 	.word	0x40007000
 8002908:	42420440 	.word	0x42420440

0800290c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	2300      	movs	r3, #0
 800291a:	61fb      	str	r3, [r7, #28]
 800291c:	2300      	movs	r3, #0
 800291e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	2300      	movs	r3, #0
 8002926:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b10      	cmp	r3, #16
 800292c:	d00a      	beq.n	8002944 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b10      	cmp	r3, #16
 8002932:	f200 808a 	bhi.w	8002a4a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d045      	beq.n	80029c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d075      	beq.n	8002a2e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002942:	e082      	b.n	8002a4a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002944:	4b46      	ldr	r3, [pc, #280]	@ (8002a60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800294a:	4b45      	ldr	r3, [pc, #276]	@ (8002a60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d07b      	beq.n	8002a4e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	0c9b      	lsrs	r3, r3, #18
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	4a41      	ldr	r2, [pc, #260]	@ (8002a64 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002960:	5cd3      	ldrb	r3, [r2, r3]
 8002962:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d015      	beq.n	800299a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800296e:	4b3c      	ldr	r3, [pc, #240]	@ (8002a60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	0c5b      	lsrs	r3, r3, #17
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	4a3b      	ldr	r2, [pc, #236]	@ (8002a68 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800297a:	5cd3      	ldrb	r3, [r2, r3]
 800297c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00d      	beq.n	80029a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002988:	4a38      	ldr	r2, [pc, #224]	@ (8002a6c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	fb02 f303 	mul.w	r3, r2, r3
 8002996:	61fb      	str	r3, [r7, #28]
 8002998:	e004      	b.n	80029a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4a34      	ldr	r2, [pc, #208]	@ (8002a70 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800299e:	fb02 f303 	mul.w	r3, r2, r3
 80029a2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80029a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002a60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029b0:	d102      	bne.n	80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	61bb      	str	r3, [r7, #24]
      break;
 80029b6:	e04a      	b.n	8002a4e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002a74 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	085b      	lsrs	r3, r3, #1
 80029c4:	61bb      	str	r3, [r7, #24]
      break;
 80029c6:	e042      	b.n	8002a4e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80029c8:	4b25      	ldr	r3, [pc, #148]	@ (8002a60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029d8:	d108      	bne.n	80029ec <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80029e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	e01f      	b.n	8002a2c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029f6:	d109      	bne.n	8002a0c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80029f8:	4b19      	ldr	r3, [pc, #100]	@ (8002a60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002a04:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002a08:	61bb      	str	r3, [r7, #24]
 8002a0a:	e00f      	b.n	8002a2c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a16:	d11c      	bne.n	8002a52 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002a18:	4b11      	ldr	r3, [pc, #68]	@ (8002a60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d016      	beq.n	8002a52 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002a24:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002a28:	61bb      	str	r3, [r7, #24]
      break;
 8002a2a:	e012      	b.n	8002a52 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002a2c:	e011      	b.n	8002a52 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002a2e:	f7ff fe85 	bl	800273c <HAL_RCC_GetPCLK2Freq>
 8002a32:	4602      	mov	r2, r0
 8002a34:	4b0a      	ldr	r3, [pc, #40]	@ (8002a60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	0b9b      	lsrs	r3, r3, #14
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a46:	61bb      	str	r3, [r7, #24]
      break;
 8002a48:	e004      	b.n	8002a54 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002a4a:	bf00      	nop
 8002a4c:	e002      	b.n	8002a54 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002a4e:	bf00      	nop
 8002a50:	e000      	b.n	8002a54 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002a52:	bf00      	nop
    }
  }
  return (frequency);
 8002a54:	69bb      	ldr	r3, [r7, #24]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3720      	adds	r7, #32
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000
 8002a64:	08005620 	.word	0x08005620
 8002a68:	08005630 	.word	0x08005630
 8002a6c:	007a1200 	.word	0x007a1200
 8002a70:	003d0900 	.word	0x003d0900
 8002a74:	aaaaaaab 	.word	0xaaaaaaab

08002a78 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e07a      	b.n	8002b84 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	7c5b      	ldrb	r3, [r3, #17]
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d105      	bne.n	8002aa4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fe f8ea 	bl	8000c78 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 fa93 	bl	8002fd6 <HAL_RTC_WaitForSynchro>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d004      	beq.n	8002ac0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2204      	movs	r2, #4
 8002aba:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e061      	b.n	8002b84 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 fb4c 	bl	800315e <RTC_EnterInitMode>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d004      	beq.n	8002ad6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2204      	movs	r2, #4
 8002ad0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e056      	b.n	8002b84 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0207 	bic.w	r2, r2, #7
 8002ae4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002aee:	4b27      	ldr	r3, [pc, #156]	@ (8002b8c <HAL_RTC_Init+0x114>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af2:	4a26      	ldr	r2, [pc, #152]	@ (8002b8c <HAL_RTC_Init+0x114>)
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002afa:	4b24      	ldr	r3, [pc, #144]	@ (8002b8c <HAL_RTC_Init+0x114>)
 8002afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afe:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	4921      	ldr	r1, [pc, #132]	@ (8002b8c <HAL_RTC_Init+0x114>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d003      	beq.n	8002b1e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	e00e      	b.n	8002b3c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002b1e:	2001      	movs	r0, #1
 8002b20:	f7ff fef4 	bl	800290c <HAL_RCCEx_GetPeriphCLKFreq>
 8002b24:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d104      	bne.n	8002b36 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2204      	movs	r2, #4
 8002b30:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e026      	b.n	8002b84 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	0c1a      	lsrs	r2, r3, #16
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f002 020f 	and.w	r2, r2, #15
 8002b48:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	b292      	uxth	r2, r2
 8002b52:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fb2a 	bl	80031ae <RTC_ExitInitMode>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d004      	beq.n	8002b6a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2204      	movs	r2, #4
 8002b64:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e00c      	b.n	8002b84 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002b82:	2300      	movs	r3, #0
  }
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40006c00 	.word	0x40006c00

08002b90 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61bb      	str	r3, [r7, #24]
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	61fb      	str	r3, [r7, #28]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <HAL_RTC_GetTime+0x28>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0b5      	b.n	8002d28 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e0ac      	b.n	8002d28 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 fa2e 	bl	8003030 <RTC_ReadTimeCounter>
 8002bd4:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	4a55      	ldr	r2, [pc, #340]	@ (8002d30 <HAL_RTC_GetTime+0x1a0>)
 8002bda:	fba2 2303 	umull	r2, r3, r2, r3
 8002bde:	0adb      	lsrs	r3, r3, #11
 8002be0:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4b52      	ldr	r3, [pc, #328]	@ (8002d30 <HAL_RTC_GetTime+0x1a0>)
 8002be6:	fba3 1302 	umull	r1, r3, r3, r2
 8002bea:	0adb      	lsrs	r3, r3, #11
 8002bec:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	4a4f      	ldr	r2, [pc, #316]	@ (8002d34 <HAL_RTC_GetTime+0x1a4>)
 8002bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfc:	095b      	lsrs	r3, r3, #5
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	4a4a      	ldr	r2, [pc, #296]	@ (8002d30 <HAL_RTC_GetTime+0x1a0>)
 8002c08:	fba2 1203 	umull	r1, r2, r2, r3
 8002c0c:	0ad2      	lsrs	r2, r2, #11
 8002c0e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8002c12:	fb01 f202 	mul.w	r2, r1, r2
 8002c16:	1a9a      	subs	r2, r3, r2
 8002c18:	4b46      	ldr	r3, [pc, #280]	@ (8002d34 <HAL_RTC_GetTime+0x1a4>)
 8002c1a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c1e:	0959      	lsrs	r1, r3, #5
 8002c20:	460b      	mov	r3, r1
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	1a5b      	subs	r3, r3, r1
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	1ad1      	subs	r1, r2, r3
 8002c2a:	b2ca      	uxtb	r2, r1
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	2b17      	cmp	r3, #23
 8002c34:	d955      	bls.n	8002ce2 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	4a3f      	ldr	r2, [pc, #252]	@ (8002d38 <HAL_RTC_GetTime+0x1a8>)
 8002c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3e:	091b      	lsrs	r3, r3, #4
 8002c40:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8002c42:	6939      	ldr	r1, [r7, #16]
 8002c44:	4b3c      	ldr	r3, [pc, #240]	@ (8002d38 <HAL_RTC_GetTime+0x1a8>)
 8002c46:	fba3 2301 	umull	r2, r3, r3, r1
 8002c4a:	091a      	lsrs	r2, r3, #4
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4413      	add	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	1aca      	subs	r2, r1, r3
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 fa3e 	bl	80030de <RTC_ReadAlarmCounter>
 8002c62:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6a:	d008      	beq.n	8002c7e <HAL_RTC_GetTime+0xee>
 8002c6c:	69fa      	ldr	r2, [r7, #28]
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d904      	bls.n	8002c7e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	61fb      	str	r3, [r7, #28]
 8002c7c:	e002      	b.n	8002c84 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8002c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c82:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	4a2d      	ldr	r2, [pc, #180]	@ (8002d3c <HAL_RTC_GetTime+0x1ac>)
 8002c88:	fb02 f303 	mul.w	r3, r2, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002c92:	69b9      	ldr	r1, [r7, #24]
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 f9fb 	bl	8003090 <RTC_WriteTimeCounter>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e041      	b.n	8002d28 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002caa:	d00c      	beq.n	8002cc6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8002cac:	69fa      	ldr	r2, [r7, #28]
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002cb4:	69f9      	ldr	r1, [r7, #28]
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 fa2a 	bl	8003110 <RTC_WriteAlarmCounter>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e030      	b.n	8002d28 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002cc6:	69f9      	ldr	r1, [r7, #28]
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 fa21 	bl	8003110 <RTC_WriteAlarmCounter>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e027      	b.n	8002d28 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8002cd8:	6979      	ldr	r1, [r7, #20]
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 fac9 	bl	8003272 <RTC_DateUpdate>
 8002ce0:	e003      	b.n	8002cea <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d01a      	beq.n	8002d26 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 fa82 	bl	80031fe <RTC_ByteToBcd2>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	785b      	ldrb	r3, [r3, #1]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 fa79 	bl	80031fe <RTC_ByteToBcd2>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	789b      	ldrb	r3, [r3, #2]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 fa70 	bl	80031fe <RTC_ByteToBcd2>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	461a      	mov	r2, r3
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3720      	adds	r7, #32
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	91a2b3c5 	.word	0x91a2b3c5
 8002d34:	88888889 	.word	0x88888889
 8002d38:	aaaaaaab 	.word	0xaaaaaaab
 8002d3c:	00015180 	.word	0x00015180

08002d40 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002d40:	b590      	push	{r4, r7, lr}
 8002d42:	b089      	sub	sp, #36	@ 0x24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8002d50:	f107 0314 	add.w	r3, r7, #20
 8002d54:	2100      	movs	r1, #0
 8002d56:	460a      	mov	r2, r1
 8002d58:	801a      	strh	r2, [r3, #0]
 8002d5a:	460a      	mov	r2, r1
 8002d5c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <HAL_RTC_SetAlarm_IT+0x2a>
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e099      	b.n	8002ea2 <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	7c1b      	ldrb	r3, [r3, #16]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_RTC_SetAlarm_IT+0x3a>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e093      	b.n	8002ea2 <HAL_RTC_SetAlarm_IT+0x162>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2202      	movs	r2, #2
 8002d84:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002d86:	f107 0314 	add.w	r3, r7, #20
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f7ff fefe 	bl	8002b90 <HAL_RTC_GetTime>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e081      	b.n	8002ea2 <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002d9e:	7d3b      	ldrb	r3, [r7, #20]
 8002da0:	461a      	mov	r2, r3
 8002da2:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002da6:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8002daa:	7d7b      	ldrb	r3, [r7, #21]
 8002dac:	4619      	mov	r1, r3
 8002dae:	460b      	mov	r3, r1
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	1a5b      	subs	r3, r3, r1
 8002db4:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002db6:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8002db8:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002dba:	4413      	add	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d113      	bne.n	8002dec <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002dce:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	785b      	ldrb	r3, [r3, #1]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	460b      	mov	r3, r1
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	1a5b      	subs	r3, r3, r1
 8002dde:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002de0:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002de6:	4413      	add	r3, r2
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	e01e      	b.n	8002e2a <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 fa21 	bl	8003238 <RTC_Bcd2ToByte>
 8002df6:	4603      	mov	r3, r0
 8002df8:	461a      	mov	r2, r3
 8002dfa:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002dfe:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	785b      	ldrb	r3, [r3, #1]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fa16 	bl	8003238 <RTC_Bcd2ToByte>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4613      	mov	r3, r2
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002e18:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	789b      	ldrb	r3, [r3, #2]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 fa0a 	bl	8003238 <RTC_Bcd2ToByte>
 8002e24:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002e26:	4423      	add	r3, r4
 8002e28:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8002e2a:	69fa      	ldr	r2, [r7, #28]
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d205      	bcs.n	8002e3e <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8002e38:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002e3c:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002e3e:	69f9      	ldr	r1, [r7, #28]
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 f965 	bl	8003110 <RTC_WriteAlarmCounter>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d007      	beq.n	8002e5c <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2204      	movs	r2, #4
 8002e50:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e022      	b.n	8002ea2 <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0202 	bic.w	r2, r2, #2
 8002e6a:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0202 	orr.w	r2, r2, #2
 8002e7a:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002eac <HAL_RTC_SetAlarm_IT+0x16c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0a      	ldr	r2, [pc, #40]	@ (8002eac <HAL_RTC_SetAlarm_IT+0x16c>)
 8002e82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e86:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002e88:	4b08      	ldr	r3, [pc, #32]	@ (8002eac <HAL_RTC_SetAlarm_IT+0x16c>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	4a07      	ldr	r2, [pc, #28]	@ (8002eac <HAL_RTC_SetAlarm_IT+0x16c>)
 8002e8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e92:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2201      	movs	r2, #1
 8002e98:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
  }
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3724      	adds	r7, #36	@ 0x24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd90      	pop	{r4, r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40010400 	.word	0x40010400

08002eb0 <HAL_RTC_DeactivateAlarm>:
  *          This parameter can be one of the following values:
  *            @arg RTC_ALARM_A:  AlarmA
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Check input parameters */
  if (hrtc == NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_RTC_DeactivateAlarm+0x14>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e04e      	b.n	8002f62 <HAL_RTC_DeactivateAlarm+0xb2>
  }

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	7c1b      	ldrb	r3, [r3, #16]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_RTC_DeactivateAlarm+0x20>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e048      	b.n	8002f62 <HAL_RTC_DeactivateAlarm+0xb2>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	745a      	strb	r2, [r3, #17]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0202 	bic.w	r2, r2, #2
 8002eea:	601a      	str	r2, [r3, #0]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f936 	bl	800315e <RTC_EnterInitMode>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d007      	beq.n	8002f08 <HAL_RTC_DeactivateAlarm+0x58>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2204      	movs	r2, #4
 8002efc:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e02c      	b.n	8002f62 <HAL_RTC_DeactivateAlarm+0xb2>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0202 	bic.w	r2, r2, #2
 8002f16:	605a      	str	r2, [r3, #4]

    /* Set to default values ALRH & ALRL registers */
    WRITE_REG(hrtc->Instance->ALRH, RTC_ALARM_RESETVALUE_REGISTER);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f20:	621a      	str	r2, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, RTC_ALARM_RESETVALUE_REGISTER);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f2a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* RTC Alarm Interrupt Configuration: Disable EXTI configuration */
    __HAL_RTC_ALARM_EXTI_DISABLE_IT();
 8002f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f6c <HAL_RTC_DeactivateAlarm+0xbc>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a0e      	ldr	r2, [pc, #56]	@ (8002f6c <HAL_RTC_DeactivateAlarm+0xbc>)
 8002f32:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002f36:	6013      	str	r3, [r2, #0]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f938 	bl	80031ae <RTC_ExitInitMode>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d007      	beq.n	8002f54 <HAL_RTC_DeactivateAlarm+0xa4>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2204      	movs	r2, #4
 8002f48:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e006      	b.n	8002f62 <HAL_RTC_DeactivateAlarm+0xb2>
    }
  }
  hrtc->State = HAL_RTC_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40010400 	.word	0x40010400

08002f70 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d011      	beq.n	8002faa <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00a      	beq.n	8002faa <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f815 	bl	8002fc4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0202 	bic.w	r2, r2, #2
 8002fa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002faa:	4b05      	ldr	r3, [pc, #20]	@ (8002fc0 <HAL_RTC_AlarmIRQHandler+0x50>)
 8002fac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002fb0:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	745a      	strb	r2, [r3, #17]
}
 8002fb8:	bf00      	nop
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40010400 	.word	0x40010400

08002fc4 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e01d      	b.n	8003028 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0208 	bic.w	r2, r2, #8
 8002ffa:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002ffc:	f7fd ffda 	bl	8000fb4 <HAL_GetTick>
 8003000:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003002:	e009      	b.n	8003018 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003004:	f7fd ffd6 	bl	8000fb4 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003012:	d901      	bls.n	8003018 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e007      	b.n	8003028 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0ee      	beq.n	8003004 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	827b      	strh	r3, [r7, #18]
 800303c:	2300      	movs	r3, #0
 800303e:	823b      	strh	r3, [r7, #16]
 8003040:	2300      	movs	r3, #0
 8003042:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003060:	8a7a      	ldrh	r2, [r7, #18]
 8003062:	8a3b      	ldrh	r3, [r7, #16]
 8003064:	429a      	cmp	r2, r3
 8003066:	d008      	beq.n	800307a <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003068:	8a3b      	ldrh	r3, [r7, #16]
 800306a:	041a      	lsls	r2, r3, #16
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	b29b      	uxth	r3, r3
 8003074:	4313      	orrs	r3, r2
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	e004      	b.n	8003084 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800307a:	8a7b      	ldrh	r3, [r7, #18]
 800307c:	041a      	lsls	r2, r3, #16
 800307e:	89fb      	ldrh	r3, [r7, #14]
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003084:	697b      	ldr	r3, [r7, #20]
}
 8003086:	4618      	mov	r0, r3
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr

08003090 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f85d 	bl	800315e <RTC_EnterInitMode>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	73fb      	strb	r3, [r7, #15]
 80030ae:	e011      	b.n	80030d4 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	0c12      	lsrs	r2, r2, #16
 80030b8:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	b292      	uxth	r2, r2
 80030c2:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f872 	bl	80031ae <RTC_ExitInitMode>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80030de:	b480      	push	{r7}
 80030e0:	b085      	sub	sp, #20
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	81fb      	strh	r3, [r7, #14]
 80030ea:	2300      	movs	r3, #0
 80030ec:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fc:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80030fe:	89fb      	ldrh	r3, [r7, #14]
 8003100:	041a      	lsls	r2, r3, #16
 8003102:	89bb      	ldrh	r3, [r7, #12]
 8003104:	4313      	orrs	r3, r2
}
 8003106:	4618      	mov	r0, r3
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f81d 	bl	800315e <RTC_EnterInitMode>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	73fb      	strb	r3, [r7, #15]
 800312e:	e011      	b.n	8003154 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	0c12      	lsrs	r2, r2, #16
 8003138:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	b292      	uxth	r2, r2
 8003142:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f832 	bl	80031ae <RTC_ExitInitMode>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003154:	7bfb      	ldrb	r3, [r7, #15]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b084      	sub	sp, #16
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800316a:	f7fd ff23 	bl	8000fb4 <HAL_GetTick>
 800316e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003170:	e009      	b.n	8003186 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003172:	f7fd ff1f 	bl	8000fb4 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003180:	d901      	bls.n	8003186 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e00f      	b.n	80031a6 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 0320 	and.w	r3, r3, #32
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0ee      	beq.n	8003172 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0210 	orr.w	r2, r2, #16
 80031a2:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0210 	bic.w	r2, r2, #16
 80031c8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80031ca:	f7fd fef3 	bl	8000fb4 <HAL_GetTick>
 80031ce:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80031d0:	e009      	b.n	80031e6 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80031d2:	f7fd feef 	bl	8000fb4 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031e0:	d901      	bls.n	80031e6 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e007      	b.n	80031f6 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0ee      	beq.n	80031d2 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80031fe:	b480      	push	{r7}
 8003200:	b085      	sub	sp, #20
 8003202:	af00      	add	r7, sp, #0
 8003204:	4603      	mov	r3, r0
 8003206:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800320c:	e005      	b.n	800321a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3301      	adds	r3, #1
 8003212:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	3b0a      	subs	r3, #10
 8003218:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	2b09      	cmp	r3, #9
 800321e:	d8f6      	bhi.n	800320e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	b2db      	uxtb	r3, r3
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	b2da      	uxtb	r2, r3
 8003228:	79fb      	ldrb	r3, [r7, #7]
 800322a:	4313      	orrs	r3, r2
 800322c:	b2db      	uxtb	r3, r3
}
 800322e:	4618      	mov	r0, r3
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr

08003238 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	091b      	lsrs	r3, r3, #4
 800324a:	b2db      	uxtb	r3, r3
 800324c:	461a      	mov	r2, r3
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003258:	79fb      	ldrb	r3, [r7, #7]
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	b2da      	uxtb	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	b2db      	uxtb	r3, r3
 8003264:	4413      	add	r3, r2
 8003266:	b2db      	uxtb	r3, r3
}
 8003268:	4618      	mov	r0, r3
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr

08003272 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b086      	sub	sp, #24
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	2300      	movs	r3, #0
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	2300      	movs	r3, #0
 8003286:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	7bdb      	ldrb	r3, [r3, #15]
 8003290:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	7b5b      	ldrb	r3, [r3, #13]
 8003296:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	7b9b      	ldrb	r3, [r3, #14]
 800329c:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800329e:	2300      	movs	r3, #0
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	e06f      	b.n	8003384 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d011      	beq.n	80032ce <RTC_DateUpdate+0x5c>
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d00e      	beq.n	80032ce <RTC_DateUpdate+0x5c>
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	2b05      	cmp	r3, #5
 80032b4:	d00b      	beq.n	80032ce <RTC_DateUpdate+0x5c>
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	2b07      	cmp	r3, #7
 80032ba:	d008      	beq.n	80032ce <RTC_DateUpdate+0x5c>
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d005      	beq.n	80032ce <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	2b0a      	cmp	r3, #10
 80032c6:	d002      	beq.n	80032ce <RTC_DateUpdate+0x5c>
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	2b0c      	cmp	r3, #12
 80032cc:	d117      	bne.n	80032fe <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2b1e      	cmp	r3, #30
 80032d2:	d803      	bhi.n	80032dc <RTC_DateUpdate+0x6a>
      {
        day++;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	3301      	adds	r3, #1
 80032d8:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80032da:	e050      	b.n	800337e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0c      	cmp	r3, #12
 80032e0:	d005      	beq.n	80032ee <RTC_DateUpdate+0x7c>
        {
          month++;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	3301      	adds	r3, #1
 80032e6:	613b      	str	r3, [r7, #16]
          day = 1U;
 80032e8:	2301      	movs	r3, #1
 80032ea:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80032ec:	e047      	b.n	800337e <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80032ee:	2301      	movs	r3, #1
 80032f0:	613b      	str	r3, [r7, #16]
          day = 1U;
 80032f2:	2301      	movs	r3, #1
 80032f4:	60fb      	str	r3, [r7, #12]
          year++;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	3301      	adds	r3, #1
 80032fa:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80032fc:	e03f      	b.n	800337e <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	2b04      	cmp	r3, #4
 8003302:	d008      	beq.n	8003316 <RTC_DateUpdate+0xa4>
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	2b06      	cmp	r3, #6
 8003308:	d005      	beq.n	8003316 <RTC_DateUpdate+0xa4>
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	2b09      	cmp	r3, #9
 800330e:	d002      	beq.n	8003316 <RTC_DateUpdate+0xa4>
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	2b0b      	cmp	r3, #11
 8003314:	d10c      	bne.n	8003330 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2b1d      	cmp	r3, #29
 800331a:	d803      	bhi.n	8003324 <RTC_DateUpdate+0xb2>
      {
        day++;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	3301      	adds	r3, #1
 8003320:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003322:	e02c      	b.n	800337e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	3301      	adds	r3, #1
 8003328:	613b      	str	r3, [r7, #16]
        day = 1U;
 800332a:	2301      	movs	r3, #1
 800332c:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800332e:	e026      	b.n	800337e <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d123      	bne.n	800337e <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2b1b      	cmp	r3, #27
 800333a:	d803      	bhi.n	8003344 <RTC_DateUpdate+0xd2>
      {
        day++;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	3301      	adds	r3, #1
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	e01c      	b.n	800337e <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2b1c      	cmp	r3, #28
 8003348:	d111      	bne.n	800336e <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	b29b      	uxth	r3, r3
 800334e:	4618      	mov	r0, r3
 8003350:	f000 f838 	bl	80033c4 <RTC_IsLeapYear>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <RTC_DateUpdate+0xf0>
        {
          day++;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	3301      	adds	r3, #1
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	e00d      	b.n	800337e <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	3301      	adds	r3, #1
 8003366:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003368:	2301      	movs	r3, #1
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	e007      	b.n	800337e <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2b1d      	cmp	r3, #29
 8003372:	d104      	bne.n	800337e <RTC_DateUpdate+0x10c>
      {
        month++;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	3301      	adds	r3, #1
 8003378:	613b      	str	r3, [r7, #16]
        day = 1U;
 800337a:	2301      	movs	r3, #1
 800337c:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	3301      	adds	r3, #1
 8003382:	60bb      	str	r3, [r7, #8]
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d38b      	bcc.n	80032a4 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	b2da      	uxtb	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	b2da      	uxtb	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	4619      	mov	r1, r3
 80033ae:	6978      	ldr	r0, [r7, #20]
 80033b0:	f000 f83a 	bl	8003428 <RTC_WeekDayNum>
 80033b4:	4603      	mov	r3, r0
 80033b6:	461a      	mov	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	731a      	strb	r2, [r3, #12]
}
 80033bc:	bf00      	nop
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80033ce:	88fb      	ldrh	r3, [r7, #6]
 80033d0:	f003 0303 	and.w	r3, r3, #3
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	e01d      	b.n	800341a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	4a10      	ldr	r2, [pc, #64]	@ (8003424 <RTC_IsLeapYear+0x60>)
 80033e2:	fba2 1203 	umull	r1, r2, r2, r3
 80033e6:	0952      	lsrs	r2, r2, #5
 80033e8:	2164      	movs	r1, #100	@ 0x64
 80033ea:	fb01 f202 	mul.w	r2, r1, r2
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e00f      	b.n	800341a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	4a09      	ldr	r2, [pc, #36]	@ (8003424 <RTC_IsLeapYear+0x60>)
 80033fe:	fba2 1203 	umull	r1, r2, r2, r3
 8003402:	09d2      	lsrs	r2, r2, #7
 8003404:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003408:	fb01 f202 	mul.w	r2, r1, r2
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	b29b      	uxth	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003418:	2300      	movs	r3, #0
  }
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr
 8003424:	51eb851f 	.word	0x51eb851f

08003428 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	70fb      	strb	r3, [r7, #3]
 8003434:	4613      	mov	r3, r2
 8003436:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	60bb      	str	r3, [r7, #8]
 800343c:	2300      	movs	r3, #0
 800343e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003446:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d82d      	bhi.n	80034aa <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800344e:	78fa      	ldrb	r2, [r7, #3]
 8003450:	4613      	mov	r3, r2
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	4413      	add	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	4a2c      	ldr	r2, [pc, #176]	@ (800350c <RTC_WeekDayNum+0xe4>)
 800345c:	fba2 2303 	umull	r2, r3, r2, r3
 8003460:	085a      	lsrs	r2, r3, #1
 8003462:	78bb      	ldrb	r3, [r7, #2]
 8003464:	441a      	add	r2, r3
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	441a      	add	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	3b01      	subs	r3, #1
 800346e:	089b      	lsrs	r3, r3, #2
 8003470:	441a      	add	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	3b01      	subs	r3, #1
 8003476:	4926      	ldr	r1, [pc, #152]	@ (8003510 <RTC_WeekDayNum+0xe8>)
 8003478:	fba1 1303 	umull	r1, r3, r1, r3
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	1ad2      	subs	r2, r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	3b01      	subs	r3, #1
 8003484:	4922      	ldr	r1, [pc, #136]	@ (8003510 <RTC_WeekDayNum+0xe8>)
 8003486:	fba1 1303 	umull	r1, r3, r1, r3
 800348a:	09db      	lsrs	r3, r3, #7
 800348c:	4413      	add	r3, r2
 800348e:	1d1a      	adds	r2, r3, #4
 8003490:	4b20      	ldr	r3, [pc, #128]	@ (8003514 <RTC_WeekDayNum+0xec>)
 8003492:	fba3 1302 	umull	r1, r3, r3, r2
 8003496:	1ad1      	subs	r1, r2, r3
 8003498:	0849      	lsrs	r1, r1, #1
 800349a:	440b      	add	r3, r1
 800349c:	0899      	lsrs	r1, r3, #2
 800349e:	460b      	mov	r3, r1
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	1a5b      	subs	r3, r3, r1
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	e029      	b.n	80034fe <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80034aa:	78fa      	ldrb	r2, [r7, #3]
 80034ac:	4613      	mov	r3, r2
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	4413      	add	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	4a15      	ldr	r2, [pc, #84]	@ (800350c <RTC_WeekDayNum+0xe4>)
 80034b8:	fba2 2303 	umull	r2, r3, r2, r3
 80034bc:	085a      	lsrs	r2, r3, #1
 80034be:	78bb      	ldrb	r3, [r7, #2]
 80034c0:	441a      	add	r2, r3
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	441a      	add	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	089b      	lsrs	r3, r3, #2
 80034ca:	441a      	add	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4910      	ldr	r1, [pc, #64]	@ (8003510 <RTC_WeekDayNum+0xe8>)
 80034d0:	fba1 1303 	umull	r1, r3, r1, r3
 80034d4:	095b      	lsrs	r3, r3, #5
 80034d6:	1ad2      	subs	r2, r2, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	490d      	ldr	r1, [pc, #52]	@ (8003510 <RTC_WeekDayNum+0xe8>)
 80034dc:	fba1 1303 	umull	r1, r3, r1, r3
 80034e0:	09db      	lsrs	r3, r3, #7
 80034e2:	4413      	add	r3, r2
 80034e4:	1c9a      	adds	r2, r3, #2
 80034e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003514 <RTC_WeekDayNum+0xec>)
 80034e8:	fba3 1302 	umull	r1, r3, r3, r2
 80034ec:	1ad1      	subs	r1, r2, r3
 80034ee:	0849      	lsrs	r1, r1, #1
 80034f0:	440b      	add	r3, r1
 80034f2:	0899      	lsrs	r1, r3, #2
 80034f4:	460b      	mov	r3, r1
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	1a5b      	subs	r3, r3, r1
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	b2db      	uxtb	r3, r3
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr
 800350c:	38e38e39 	.word	0x38e38e39
 8003510:	51eb851f 	.word	0x51eb851f
 8003514:	24924925 	.word	0x24924925

08003518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e041      	b.n	80035ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d106      	bne.n	8003544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fd fbc6 	bl	8000cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3304      	adds	r3, #4
 8003554:	4619      	mov	r1, r3
 8003556:	4610      	mov	r0, r2
 8003558:	f000 fd3e 	bl	8003fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e041      	b.n	800364c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d106      	bne.n	80035e2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f839 	bl	8003654 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2202      	movs	r2, #2
 80035e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3304      	adds	r3, #4
 80035f2:	4619      	mov	r1, r3
 80035f4:	4610      	mov	r0, r2
 80035f6:	f000 fcef 	bl	8003fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	bc80      	pop	{r7}
 8003664:	4770      	bx	lr
	...

08003668 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d104      	bne.n	8003686 <HAL_TIM_IC_Start_IT+0x1e>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003682:	b2db      	uxtb	r3, r3
 8003684:	e013      	b.n	80036ae <HAL_TIM_IC_Start_IT+0x46>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b04      	cmp	r3, #4
 800368a:	d104      	bne.n	8003696 <HAL_TIM_IC_Start_IT+0x2e>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003692:	b2db      	uxtb	r3, r3
 8003694:	e00b      	b.n	80036ae <HAL_TIM_IC_Start_IT+0x46>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b08      	cmp	r3, #8
 800369a:	d104      	bne.n	80036a6 <HAL_TIM_IC_Start_IT+0x3e>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	e003      	b.n	80036ae <HAL_TIM_IC_Start_IT+0x46>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d104      	bne.n	80036c0 <HAL_TIM_IC_Start_IT+0x58>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	e013      	b.n	80036e8 <HAL_TIM_IC_Start_IT+0x80>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d104      	bne.n	80036d0 <HAL_TIM_IC_Start_IT+0x68>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	e00b      	b.n	80036e8 <HAL_TIM_IC_Start_IT+0x80>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d104      	bne.n	80036e0 <HAL_TIM_IC_Start_IT+0x78>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	e003      	b.n	80036e8 <HAL_TIM_IC_Start_IT+0x80>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80036ea:	7bbb      	ldrb	r3, [r7, #14]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d102      	bne.n	80036f6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80036f0:	7b7b      	ldrb	r3, [r7, #13]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d001      	beq.n	80036fa <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e0b8      	b.n	800386c <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d104      	bne.n	800370a <HAL_TIM_IC_Start_IT+0xa2>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003708:	e013      	b.n	8003732 <HAL_TIM_IC_Start_IT+0xca>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b04      	cmp	r3, #4
 800370e:	d104      	bne.n	800371a <HAL_TIM_IC_Start_IT+0xb2>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003718:	e00b      	b.n	8003732 <HAL_TIM_IC_Start_IT+0xca>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b08      	cmp	r3, #8
 800371e:	d104      	bne.n	800372a <HAL_TIM_IC_Start_IT+0xc2>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003728:	e003      	b.n	8003732 <HAL_TIM_IC_Start_IT+0xca>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2202      	movs	r2, #2
 800372e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d104      	bne.n	8003742 <HAL_TIM_IC_Start_IT+0xda>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003740:	e013      	b.n	800376a <HAL_TIM_IC_Start_IT+0x102>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b04      	cmp	r3, #4
 8003746:	d104      	bne.n	8003752 <HAL_TIM_IC_Start_IT+0xea>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003750:	e00b      	b.n	800376a <HAL_TIM_IC_Start_IT+0x102>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b08      	cmp	r3, #8
 8003756:	d104      	bne.n	8003762 <HAL_TIM_IC_Start_IT+0xfa>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003760:	e003      	b.n	800376a <HAL_TIM_IC_Start_IT+0x102>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2202      	movs	r2, #2
 8003766:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b0c      	cmp	r3, #12
 800376e:	d841      	bhi.n	80037f4 <HAL_TIM_IC_Start_IT+0x18c>
 8003770:	a201      	add	r2, pc, #4	@ (adr r2, 8003778 <HAL_TIM_IC_Start_IT+0x110>)
 8003772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003776:	bf00      	nop
 8003778:	080037ad 	.word	0x080037ad
 800377c:	080037f5 	.word	0x080037f5
 8003780:	080037f5 	.word	0x080037f5
 8003784:	080037f5 	.word	0x080037f5
 8003788:	080037bf 	.word	0x080037bf
 800378c:	080037f5 	.word	0x080037f5
 8003790:	080037f5 	.word	0x080037f5
 8003794:	080037f5 	.word	0x080037f5
 8003798:	080037d1 	.word	0x080037d1
 800379c:	080037f5 	.word	0x080037f5
 80037a0:	080037f5 	.word	0x080037f5
 80037a4:	080037f5 	.word	0x080037f5
 80037a8:	080037e3 	.word	0x080037e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0202 	orr.w	r2, r2, #2
 80037ba:	60da      	str	r2, [r3, #12]
      break;
 80037bc:	e01d      	b.n	80037fa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0204 	orr.w	r2, r2, #4
 80037cc:	60da      	str	r2, [r3, #12]
      break;
 80037ce:	e014      	b.n	80037fa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0208 	orr.w	r2, r2, #8
 80037de:	60da      	str	r2, [r3, #12]
      break;
 80037e0:	e00b      	b.n	80037fa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f042 0210 	orr.w	r2, r2, #16
 80037f0:	60da      	str	r2, [r3, #12]
      break;
 80037f2:	e002      	b.n	80037fa <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]
      break;
 80037f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d134      	bne.n	800386a <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2201      	movs	r2, #1
 8003806:	6839      	ldr	r1, [r7, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fe88 	bl	800451e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a18      	ldr	r2, [pc, #96]	@ (8003874 <HAL_TIM_IC_Start_IT+0x20c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00e      	beq.n	8003836 <HAL_TIM_IC_Start_IT+0x1ce>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003820:	d009      	beq.n	8003836 <HAL_TIM_IC_Start_IT+0x1ce>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a14      	ldr	r2, [pc, #80]	@ (8003878 <HAL_TIM_IC_Start_IT+0x210>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d004      	beq.n	8003836 <HAL_TIM_IC_Start_IT+0x1ce>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a12      	ldr	r2, [pc, #72]	@ (800387c <HAL_TIM_IC_Start_IT+0x214>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d111      	bne.n	800385a <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b06      	cmp	r3, #6
 8003846:	d010      	beq.n	800386a <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003858:	e007      	b.n	800386a <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0201 	orr.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800386a:	7bfb      	ldrb	r3, [r7, #15]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40012c00 	.word	0x40012c00
 8003878:	40000400 	.word	0x40000400
 800387c:	40000800 	.word	0x40000800

08003880 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b0c      	cmp	r3, #12
 8003892:	d841      	bhi.n	8003918 <HAL_TIM_IC_Stop_IT+0x98>
 8003894:	a201      	add	r2, pc, #4	@ (adr r2, 800389c <HAL_TIM_IC_Stop_IT+0x1c>)
 8003896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389a:	bf00      	nop
 800389c:	080038d1 	.word	0x080038d1
 80038a0:	08003919 	.word	0x08003919
 80038a4:	08003919 	.word	0x08003919
 80038a8:	08003919 	.word	0x08003919
 80038ac:	080038e3 	.word	0x080038e3
 80038b0:	08003919 	.word	0x08003919
 80038b4:	08003919 	.word	0x08003919
 80038b8:	08003919 	.word	0x08003919
 80038bc:	080038f5 	.word	0x080038f5
 80038c0:	08003919 	.word	0x08003919
 80038c4:	08003919 	.word	0x08003919
 80038c8:	08003919 	.word	0x08003919
 80038cc:	08003907 	.word	0x08003907
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0202 	bic.w	r2, r2, #2
 80038de:	60da      	str	r2, [r3, #12]
      break;
 80038e0:	e01d      	b.n	800391e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0204 	bic.w	r2, r2, #4
 80038f0:	60da      	str	r2, [r3, #12]
      break;
 80038f2:	e014      	b.n	800391e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0208 	bic.w	r2, r2, #8
 8003902:	60da      	str	r2, [r3, #12]
      break;
 8003904:	e00b      	b.n	800391e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0210 	bic.w	r2, r2, #16
 8003914:	60da      	str	r2, [r3, #12]
      break;
 8003916:	e002      	b.n	800391e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	73fb      	strb	r3, [r7, #15]
      break;
 800391c:	bf00      	nop
  }

  if (status == HAL_OK)
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d156      	bne.n	80039d2 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2200      	movs	r2, #0
 800392a:	6839      	ldr	r1, [r7, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f000 fdf6 	bl	800451e <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6a1a      	ldr	r2, [r3, #32]
 8003938:	f241 1311 	movw	r3, #4369	@ 0x1111
 800393c:	4013      	ands	r3, r2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10f      	bne.n	8003962 <HAL_TIM_IC_Stop_IT+0xe2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6a1a      	ldr	r2, [r3, #32]
 8003948:	f240 4344 	movw	r3, #1092	@ 0x444
 800394c:	4013      	ands	r3, r2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d107      	bne.n	8003962 <HAL_TIM_IC_Stop_IT+0xe2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0201 	bic.w	r2, r2, #1
 8003960:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d104      	bne.n	8003972 <HAL_TIM_IC_Stop_IT+0xf2>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003970:	e013      	b.n	800399a <HAL_TIM_IC_Stop_IT+0x11a>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b04      	cmp	r3, #4
 8003976:	d104      	bne.n	8003982 <HAL_TIM_IC_Stop_IT+0x102>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003980:	e00b      	b.n	800399a <HAL_TIM_IC_Stop_IT+0x11a>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b08      	cmp	r3, #8
 8003986:	d104      	bne.n	8003992 <HAL_TIM_IC_Stop_IT+0x112>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003990:	e003      	b.n	800399a <HAL_TIM_IC_Stop_IT+0x11a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d104      	bne.n	80039aa <HAL_TIM_IC_Stop_IT+0x12a>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039a8:	e013      	b.n	80039d2 <HAL_TIM_IC_Stop_IT+0x152>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d104      	bne.n	80039ba <HAL_TIM_IC_Stop_IT+0x13a>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039b8:	e00b      	b.n	80039d2 <HAL_TIM_IC_Stop_IT+0x152>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d104      	bne.n	80039ca <HAL_TIM_IC_Stop_IT+0x14a>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039c8:	e003      	b.n	80039d2 <HAL_TIM_IC_Stop_IT+0x152>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 80039d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d020      	beq.n	8003a40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d01b      	beq.n	8003a40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f06f 0202 	mvn.w	r2, #2
 8003a10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fd f9ea 	bl	8000e00 <HAL_TIM_IC_CaptureCallback>
 8003a2c:	e005      	b.n	8003a3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fab7 	bl	8003fa2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 fabd 	bl	8003fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d020      	beq.n	8003a8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d01b      	beq.n	8003a8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f06f 0204 	mvn.w	r2, #4
 8003a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2202      	movs	r2, #2
 8003a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fd f9c4 	bl	8000e00 <HAL_TIM_IC_CaptureCallback>
 8003a78:	e005      	b.n	8003a86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fa91 	bl	8003fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 fa97 	bl	8003fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d020      	beq.n	8003ad8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d01b      	beq.n	8003ad8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0208 	mvn.w	r2, #8
 8003aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2204      	movs	r2, #4
 8003aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fd f99e 	bl	8000e00 <HAL_TIM_IC_CaptureCallback>
 8003ac4:	e005      	b.n	8003ad2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fa6b 	bl	8003fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fa71 	bl	8003fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f003 0310 	and.w	r3, r3, #16
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d020      	beq.n	8003b24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f003 0310 	and.w	r3, r3, #16
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01b      	beq.n	8003b24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f06f 0210 	mvn.w	r2, #16
 8003af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2208      	movs	r2, #8
 8003afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7fd f978 	bl	8000e00 <HAL_TIM_IC_CaptureCallback>
 8003b10:	e005      	b.n	8003b1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fa45 	bl	8003fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 fa4b 	bl	8003fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00c      	beq.n	8003b48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d007      	beq.n	8003b48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f06f 0201 	mvn.w	r2, #1
 8003b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fa24 	bl	8003f90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00c      	beq.n	8003b6c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d007      	beq.n	8003b6c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fd65 	bl	8004636 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00c      	beq.n	8003b90 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d007      	beq.n	8003b90 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 fa1b 	bl	8003fc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00c      	beq.n	8003bb4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d007      	beq.n	8003bb4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f06f 0220 	mvn.w	r2, #32
 8003bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fd38 	bl	8004624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d101      	bne.n	8003bda <HAL_TIM_IC_ConfigChannel+0x1e>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e088      	b.n	8003cec <HAL_TIM_IC_ConfigChannel+0x130>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d11b      	bne.n	8003c20 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003bf8:	f000 faee 	bl	80041d8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699a      	ldr	r2, [r3, #24]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 020c 	bic.w	r2, r2, #12
 8003c0a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6999      	ldr	r1, [r3, #24]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	619a      	str	r2, [r3, #24]
 8003c1e:	e060      	b.n	8003ce2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d11c      	bne.n	8003c60 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003c36:	f000 fb57 	bl	80042e8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699a      	ldr	r2, [r3, #24]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003c48:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6999      	ldr	r1, [r3, #24]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	021a      	lsls	r2, r3, #8
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	619a      	str	r2, [r3, #24]
 8003c5e:	e040      	b.n	8003ce2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d11b      	bne.n	8003c9e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003c76:	f000 fba2 	bl	80043be <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69da      	ldr	r2, [r3, #28]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 020c 	bic.w	r2, r2, #12
 8003c88:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69d9      	ldr	r1, [r3, #28]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	61da      	str	r2, [r3, #28]
 8003c9c:	e021      	b.n	8003ce2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b0c      	cmp	r3, #12
 8003ca2:	d11c      	bne.n	8003cde <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003cb4:	f000 fbbe 	bl	8004434 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	69da      	ldr	r2, [r3, #28]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003cc6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	69d9      	ldr	r1, [r3, #28]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	021a      	lsls	r2, r3, #8
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	61da      	str	r2, [r3, #28]
 8003cdc:	e001      	b.n	8003ce2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_TIM_ConfigClockSource+0x1c>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e0b4      	b.n	8003e7a <HAL_TIM_ConfigClockSource+0x186>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d48:	d03e      	beq.n	8003dc8 <HAL_TIM_ConfigClockSource+0xd4>
 8003d4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d4e:	f200 8087 	bhi.w	8003e60 <HAL_TIM_ConfigClockSource+0x16c>
 8003d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d56:	f000 8086 	beq.w	8003e66 <HAL_TIM_ConfigClockSource+0x172>
 8003d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d5e:	d87f      	bhi.n	8003e60 <HAL_TIM_ConfigClockSource+0x16c>
 8003d60:	2b70      	cmp	r3, #112	@ 0x70
 8003d62:	d01a      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0xa6>
 8003d64:	2b70      	cmp	r3, #112	@ 0x70
 8003d66:	d87b      	bhi.n	8003e60 <HAL_TIM_ConfigClockSource+0x16c>
 8003d68:	2b60      	cmp	r3, #96	@ 0x60
 8003d6a:	d050      	beq.n	8003e0e <HAL_TIM_ConfigClockSource+0x11a>
 8003d6c:	2b60      	cmp	r3, #96	@ 0x60
 8003d6e:	d877      	bhi.n	8003e60 <HAL_TIM_ConfigClockSource+0x16c>
 8003d70:	2b50      	cmp	r3, #80	@ 0x50
 8003d72:	d03c      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0xfa>
 8003d74:	2b50      	cmp	r3, #80	@ 0x50
 8003d76:	d873      	bhi.n	8003e60 <HAL_TIM_ConfigClockSource+0x16c>
 8003d78:	2b40      	cmp	r3, #64	@ 0x40
 8003d7a:	d058      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0x13a>
 8003d7c:	2b40      	cmp	r3, #64	@ 0x40
 8003d7e:	d86f      	bhi.n	8003e60 <HAL_TIM_ConfigClockSource+0x16c>
 8003d80:	2b30      	cmp	r3, #48	@ 0x30
 8003d82:	d064      	beq.n	8003e4e <HAL_TIM_ConfigClockSource+0x15a>
 8003d84:	2b30      	cmp	r3, #48	@ 0x30
 8003d86:	d86b      	bhi.n	8003e60 <HAL_TIM_ConfigClockSource+0x16c>
 8003d88:	2b20      	cmp	r3, #32
 8003d8a:	d060      	beq.n	8003e4e <HAL_TIM_ConfigClockSource+0x15a>
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d867      	bhi.n	8003e60 <HAL_TIM_ConfigClockSource+0x16c>
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d05c      	beq.n	8003e4e <HAL_TIM_ConfigClockSource+0x15a>
 8003d94:	2b10      	cmp	r3, #16
 8003d96:	d05a      	beq.n	8003e4e <HAL_TIM_ConfigClockSource+0x15a>
 8003d98:	e062      	b.n	8003e60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003daa:	f000 fb99 	bl	80044e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003dbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	609a      	str	r2, [r3, #8]
      break;
 8003dc6:	e04f      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dd8:	f000 fb82 	bl	80044e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003dea:	609a      	str	r2, [r3, #8]
      break;
 8003dec:	e03c      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	f000 fa46 	bl	800428c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2150      	movs	r1, #80	@ 0x50
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 fb50 	bl	80044ac <TIM_ITRx_SetConfig>
      break;
 8003e0c:	e02c      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f000 faa0 	bl	8004360 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2160      	movs	r1, #96	@ 0x60
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 fb40 	bl	80044ac <TIM_ITRx_SetConfig>
      break;
 8003e2c:	e01c      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f000 fa26 	bl	800428c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2140      	movs	r1, #64	@ 0x40
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 fb30 	bl	80044ac <TIM_ITRx_SetConfig>
      break;
 8003e4c:	e00c      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4619      	mov	r1, r3
 8003e58:	4610      	mov	r0, r2
 8003e5a:	f000 fb27 	bl	80044ac <TIM_ITRx_SetConfig>
      break;
 8003e5e:	e003      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	73fb      	strb	r3, [r7, #15]
      break;
 8003e64:	e000      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <HAL_TIM_SlaveConfigSynchro+0x18>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e031      	b.n	8003efe <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003eaa:	6839      	ldr	r1, [r7, #0]
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f901 	bl	80040b4 <TIM_SlaveTimer_SetConfig>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d009      	beq.n	8003ecc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e018      	b.n	8003efe <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eda:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003eea:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	2b0c      	cmp	r3, #12
 8003f1a:	d831      	bhi.n	8003f80 <HAL_TIM_ReadCapturedValue+0x78>
 8003f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f24 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f22:	bf00      	nop
 8003f24:	08003f59 	.word	0x08003f59
 8003f28:	08003f81 	.word	0x08003f81
 8003f2c:	08003f81 	.word	0x08003f81
 8003f30:	08003f81 	.word	0x08003f81
 8003f34:	08003f63 	.word	0x08003f63
 8003f38:	08003f81 	.word	0x08003f81
 8003f3c:	08003f81 	.word	0x08003f81
 8003f40:	08003f81 	.word	0x08003f81
 8003f44:	08003f6d 	.word	0x08003f6d
 8003f48:	08003f81 	.word	0x08003f81
 8003f4c:	08003f81 	.word	0x08003f81
 8003f50:	08003f81 	.word	0x08003f81
 8003f54:	08003f77 	.word	0x08003f77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f5e:	60fb      	str	r3, [r7, #12]

      break;
 8003f60:	e00f      	b.n	8003f82 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f68:	60fb      	str	r3, [r7, #12]

      break;
 8003f6a:	e00a      	b.n	8003f82 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f72:	60fb      	str	r3, [r7, #12]

      break;
 8003f74:	e005      	b.n	8003f82 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7c:	60fb      	str	r3, [r7, #12]

      break;
 8003f7e:	e000      	b.n	8003f82 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003f80:	bf00      	nop
  }

  return tmpreg;
 8003f82:	68fb      	ldr	r3, [r7, #12]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bc80      	pop	{r7}
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop

08003f90 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr

08003fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a2f      	ldr	r2, [pc, #188]	@ (80040a8 <TIM_Base_SetConfig+0xd0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00b      	beq.n	8004008 <TIM_Base_SetConfig+0x30>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ff6:	d007      	beq.n	8004008 <TIM_Base_SetConfig+0x30>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a2c      	ldr	r2, [pc, #176]	@ (80040ac <TIM_Base_SetConfig+0xd4>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d003      	beq.n	8004008 <TIM_Base_SetConfig+0x30>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a2b      	ldr	r2, [pc, #172]	@ (80040b0 <TIM_Base_SetConfig+0xd8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d108      	bne.n	800401a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800400e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a22      	ldr	r2, [pc, #136]	@ (80040a8 <TIM_Base_SetConfig+0xd0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00b      	beq.n	800403a <TIM_Base_SetConfig+0x62>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004028:	d007      	beq.n	800403a <TIM_Base_SetConfig+0x62>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a1f      	ldr	r2, [pc, #124]	@ (80040ac <TIM_Base_SetConfig+0xd4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d003      	beq.n	800403a <TIM_Base_SetConfig+0x62>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a1e      	ldr	r2, [pc, #120]	@ (80040b0 <TIM_Base_SetConfig+0xd8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d108      	bne.n	800404c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	4313      	orrs	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a0d      	ldr	r2, [pc, #52]	@ (80040a8 <TIM_Base_SetConfig+0xd0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d103      	bne.n	8004080 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	691a      	ldr	r2, [r3, #16]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	f023 0201 	bic.w	r2, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	611a      	str	r2, [r3, #16]
  }
}
 800409e:	bf00      	nop
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr
 80040a8:	40012c00 	.word	0x40012c00
 80040ac:	40000400 	.word	0x40000400
 80040b0:	40000800 	.word	0x40000800

080040b4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040d0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f023 0307 	bic.w	r3, r3, #7
 80040e2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b70      	cmp	r3, #112	@ 0x70
 80040fc:	d01a      	beq.n	8004134 <TIM_SlaveTimer_SetConfig+0x80>
 80040fe:	2b70      	cmp	r3, #112	@ 0x70
 8004100:	d860      	bhi.n	80041c4 <TIM_SlaveTimer_SetConfig+0x110>
 8004102:	2b60      	cmp	r3, #96	@ 0x60
 8004104:	d054      	beq.n	80041b0 <TIM_SlaveTimer_SetConfig+0xfc>
 8004106:	2b60      	cmp	r3, #96	@ 0x60
 8004108:	d85c      	bhi.n	80041c4 <TIM_SlaveTimer_SetConfig+0x110>
 800410a:	2b50      	cmp	r3, #80	@ 0x50
 800410c:	d046      	beq.n	800419c <TIM_SlaveTimer_SetConfig+0xe8>
 800410e:	2b50      	cmp	r3, #80	@ 0x50
 8004110:	d858      	bhi.n	80041c4 <TIM_SlaveTimer_SetConfig+0x110>
 8004112:	2b40      	cmp	r3, #64	@ 0x40
 8004114:	d019      	beq.n	800414a <TIM_SlaveTimer_SetConfig+0x96>
 8004116:	2b40      	cmp	r3, #64	@ 0x40
 8004118:	d854      	bhi.n	80041c4 <TIM_SlaveTimer_SetConfig+0x110>
 800411a:	2b30      	cmp	r3, #48	@ 0x30
 800411c:	d055      	beq.n	80041ca <TIM_SlaveTimer_SetConfig+0x116>
 800411e:	2b30      	cmp	r3, #48	@ 0x30
 8004120:	d850      	bhi.n	80041c4 <TIM_SlaveTimer_SetConfig+0x110>
 8004122:	2b20      	cmp	r3, #32
 8004124:	d051      	beq.n	80041ca <TIM_SlaveTimer_SetConfig+0x116>
 8004126:	2b20      	cmp	r3, #32
 8004128:	d84c      	bhi.n	80041c4 <TIM_SlaveTimer_SetConfig+0x110>
 800412a:	2b00      	cmp	r3, #0
 800412c:	d04d      	beq.n	80041ca <TIM_SlaveTimer_SetConfig+0x116>
 800412e:	2b10      	cmp	r3, #16
 8004130:	d04b      	beq.n	80041ca <TIM_SlaveTimer_SetConfig+0x116>
 8004132:	e047      	b.n	80041c4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004144:	f000 f9cc 	bl	80044e0 <TIM_ETR_SetConfig>
      break;
 8004148:	e040      	b.n	80041cc <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b05      	cmp	r3, #5
 8004150:	d101      	bne.n	8004156 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e03b      	b.n	80041ce <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6a1a      	ldr	r2, [r3, #32]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0201 	bic.w	r2, r2, #1
 800416c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800417c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	4313      	orrs	r3, r2
 8004188:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	621a      	str	r2, [r3, #32]
      break;
 800419a:	e017      	b.n	80041cc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041a8:	461a      	mov	r2, r3
 80041aa:	f000 f86f 	bl	800428c <TIM_TI1_ConfigInputStage>
      break;
 80041ae:	e00d      	b.n	80041cc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041bc:	461a      	mov	r2, r3
 80041be:	f000 f8cf 	bl	8004360 <TIM_TI2_ConfigInputStage>
      break;
 80041c2:	e003      	b.n	80041cc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	75fb      	strb	r3, [r7, #23]
      break;
 80041c8:	e000      	b.n	80041cc <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80041ca:	bf00      	nop
  }

  return status;
 80041cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	f023 0201 	bic.w	r2, r3, #1
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	4a1f      	ldr	r2, [pc, #124]	@ (8004280 <TIM_TI1_SetConfig+0xa8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d00b      	beq.n	800421e <TIM_TI1_SetConfig+0x46>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800420c:	d007      	beq.n	800421e <TIM_TI1_SetConfig+0x46>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4a1c      	ldr	r2, [pc, #112]	@ (8004284 <TIM_TI1_SetConfig+0xac>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d003      	beq.n	800421e <TIM_TI1_SetConfig+0x46>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4a1b      	ldr	r2, [pc, #108]	@ (8004288 <TIM_TI1_SetConfig+0xb0>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d101      	bne.n	8004222 <TIM_TI1_SetConfig+0x4a>
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <TIM_TI1_SetConfig+0x4c>
 8004222:	2300      	movs	r3, #0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d008      	beq.n	800423a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f023 0303 	bic.w	r3, r3, #3
 800422e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4313      	orrs	r3, r2
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	e003      	b.n	8004242 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f043 0301 	orr.w	r3, r3, #1
 8004240:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004248:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	b2db      	uxtb	r3, r3
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	4313      	orrs	r3, r2
 8004254:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f023 030a 	bic.w	r3, r3, #10
 800425c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	f003 030a 	and.w	r3, r3, #10
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	621a      	str	r2, [r3, #32]
}
 8004276:	bf00      	nop
 8004278:	371c      	adds	r7, #28
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr
 8004280:	40012c00 	.word	0x40012c00
 8004284:	40000400 	.word	0x40000400
 8004288:	40000800 	.word	0x40000800

0800428c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	f023 0201 	bic.w	r2, r3, #1
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f023 030a 	bic.w	r3, r3, #10
 80042c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	621a      	str	r2, [r3, #32]
}
 80042de:	bf00      	nop
 80042e0:	371c      	adds	r7, #28
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr

080042e8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	f023 0210 	bic.w	r2, r3, #16
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004314:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	021b      	lsls	r3, r3, #8
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	4313      	orrs	r3, r2
 800431e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004326:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	031b      	lsls	r3, r3, #12
 800432c:	b29b      	uxth	r3, r3
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	4313      	orrs	r3, r2
 8004332:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800433a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	4313      	orrs	r3, r2
 8004348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	621a      	str	r2, [r3, #32]
}
 8004356:	bf00      	nop
 8004358:	371c      	adds	r7, #28
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr

08004360 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	f023 0210 	bic.w	r2, r3, #16
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800438a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	031b      	lsls	r3, r3, #12
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800439c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	621a      	str	r2, [r3, #32]
}
 80043b4:	bf00      	nop
 80043b6:	371c      	adds	r7, #28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr

080043be <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043be:	b480      	push	{r7}
 80043c0:	b087      	sub	sp, #28
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
 80043ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f023 0303 	bic.w	r3, r3, #3
 80043ea:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043fa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	b2db      	uxtb	r3, r3
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	4313      	orrs	r3, r2
 8004406:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800440e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	021b      	lsls	r3, r3, #8
 8004414:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	4313      	orrs	r3, r2
 800441c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	621a      	str	r2, [r3, #32]
}
 800442a:	bf00      	nop
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
 8004440:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004460:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	021b      	lsls	r3, r3, #8
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004472:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	031b      	lsls	r3, r3, #12
 8004478:	b29b      	uxth	r3, r3
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4313      	orrs	r3, r2
 800447e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004486:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	031b      	lsls	r3, r3, #12
 800448c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	4313      	orrs	r3, r2
 8004494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	621a      	str	r2, [r3, #32]
}
 80044a2:	bf00      	nop
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr

080044ac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	f043 0307 	orr.w	r3, r3, #7
 80044ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	609a      	str	r2, [r3, #8]
}
 80044d6:	bf00      	nop
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr

080044e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	021a      	lsls	r2, r3, #8
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	431a      	orrs	r2, r3
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	4313      	orrs	r3, r2
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	4313      	orrs	r3, r2
 800450c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	609a      	str	r2, [r3, #8]
}
 8004514:	bf00      	nop
 8004516:	371c      	adds	r7, #28
 8004518:	46bd      	mov	sp, r7
 800451a:	bc80      	pop	{r7}
 800451c:	4770      	bx	lr

0800451e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800451e:	b480      	push	{r7}
 8004520:	b087      	sub	sp, #28
 8004522:	af00      	add	r7, sp, #0
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f003 031f 	and.w	r3, r3, #31
 8004530:	2201      	movs	r2, #1
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6a1a      	ldr	r2, [r3, #32]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	43db      	mvns	r3, r3
 8004540:	401a      	ands	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a1a      	ldr	r2, [r3, #32]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f003 031f 	and.w	r3, r3, #31
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	fa01 f303 	lsl.w	r3, r1, r3
 8004556:	431a      	orrs	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	621a      	str	r2, [r3, #32]
}
 800455c:	bf00      	nop
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr
	...

08004568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004578:	2b01      	cmp	r3, #1
 800457a:	d101      	bne.n	8004580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800457c:	2302      	movs	r3, #2
 800457e:	e046      	b.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a16      	ldr	r2, [pc, #88]	@ (8004618 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d00e      	beq.n	80045e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045cc:	d009      	beq.n	80045e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a12      	ldr	r2, [pc, #72]	@ (800461c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d004      	beq.n	80045e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a10      	ldr	r2, [pc, #64]	@ (8004620 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d10c      	bne.n	80045fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	bc80      	pop	{r7}
 8004616:	4770      	bx	lr
 8004618:	40012c00 	.word	0x40012c00
 800461c:	40000400 	.word	0x40000400
 8004620:	40000800 	.word	0x40000800

08004624 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	bc80      	pop	{r7}
 8004634:	4770      	bx	lr

08004636 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr

08004648 <siprintf>:
 8004648:	b40e      	push	{r1, r2, r3}
 800464a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800464e:	b500      	push	{lr}
 8004650:	b09c      	sub	sp, #112	@ 0x70
 8004652:	ab1d      	add	r3, sp, #116	@ 0x74
 8004654:	9002      	str	r0, [sp, #8]
 8004656:	9006      	str	r0, [sp, #24]
 8004658:	9107      	str	r1, [sp, #28]
 800465a:	9104      	str	r1, [sp, #16]
 800465c:	4808      	ldr	r0, [pc, #32]	@ (8004680 <siprintf+0x38>)
 800465e:	4909      	ldr	r1, [pc, #36]	@ (8004684 <siprintf+0x3c>)
 8004660:	f853 2b04 	ldr.w	r2, [r3], #4
 8004664:	9105      	str	r1, [sp, #20]
 8004666:	6800      	ldr	r0, [r0, #0]
 8004668:	a902      	add	r1, sp, #8
 800466a:	9301      	str	r3, [sp, #4]
 800466c:	f000 f9a0 	bl	80049b0 <_svfiprintf_r>
 8004670:	2200      	movs	r2, #0
 8004672:	9b02      	ldr	r3, [sp, #8]
 8004674:	701a      	strb	r2, [r3, #0]
 8004676:	b01c      	add	sp, #112	@ 0x70
 8004678:	f85d eb04 	ldr.w	lr, [sp], #4
 800467c:	b003      	add	sp, #12
 800467e:	4770      	bx	lr
 8004680:	2000000c 	.word	0x2000000c
 8004684:	ffff0208 	.word	0xffff0208

08004688 <memset>:
 8004688:	4603      	mov	r3, r0
 800468a:	4402      	add	r2, r0
 800468c:	4293      	cmp	r3, r2
 800468e:	d100      	bne.n	8004692 <memset+0xa>
 8004690:	4770      	bx	lr
 8004692:	f803 1b01 	strb.w	r1, [r3], #1
 8004696:	e7f9      	b.n	800468c <memset+0x4>

08004698 <__errno>:
 8004698:	4b01      	ldr	r3, [pc, #4]	@ (80046a0 <__errno+0x8>)
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	2000000c 	.word	0x2000000c

080046a4 <__libc_init_array>:
 80046a4:	b570      	push	{r4, r5, r6, lr}
 80046a6:	2600      	movs	r6, #0
 80046a8:	4d0c      	ldr	r5, [pc, #48]	@ (80046dc <__libc_init_array+0x38>)
 80046aa:	4c0d      	ldr	r4, [pc, #52]	@ (80046e0 <__libc_init_array+0x3c>)
 80046ac:	1b64      	subs	r4, r4, r5
 80046ae:	10a4      	asrs	r4, r4, #2
 80046b0:	42a6      	cmp	r6, r4
 80046b2:	d109      	bne.n	80046c8 <__libc_init_array+0x24>
 80046b4:	f000 fc78 	bl	8004fa8 <_init>
 80046b8:	2600      	movs	r6, #0
 80046ba:	4d0a      	ldr	r5, [pc, #40]	@ (80046e4 <__libc_init_array+0x40>)
 80046bc:	4c0a      	ldr	r4, [pc, #40]	@ (80046e8 <__libc_init_array+0x44>)
 80046be:	1b64      	subs	r4, r4, r5
 80046c0:	10a4      	asrs	r4, r4, #2
 80046c2:	42a6      	cmp	r6, r4
 80046c4:	d105      	bne.n	80046d2 <__libc_init_array+0x2e>
 80046c6:	bd70      	pop	{r4, r5, r6, pc}
 80046c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046cc:	4798      	blx	r3
 80046ce:	3601      	adds	r6, #1
 80046d0:	e7ee      	b.n	80046b0 <__libc_init_array+0xc>
 80046d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046d6:	4798      	blx	r3
 80046d8:	3601      	adds	r6, #1
 80046da:	e7f2      	b.n	80046c2 <__libc_init_array+0x1e>
 80046dc:	08005668 	.word	0x08005668
 80046e0:	08005668 	.word	0x08005668
 80046e4:	08005668 	.word	0x08005668
 80046e8:	0800566c 	.word	0x0800566c

080046ec <__retarget_lock_acquire_recursive>:
 80046ec:	4770      	bx	lr

080046ee <__retarget_lock_release_recursive>:
 80046ee:	4770      	bx	lr

080046f0 <memcpy>:
 80046f0:	440a      	add	r2, r1
 80046f2:	4291      	cmp	r1, r2
 80046f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80046f8:	d100      	bne.n	80046fc <memcpy+0xc>
 80046fa:	4770      	bx	lr
 80046fc:	b510      	push	{r4, lr}
 80046fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004702:	4291      	cmp	r1, r2
 8004704:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004708:	d1f9      	bne.n	80046fe <memcpy+0xe>
 800470a:	bd10      	pop	{r4, pc}

0800470c <_free_r>:
 800470c:	b538      	push	{r3, r4, r5, lr}
 800470e:	4605      	mov	r5, r0
 8004710:	2900      	cmp	r1, #0
 8004712:	d040      	beq.n	8004796 <_free_r+0x8a>
 8004714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004718:	1f0c      	subs	r4, r1, #4
 800471a:	2b00      	cmp	r3, #0
 800471c:	bfb8      	it	lt
 800471e:	18e4      	addlt	r4, r4, r3
 8004720:	f000 f8de 	bl	80048e0 <__malloc_lock>
 8004724:	4a1c      	ldr	r2, [pc, #112]	@ (8004798 <_free_r+0x8c>)
 8004726:	6813      	ldr	r3, [r2, #0]
 8004728:	b933      	cbnz	r3, 8004738 <_free_r+0x2c>
 800472a:	6063      	str	r3, [r4, #4]
 800472c:	6014      	str	r4, [r2, #0]
 800472e:	4628      	mov	r0, r5
 8004730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004734:	f000 b8da 	b.w	80048ec <__malloc_unlock>
 8004738:	42a3      	cmp	r3, r4
 800473a:	d908      	bls.n	800474e <_free_r+0x42>
 800473c:	6820      	ldr	r0, [r4, #0]
 800473e:	1821      	adds	r1, r4, r0
 8004740:	428b      	cmp	r3, r1
 8004742:	bf01      	itttt	eq
 8004744:	6819      	ldreq	r1, [r3, #0]
 8004746:	685b      	ldreq	r3, [r3, #4]
 8004748:	1809      	addeq	r1, r1, r0
 800474a:	6021      	streq	r1, [r4, #0]
 800474c:	e7ed      	b.n	800472a <_free_r+0x1e>
 800474e:	461a      	mov	r2, r3
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	b10b      	cbz	r3, 8004758 <_free_r+0x4c>
 8004754:	42a3      	cmp	r3, r4
 8004756:	d9fa      	bls.n	800474e <_free_r+0x42>
 8004758:	6811      	ldr	r1, [r2, #0]
 800475a:	1850      	adds	r0, r2, r1
 800475c:	42a0      	cmp	r0, r4
 800475e:	d10b      	bne.n	8004778 <_free_r+0x6c>
 8004760:	6820      	ldr	r0, [r4, #0]
 8004762:	4401      	add	r1, r0
 8004764:	1850      	adds	r0, r2, r1
 8004766:	4283      	cmp	r3, r0
 8004768:	6011      	str	r1, [r2, #0]
 800476a:	d1e0      	bne.n	800472e <_free_r+0x22>
 800476c:	6818      	ldr	r0, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	4408      	add	r0, r1
 8004772:	6010      	str	r0, [r2, #0]
 8004774:	6053      	str	r3, [r2, #4]
 8004776:	e7da      	b.n	800472e <_free_r+0x22>
 8004778:	d902      	bls.n	8004780 <_free_r+0x74>
 800477a:	230c      	movs	r3, #12
 800477c:	602b      	str	r3, [r5, #0]
 800477e:	e7d6      	b.n	800472e <_free_r+0x22>
 8004780:	6820      	ldr	r0, [r4, #0]
 8004782:	1821      	adds	r1, r4, r0
 8004784:	428b      	cmp	r3, r1
 8004786:	bf01      	itttt	eq
 8004788:	6819      	ldreq	r1, [r3, #0]
 800478a:	685b      	ldreq	r3, [r3, #4]
 800478c:	1809      	addeq	r1, r1, r0
 800478e:	6021      	streq	r1, [r4, #0]
 8004790:	6063      	str	r3, [r4, #4]
 8004792:	6054      	str	r4, [r2, #4]
 8004794:	e7cb      	b.n	800472e <_free_r+0x22>
 8004796:	bd38      	pop	{r3, r4, r5, pc}
 8004798:	20000690 	.word	0x20000690

0800479c <sbrk_aligned>:
 800479c:	b570      	push	{r4, r5, r6, lr}
 800479e:	4e0f      	ldr	r6, [pc, #60]	@ (80047dc <sbrk_aligned+0x40>)
 80047a0:	460c      	mov	r4, r1
 80047a2:	6831      	ldr	r1, [r6, #0]
 80047a4:	4605      	mov	r5, r0
 80047a6:	b911      	cbnz	r1, 80047ae <sbrk_aligned+0x12>
 80047a8:	f000 fbaa 	bl	8004f00 <_sbrk_r>
 80047ac:	6030      	str	r0, [r6, #0]
 80047ae:	4621      	mov	r1, r4
 80047b0:	4628      	mov	r0, r5
 80047b2:	f000 fba5 	bl	8004f00 <_sbrk_r>
 80047b6:	1c43      	adds	r3, r0, #1
 80047b8:	d103      	bne.n	80047c2 <sbrk_aligned+0x26>
 80047ba:	f04f 34ff 	mov.w	r4, #4294967295
 80047be:	4620      	mov	r0, r4
 80047c0:	bd70      	pop	{r4, r5, r6, pc}
 80047c2:	1cc4      	adds	r4, r0, #3
 80047c4:	f024 0403 	bic.w	r4, r4, #3
 80047c8:	42a0      	cmp	r0, r4
 80047ca:	d0f8      	beq.n	80047be <sbrk_aligned+0x22>
 80047cc:	1a21      	subs	r1, r4, r0
 80047ce:	4628      	mov	r0, r5
 80047d0:	f000 fb96 	bl	8004f00 <_sbrk_r>
 80047d4:	3001      	adds	r0, #1
 80047d6:	d1f2      	bne.n	80047be <sbrk_aligned+0x22>
 80047d8:	e7ef      	b.n	80047ba <sbrk_aligned+0x1e>
 80047da:	bf00      	nop
 80047dc:	2000068c 	.word	0x2000068c

080047e0 <_malloc_r>:
 80047e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047e4:	1ccd      	adds	r5, r1, #3
 80047e6:	f025 0503 	bic.w	r5, r5, #3
 80047ea:	3508      	adds	r5, #8
 80047ec:	2d0c      	cmp	r5, #12
 80047ee:	bf38      	it	cc
 80047f0:	250c      	movcc	r5, #12
 80047f2:	2d00      	cmp	r5, #0
 80047f4:	4606      	mov	r6, r0
 80047f6:	db01      	blt.n	80047fc <_malloc_r+0x1c>
 80047f8:	42a9      	cmp	r1, r5
 80047fa:	d904      	bls.n	8004806 <_malloc_r+0x26>
 80047fc:	230c      	movs	r3, #12
 80047fe:	6033      	str	r3, [r6, #0]
 8004800:	2000      	movs	r0, #0
 8004802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004806:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048dc <_malloc_r+0xfc>
 800480a:	f000 f869 	bl	80048e0 <__malloc_lock>
 800480e:	f8d8 3000 	ldr.w	r3, [r8]
 8004812:	461c      	mov	r4, r3
 8004814:	bb44      	cbnz	r4, 8004868 <_malloc_r+0x88>
 8004816:	4629      	mov	r1, r5
 8004818:	4630      	mov	r0, r6
 800481a:	f7ff ffbf 	bl	800479c <sbrk_aligned>
 800481e:	1c43      	adds	r3, r0, #1
 8004820:	4604      	mov	r4, r0
 8004822:	d158      	bne.n	80048d6 <_malloc_r+0xf6>
 8004824:	f8d8 4000 	ldr.w	r4, [r8]
 8004828:	4627      	mov	r7, r4
 800482a:	2f00      	cmp	r7, #0
 800482c:	d143      	bne.n	80048b6 <_malloc_r+0xd6>
 800482e:	2c00      	cmp	r4, #0
 8004830:	d04b      	beq.n	80048ca <_malloc_r+0xea>
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	4639      	mov	r1, r7
 8004836:	4630      	mov	r0, r6
 8004838:	eb04 0903 	add.w	r9, r4, r3
 800483c:	f000 fb60 	bl	8004f00 <_sbrk_r>
 8004840:	4581      	cmp	r9, r0
 8004842:	d142      	bne.n	80048ca <_malloc_r+0xea>
 8004844:	6821      	ldr	r1, [r4, #0]
 8004846:	4630      	mov	r0, r6
 8004848:	1a6d      	subs	r5, r5, r1
 800484a:	4629      	mov	r1, r5
 800484c:	f7ff ffa6 	bl	800479c <sbrk_aligned>
 8004850:	3001      	adds	r0, #1
 8004852:	d03a      	beq.n	80048ca <_malloc_r+0xea>
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	442b      	add	r3, r5
 8004858:	6023      	str	r3, [r4, #0]
 800485a:	f8d8 3000 	ldr.w	r3, [r8]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	bb62      	cbnz	r2, 80048bc <_malloc_r+0xdc>
 8004862:	f8c8 7000 	str.w	r7, [r8]
 8004866:	e00f      	b.n	8004888 <_malloc_r+0xa8>
 8004868:	6822      	ldr	r2, [r4, #0]
 800486a:	1b52      	subs	r2, r2, r5
 800486c:	d420      	bmi.n	80048b0 <_malloc_r+0xd0>
 800486e:	2a0b      	cmp	r2, #11
 8004870:	d917      	bls.n	80048a2 <_malloc_r+0xc2>
 8004872:	1961      	adds	r1, r4, r5
 8004874:	42a3      	cmp	r3, r4
 8004876:	6025      	str	r5, [r4, #0]
 8004878:	bf18      	it	ne
 800487a:	6059      	strne	r1, [r3, #4]
 800487c:	6863      	ldr	r3, [r4, #4]
 800487e:	bf08      	it	eq
 8004880:	f8c8 1000 	streq.w	r1, [r8]
 8004884:	5162      	str	r2, [r4, r5]
 8004886:	604b      	str	r3, [r1, #4]
 8004888:	4630      	mov	r0, r6
 800488a:	f000 f82f 	bl	80048ec <__malloc_unlock>
 800488e:	f104 000b 	add.w	r0, r4, #11
 8004892:	1d23      	adds	r3, r4, #4
 8004894:	f020 0007 	bic.w	r0, r0, #7
 8004898:	1ac2      	subs	r2, r0, r3
 800489a:	bf1c      	itt	ne
 800489c:	1a1b      	subne	r3, r3, r0
 800489e:	50a3      	strne	r3, [r4, r2]
 80048a0:	e7af      	b.n	8004802 <_malloc_r+0x22>
 80048a2:	6862      	ldr	r2, [r4, #4]
 80048a4:	42a3      	cmp	r3, r4
 80048a6:	bf0c      	ite	eq
 80048a8:	f8c8 2000 	streq.w	r2, [r8]
 80048ac:	605a      	strne	r2, [r3, #4]
 80048ae:	e7eb      	b.n	8004888 <_malloc_r+0xa8>
 80048b0:	4623      	mov	r3, r4
 80048b2:	6864      	ldr	r4, [r4, #4]
 80048b4:	e7ae      	b.n	8004814 <_malloc_r+0x34>
 80048b6:	463c      	mov	r4, r7
 80048b8:	687f      	ldr	r7, [r7, #4]
 80048ba:	e7b6      	b.n	800482a <_malloc_r+0x4a>
 80048bc:	461a      	mov	r2, r3
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	42a3      	cmp	r3, r4
 80048c2:	d1fb      	bne.n	80048bc <_malloc_r+0xdc>
 80048c4:	2300      	movs	r3, #0
 80048c6:	6053      	str	r3, [r2, #4]
 80048c8:	e7de      	b.n	8004888 <_malloc_r+0xa8>
 80048ca:	230c      	movs	r3, #12
 80048cc:	4630      	mov	r0, r6
 80048ce:	6033      	str	r3, [r6, #0]
 80048d0:	f000 f80c 	bl	80048ec <__malloc_unlock>
 80048d4:	e794      	b.n	8004800 <_malloc_r+0x20>
 80048d6:	6005      	str	r5, [r0, #0]
 80048d8:	e7d6      	b.n	8004888 <_malloc_r+0xa8>
 80048da:	bf00      	nop
 80048dc:	20000690 	.word	0x20000690

080048e0 <__malloc_lock>:
 80048e0:	4801      	ldr	r0, [pc, #4]	@ (80048e8 <__malloc_lock+0x8>)
 80048e2:	f7ff bf03 	b.w	80046ec <__retarget_lock_acquire_recursive>
 80048e6:	bf00      	nop
 80048e8:	20000688 	.word	0x20000688

080048ec <__malloc_unlock>:
 80048ec:	4801      	ldr	r0, [pc, #4]	@ (80048f4 <__malloc_unlock+0x8>)
 80048ee:	f7ff befe 	b.w	80046ee <__retarget_lock_release_recursive>
 80048f2:	bf00      	nop
 80048f4:	20000688 	.word	0x20000688

080048f8 <__ssputs_r>:
 80048f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048fc:	461f      	mov	r7, r3
 80048fe:	688e      	ldr	r6, [r1, #8]
 8004900:	4682      	mov	sl, r0
 8004902:	42be      	cmp	r6, r7
 8004904:	460c      	mov	r4, r1
 8004906:	4690      	mov	r8, r2
 8004908:	680b      	ldr	r3, [r1, #0]
 800490a:	d82d      	bhi.n	8004968 <__ssputs_r+0x70>
 800490c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004910:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004914:	d026      	beq.n	8004964 <__ssputs_r+0x6c>
 8004916:	6965      	ldr	r5, [r4, #20]
 8004918:	6909      	ldr	r1, [r1, #16]
 800491a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800491e:	eba3 0901 	sub.w	r9, r3, r1
 8004922:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004926:	1c7b      	adds	r3, r7, #1
 8004928:	444b      	add	r3, r9
 800492a:	106d      	asrs	r5, r5, #1
 800492c:	429d      	cmp	r5, r3
 800492e:	bf38      	it	cc
 8004930:	461d      	movcc	r5, r3
 8004932:	0553      	lsls	r3, r2, #21
 8004934:	d527      	bpl.n	8004986 <__ssputs_r+0x8e>
 8004936:	4629      	mov	r1, r5
 8004938:	f7ff ff52 	bl	80047e0 <_malloc_r>
 800493c:	4606      	mov	r6, r0
 800493e:	b360      	cbz	r0, 800499a <__ssputs_r+0xa2>
 8004940:	464a      	mov	r2, r9
 8004942:	6921      	ldr	r1, [r4, #16]
 8004944:	f7ff fed4 	bl	80046f0 <memcpy>
 8004948:	89a3      	ldrh	r3, [r4, #12]
 800494a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800494e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004952:	81a3      	strh	r3, [r4, #12]
 8004954:	6126      	str	r6, [r4, #16]
 8004956:	444e      	add	r6, r9
 8004958:	6026      	str	r6, [r4, #0]
 800495a:	463e      	mov	r6, r7
 800495c:	6165      	str	r5, [r4, #20]
 800495e:	eba5 0509 	sub.w	r5, r5, r9
 8004962:	60a5      	str	r5, [r4, #8]
 8004964:	42be      	cmp	r6, r7
 8004966:	d900      	bls.n	800496a <__ssputs_r+0x72>
 8004968:	463e      	mov	r6, r7
 800496a:	4632      	mov	r2, r6
 800496c:	4641      	mov	r1, r8
 800496e:	6820      	ldr	r0, [r4, #0]
 8004970:	f000 faac 	bl	8004ecc <memmove>
 8004974:	2000      	movs	r0, #0
 8004976:	68a3      	ldr	r3, [r4, #8]
 8004978:	1b9b      	subs	r3, r3, r6
 800497a:	60a3      	str	r3, [r4, #8]
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	4433      	add	r3, r6
 8004980:	6023      	str	r3, [r4, #0]
 8004982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004986:	462a      	mov	r2, r5
 8004988:	f000 fad8 	bl	8004f3c <_realloc_r>
 800498c:	4606      	mov	r6, r0
 800498e:	2800      	cmp	r0, #0
 8004990:	d1e0      	bne.n	8004954 <__ssputs_r+0x5c>
 8004992:	4650      	mov	r0, sl
 8004994:	6921      	ldr	r1, [r4, #16]
 8004996:	f7ff feb9 	bl	800470c <_free_r>
 800499a:	230c      	movs	r3, #12
 800499c:	f8ca 3000 	str.w	r3, [sl]
 80049a0:	89a3      	ldrh	r3, [r4, #12]
 80049a2:	f04f 30ff 	mov.w	r0, #4294967295
 80049a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049aa:	81a3      	strh	r3, [r4, #12]
 80049ac:	e7e9      	b.n	8004982 <__ssputs_r+0x8a>
	...

080049b0 <_svfiprintf_r>:
 80049b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b4:	4698      	mov	r8, r3
 80049b6:	898b      	ldrh	r3, [r1, #12]
 80049b8:	4607      	mov	r7, r0
 80049ba:	061b      	lsls	r3, r3, #24
 80049bc:	460d      	mov	r5, r1
 80049be:	4614      	mov	r4, r2
 80049c0:	b09d      	sub	sp, #116	@ 0x74
 80049c2:	d510      	bpl.n	80049e6 <_svfiprintf_r+0x36>
 80049c4:	690b      	ldr	r3, [r1, #16]
 80049c6:	b973      	cbnz	r3, 80049e6 <_svfiprintf_r+0x36>
 80049c8:	2140      	movs	r1, #64	@ 0x40
 80049ca:	f7ff ff09 	bl	80047e0 <_malloc_r>
 80049ce:	6028      	str	r0, [r5, #0]
 80049d0:	6128      	str	r0, [r5, #16]
 80049d2:	b930      	cbnz	r0, 80049e2 <_svfiprintf_r+0x32>
 80049d4:	230c      	movs	r3, #12
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	f04f 30ff 	mov.w	r0, #4294967295
 80049dc:	b01d      	add	sp, #116	@ 0x74
 80049de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e2:	2340      	movs	r3, #64	@ 0x40
 80049e4:	616b      	str	r3, [r5, #20]
 80049e6:	2300      	movs	r3, #0
 80049e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80049ea:	2320      	movs	r3, #32
 80049ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80049f0:	2330      	movs	r3, #48	@ 0x30
 80049f2:	f04f 0901 	mov.w	r9, #1
 80049f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80049fa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004b94 <_svfiprintf_r+0x1e4>
 80049fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a02:	4623      	mov	r3, r4
 8004a04:	469a      	mov	sl, r3
 8004a06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a0a:	b10a      	cbz	r2, 8004a10 <_svfiprintf_r+0x60>
 8004a0c:	2a25      	cmp	r2, #37	@ 0x25
 8004a0e:	d1f9      	bne.n	8004a04 <_svfiprintf_r+0x54>
 8004a10:	ebba 0b04 	subs.w	fp, sl, r4
 8004a14:	d00b      	beq.n	8004a2e <_svfiprintf_r+0x7e>
 8004a16:	465b      	mov	r3, fp
 8004a18:	4622      	mov	r2, r4
 8004a1a:	4629      	mov	r1, r5
 8004a1c:	4638      	mov	r0, r7
 8004a1e:	f7ff ff6b 	bl	80048f8 <__ssputs_r>
 8004a22:	3001      	adds	r0, #1
 8004a24:	f000 80a7 	beq.w	8004b76 <_svfiprintf_r+0x1c6>
 8004a28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a2a:	445a      	add	r2, fp
 8004a2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a2e:	f89a 3000 	ldrb.w	r3, [sl]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 809f 	beq.w	8004b76 <_svfiprintf_r+0x1c6>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a42:	f10a 0a01 	add.w	sl, sl, #1
 8004a46:	9304      	str	r3, [sp, #16]
 8004a48:	9307      	str	r3, [sp, #28]
 8004a4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a50:	4654      	mov	r4, sl
 8004a52:	2205      	movs	r2, #5
 8004a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a58:	484e      	ldr	r0, [pc, #312]	@ (8004b94 <_svfiprintf_r+0x1e4>)
 8004a5a:	f000 fa61 	bl	8004f20 <memchr>
 8004a5e:	9a04      	ldr	r2, [sp, #16]
 8004a60:	b9d8      	cbnz	r0, 8004a9a <_svfiprintf_r+0xea>
 8004a62:	06d0      	lsls	r0, r2, #27
 8004a64:	bf44      	itt	mi
 8004a66:	2320      	movmi	r3, #32
 8004a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a6c:	0711      	lsls	r1, r2, #28
 8004a6e:	bf44      	itt	mi
 8004a70:	232b      	movmi	r3, #43	@ 0x2b
 8004a72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a76:	f89a 3000 	ldrb.w	r3, [sl]
 8004a7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a7c:	d015      	beq.n	8004aaa <_svfiprintf_r+0xfa>
 8004a7e:	4654      	mov	r4, sl
 8004a80:	2000      	movs	r0, #0
 8004a82:	f04f 0c0a 	mov.w	ip, #10
 8004a86:	9a07      	ldr	r2, [sp, #28]
 8004a88:	4621      	mov	r1, r4
 8004a8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a8e:	3b30      	subs	r3, #48	@ 0x30
 8004a90:	2b09      	cmp	r3, #9
 8004a92:	d94b      	bls.n	8004b2c <_svfiprintf_r+0x17c>
 8004a94:	b1b0      	cbz	r0, 8004ac4 <_svfiprintf_r+0x114>
 8004a96:	9207      	str	r2, [sp, #28]
 8004a98:	e014      	b.n	8004ac4 <_svfiprintf_r+0x114>
 8004a9a:	eba0 0308 	sub.w	r3, r0, r8
 8004a9e:	fa09 f303 	lsl.w	r3, r9, r3
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	46a2      	mov	sl, r4
 8004aa6:	9304      	str	r3, [sp, #16]
 8004aa8:	e7d2      	b.n	8004a50 <_svfiprintf_r+0xa0>
 8004aaa:	9b03      	ldr	r3, [sp, #12]
 8004aac:	1d19      	adds	r1, r3, #4
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	9103      	str	r1, [sp, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	bfbb      	ittet	lt
 8004ab6:	425b      	neglt	r3, r3
 8004ab8:	f042 0202 	orrlt.w	r2, r2, #2
 8004abc:	9307      	strge	r3, [sp, #28]
 8004abe:	9307      	strlt	r3, [sp, #28]
 8004ac0:	bfb8      	it	lt
 8004ac2:	9204      	strlt	r2, [sp, #16]
 8004ac4:	7823      	ldrb	r3, [r4, #0]
 8004ac6:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ac8:	d10a      	bne.n	8004ae0 <_svfiprintf_r+0x130>
 8004aca:	7863      	ldrb	r3, [r4, #1]
 8004acc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ace:	d132      	bne.n	8004b36 <_svfiprintf_r+0x186>
 8004ad0:	9b03      	ldr	r3, [sp, #12]
 8004ad2:	3402      	adds	r4, #2
 8004ad4:	1d1a      	adds	r2, r3, #4
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	9203      	str	r2, [sp, #12]
 8004ada:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ade:	9305      	str	r3, [sp, #20]
 8004ae0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004b98 <_svfiprintf_r+0x1e8>
 8004ae4:	2203      	movs	r2, #3
 8004ae6:	4650      	mov	r0, sl
 8004ae8:	7821      	ldrb	r1, [r4, #0]
 8004aea:	f000 fa19 	bl	8004f20 <memchr>
 8004aee:	b138      	cbz	r0, 8004b00 <_svfiprintf_r+0x150>
 8004af0:	2240      	movs	r2, #64	@ 0x40
 8004af2:	9b04      	ldr	r3, [sp, #16]
 8004af4:	eba0 000a 	sub.w	r0, r0, sl
 8004af8:	4082      	lsls	r2, r0
 8004afa:	4313      	orrs	r3, r2
 8004afc:	3401      	adds	r4, #1
 8004afe:	9304      	str	r3, [sp, #16]
 8004b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b04:	2206      	movs	r2, #6
 8004b06:	4825      	ldr	r0, [pc, #148]	@ (8004b9c <_svfiprintf_r+0x1ec>)
 8004b08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b0c:	f000 fa08 	bl	8004f20 <memchr>
 8004b10:	2800      	cmp	r0, #0
 8004b12:	d036      	beq.n	8004b82 <_svfiprintf_r+0x1d2>
 8004b14:	4b22      	ldr	r3, [pc, #136]	@ (8004ba0 <_svfiprintf_r+0x1f0>)
 8004b16:	bb1b      	cbnz	r3, 8004b60 <_svfiprintf_r+0x1b0>
 8004b18:	9b03      	ldr	r3, [sp, #12]
 8004b1a:	3307      	adds	r3, #7
 8004b1c:	f023 0307 	bic.w	r3, r3, #7
 8004b20:	3308      	adds	r3, #8
 8004b22:	9303      	str	r3, [sp, #12]
 8004b24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b26:	4433      	add	r3, r6
 8004b28:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b2a:	e76a      	b.n	8004a02 <_svfiprintf_r+0x52>
 8004b2c:	460c      	mov	r4, r1
 8004b2e:	2001      	movs	r0, #1
 8004b30:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b34:	e7a8      	b.n	8004a88 <_svfiprintf_r+0xd8>
 8004b36:	2300      	movs	r3, #0
 8004b38:	f04f 0c0a 	mov.w	ip, #10
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	3401      	adds	r4, #1
 8004b40:	9305      	str	r3, [sp, #20]
 8004b42:	4620      	mov	r0, r4
 8004b44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b48:	3a30      	subs	r2, #48	@ 0x30
 8004b4a:	2a09      	cmp	r2, #9
 8004b4c:	d903      	bls.n	8004b56 <_svfiprintf_r+0x1a6>
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0c6      	beq.n	8004ae0 <_svfiprintf_r+0x130>
 8004b52:	9105      	str	r1, [sp, #20]
 8004b54:	e7c4      	b.n	8004ae0 <_svfiprintf_r+0x130>
 8004b56:	4604      	mov	r4, r0
 8004b58:	2301      	movs	r3, #1
 8004b5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b5e:	e7f0      	b.n	8004b42 <_svfiprintf_r+0x192>
 8004b60:	ab03      	add	r3, sp, #12
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	462a      	mov	r2, r5
 8004b66:	4638      	mov	r0, r7
 8004b68:	4b0e      	ldr	r3, [pc, #56]	@ (8004ba4 <_svfiprintf_r+0x1f4>)
 8004b6a:	a904      	add	r1, sp, #16
 8004b6c:	f3af 8000 	nop.w
 8004b70:	1c42      	adds	r2, r0, #1
 8004b72:	4606      	mov	r6, r0
 8004b74:	d1d6      	bne.n	8004b24 <_svfiprintf_r+0x174>
 8004b76:	89ab      	ldrh	r3, [r5, #12]
 8004b78:	065b      	lsls	r3, r3, #25
 8004b7a:	f53f af2d 	bmi.w	80049d8 <_svfiprintf_r+0x28>
 8004b7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b80:	e72c      	b.n	80049dc <_svfiprintf_r+0x2c>
 8004b82:	ab03      	add	r3, sp, #12
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	462a      	mov	r2, r5
 8004b88:	4638      	mov	r0, r7
 8004b8a:	4b06      	ldr	r3, [pc, #24]	@ (8004ba4 <_svfiprintf_r+0x1f4>)
 8004b8c:	a904      	add	r1, sp, #16
 8004b8e:	f000 f87d 	bl	8004c8c <_printf_i>
 8004b92:	e7ed      	b.n	8004b70 <_svfiprintf_r+0x1c0>
 8004b94:	08005632 	.word	0x08005632
 8004b98:	08005638 	.word	0x08005638
 8004b9c:	0800563c 	.word	0x0800563c
 8004ba0:	00000000 	.word	0x00000000
 8004ba4:	080048f9 	.word	0x080048f9

08004ba8 <_printf_common>:
 8004ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bac:	4616      	mov	r6, r2
 8004bae:	4698      	mov	r8, r3
 8004bb0:	688a      	ldr	r2, [r1, #8]
 8004bb2:	690b      	ldr	r3, [r1, #16]
 8004bb4:	4607      	mov	r7, r0
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	bfb8      	it	lt
 8004bba:	4613      	movlt	r3, r2
 8004bbc:	6033      	str	r3, [r6, #0]
 8004bbe:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004bc2:	460c      	mov	r4, r1
 8004bc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004bc8:	b10a      	cbz	r2, 8004bce <_printf_common+0x26>
 8004bca:	3301      	adds	r3, #1
 8004bcc:	6033      	str	r3, [r6, #0]
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	0699      	lsls	r1, r3, #26
 8004bd2:	bf42      	ittt	mi
 8004bd4:	6833      	ldrmi	r3, [r6, #0]
 8004bd6:	3302      	addmi	r3, #2
 8004bd8:	6033      	strmi	r3, [r6, #0]
 8004bda:	6825      	ldr	r5, [r4, #0]
 8004bdc:	f015 0506 	ands.w	r5, r5, #6
 8004be0:	d106      	bne.n	8004bf0 <_printf_common+0x48>
 8004be2:	f104 0a19 	add.w	sl, r4, #25
 8004be6:	68e3      	ldr	r3, [r4, #12]
 8004be8:	6832      	ldr	r2, [r6, #0]
 8004bea:	1a9b      	subs	r3, r3, r2
 8004bec:	42ab      	cmp	r3, r5
 8004bee:	dc2b      	bgt.n	8004c48 <_printf_common+0xa0>
 8004bf0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004bf4:	6822      	ldr	r2, [r4, #0]
 8004bf6:	3b00      	subs	r3, #0
 8004bf8:	bf18      	it	ne
 8004bfa:	2301      	movne	r3, #1
 8004bfc:	0692      	lsls	r2, r2, #26
 8004bfe:	d430      	bmi.n	8004c62 <_printf_common+0xba>
 8004c00:	4641      	mov	r1, r8
 8004c02:	4638      	mov	r0, r7
 8004c04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c08:	47c8      	blx	r9
 8004c0a:	3001      	adds	r0, #1
 8004c0c:	d023      	beq.n	8004c56 <_printf_common+0xae>
 8004c0e:	6823      	ldr	r3, [r4, #0]
 8004c10:	6922      	ldr	r2, [r4, #16]
 8004c12:	f003 0306 	and.w	r3, r3, #6
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	bf14      	ite	ne
 8004c1a:	2500      	movne	r5, #0
 8004c1c:	6833      	ldreq	r3, [r6, #0]
 8004c1e:	f04f 0600 	mov.w	r6, #0
 8004c22:	bf08      	it	eq
 8004c24:	68e5      	ldreq	r5, [r4, #12]
 8004c26:	f104 041a 	add.w	r4, r4, #26
 8004c2a:	bf08      	it	eq
 8004c2c:	1aed      	subeq	r5, r5, r3
 8004c2e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004c32:	bf08      	it	eq
 8004c34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	bfc4      	itt	gt
 8004c3c:	1a9b      	subgt	r3, r3, r2
 8004c3e:	18ed      	addgt	r5, r5, r3
 8004c40:	42b5      	cmp	r5, r6
 8004c42:	d11a      	bne.n	8004c7a <_printf_common+0xd2>
 8004c44:	2000      	movs	r0, #0
 8004c46:	e008      	b.n	8004c5a <_printf_common+0xb2>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	4652      	mov	r2, sl
 8004c4c:	4641      	mov	r1, r8
 8004c4e:	4638      	mov	r0, r7
 8004c50:	47c8      	blx	r9
 8004c52:	3001      	adds	r0, #1
 8004c54:	d103      	bne.n	8004c5e <_printf_common+0xb6>
 8004c56:	f04f 30ff 	mov.w	r0, #4294967295
 8004c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c5e:	3501      	adds	r5, #1
 8004c60:	e7c1      	b.n	8004be6 <_printf_common+0x3e>
 8004c62:	2030      	movs	r0, #48	@ 0x30
 8004c64:	18e1      	adds	r1, r4, r3
 8004c66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c70:	4422      	add	r2, r4
 8004c72:	3302      	adds	r3, #2
 8004c74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c78:	e7c2      	b.n	8004c00 <_printf_common+0x58>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	4622      	mov	r2, r4
 8004c7e:	4641      	mov	r1, r8
 8004c80:	4638      	mov	r0, r7
 8004c82:	47c8      	blx	r9
 8004c84:	3001      	adds	r0, #1
 8004c86:	d0e6      	beq.n	8004c56 <_printf_common+0xae>
 8004c88:	3601      	adds	r6, #1
 8004c8a:	e7d9      	b.n	8004c40 <_printf_common+0x98>

08004c8c <_printf_i>:
 8004c8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c90:	7e0f      	ldrb	r7, [r1, #24]
 8004c92:	4691      	mov	r9, r2
 8004c94:	2f78      	cmp	r7, #120	@ 0x78
 8004c96:	4680      	mov	r8, r0
 8004c98:	460c      	mov	r4, r1
 8004c9a:	469a      	mov	sl, r3
 8004c9c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ca2:	d807      	bhi.n	8004cb4 <_printf_i+0x28>
 8004ca4:	2f62      	cmp	r7, #98	@ 0x62
 8004ca6:	d80a      	bhi.n	8004cbe <_printf_i+0x32>
 8004ca8:	2f00      	cmp	r7, #0
 8004caa:	f000 80d3 	beq.w	8004e54 <_printf_i+0x1c8>
 8004cae:	2f58      	cmp	r7, #88	@ 0x58
 8004cb0:	f000 80ba 	beq.w	8004e28 <_printf_i+0x19c>
 8004cb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004cbc:	e03a      	b.n	8004d34 <_printf_i+0xa8>
 8004cbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004cc2:	2b15      	cmp	r3, #21
 8004cc4:	d8f6      	bhi.n	8004cb4 <_printf_i+0x28>
 8004cc6:	a101      	add	r1, pc, #4	@ (adr r1, 8004ccc <_printf_i+0x40>)
 8004cc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ccc:	08004d25 	.word	0x08004d25
 8004cd0:	08004d39 	.word	0x08004d39
 8004cd4:	08004cb5 	.word	0x08004cb5
 8004cd8:	08004cb5 	.word	0x08004cb5
 8004cdc:	08004cb5 	.word	0x08004cb5
 8004ce0:	08004cb5 	.word	0x08004cb5
 8004ce4:	08004d39 	.word	0x08004d39
 8004ce8:	08004cb5 	.word	0x08004cb5
 8004cec:	08004cb5 	.word	0x08004cb5
 8004cf0:	08004cb5 	.word	0x08004cb5
 8004cf4:	08004cb5 	.word	0x08004cb5
 8004cf8:	08004e3b 	.word	0x08004e3b
 8004cfc:	08004d63 	.word	0x08004d63
 8004d00:	08004df5 	.word	0x08004df5
 8004d04:	08004cb5 	.word	0x08004cb5
 8004d08:	08004cb5 	.word	0x08004cb5
 8004d0c:	08004e5d 	.word	0x08004e5d
 8004d10:	08004cb5 	.word	0x08004cb5
 8004d14:	08004d63 	.word	0x08004d63
 8004d18:	08004cb5 	.word	0x08004cb5
 8004d1c:	08004cb5 	.word	0x08004cb5
 8004d20:	08004dfd 	.word	0x08004dfd
 8004d24:	6833      	ldr	r3, [r6, #0]
 8004d26:	1d1a      	adds	r2, r3, #4
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6032      	str	r2, [r6, #0]
 8004d2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d34:	2301      	movs	r3, #1
 8004d36:	e09e      	b.n	8004e76 <_printf_i+0x1ea>
 8004d38:	6833      	ldr	r3, [r6, #0]
 8004d3a:	6820      	ldr	r0, [r4, #0]
 8004d3c:	1d19      	adds	r1, r3, #4
 8004d3e:	6031      	str	r1, [r6, #0]
 8004d40:	0606      	lsls	r6, r0, #24
 8004d42:	d501      	bpl.n	8004d48 <_printf_i+0xbc>
 8004d44:	681d      	ldr	r5, [r3, #0]
 8004d46:	e003      	b.n	8004d50 <_printf_i+0xc4>
 8004d48:	0645      	lsls	r5, r0, #25
 8004d4a:	d5fb      	bpl.n	8004d44 <_printf_i+0xb8>
 8004d4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d50:	2d00      	cmp	r5, #0
 8004d52:	da03      	bge.n	8004d5c <_printf_i+0xd0>
 8004d54:	232d      	movs	r3, #45	@ 0x2d
 8004d56:	426d      	negs	r5, r5
 8004d58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d5c:	230a      	movs	r3, #10
 8004d5e:	4859      	ldr	r0, [pc, #356]	@ (8004ec4 <_printf_i+0x238>)
 8004d60:	e011      	b.n	8004d86 <_printf_i+0xfa>
 8004d62:	6821      	ldr	r1, [r4, #0]
 8004d64:	6833      	ldr	r3, [r6, #0]
 8004d66:	0608      	lsls	r0, r1, #24
 8004d68:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d6c:	d402      	bmi.n	8004d74 <_printf_i+0xe8>
 8004d6e:	0649      	lsls	r1, r1, #25
 8004d70:	bf48      	it	mi
 8004d72:	b2ad      	uxthmi	r5, r5
 8004d74:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d76:	6033      	str	r3, [r6, #0]
 8004d78:	bf14      	ite	ne
 8004d7a:	230a      	movne	r3, #10
 8004d7c:	2308      	moveq	r3, #8
 8004d7e:	4851      	ldr	r0, [pc, #324]	@ (8004ec4 <_printf_i+0x238>)
 8004d80:	2100      	movs	r1, #0
 8004d82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d86:	6866      	ldr	r6, [r4, #4]
 8004d88:	2e00      	cmp	r6, #0
 8004d8a:	bfa8      	it	ge
 8004d8c:	6821      	ldrge	r1, [r4, #0]
 8004d8e:	60a6      	str	r6, [r4, #8]
 8004d90:	bfa4      	itt	ge
 8004d92:	f021 0104 	bicge.w	r1, r1, #4
 8004d96:	6021      	strge	r1, [r4, #0]
 8004d98:	b90d      	cbnz	r5, 8004d9e <_printf_i+0x112>
 8004d9a:	2e00      	cmp	r6, #0
 8004d9c:	d04b      	beq.n	8004e36 <_printf_i+0x1aa>
 8004d9e:	4616      	mov	r6, r2
 8004da0:	fbb5 f1f3 	udiv	r1, r5, r3
 8004da4:	fb03 5711 	mls	r7, r3, r1, r5
 8004da8:	5dc7      	ldrb	r7, [r0, r7]
 8004daa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004dae:	462f      	mov	r7, r5
 8004db0:	42bb      	cmp	r3, r7
 8004db2:	460d      	mov	r5, r1
 8004db4:	d9f4      	bls.n	8004da0 <_printf_i+0x114>
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d10b      	bne.n	8004dd2 <_printf_i+0x146>
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	07df      	lsls	r7, r3, #31
 8004dbe:	d508      	bpl.n	8004dd2 <_printf_i+0x146>
 8004dc0:	6923      	ldr	r3, [r4, #16]
 8004dc2:	6861      	ldr	r1, [r4, #4]
 8004dc4:	4299      	cmp	r1, r3
 8004dc6:	bfde      	ittt	le
 8004dc8:	2330      	movle	r3, #48	@ 0x30
 8004dca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004dce:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004dd2:	1b92      	subs	r2, r2, r6
 8004dd4:	6122      	str	r2, [r4, #16]
 8004dd6:	464b      	mov	r3, r9
 8004dd8:	4621      	mov	r1, r4
 8004dda:	4640      	mov	r0, r8
 8004ddc:	f8cd a000 	str.w	sl, [sp]
 8004de0:	aa03      	add	r2, sp, #12
 8004de2:	f7ff fee1 	bl	8004ba8 <_printf_common>
 8004de6:	3001      	adds	r0, #1
 8004de8:	d14a      	bne.n	8004e80 <_printf_i+0x1f4>
 8004dea:	f04f 30ff 	mov.w	r0, #4294967295
 8004dee:	b004      	add	sp, #16
 8004df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004df4:	6823      	ldr	r3, [r4, #0]
 8004df6:	f043 0320 	orr.w	r3, r3, #32
 8004dfa:	6023      	str	r3, [r4, #0]
 8004dfc:	2778      	movs	r7, #120	@ 0x78
 8004dfe:	4832      	ldr	r0, [pc, #200]	@ (8004ec8 <_printf_i+0x23c>)
 8004e00:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	6831      	ldr	r1, [r6, #0]
 8004e08:	061f      	lsls	r7, r3, #24
 8004e0a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e0e:	d402      	bmi.n	8004e16 <_printf_i+0x18a>
 8004e10:	065f      	lsls	r7, r3, #25
 8004e12:	bf48      	it	mi
 8004e14:	b2ad      	uxthmi	r5, r5
 8004e16:	6031      	str	r1, [r6, #0]
 8004e18:	07d9      	lsls	r1, r3, #31
 8004e1a:	bf44      	itt	mi
 8004e1c:	f043 0320 	orrmi.w	r3, r3, #32
 8004e20:	6023      	strmi	r3, [r4, #0]
 8004e22:	b11d      	cbz	r5, 8004e2c <_printf_i+0x1a0>
 8004e24:	2310      	movs	r3, #16
 8004e26:	e7ab      	b.n	8004d80 <_printf_i+0xf4>
 8004e28:	4826      	ldr	r0, [pc, #152]	@ (8004ec4 <_printf_i+0x238>)
 8004e2a:	e7e9      	b.n	8004e00 <_printf_i+0x174>
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	f023 0320 	bic.w	r3, r3, #32
 8004e32:	6023      	str	r3, [r4, #0]
 8004e34:	e7f6      	b.n	8004e24 <_printf_i+0x198>
 8004e36:	4616      	mov	r6, r2
 8004e38:	e7bd      	b.n	8004db6 <_printf_i+0x12a>
 8004e3a:	6833      	ldr	r3, [r6, #0]
 8004e3c:	6825      	ldr	r5, [r4, #0]
 8004e3e:	1d18      	adds	r0, r3, #4
 8004e40:	6961      	ldr	r1, [r4, #20]
 8004e42:	6030      	str	r0, [r6, #0]
 8004e44:	062e      	lsls	r6, r5, #24
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	d501      	bpl.n	8004e4e <_printf_i+0x1c2>
 8004e4a:	6019      	str	r1, [r3, #0]
 8004e4c:	e002      	b.n	8004e54 <_printf_i+0x1c8>
 8004e4e:	0668      	lsls	r0, r5, #25
 8004e50:	d5fb      	bpl.n	8004e4a <_printf_i+0x1be>
 8004e52:	8019      	strh	r1, [r3, #0]
 8004e54:	2300      	movs	r3, #0
 8004e56:	4616      	mov	r6, r2
 8004e58:	6123      	str	r3, [r4, #16]
 8004e5a:	e7bc      	b.n	8004dd6 <_printf_i+0x14a>
 8004e5c:	6833      	ldr	r3, [r6, #0]
 8004e5e:	2100      	movs	r1, #0
 8004e60:	1d1a      	adds	r2, r3, #4
 8004e62:	6032      	str	r2, [r6, #0]
 8004e64:	681e      	ldr	r6, [r3, #0]
 8004e66:	6862      	ldr	r2, [r4, #4]
 8004e68:	4630      	mov	r0, r6
 8004e6a:	f000 f859 	bl	8004f20 <memchr>
 8004e6e:	b108      	cbz	r0, 8004e74 <_printf_i+0x1e8>
 8004e70:	1b80      	subs	r0, r0, r6
 8004e72:	6060      	str	r0, [r4, #4]
 8004e74:	6863      	ldr	r3, [r4, #4]
 8004e76:	6123      	str	r3, [r4, #16]
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e7e:	e7aa      	b.n	8004dd6 <_printf_i+0x14a>
 8004e80:	4632      	mov	r2, r6
 8004e82:	4649      	mov	r1, r9
 8004e84:	4640      	mov	r0, r8
 8004e86:	6923      	ldr	r3, [r4, #16]
 8004e88:	47d0      	blx	sl
 8004e8a:	3001      	adds	r0, #1
 8004e8c:	d0ad      	beq.n	8004dea <_printf_i+0x15e>
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	079b      	lsls	r3, r3, #30
 8004e92:	d413      	bmi.n	8004ebc <_printf_i+0x230>
 8004e94:	68e0      	ldr	r0, [r4, #12]
 8004e96:	9b03      	ldr	r3, [sp, #12]
 8004e98:	4298      	cmp	r0, r3
 8004e9a:	bfb8      	it	lt
 8004e9c:	4618      	movlt	r0, r3
 8004e9e:	e7a6      	b.n	8004dee <_printf_i+0x162>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	4632      	mov	r2, r6
 8004ea4:	4649      	mov	r1, r9
 8004ea6:	4640      	mov	r0, r8
 8004ea8:	47d0      	blx	sl
 8004eaa:	3001      	adds	r0, #1
 8004eac:	d09d      	beq.n	8004dea <_printf_i+0x15e>
 8004eae:	3501      	adds	r5, #1
 8004eb0:	68e3      	ldr	r3, [r4, #12]
 8004eb2:	9903      	ldr	r1, [sp, #12]
 8004eb4:	1a5b      	subs	r3, r3, r1
 8004eb6:	42ab      	cmp	r3, r5
 8004eb8:	dcf2      	bgt.n	8004ea0 <_printf_i+0x214>
 8004eba:	e7eb      	b.n	8004e94 <_printf_i+0x208>
 8004ebc:	2500      	movs	r5, #0
 8004ebe:	f104 0619 	add.w	r6, r4, #25
 8004ec2:	e7f5      	b.n	8004eb0 <_printf_i+0x224>
 8004ec4:	08005643 	.word	0x08005643
 8004ec8:	08005654 	.word	0x08005654

08004ecc <memmove>:
 8004ecc:	4288      	cmp	r0, r1
 8004ece:	b510      	push	{r4, lr}
 8004ed0:	eb01 0402 	add.w	r4, r1, r2
 8004ed4:	d902      	bls.n	8004edc <memmove+0x10>
 8004ed6:	4284      	cmp	r4, r0
 8004ed8:	4623      	mov	r3, r4
 8004eda:	d807      	bhi.n	8004eec <memmove+0x20>
 8004edc:	1e43      	subs	r3, r0, #1
 8004ede:	42a1      	cmp	r1, r4
 8004ee0:	d008      	beq.n	8004ef4 <memmove+0x28>
 8004ee2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ee6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004eea:	e7f8      	b.n	8004ede <memmove+0x12>
 8004eec:	4601      	mov	r1, r0
 8004eee:	4402      	add	r2, r0
 8004ef0:	428a      	cmp	r2, r1
 8004ef2:	d100      	bne.n	8004ef6 <memmove+0x2a>
 8004ef4:	bd10      	pop	{r4, pc}
 8004ef6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004efa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004efe:	e7f7      	b.n	8004ef0 <memmove+0x24>

08004f00 <_sbrk_r>:
 8004f00:	b538      	push	{r3, r4, r5, lr}
 8004f02:	2300      	movs	r3, #0
 8004f04:	4d05      	ldr	r5, [pc, #20]	@ (8004f1c <_sbrk_r+0x1c>)
 8004f06:	4604      	mov	r4, r0
 8004f08:	4608      	mov	r0, r1
 8004f0a:	602b      	str	r3, [r5, #0]
 8004f0c:	f7fb ff98 	bl	8000e40 <_sbrk>
 8004f10:	1c43      	adds	r3, r0, #1
 8004f12:	d102      	bne.n	8004f1a <_sbrk_r+0x1a>
 8004f14:	682b      	ldr	r3, [r5, #0]
 8004f16:	b103      	cbz	r3, 8004f1a <_sbrk_r+0x1a>
 8004f18:	6023      	str	r3, [r4, #0]
 8004f1a:	bd38      	pop	{r3, r4, r5, pc}
 8004f1c:	20000684 	.word	0x20000684

08004f20 <memchr>:
 8004f20:	4603      	mov	r3, r0
 8004f22:	b510      	push	{r4, lr}
 8004f24:	b2c9      	uxtb	r1, r1
 8004f26:	4402      	add	r2, r0
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	d101      	bne.n	8004f32 <memchr+0x12>
 8004f2e:	2000      	movs	r0, #0
 8004f30:	e003      	b.n	8004f3a <memchr+0x1a>
 8004f32:	7804      	ldrb	r4, [r0, #0]
 8004f34:	3301      	adds	r3, #1
 8004f36:	428c      	cmp	r4, r1
 8004f38:	d1f6      	bne.n	8004f28 <memchr+0x8>
 8004f3a:	bd10      	pop	{r4, pc}

08004f3c <_realloc_r>:
 8004f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f40:	4680      	mov	r8, r0
 8004f42:	4615      	mov	r5, r2
 8004f44:	460c      	mov	r4, r1
 8004f46:	b921      	cbnz	r1, 8004f52 <_realloc_r+0x16>
 8004f48:	4611      	mov	r1, r2
 8004f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f4e:	f7ff bc47 	b.w	80047e0 <_malloc_r>
 8004f52:	b92a      	cbnz	r2, 8004f60 <_realloc_r+0x24>
 8004f54:	f7ff fbda 	bl	800470c <_free_r>
 8004f58:	2400      	movs	r4, #0
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f60:	f000 f81a 	bl	8004f98 <_malloc_usable_size_r>
 8004f64:	4285      	cmp	r5, r0
 8004f66:	4606      	mov	r6, r0
 8004f68:	d802      	bhi.n	8004f70 <_realloc_r+0x34>
 8004f6a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004f6e:	d8f4      	bhi.n	8004f5a <_realloc_r+0x1e>
 8004f70:	4629      	mov	r1, r5
 8004f72:	4640      	mov	r0, r8
 8004f74:	f7ff fc34 	bl	80047e0 <_malloc_r>
 8004f78:	4607      	mov	r7, r0
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	d0ec      	beq.n	8004f58 <_realloc_r+0x1c>
 8004f7e:	42b5      	cmp	r5, r6
 8004f80:	462a      	mov	r2, r5
 8004f82:	4621      	mov	r1, r4
 8004f84:	bf28      	it	cs
 8004f86:	4632      	movcs	r2, r6
 8004f88:	f7ff fbb2 	bl	80046f0 <memcpy>
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	4640      	mov	r0, r8
 8004f90:	f7ff fbbc 	bl	800470c <_free_r>
 8004f94:	463c      	mov	r4, r7
 8004f96:	e7e0      	b.n	8004f5a <_realloc_r+0x1e>

08004f98 <_malloc_usable_size_r>:
 8004f98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f9c:	1f18      	subs	r0, r3, #4
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	bfbc      	itt	lt
 8004fa2:	580b      	ldrlt	r3, [r1, r0]
 8004fa4:	18c0      	addlt	r0, r0, r3
 8004fa6:	4770      	bx	lr

08004fa8 <_init>:
 8004fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004faa:	bf00      	nop
 8004fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fae:	bc08      	pop	{r3}
 8004fb0:	469e      	mov	lr, r3
 8004fb2:	4770      	bx	lr

08004fb4 <_fini>:
 8004fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb6:	bf00      	nop
 8004fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fba:	bc08      	pop	{r3}
 8004fbc:	469e      	mov	lr, r3
 8004fbe:	4770      	bx	lr
