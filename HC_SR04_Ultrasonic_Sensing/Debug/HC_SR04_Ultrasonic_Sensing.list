
HC_SR04_Ultrasonic_Sensing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004064  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000688  08004170  08004170  00005170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047f8  080047f8  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080047f8  080047f8  0000605c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080047f8  080047f8  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047f8  080047f8  000057f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047fc  080047fc  000057fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004800  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  2000005c  0800485c  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  0800485c  000066bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c633  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ee  00000000  00000000  000126b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  000147a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a7f  00000000  00000000  00015530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183de  00000000  00000000  00015faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000106a1  00000000  00000000  0002e38d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b7a3  00000000  00000000  0003ea2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca1d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d74  00000000  00000000  000ca214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000cdf88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004158 	.word	0x08004158

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004158 	.word	0x08004158

0800014c <HC_SR04_Init>:

static inline void DWT_Delay_Init(void);
static inline void delay_us(uint32_t us);

void HC_SR04_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000150:	f000 f82e 	bl	80001b0 <DWT_Delay_Init>
}
 8000154:	bf00      	nop
 8000156:	bd80      	pop	{r7, pc}

08000158 <HC_SR04_Trigger>:

void HC_SR04_Trigger(void)
{
 8000158:	b580      	push	{r7, lr}
 800015a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);
 800015c:	2201      	movs	r2, #1
 800015e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000162:	4807      	ldr	r0, [pc, #28]	@ (8000180 <HC_SR04_Trigger+0x28>)
 8000164:	f001 f998 	bl	8001498 <HAL_GPIO_WritePin>
	  delay_us(10);
 8000168:	200a      	movs	r0, #10
 800016a:	f000 f83b 	bl	80001e4 <delay_us>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
 800016e:	2200      	movs	r2, #0
 8000170:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000174:	4802      	ldr	r0, [pc, #8]	@ (8000180 <HC_SR04_Trigger+0x28>)
 8000176:	f001 f98f 	bl	8001498 <HAL_GPIO_WritePin>
}
 800017a:	bf00      	nop
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	40010800 	.word	0x40010800

08000184 <HC_SR04_Distance_Calculate>:

uint16_t HC_SR04_Distance_Calculate(uint32_t pulse_us)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
	return (pulse_us+1) * 340/20000U;
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	3301      	adds	r3, #1
 8000190:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8000194:	fb02 f303 	mul.w	r3, r2, r3
 8000198:	4a04      	ldr	r2, [pc, #16]	@ (80001ac <HC_SR04_Distance_Calculate+0x28>)
 800019a:	fba2 2303 	umull	r2, r3, r2, r3
 800019e:	0b9b      	lsrs	r3, r3, #14
 80001a0:	b29b      	uxth	r3, r3
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	d1b71759 	.word	0xd1b71759

080001b0 <DWT_Delay_Init>:

static inline void DWT_Delay_Init(void){
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80001b4:	4b09      	ldr	r3, [pc, #36]	@ (80001dc <DWT_Delay_Init+0x2c>)
 80001b6:	68db      	ldr	r3, [r3, #12]
 80001b8:	4a08      	ldr	r2, [pc, #32]	@ (80001dc <DWT_Delay_Init+0x2c>)
 80001ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80001be:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 80001c0:	4b07      	ldr	r3, [pc, #28]	@ (80001e0 <DWT_Delay_Init+0x30>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80001c6:	4b06      	ldr	r3, [pc, #24]	@ (80001e0 <DWT_Delay_Init+0x30>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	4a05      	ldr	r2, [pc, #20]	@ (80001e0 <DWT_Delay_Init+0x30>)
 80001cc:	f043 0301 	orr.w	r3, r3, #1
 80001d0:	6013      	str	r3, [r2, #0]
}
 80001d2:	bf00      	nop
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	e000edf0 	.word	0xe000edf0
 80001e0:	e0001000 	.word	0xe0001000

080001e4 <delay_us>:

static inline void delay_us(uint32_t us){
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 80001ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000224 <delay_us+0x40>)
 80001ee:	685b      	ldr	r3, [r3, #4]
 80001f0:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * (SystemCoreClock/1000000U);
 80001f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000228 <delay_us+0x44>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a0d      	ldr	r2, [pc, #52]	@ (800022c <delay_us+0x48>)
 80001f8:	fba2 2303 	umull	r2, r3, r2, r3
 80001fc:	0c9a      	lsrs	r2, r3, #18
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	fb02 f303 	mul.w	r3, r2, r3
 8000204:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks);
 8000206:	bf00      	nop
 8000208:	4b06      	ldr	r3, [pc, #24]	@ (8000224 <delay_us+0x40>)
 800020a:	685a      	ldr	r2, [r3, #4]
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	1ad3      	subs	r3, r2, r3
 8000210:	68ba      	ldr	r2, [r7, #8]
 8000212:	429a      	cmp	r2, r3
 8000214:	d8f8      	bhi.n	8000208 <delay_us+0x24>
}
 8000216:	bf00      	nop
 8000218:	bf00      	nop
 800021a:	3714      	adds	r7, #20
 800021c:	46bd      	mov	sp, r7
 800021e:	bc80      	pop	{r7}
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	e0001000 	.word	0xe0001000
 8000228:	20000000 	.word	0x20000000
 800022c:	431bde83 	.word	0x431bde83

08000230 <oled_init>:
#include "stdio.h"
#include "main.h"


// OLED Initialization Function
void oled_init(void) {
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8000234:	f000 f874 	bl	8000320 <ssd1306_Init>
}
 8000238:	bf00      	nop
 800023a:	bd80      	pop	{r7, pc}

0800023c <oled_display_wavelength_and_distance>:


void oled_display_wavelength_and_distance(int wavelength, int distance)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b08c      	sub	sp, #48	@ 0x30
 8000240:	af02      	add	r7, sp, #8
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
    char buffer[30];
    ssd1306_Fill(Black);
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f8d4 	bl	80003f4 <ssd1306_Fill>

    ssd1306_SetCursor(2, 2);
 800024c:	2102      	movs	r1, #2
 800024e:	2002      	movs	r0, #2
 8000250:	f000 fa18 	bl	8000684 <ssd1306_SetCursor>
    sprintf(buffer, "wavelength: %d microseconds", wavelength);  // use %d for int
 8000254:	f107 0308 	add.w	r3, r7, #8
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	4912      	ldr	r1, [pc, #72]	@ (80002a4 <oled_display_wavelength_and_distance+0x68>)
 800025c:	4618      	mov	r0, r3
 800025e:	f003 facb 	bl	80037f8 <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 8000262:	4b11      	ldr	r3, [pc, #68]	@ (80002a8 <oled_display_wavelength_and_distance+0x6c>)
 8000264:	f107 0008 	add.w	r0, r7, #8
 8000268:	2201      	movs	r2, #1
 800026a:	9200      	str	r2, [sp, #0]
 800026c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800026e:	f000 f9e3 	bl	8000638 <ssd1306_WriteString>

    ssd1306_SetCursor(2, 12);
 8000272:	210c      	movs	r1, #12
 8000274:	2002      	movs	r0, #2
 8000276:	f000 fa05 	bl	8000684 <ssd1306_SetCursor>
    sprintf(buffer, "distance: %d cm", distance);      // use %% to print literal '%'
 800027a:	f107 0308 	add.w	r3, r7, #8
 800027e:	683a      	ldr	r2, [r7, #0]
 8000280:	490a      	ldr	r1, [pc, #40]	@ (80002ac <oled_display_wavelength_and_distance+0x70>)
 8000282:	4618      	mov	r0, r3
 8000284:	f003 fab8 	bl	80037f8 <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 8000288:	4b07      	ldr	r3, [pc, #28]	@ (80002a8 <oled_display_wavelength_and_distance+0x6c>)
 800028a:	f107 0008 	add.w	r0, r7, #8
 800028e:	2201      	movs	r2, #1
 8000290:	9200      	str	r2, [sp, #0]
 8000292:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000294:	f000 f9d0 	bl	8000638 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8000298:	f000 f8c4 	bl	8000424 <ssd1306_UpdateScreen>
}
 800029c:	bf00      	nop
 800029e:	3728      	adds	r7, #40	@ 0x28
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	08004170 	.word	0x08004170
 80002a8:	0800478c 	.word	0x0800478c
 80002ac:	0800418c 	.word	0x0800418c

080002b0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr

080002bc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	b086      	sub	sp, #24
 80002c0:	af04      	add	r7, sp, #16
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1,
 80002c6:	f04f 33ff 	mov.w	r3, #4294967295
 80002ca:	9302      	str	r3, [sp, #8]
 80002cc:	2301      	movs	r3, #1
 80002ce:	9301      	str	r3, [sp, #4]
 80002d0:	1dfb      	adds	r3, r7, #7
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	2301      	movs	r3, #1
 80002d6:	2200      	movs	r2, #0
 80002d8:	2178      	movs	r1, #120	@ 0x78
 80002da:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <ssd1306_WriteCommand+0x2c>)
 80002dc:	f001 fa38 	bl	8001750 <HAL_I2C_Mem_Write>
			HAL_MAX_DELAY);
}
 80002e0:	bf00      	nop
 80002e2:	3708      	adds	r7, #8
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20000480 	.word	0x20000480

080002ec <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t *buffer, size_t buff_size) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b086      	sub	sp, #24
 80002f0:	af04      	add	r7, sp, #16
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer,
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	b29b      	uxth	r3, r3
 80002fa:	f04f 32ff 	mov.w	r2, #4294967295
 80002fe:	9202      	str	r2, [sp, #8]
 8000300:	9301      	str	r3, [sp, #4]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	9300      	str	r3, [sp, #0]
 8000306:	2301      	movs	r3, #1
 8000308:	2240      	movs	r2, #64	@ 0x40
 800030a:	2178      	movs	r1, #120	@ 0x78
 800030c:	4803      	ldr	r0, [pc, #12]	@ (800031c <ssd1306_WriteData+0x30>)
 800030e:	f001 fa1f 	bl	8001750 <HAL_I2C_Mem_Write>
			buff_size, HAL_MAX_DELAY);
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000480 	.word	0x20000480

08000320 <ssd1306_Init>:
	}
	return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8000324:	f7ff ffc4 	bl	80002b0 <ssd1306_Reset>

	// Wait for the screen to boot
	HAL_Delay(100);
 8000328:	2064      	movs	r0, #100	@ 0x64
 800032a:	f000 fdff 	bl	8000f2c <HAL_Delay>

	// Init OLED
	ssd1306_SetDisplayOn(0); //display off
 800032e:	2000      	movs	r0, #0
 8000330:	f000 f9d4 	bl	80006dc <ssd1306_SetDisplayOn>

	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000334:	2020      	movs	r0, #32
 8000336:	f7ff ffc1 	bl	80002bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800033a:	2000      	movs	r0, #0
 800033c:	f7ff ffbe 	bl	80002bc <ssd1306_WriteCommand>
								// 10b,Page Addressing Mode (RESET); 11b,Invalid

	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000340:	20b0      	movs	r0, #176	@ 0xb0
 8000342:	f7ff ffbb 	bl	80002bc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000346:	20c8      	movs	r0, #200	@ 0xc8
 8000348:	f7ff ffb8 	bl	80002bc <ssd1306_WriteCommand>
#endif

	ssd1306_WriteCommand(0x00); //---set low column address
 800034c:	2000      	movs	r0, #0
 800034e:	f7ff ffb5 	bl	80002bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8000352:	2010      	movs	r0, #16
 8000354:	f7ff ffb2 	bl	80002bc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000358:	2040      	movs	r0, #64	@ 0x40
 800035a:	f7ff ffaf 	bl	80002bc <ssd1306_WriteCommand>

	ssd1306_SetContrast(0xFF);
 800035e:	20ff      	movs	r0, #255	@ 0xff
 8000360:	f000 f9a8 	bl	80006b4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000364:	20a1      	movs	r0, #161	@ 0xa1
 8000366:	f7ff ffa9 	bl	80002bc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
	ssd1306_WriteCommand(0xA6); //--set normal color
 800036a:	20a6      	movs	r0, #166	@ 0xa6
 800036c:	f7ff ffa6 	bl	80002bc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000370:	20a8      	movs	r0, #168	@ 0xa8
 8000372:	f7ff ffa3 	bl	80002bc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x3F); //
 8000376:	203f      	movs	r0, #63	@ 0x3f
 8000378:	f7ff ffa0 	bl	80002bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800037c:	20a4      	movs	r0, #164	@ 0xa4
 800037e:	f7ff ff9d 	bl	80002bc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000382:	20d3      	movs	r0, #211	@ 0xd3
 8000384:	f7ff ff9a 	bl	80002bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8000388:	2000      	movs	r0, #0
 800038a:	f7ff ff97 	bl	80002bc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800038e:	20d5      	movs	r0, #213	@ 0xd5
 8000390:	f7ff ff94 	bl	80002bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000394:	20f0      	movs	r0, #240	@ 0xf0
 8000396:	f7ff ff91 	bl	80002bc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800039a:	20d9      	movs	r0, #217	@ 0xd9
 800039c:	f7ff ff8e 	bl	80002bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80003a0:	2022      	movs	r0, #34	@ 0x22
 80003a2:	f7ff ff8b 	bl	80002bc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80003a6:	20da      	movs	r0, #218	@ 0xda
 80003a8:	f7ff ff88 	bl	80002bc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x12);
 80003ac:	2012      	movs	r0, #18
 80003ae:	f7ff ff85 	bl	80002bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xDB); //--set vcomh
 80003b2:	20db      	movs	r0, #219	@ 0xdb
 80003b4:	f7ff ff82 	bl	80002bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80003b8:	2020      	movs	r0, #32
 80003ba:	f7ff ff7f 	bl	80002bc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80003be:	208d      	movs	r0, #141	@ 0x8d
 80003c0:	f7ff ff7c 	bl	80002bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 80003c4:	2014      	movs	r0, #20
 80003c6:	f7ff ff79 	bl	80002bc <ssd1306_WriteCommand>
	ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80003ca:	2001      	movs	r0, #1
 80003cc:	f000 f986 	bl	80006dc <ssd1306_SetDisplayOn>

	// Clear screen
	ssd1306_Fill(Black);
 80003d0:	2000      	movs	r0, #0
 80003d2:	f000 f80f 	bl	80003f4 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 80003d6:	f000 f825 	bl	8000424 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 80003da:	4b05      	ldr	r3, [pc, #20]	@ (80003f0 <ssd1306_Init+0xd0>)
 80003dc:	2200      	movs	r2, #0
 80003de:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80003e0:	4b03      	ldr	r3, [pc, #12]	@ (80003f0 <ssd1306_Init+0xd0>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 80003e6:	4b02      	ldr	r3, [pc, #8]	@ (80003f0 <ssd1306_Init+0xd0>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	711a      	strb	r2, [r3, #4]
}
 80003ec:	bf00      	nop
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000478 	.word	0x20000478

080003f4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF,
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d101      	bne.n	8000408 <ssd1306_Fill+0x14>
 8000404:	2300      	movs	r3, #0
 8000406:	e000      	b.n	800040a <ssd1306_Fill+0x16>
 8000408:	23ff      	movs	r3, #255	@ 0xff
 800040a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800040e:	4619      	mov	r1, r3
 8000410:	4803      	ldr	r0, [pc, #12]	@ (8000420 <ssd1306_Fill+0x2c>)
 8000412:	f003 fa13 	bl	800383c <memset>
			sizeof(SSD1306_Buffer));
}
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	20000078 	.word	0x20000078

08000424 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
	// depends on the screen height:
	//
	//  * 32px   ==  4 pages
	//  * 64px   ==  8 pages
	//  * 128px  ==  16 pages
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 800042a:	2300      	movs	r3, #0
 800042c:	71fb      	strb	r3, [r7, #7]
 800042e:	e016      	b.n	800045e <ssd1306_UpdateScreen+0x3a>
		ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000430:	79fb      	ldrb	r3, [r7, #7]
 8000432:	3b50      	subs	r3, #80	@ 0x50
 8000434:	b2db      	uxtb	r3, r3
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff ff40 	bl	80002bc <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800043c:	2000      	movs	r0, #0
 800043e:	f7ff ff3d 	bl	80002bc <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000442:	2010      	movs	r0, #16
 8000444:	f7ff ff3a 	bl	80002bc <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	01db      	lsls	r3, r3, #7
 800044c:	4a08      	ldr	r2, [pc, #32]	@ (8000470 <ssd1306_UpdateScreen+0x4c>)
 800044e:	4413      	add	r3, r2
 8000450:	2180      	movs	r1, #128	@ 0x80
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff ff4a 	bl	80002ec <ssd1306_WriteData>
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	3301      	adds	r3, #1
 800045c:	71fb      	strb	r3, [r7, #7]
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	2b07      	cmp	r3, #7
 8000462:	d9e5      	bls.n	8000430 <ssd1306_UpdateScreen+0xc>
	}
}
 8000464:	bf00      	nop
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000078 	.word	0x20000078

08000474 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
 800047e:	460b      	mov	r3, r1
 8000480:	71bb      	strb	r3, [r7, #6]
 8000482:	4613      	mov	r3, r2
 8000484:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800048a:	2b00      	cmp	r3, #0
 800048c:	db3d      	blt.n	800050a <ssd1306_DrawPixel+0x96>
 800048e:	79bb      	ldrb	r3, [r7, #6]
 8000490:	2b3f      	cmp	r3, #63	@ 0x3f
 8000492:	d83a      	bhi.n	800050a <ssd1306_DrawPixel+0x96>
		// Don't write outside the buffer
		return;
	}

	// Draw in the right color
	if (color == White) {
 8000494:	797b      	ldrb	r3, [r7, #5]
 8000496:	2b01      	cmp	r3, #1
 8000498:	d11a      	bne.n	80004d0 <ssd1306_DrawPixel+0x5c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800049a:	79fa      	ldrb	r2, [r7, #7]
 800049c:	79bb      	ldrb	r3, [r7, #6]
 800049e:	08db      	lsrs	r3, r3, #3
 80004a0:	b2d8      	uxtb	r0, r3
 80004a2:	4603      	mov	r3, r0
 80004a4:	01db      	lsls	r3, r3, #7
 80004a6:	4413      	add	r3, r2
 80004a8:	4a1a      	ldr	r2, [pc, #104]	@ (8000514 <ssd1306_DrawPixel+0xa0>)
 80004aa:	5cd3      	ldrb	r3, [r2, r3]
 80004ac:	b25a      	sxtb	r2, r3
 80004ae:	79bb      	ldrb	r3, [r7, #6]
 80004b0:	f003 0307 	and.w	r3, r3, #7
 80004b4:	2101      	movs	r1, #1
 80004b6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ba:	b25b      	sxtb	r3, r3
 80004bc:	4313      	orrs	r3, r2
 80004be:	b259      	sxtb	r1, r3
 80004c0:	79fa      	ldrb	r2, [r7, #7]
 80004c2:	4603      	mov	r3, r0
 80004c4:	01db      	lsls	r3, r3, #7
 80004c6:	4413      	add	r3, r2
 80004c8:	b2c9      	uxtb	r1, r1
 80004ca:	4a12      	ldr	r2, [pc, #72]	@ (8000514 <ssd1306_DrawPixel+0xa0>)
 80004cc:	54d1      	strb	r1, [r2, r3]
 80004ce:	e01d      	b.n	800050c <ssd1306_DrawPixel+0x98>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80004d0:	79fa      	ldrb	r2, [r7, #7]
 80004d2:	79bb      	ldrb	r3, [r7, #6]
 80004d4:	08db      	lsrs	r3, r3, #3
 80004d6:	b2d8      	uxtb	r0, r3
 80004d8:	4603      	mov	r3, r0
 80004da:	01db      	lsls	r3, r3, #7
 80004dc:	4413      	add	r3, r2
 80004de:	4a0d      	ldr	r2, [pc, #52]	@ (8000514 <ssd1306_DrawPixel+0xa0>)
 80004e0:	5cd3      	ldrb	r3, [r2, r3]
 80004e2:	b25a      	sxtb	r2, r3
 80004e4:	79bb      	ldrb	r3, [r7, #6]
 80004e6:	f003 0307 	and.w	r3, r3, #7
 80004ea:	2101      	movs	r1, #1
 80004ec:	fa01 f303 	lsl.w	r3, r1, r3
 80004f0:	b25b      	sxtb	r3, r3
 80004f2:	43db      	mvns	r3, r3
 80004f4:	b25b      	sxtb	r3, r3
 80004f6:	4013      	ands	r3, r2
 80004f8:	b259      	sxtb	r1, r3
 80004fa:	79fa      	ldrb	r2, [r7, #7]
 80004fc:	4603      	mov	r3, r0
 80004fe:	01db      	lsls	r3, r3, #7
 8000500:	4413      	add	r3, r2
 8000502:	b2c9      	uxtb	r1, r1
 8000504:	4a03      	ldr	r2, [pc, #12]	@ (8000514 <ssd1306_DrawPixel+0xa0>)
 8000506:	54d1      	strb	r1, [r2, r3]
 8000508:	e000      	b.n	800050c <ssd1306_DrawPixel+0x98>
		return;
 800050a:	bf00      	nop
	}
}
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	20000078 	.word	0x20000078

08000518 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b089      	sub	sp, #36	@ 0x24
 800051c:	af00      	add	r7, sp, #0
 800051e:	4604      	mov	r4, r0
 8000520:	4638      	mov	r0, r7
 8000522:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000526:	4623      	mov	r3, r4
 8000528:	73fb      	strb	r3, [r7, #15]
	uint32_t i, b, j;

	// Check if character is valid
	if (ch < 32 || ch > 126)
 800052a:	7bfb      	ldrb	r3, [r7, #15]
 800052c:	2b1f      	cmp	r3, #31
 800052e:	d902      	bls.n	8000536 <ssd1306_WriteChar+0x1e>
 8000530:	7bfb      	ldrb	r3, [r7, #15]
 8000532:	2b7e      	cmp	r3, #126	@ 0x7e
 8000534:	d901      	bls.n	800053a <ssd1306_WriteChar+0x22>
		return 0;
 8000536:	2300      	movs	r3, #0
 8000538:	e077      	b.n	800062a <ssd1306_WriteChar+0x112>

	// Check remaining space on current line
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800053a:	4b3e      	ldr	r3, [pc, #248]	@ (8000634 <ssd1306_WriteChar+0x11c>)
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	461a      	mov	r2, r3
 8000540:	783b      	ldrb	r3, [r7, #0]
 8000542:	4413      	add	r3, r2
 8000544:	2b80      	cmp	r3, #128	@ 0x80
 8000546:	dc06      	bgt.n	8000556 <ssd1306_WriteChar+0x3e>
	SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height)) {
 8000548:	4b3a      	ldr	r3, [pc, #232]	@ (8000634 <ssd1306_WriteChar+0x11c>)
 800054a:	885b      	ldrh	r3, [r3, #2]
 800054c:	461a      	mov	r2, r3
 800054e:	787b      	ldrb	r3, [r7, #1]
 8000550:	4413      	add	r3, r2
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000552:	2b40      	cmp	r3, #64	@ 0x40
 8000554:	dd01      	ble.n	800055a <ssd1306_WriteChar+0x42>
		// Not enough space on current line
		return 0;
 8000556:	2300      	movs	r3, #0
 8000558:	e067      	b.n	800062a <ssd1306_WriteChar+0x112>
	}

	// Use the font to write
	for (i = 0; i < Font.height; i++) {
 800055a:	2300      	movs	r3, #0
 800055c:	61fb      	str	r3, [r7, #28]
 800055e:	e04e      	b.n	80005fe <ssd1306_WriteChar+0xe6>
		b = Font.data[(ch - 32) * Font.height + i];
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	3b20      	subs	r3, #32
 8000566:	7879      	ldrb	r1, [r7, #1]
 8000568:	fb01 f303 	mul.w	r3, r1, r3
 800056c:	4619      	mov	r1, r3
 800056e:	69fb      	ldr	r3, [r7, #28]
 8000570:	440b      	add	r3, r1
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	4413      	add	r3, r2
 8000576:	881b      	ldrh	r3, [r3, #0]
 8000578:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.width; j++) {
 800057a:	2300      	movs	r3, #0
 800057c:	61bb      	str	r3, [r7, #24]
 800057e:	e036      	b.n	80005ee <ssd1306_WriteChar+0xd6>
			if ((b << j) & 0x8000) {
 8000580:	697a      	ldr	r2, [r7, #20]
 8000582:	69bb      	ldr	r3, [r7, #24]
 8000584:	fa02 f303 	lsl.w	r3, r2, r3
 8000588:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800058c:	2b00      	cmp	r3, #0
 800058e:	d013      	beq.n	80005b8 <ssd1306_WriteChar+0xa0>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 8000590:	4b28      	ldr	r3, [pc, #160]	@ (8000634 <ssd1306_WriteChar+0x11c>)
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	b2da      	uxtb	r2, r3
 8000596:	69bb      	ldr	r3, [r7, #24]
 8000598:	b2db      	uxtb	r3, r3
 800059a:	4413      	add	r3, r2
 800059c:	b2d8      	uxtb	r0, r3
 800059e:	4b25      	ldr	r3, [pc, #148]	@ (8000634 <ssd1306_WriteChar+0x11c>)
 80005a0:	885b      	ldrh	r3, [r3, #2]
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	69fb      	ldr	r3, [r7, #28]
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	4413      	add	r3, r2
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80005b0:	4619      	mov	r1, r3
 80005b2:	f7ff ff5f 	bl	8000474 <ssd1306_DrawPixel>
 80005b6:	e017      	b.n	80005e8 <ssd1306_WriteChar+0xd0>
						(SSD1306_COLOR) color);
			} else {
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 80005b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000634 <ssd1306_WriteChar+0x11c>)
 80005ba:	881b      	ldrh	r3, [r3, #0]
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	69bb      	ldr	r3, [r7, #24]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	4413      	add	r3, r2
 80005c4:	b2d8      	uxtb	r0, r3
 80005c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <ssd1306_WriteChar+0x11c>)
 80005c8:	885b      	ldrh	r3, [r3, #2]
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	69fb      	ldr	r3, [r7, #28]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	4413      	add	r3, r2
 80005d2:	b2d9      	uxtb	r1, r3
 80005d4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80005d8:	2b00      	cmp	r3, #0
 80005da:	bf0c      	ite	eq
 80005dc:	2301      	moveq	r3, #1
 80005de:	2300      	movne	r3, #0
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	461a      	mov	r2, r3
 80005e4:	f7ff ff46 	bl	8000474 <ssd1306_DrawPixel>
		for (j = 0; j < Font.width; j++) {
 80005e8:	69bb      	ldr	r3, [r7, #24]
 80005ea:	3301      	adds	r3, #1
 80005ec:	61bb      	str	r3, [r7, #24]
 80005ee:	783b      	ldrb	r3, [r7, #0]
 80005f0:	461a      	mov	r2, r3
 80005f2:	69bb      	ldr	r3, [r7, #24]
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d3c3      	bcc.n	8000580 <ssd1306_WriteChar+0x68>
	for (i = 0; i < Font.height; i++) {
 80005f8:	69fb      	ldr	r3, [r7, #28]
 80005fa:	3301      	adds	r3, #1
 80005fc:	61fb      	str	r3, [r7, #28]
 80005fe:	787b      	ldrb	r3, [r7, #1]
 8000600:	461a      	mov	r2, r3
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	4293      	cmp	r3, r2
 8000606:	d3ab      	bcc.n	8000560 <ssd1306_WriteChar+0x48>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8000608:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <ssd1306_WriteChar+0x11c>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	68ba      	ldr	r2, [r7, #8]
 800060e:	2a00      	cmp	r2, #0
 8000610:	d005      	beq.n	800061e <ssd1306_WriteChar+0x106>
 8000612:	68b9      	ldr	r1, [r7, #8]
 8000614:	7bfa      	ldrb	r2, [r7, #15]
 8000616:	3a20      	subs	r2, #32
 8000618:	440a      	add	r2, r1
 800061a:	7812      	ldrb	r2, [r2, #0]
 800061c:	e000      	b.n	8000620 <ssd1306_WriteChar+0x108>
 800061e:	783a      	ldrb	r2, [r7, #0]
 8000620:	4413      	add	r3, r2
 8000622:	b29a      	uxth	r2, r3
 8000624:	4b03      	ldr	r3, [pc, #12]	@ (8000634 <ssd1306_WriteChar+0x11c>)
 8000626:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8000628:	7bfb      	ldrb	r3, [r7, #15]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3724      	adds	r7, #36	@ 0x24
 800062e:	46bd      	mov	sp, r7
 8000630:	bd90      	pop	{r4, r7, pc}
 8000632:	bf00      	nop
 8000634:	20000478 	.word	0x20000478

08000638 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char *str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af02      	add	r7, sp, #8
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	4638      	mov	r0, r7
 8000642:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	while (*str) {
 8000646:	e013      	b.n	8000670 <ssd1306_WriteString+0x38>
		if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	7818      	ldrb	r0, [r3, #0]
 800064c:	7e3b      	ldrb	r3, [r7, #24]
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	463b      	mov	r3, r7
 8000652:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000654:	f7ff ff60 	bl	8000518 <ssd1306_WriteChar>
 8000658:	4603      	mov	r3, r0
 800065a:	461a      	mov	r2, r3
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	429a      	cmp	r2, r3
 8000662:	d002      	beq.n	800066a <ssd1306_WriteString+0x32>
			// Char could not be written
			return *str;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	e008      	b.n	800067c <ssd1306_WriteString+0x44>
		}
		str++;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	3301      	adds	r3, #1
 800066e:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d1e7      	bne.n	8000648 <ssd1306_WriteString+0x10>
	}

	// Everything ok
	return *str;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	781b      	ldrb	r3, [r3, #0]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	460a      	mov	r2, r1
 800068e:	71fb      	strb	r3, [r7, #7]
 8000690:	4613      	mov	r3, r2
 8000692:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	b29a      	uxth	r2, r3
 8000698:	4b05      	ldr	r3, [pc, #20]	@ (80006b0 <ssd1306_SetCursor+0x2c>)
 800069a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 800069c:	79bb      	ldrb	r3, [r7, #6]
 800069e:	b29a      	uxth	r2, r3
 80006a0:	4b03      	ldr	r3, [pc, #12]	@ (80006b0 <ssd1306_SetCursor+0x2c>)
 80006a2:	805a      	strh	r2, [r3, #2]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	20000478 	.word	0x20000478

080006b4 <ssd1306_SetContrast>:
		}
	}
	return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	const uint8_t kSetContrastControlRegister = 0x81;
 80006be:	2381      	movs	r3, #129	@ 0x81
 80006c0:	73fb      	strb	r3, [r7, #15]
	ssd1306_WriteCommand(kSetContrastControlRegister);
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff fdf9 	bl	80002bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(value);
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff fdf5 	bl	80002bc <ssd1306_WriteCommand>
}
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	if (on) {
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d005      	beq.n	80006f8 <ssd1306_SetDisplayOn+0x1c>
		value = 0xAF;   // Display on
 80006ec:	23af      	movs	r3, #175	@ 0xaf
 80006ee:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 1;
 80006f0:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <ssd1306_SetDisplayOn+0x38>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	715a      	strb	r2, [r3, #5]
 80006f6:	e004      	b.n	8000702 <ssd1306_SetDisplayOn+0x26>
	} else {
		value = 0xAE;   // Display off
 80006f8:	23ae      	movs	r3, #174	@ 0xae
 80006fa:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 0;
 80006fc:	4b05      	ldr	r3, [pc, #20]	@ (8000714 <ssd1306_SetDisplayOn+0x38>)
 80006fe:	2200      	movs	r2, #0
 8000700:	715a      	strb	r2, [r3, #5]
	}
	ssd1306_WriteCommand(value);
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff fdd9 	bl	80002bc <ssd1306_WriteCommand>
}
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000478 	.word	0x20000478

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071c:	f000 fba4 	bl	8000e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000720:	f000 f840 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000724:	f000 f9a4 	bl	8000a70 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000728:	f000 f882 	bl	8000830 <MX_I2C1_Init>
  MX_TIM1_Init();
 800072c:	f000 f8ae 	bl	800088c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000730:	f000 f904 	bl	800093c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  oled_init();
 8000734:	f7ff fd7c 	bl	8000230 <oled_init>
  HC_SR04_Init();
 8000738:	f7ff fd08 	bl	800014c <HC_SR04_Init>


  distance_update_flag = 0;
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <main+0x7c>)
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //trigger signal
	  HC_SR04_Trigger(); // trigger the HC_SR04 chip
 8000742:	f7ff fd09 	bl	8000158 <HC_SR04_Trigger>

	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // activate the interrupt for the falling edge of the echo wave
 8000746:	2100      	movs	r1, #0
 8000748:	4813      	ldr	r0, [pc, #76]	@ (8000798 <main+0x80>)
 800074a:	f002 f80d 	bl	8002768 <HAL_TIM_IC_Start_IT>

	  while(!distance_update_flag); // wait the measure to be done
 800074e:	bf00      	nop
 8000750:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <main+0x7c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d0fb      	beq.n	8000750 <main+0x38>
	  distance_update_flag = 0; // reset the flag for next run
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <main+0x7c>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]

	  HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 800075e:	2100      	movs	r1, #0
 8000760:	480d      	ldr	r0, [pc, #52]	@ (8000798 <main+0x80>)
 8000762:	f002 f90d 	bl	8002980 <HAL_TIM_IC_Stop_IT>

	  distance = HC_SR04_Distance_Calculate(pulse_us); //distance calculated in cm 325cm & 280cm
 8000766:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <main+0x84>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff fd0a 	bl	8000184 <HC_SR04_Distance_Calculate>
 8000770:	4603      	mov	r3, r0
 8000772:	461a      	mov	r2, r3
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <main+0x88>)
 8000776:	801a      	strh	r2, [r3, #0]
	  oled_display_wavelength_and_distance(pulse_us, distance); // update oled
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <main+0x84>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <main+0x88>)
 8000780:	881b      	ldrh	r3, [r3, #0]
 8000782:	4619      	mov	r1, r3
 8000784:	4610      	mov	r0, r2
 8000786:	f7ff fd59 	bl	800023c <oled_display_wavelength_and_distance>

	  HAL_Delay(60);
 800078a:	203c      	movs	r0, #60	@ 0x3c
 800078c:	f000 fbce 	bl	8000f2c <HAL_Delay>
	  HC_SR04_Trigger(); // trigger the HC_SR04 chip
 8000790:	e7d7      	b.n	8000742 <main+0x2a>
 8000792:	bf00      	nop
 8000794:	20000568 	.word	0x20000568
 8000798:	2000051c 	.word	0x2000051c
 800079c:	20000564 	.word	0x20000564
 80007a0:	2000056a 	.word	0x2000056a

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b090      	sub	sp, #64	@ 0x40
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0318 	add.w	r3, r7, #24
 80007ae:	2228      	movs	r2, #40	@ 0x28
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f003 f842 	bl	800383c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c6:	2301      	movs	r3, #1
 80007c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d4:	2301      	movs	r3, #1
 80007d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d8:	2302      	movs	r3, #2
 80007da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007e2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80007e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e8:	f107 0318 	add.w	r3, r7, #24
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 fb17 	bl	8001e20 <HAL_RCC_OscConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80007f8:	f000 f99e 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fc:	230f      	movs	r3, #15
 80007fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000800:	2302      	movs	r3, #2
 8000802:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000808:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800080c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2102      	movs	r1, #2
 8000816:	4618      	mov	r0, r3
 8000818:	f001 fd84 	bl	8002324 <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000822:	f000 f989 	bl	8000b38 <Error_Handler>
  }
}
 8000826:	bf00      	nop
 8000828:	3740      	adds	r7, #64	@ 0x40
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000834:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000836:	4a13      	ldr	r2, [pc, #76]	@ (8000884 <MX_I2C1_Init+0x54>)
 8000838:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_I2C1_Init+0x50>)
 800083c:	4a12      	ldr	r2, [pc, #72]	@ (8000888 <MX_I2C1_Init+0x58>)
 800083e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000840:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000846:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <MX_I2C1_Init+0x50>)
 800084e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000852:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000854:	4b0a      	ldr	r3, [pc, #40]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <MX_I2C1_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000860:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	@ (8000880 <MX_I2C1_Init+0x50>)
 800086e:	f000 fe2b 	bl	80014c8 <HAL_I2C_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000878:	f000 f95e 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000480 	.word	0x20000480
 8000884:	40005400 	.word	0x40005400
 8000888:	000186a0 	.word	0x000186a0

0800088c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a0:	463b      	mov	r3, r7
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008a8:	4b22      	ldr	r3, [pc, #136]	@ (8000934 <MX_TIM1_Init+0xa8>)
 80008aa:	4a23      	ldr	r2, [pc, #140]	@ (8000938 <MX_TIM1_Init+0xac>)
 80008ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80008ae:	4b21      	ldr	r3, [pc, #132]	@ (8000934 <MX_TIM1_Init+0xa8>)
 80008b0:	2247      	movs	r2, #71	@ 0x47
 80008b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000934 <MX_TIM1_Init+0xa8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10;
 80008ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000934 <MX_TIM1_Init+0xa8>)
 80008bc:	220a      	movs	r2, #10
 80008be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000934 <MX_TIM1_Init+0xa8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000934 <MX_TIM1_Init+0xa8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008cc:	4b19      	ldr	r3, [pc, #100]	@ (8000934 <MX_TIM1_Init+0xa8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008d2:	4818      	ldr	r0, [pc, #96]	@ (8000934 <MX_TIM1_Init+0xa8>)
 80008d4:	f001 fea0 	bl	8002618 <HAL_TIM_Base_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80008de:	f000 f92b 	bl	8000b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	4619      	mov	r1, r3
 80008ee:	4811      	ldr	r0, [pc, #68]	@ (8000934 <MX_TIM1_Init+0xa8>)
 80008f0:	f002 fad9 	bl	8002ea6 <HAL_TIM_ConfigClockSource>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80008fa:	f000 f91d 	bl	8000b38 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 80008fe:	2108      	movs	r1, #8
 8000900:	480c      	ldr	r0, [pc, #48]	@ (8000934 <MX_TIM1_Init+0xa8>)
 8000902:	f002 f8eb 	bl	8002adc <HAL_TIM_OnePulse_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800090c:	f000 f914 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000910:	2300      	movs	r3, #0
 8000912:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	4619      	mov	r1, r3
 800091c:	4805      	ldr	r0, [pc, #20]	@ (8000934 <MX_TIM1_Init+0xa8>)
 800091e:	f002 fefb 	bl	8003718 <HAL_TIMEx_MasterConfigSynchronization>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000928:	f000 f906 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	3718      	adds	r7, #24
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200004d4 	.word	0x200004d4
 8000938:	40012c00 	.word	0x40012c00

0800093c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b090      	sub	sp, #64	@ 0x40
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000942:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000976:	4b3d      	ldr	r3, [pc, #244]	@ (8000a6c <MX_TIM2_Init+0x130>)
 8000978:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800097c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800097e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a6c <MX_TIM2_Init+0x130>)
 8000980:	2247      	movs	r2, #71	@ 0x47
 8000982:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000984:	4b39      	ldr	r3, [pc, #228]	@ (8000a6c <MX_TIM2_Init+0x130>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800098a:	4b38      	ldr	r3, [pc, #224]	@ (8000a6c <MX_TIM2_Init+0x130>)
 800098c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000990:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000992:	4b36      	ldr	r3, [pc, #216]	@ (8000a6c <MX_TIM2_Init+0x130>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000998:	4b34      	ldr	r3, [pc, #208]	@ (8000a6c <MX_TIM2_Init+0x130>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800099e:	4833      	ldr	r0, [pc, #204]	@ (8000a6c <MX_TIM2_Init+0x130>)
 80009a0:	f001 fe3a 	bl	8002618 <HAL_TIM_Base_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80009aa:	f000 f8c5 	bl	8000b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009b2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009b8:	4619      	mov	r1, r3
 80009ba:	482c      	ldr	r0, [pc, #176]	@ (8000a6c <MX_TIM2_Init+0x130>)
 80009bc:	f002 fa73 	bl	8002ea6 <HAL_TIM_ConfigClockSource>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80009c6:	f000 f8b7 	bl	8000b38 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80009ca:	4828      	ldr	r0, [pc, #160]	@ (8000a6c <MX_TIM2_Init+0x130>)
 80009cc:	f001 fe73 	bl	80026b6 <HAL_TIM_IC_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80009d6:	f000 f8af 	bl	8000b38 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80009da:	2304      	movs	r3, #4
 80009dc:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80009de:	2360      	movs	r3, #96	@ 0x60
 80009e0:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	481e      	ldr	r0, [pc, #120]	@ (8000a6c <MX_TIM2_Init+0x130>)
 80009f2:	f002 fb1f 	bl	8003034 <HAL_TIM_SlaveConfigSynchro>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 80009fc:	f000 f89c 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4817      	ldr	r0, [pc, #92]	@ (8000a6c <MX_TIM2_Init+0x130>)
 8000a10:	f002 fe82 	bl	8003718 <HAL_TIMEx_MasterConfigSynchronization>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000a1a:	f000 f88d 	bl	8000b38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000a22:	2302      	movs	r3, #2
 8000a24:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2200      	movs	r2, #0
 8000a32:	4619      	mov	r1, r3
 8000a34:	480d      	ldr	r0, [pc, #52]	@ (8000a6c <MX_TIM2_Init+0x130>)
 8000a36:	f002 f99a 	bl	8002d6e <HAL_TIM_IC_ConfigChannel>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000a40:	f000 f87a 	bl	8000b38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a44:	2300      	movs	r3, #0
 8000a46:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2204      	movs	r2, #4
 8000a50:	4619      	mov	r1, r3
 8000a52:	4806      	ldr	r0, [pc, #24]	@ (8000a6c <MX_TIM2_Init+0x130>)
 8000a54:	f002 f98b 	bl	8002d6e <HAL_TIM_IC_ConfigChannel>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM2_Init+0x126>
  {
    Error_Handler();
 8000a5e:	f000 f86b 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	3740      	adds	r7, #64	@ 0x40
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	2000051c 	.word	0x2000051c

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 0310 	add.w	r3, r7, #16
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a84:	4b2a      	ldr	r3, [pc, #168]	@ (8000b30 <MX_GPIO_Init+0xc0>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a29      	ldr	r2, [pc, #164]	@ (8000b30 <MX_GPIO_Init+0xc0>)
 8000a8a:	f043 0310 	orr.w	r3, r3, #16
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b27      	ldr	r3, [pc, #156]	@ (8000b30 <MX_GPIO_Init+0xc0>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0310 	and.w	r3, r3, #16
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9c:	4b24      	ldr	r3, [pc, #144]	@ (8000b30 <MX_GPIO_Init+0xc0>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a23      	ldr	r2, [pc, #140]	@ (8000b30 <MX_GPIO_Init+0xc0>)
 8000aa2:	f043 0320 	orr.w	r3, r3, #32
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b21      	ldr	r3, [pc, #132]	@ (8000b30 <MX_GPIO_Init+0xc0>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0320 	and.w	r3, r3, #32
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b30 <MX_GPIO_Init+0xc0>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b30 <MX_GPIO_Init+0xc0>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b30 <MX_GPIO_Init+0xc0>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0304 	and.w	r3, r3, #4
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000acc:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <MX_GPIO_Init+0xc0>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a17      	ldr	r2, [pc, #92]	@ (8000b30 <MX_GPIO_Init+0xc0>)
 8000ad2:	f043 0308 	orr.w	r3, r3, #8
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <MX_GPIO_Init+0xc0>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0308 	and.w	r3, r3, #8
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aea:	4812      	ldr	r0, [pc, #72]	@ (8000b34 <MX_GPIO_Init+0xc4>)
 8000aec:	f000 fcd4 	bl	8001498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000af0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000af4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	4619      	mov	r1, r3
 8000b08:	480a      	ldr	r0, [pc, #40]	@ (8000b34 <MX_GPIO_Init+0xc4>)
 8000b0a:	f000 fb41 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	4619      	mov	r1, r3
 8000b22:	4804      	ldr	r0, [pc, #16]	@ (8000b34 <MX_GPIO_Init+0xc4>)
 8000b24:	f000 fb34 	bl	8001190 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b28:	bf00      	nop
 8000b2a:	3720      	adds	r7, #32
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40021000 	.word	0x40021000
 8000b34:	40010800 	.word	0x40010800

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <Error_Handler+0x8>

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <HAL_MspInit+0x5c>)
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	4a14      	ldr	r2, [pc, #80]	@ (8000ba0 <HAL_MspInit+0x5c>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6193      	str	r3, [r2, #24]
 8000b56:	4b12      	ldr	r3, [pc, #72]	@ (8000ba0 <HAL_MspInit+0x5c>)
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <HAL_MspInit+0x5c>)
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba0 <HAL_MspInit+0x5c>)
 8000b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b6c:	61d3      	str	r3, [r2, #28]
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <HAL_MspInit+0x5c>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba4 <HAL_MspInit+0x60>)
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	4a04      	ldr	r2, [pc, #16]	@ (8000ba4 <HAL_MspInit+0x60>)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40010000 	.word	0x40010000

08000ba8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0310 	add.w	r3, r7, #16
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a15      	ldr	r2, [pc, #84]	@ (8000c18 <HAL_I2C_MspInit+0x70>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d123      	bne.n	8000c10 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc8:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <HAL_I2C_MspInit+0x74>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4a13      	ldr	r2, [pc, #76]	@ (8000c1c <HAL_I2C_MspInit+0x74>)
 8000bce:	f043 0308 	orr.w	r3, r3, #8
 8000bd2:	6193      	str	r3, [r2, #24]
 8000bd4:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <HAL_I2C_MspInit+0x74>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f003 0308 	and.w	r3, r3, #8
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000be0:	23c0      	movs	r3, #192	@ 0xc0
 8000be2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be4:	2312      	movs	r3, #18
 8000be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	480b      	ldr	r0, [pc, #44]	@ (8000c20 <HAL_I2C_MspInit+0x78>)
 8000bf4:	f000 facc 	bl	8001190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf8:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <HAL_I2C_MspInit+0x74>)
 8000bfa:	69db      	ldr	r3, [r3, #28]
 8000bfc:	4a07      	ldr	r2, [pc, #28]	@ (8000c1c <HAL_I2C_MspInit+0x74>)
 8000bfe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c02:	61d3      	str	r3, [r2, #28]
 8000c04:	4b05      	ldr	r3, [pc, #20]	@ (8000c1c <HAL_I2C_MspInit+0x74>)
 8000c06:	69db      	ldr	r3, [r3, #28]
 8000c08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c10:	bf00      	nop
 8000c12:	3720      	adds	r7, #32
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40005400 	.word	0x40005400
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40010c00 	.word	0x40010c00

08000c24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	@ 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0318 	add.w	r3, r7, #24
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a26      	ldr	r2, [pc, #152]	@ (8000cd8 <HAL_TIM_Base_MspInit+0xb4>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d114      	bne.n	8000c6e <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c44:	4b25      	ldr	r3, [pc, #148]	@ (8000cdc <HAL_TIM_Base_MspInit+0xb8>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a24      	ldr	r2, [pc, #144]	@ (8000cdc <HAL_TIM_Base_MspInit+0xb8>)
 8000c4a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b22      	ldr	r3, [pc, #136]	@ (8000cdc <HAL_TIM_Base_MspInit+0xb8>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2100      	movs	r1, #0
 8000c60:	2019      	movs	r0, #25
 8000c62:	f000 fa5e 	bl	8001122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000c66:	2019      	movs	r0, #25
 8000c68:	f000 fa77 	bl	800115a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c6c:	e030      	b.n	8000cd0 <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM2)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c76:	d12b      	bne.n	8000cd0 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c78:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <HAL_TIM_Base_MspInit+0xb8>)
 8000c7a:	69db      	ldr	r3, [r3, #28]
 8000c7c:	4a17      	ldr	r2, [pc, #92]	@ (8000cdc <HAL_TIM_Base_MspInit+0xb8>)
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	61d3      	str	r3, [r2, #28]
 8000c84:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <HAL_TIM_Base_MspInit+0xb8>)
 8000c86:	69db      	ldr	r3, [r3, #28]
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <HAL_TIM_Base_MspInit+0xb8>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a11      	ldr	r2, [pc, #68]	@ (8000cdc <HAL_TIM_Base_MspInit+0xb8>)
 8000c96:	f043 0304 	orr.w	r3, r3, #4
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <HAL_TIM_Base_MspInit+0xb8>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f003 0304 	and.w	r3, r3, #4
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	f107 0318 	add.w	r3, r7, #24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4809      	ldr	r0, [pc, #36]	@ (8000ce0 <HAL_TIM_Base_MspInit+0xbc>)
 8000cbc:	f000 fa68 	bl	8001190 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	201c      	movs	r0, #28
 8000cc6:	f000 fa2c 	bl	8001122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cca:	201c      	movs	r0, #28
 8000ccc:	f000 fa45 	bl	800115a <HAL_NVIC_EnableIRQ>
}
 8000cd0:	bf00      	nop
 8000cd2:	3728      	adds	r7, #40	@ 0x28
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40012c00 	.word	0x40012c00
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010800 	.word	0x40010800

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <NMI_Handler+0x4>

08000cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr

08000d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d34:	f000 f8de 	bl	8000ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d40:	4802      	ldr	r0, [pc, #8]	@ (8000d4c <TIM1_UP_IRQHandler+0x10>)
 8000d42:	f001 ff24 	bl	8002b8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200004d4 	.word	0x200004d4

08000d50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d54:	4802      	ldr	r0, [pc, #8]	@ (8000d60 <TIM2_IRQHandler+0x10>)
 8000d56:	f001 ff1a 	bl	8002b8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000051c 	.word	0x2000051c

08000d64 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
    if(htim->Instance==TIM2 && htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1){
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d74:	d10d      	bne.n	8000d92 <HAL_TIM_IC_CaptureCallback+0x2e>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	7f1b      	ldrb	r3, [r3, #28]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d109      	bne.n	8000d92 <HAL_TIM_IC_CaptureCallback+0x2e>
        pulse_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000d7e:	2100      	movs	r1, #0
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f002 f999 	bl	80030b8 <HAL_TIM_ReadCapturedValue>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4a04      	ldr	r2, [pc, #16]	@ (8000d9c <HAL_TIM_IC_CaptureCallback+0x38>)
 8000d8a:	6013      	str	r3, [r2, #0]
        distance_update_flag = 1;
 8000d8c:	4b04      	ldr	r3, [pc, #16]	@ (8000da0 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]

    }
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000564 	.word	0x20000564
 8000da0:	20000568 	.word	0x20000568

08000da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dac:	4a14      	ldr	r2, [pc, #80]	@ (8000e00 <_sbrk+0x5c>)
 8000dae:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <_sbrk+0x60>)
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db8:	4b13      	ldr	r3, [pc, #76]	@ (8000e08 <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d102      	bne.n	8000dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <_sbrk+0x64>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	@ (8000e0c <_sbrk+0x68>)
 8000dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc6:	4b10      	ldr	r3, [pc, #64]	@ (8000e08 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d207      	bcs.n	8000de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd4:	f002 fd3a 	bl	800384c <__errno>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	220c      	movs	r2, #12
 8000ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	e009      	b.n	8000df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de4:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dea:	4b07      	ldr	r3, [pc, #28]	@ (8000e08 <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	4a05      	ldr	r2, [pc, #20]	@ (8000e08 <_sbrk+0x64>)
 8000df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df6:	68fb      	ldr	r3, [r7, #12]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20005000 	.word	0x20005000
 8000e04:	00000400 	.word	0x00000400
 8000e08:	2000056c 	.word	0x2000056c
 8000e0c:	200006c0 	.word	0x200006c0

08000e10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e1c:	f7ff fff8 	bl	8000e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e20:	480b      	ldr	r0, [pc, #44]	@ (8000e50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e22:	490c      	ldr	r1, [pc, #48]	@ (8000e54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e24:	4a0c      	ldr	r2, [pc, #48]	@ (8000e58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a09      	ldr	r2, [pc, #36]	@ (8000e5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e38:	4c09      	ldr	r4, [pc, #36]	@ (8000e60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e46:	f002 fd07 	bl	8003858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e4a:	f7ff fc65 	bl	8000718 <main>
  bx lr
 8000e4e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e54:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e58:	08004800 	.word	0x08004800
  ldr r2, =_sbss
 8000e5c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e60:	200006bc 	.word	0x200006bc

08000e64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e64:	e7fe      	b.n	8000e64 <ADC1_2_IRQHandler>
	...

08000e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e6c:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <HAL_Init+0x28>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a07      	ldr	r2, [pc, #28]	@ (8000e90 <HAL_Init+0x28>)
 8000e72:	f043 0310 	orr.w	r3, r3, #16
 8000e76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 f947 	bl	800110c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7e:	200f      	movs	r0, #15
 8000e80:	f000 f808 	bl	8000e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e84:	f7ff fe5e 	bl	8000b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40022000 	.word	0x40022000

08000e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ee8 <HAL_InitTick+0x54>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <HAL_InitTick+0x58>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f95f 	bl	8001176 <HAL_SYSTICK_Config>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00e      	b.n	8000ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d80a      	bhi.n	8000ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f000 f927 	bl	8001122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed4:	4a06      	ldr	r2, [pc, #24]	@ (8000ef0 <HAL_InitTick+0x5c>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e000      	b.n	8000ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef8:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <HAL_IncTick+0x1c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b05      	ldr	r3, [pc, #20]	@ (8000f14 <HAL_IncTick+0x20>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a03      	ldr	r2, [pc, #12]	@ (8000f14 <HAL_IncTick+0x20>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	20000008 	.word	0x20000008
 8000f14:	20000570 	.word	0x20000570

08000f18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b02      	ldr	r3, [pc, #8]	@ (8000f28 <HAL_GetTick+0x10>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	20000570 	.word	0x20000570

08000f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f34:	f7ff fff0 	bl	8000f18 <HAL_GetTick>
 8000f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f44:	d005      	beq.n	8000f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f46:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <HAL_Delay+0x44>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f52:	bf00      	nop
 8000f54:	f7ff ffe0 	bl	8000f18 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d8f7      	bhi.n	8000f54 <HAL_Delay+0x28>
  {
  }
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008

08000f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f90:	4013      	ands	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	@ (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	db0b      	blt.n	8001002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 021f 	and.w	r2, r3, #31
 8000ff0:	4906      	ldr	r1, [pc, #24]	@ (800100c <__NVIC_EnableIRQ+0x34>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	db0a      	blt.n	800103a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	490c      	ldr	r1, [pc, #48]	@ (800105c <__NVIC_SetPriority+0x4c>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	0112      	lsls	r2, r2, #4
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	440b      	add	r3, r1
 8001034:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001038:	e00a      	b.n	8001050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4908      	ldr	r1, [pc, #32]	@ (8001060 <__NVIC_SetPriority+0x50>)
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	3b04      	subs	r3, #4
 8001048:	0112      	lsls	r2, r2, #4
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	440b      	add	r3, r1
 800104e:	761a      	strb	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e100 	.word	0xe000e100
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	@ 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f1c3 0307 	rsb	r3, r3, #7
 800107e:	2b04      	cmp	r3, #4
 8001080:	bf28      	it	cs
 8001082:	2304      	movcs	r3, #4
 8001084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3304      	adds	r3, #4
 800108a:	2b06      	cmp	r3, #6
 800108c:	d902      	bls.n	8001094 <NVIC_EncodePriority+0x30>
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3b03      	subs	r3, #3
 8001092:	e000      	b.n	8001096 <NVIC_EncodePriority+0x32>
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	f04f 32ff 	mov.w	r2, #4294967295
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43da      	mvns	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	401a      	ands	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43d9      	mvns	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	4313      	orrs	r3, r2
         );
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3724      	adds	r7, #36	@ 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010d8:	d301      	bcc.n	80010de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010da:	2301      	movs	r3, #1
 80010dc:	e00f      	b.n	80010fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010de:	4a0a      	ldr	r2, [pc, #40]	@ (8001108 <SysTick_Config+0x40>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e6:	210f      	movs	r1, #15
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f7ff ff90 	bl	8001010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f0:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <SysTick_Config+0x40>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f6:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <SysTick_Config+0x40>)
 80010f8:	2207      	movs	r2, #7
 80010fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	e000e010 	.word	0xe000e010

0800110c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff2d 	bl	8000f74 <__NVIC_SetPriorityGrouping>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001122:	b580      	push	{r7, lr}
 8001124:	b086      	sub	sp, #24
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001134:	f7ff ff42 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 8001138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	6978      	ldr	r0, [r7, #20]
 8001140:	f7ff ff90 	bl	8001064 <NVIC_EncodePriority>
 8001144:	4602      	mov	r2, r0
 8001146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff5f 	bl	8001010 <__NVIC_SetPriority>
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff35 	bl	8000fd8 <__NVIC_EnableIRQ>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffa2 	bl	80010c8 <SysTick_Config>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b08b      	sub	sp, #44	@ 0x2c
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800119a:	2300      	movs	r3, #0
 800119c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800119e:	2300      	movs	r3, #0
 80011a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a2:	e169      	b.n	8001478 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011a4:	2201      	movs	r2, #1
 80011a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	429a      	cmp	r2, r3
 80011be:	f040 8158 	bne.w	8001472 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	4a9a      	ldr	r2, [pc, #616]	@ (8001430 <HAL_GPIO_Init+0x2a0>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d05e      	beq.n	800128a <HAL_GPIO_Init+0xfa>
 80011cc:	4a98      	ldr	r2, [pc, #608]	@ (8001430 <HAL_GPIO_Init+0x2a0>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d875      	bhi.n	80012be <HAL_GPIO_Init+0x12e>
 80011d2:	4a98      	ldr	r2, [pc, #608]	@ (8001434 <HAL_GPIO_Init+0x2a4>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d058      	beq.n	800128a <HAL_GPIO_Init+0xfa>
 80011d8:	4a96      	ldr	r2, [pc, #600]	@ (8001434 <HAL_GPIO_Init+0x2a4>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d86f      	bhi.n	80012be <HAL_GPIO_Init+0x12e>
 80011de:	4a96      	ldr	r2, [pc, #600]	@ (8001438 <HAL_GPIO_Init+0x2a8>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d052      	beq.n	800128a <HAL_GPIO_Init+0xfa>
 80011e4:	4a94      	ldr	r2, [pc, #592]	@ (8001438 <HAL_GPIO_Init+0x2a8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d869      	bhi.n	80012be <HAL_GPIO_Init+0x12e>
 80011ea:	4a94      	ldr	r2, [pc, #592]	@ (800143c <HAL_GPIO_Init+0x2ac>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d04c      	beq.n	800128a <HAL_GPIO_Init+0xfa>
 80011f0:	4a92      	ldr	r2, [pc, #584]	@ (800143c <HAL_GPIO_Init+0x2ac>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d863      	bhi.n	80012be <HAL_GPIO_Init+0x12e>
 80011f6:	4a92      	ldr	r2, [pc, #584]	@ (8001440 <HAL_GPIO_Init+0x2b0>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d046      	beq.n	800128a <HAL_GPIO_Init+0xfa>
 80011fc:	4a90      	ldr	r2, [pc, #576]	@ (8001440 <HAL_GPIO_Init+0x2b0>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d85d      	bhi.n	80012be <HAL_GPIO_Init+0x12e>
 8001202:	2b12      	cmp	r3, #18
 8001204:	d82a      	bhi.n	800125c <HAL_GPIO_Init+0xcc>
 8001206:	2b12      	cmp	r3, #18
 8001208:	d859      	bhi.n	80012be <HAL_GPIO_Init+0x12e>
 800120a:	a201      	add	r2, pc, #4	@ (adr r2, 8001210 <HAL_GPIO_Init+0x80>)
 800120c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001210:	0800128b 	.word	0x0800128b
 8001214:	08001265 	.word	0x08001265
 8001218:	08001277 	.word	0x08001277
 800121c:	080012b9 	.word	0x080012b9
 8001220:	080012bf 	.word	0x080012bf
 8001224:	080012bf 	.word	0x080012bf
 8001228:	080012bf 	.word	0x080012bf
 800122c:	080012bf 	.word	0x080012bf
 8001230:	080012bf 	.word	0x080012bf
 8001234:	080012bf 	.word	0x080012bf
 8001238:	080012bf 	.word	0x080012bf
 800123c:	080012bf 	.word	0x080012bf
 8001240:	080012bf 	.word	0x080012bf
 8001244:	080012bf 	.word	0x080012bf
 8001248:	080012bf 	.word	0x080012bf
 800124c:	080012bf 	.word	0x080012bf
 8001250:	080012bf 	.word	0x080012bf
 8001254:	0800126d 	.word	0x0800126d
 8001258:	08001281 	.word	0x08001281
 800125c:	4a79      	ldr	r2, [pc, #484]	@ (8001444 <HAL_GPIO_Init+0x2b4>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d013      	beq.n	800128a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001262:	e02c      	b.n	80012be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	623b      	str	r3, [r7, #32]
          break;
 800126a:	e029      	b.n	80012c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	3304      	adds	r3, #4
 8001272:	623b      	str	r3, [r7, #32]
          break;
 8001274:	e024      	b.n	80012c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	3308      	adds	r3, #8
 800127c:	623b      	str	r3, [r7, #32]
          break;
 800127e:	e01f      	b.n	80012c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	330c      	adds	r3, #12
 8001286:	623b      	str	r3, [r7, #32]
          break;
 8001288:	e01a      	b.n	80012c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d102      	bne.n	8001298 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001292:	2304      	movs	r3, #4
 8001294:	623b      	str	r3, [r7, #32]
          break;
 8001296:	e013      	b.n	80012c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d105      	bne.n	80012ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012a0:	2308      	movs	r3, #8
 80012a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69fa      	ldr	r2, [r7, #28]
 80012a8:	611a      	str	r2, [r3, #16]
          break;
 80012aa:	e009      	b.n	80012c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012ac:	2308      	movs	r3, #8
 80012ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	69fa      	ldr	r2, [r7, #28]
 80012b4:	615a      	str	r2, [r3, #20]
          break;
 80012b6:	e003      	b.n	80012c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
          break;
 80012bc:	e000      	b.n	80012c0 <HAL_GPIO_Init+0x130>
          break;
 80012be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	2bff      	cmp	r3, #255	@ 0xff
 80012c4:	d801      	bhi.n	80012ca <HAL_GPIO_Init+0x13a>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	e001      	b.n	80012ce <HAL_GPIO_Init+0x13e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3304      	adds	r3, #4
 80012ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	2bff      	cmp	r3, #255	@ 0xff
 80012d4:	d802      	bhi.n	80012dc <HAL_GPIO_Init+0x14c>
 80012d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	e002      	b.n	80012e2 <HAL_GPIO_Init+0x152>
 80012dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012de:	3b08      	subs	r3, #8
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	210f      	movs	r1, #15
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	fa01 f303 	lsl.w	r3, r1, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	401a      	ands	r2, r3
 80012f4:	6a39      	ldr	r1, [r7, #32]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	fa01 f303 	lsl.w	r3, r1, r3
 80012fc:	431a      	orrs	r2, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 80b1 	beq.w	8001472 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001310:	4b4d      	ldr	r3, [pc, #308]	@ (8001448 <HAL_GPIO_Init+0x2b8>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a4c      	ldr	r2, [pc, #304]	@ (8001448 <HAL_GPIO_Init+0x2b8>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b4a      	ldr	r3, [pc, #296]	@ (8001448 <HAL_GPIO_Init+0x2b8>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001328:	4a48      	ldr	r2, [pc, #288]	@ (800144c <HAL_GPIO_Init+0x2bc>)
 800132a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132c:	089b      	lsrs	r3, r3, #2
 800132e:	3302      	adds	r3, #2
 8001330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001334:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	220f      	movs	r2, #15
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	4013      	ands	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a40      	ldr	r2, [pc, #256]	@ (8001450 <HAL_GPIO_Init+0x2c0>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d013      	beq.n	800137c <HAL_GPIO_Init+0x1ec>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a3f      	ldr	r2, [pc, #252]	@ (8001454 <HAL_GPIO_Init+0x2c4>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d00d      	beq.n	8001378 <HAL_GPIO_Init+0x1e8>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a3e      	ldr	r2, [pc, #248]	@ (8001458 <HAL_GPIO_Init+0x2c8>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d007      	beq.n	8001374 <HAL_GPIO_Init+0x1e4>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a3d      	ldr	r2, [pc, #244]	@ (800145c <HAL_GPIO_Init+0x2cc>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d101      	bne.n	8001370 <HAL_GPIO_Init+0x1e0>
 800136c:	2303      	movs	r3, #3
 800136e:	e006      	b.n	800137e <HAL_GPIO_Init+0x1ee>
 8001370:	2304      	movs	r3, #4
 8001372:	e004      	b.n	800137e <HAL_GPIO_Init+0x1ee>
 8001374:	2302      	movs	r3, #2
 8001376:	e002      	b.n	800137e <HAL_GPIO_Init+0x1ee>
 8001378:	2301      	movs	r3, #1
 800137a:	e000      	b.n	800137e <HAL_GPIO_Init+0x1ee>
 800137c:	2300      	movs	r3, #0
 800137e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001380:	f002 0203 	and.w	r2, r2, #3
 8001384:	0092      	lsls	r2, r2, #2
 8001386:	4093      	lsls	r3, r2
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	4313      	orrs	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800138e:	492f      	ldr	r1, [pc, #188]	@ (800144c <HAL_GPIO_Init+0x2bc>)
 8001390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	3302      	adds	r3, #2
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d006      	beq.n	80013b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001460 <HAL_GPIO_Init+0x2d0>)
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	492c      	ldr	r1, [pc, #176]	@ (8001460 <HAL_GPIO_Init+0x2d0>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	608b      	str	r3, [r1, #8]
 80013b4:	e006      	b.n	80013c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001460 <HAL_GPIO_Init+0x2d0>)
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	43db      	mvns	r3, r3
 80013be:	4928      	ldr	r1, [pc, #160]	@ (8001460 <HAL_GPIO_Init+0x2d0>)
 80013c0:	4013      	ands	r3, r2
 80013c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d006      	beq.n	80013de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013d0:	4b23      	ldr	r3, [pc, #140]	@ (8001460 <HAL_GPIO_Init+0x2d0>)
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	4922      	ldr	r1, [pc, #136]	@ (8001460 <HAL_GPIO_Init+0x2d0>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	60cb      	str	r3, [r1, #12]
 80013dc:	e006      	b.n	80013ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013de:	4b20      	ldr	r3, [pc, #128]	@ (8001460 <HAL_GPIO_Init+0x2d0>)
 80013e0:	68da      	ldr	r2, [r3, #12]
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	491e      	ldr	r1, [pc, #120]	@ (8001460 <HAL_GPIO_Init+0x2d0>)
 80013e8:	4013      	ands	r3, r2
 80013ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d006      	beq.n	8001406 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013f8:	4b19      	ldr	r3, [pc, #100]	@ (8001460 <HAL_GPIO_Init+0x2d0>)
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	4918      	ldr	r1, [pc, #96]	@ (8001460 <HAL_GPIO_Init+0x2d0>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	4313      	orrs	r3, r2
 8001402:	604b      	str	r3, [r1, #4]
 8001404:	e006      	b.n	8001414 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001406:	4b16      	ldr	r3, [pc, #88]	@ (8001460 <HAL_GPIO_Init+0x2d0>)
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	43db      	mvns	r3, r3
 800140e:	4914      	ldr	r1, [pc, #80]	@ (8001460 <HAL_GPIO_Init+0x2d0>)
 8001410:	4013      	ands	r3, r2
 8001412:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d021      	beq.n	8001464 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001420:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <HAL_GPIO_Init+0x2d0>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	490e      	ldr	r1, [pc, #56]	@ (8001460 <HAL_GPIO_Init+0x2d0>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	600b      	str	r3, [r1, #0]
 800142c:	e021      	b.n	8001472 <HAL_GPIO_Init+0x2e2>
 800142e:	bf00      	nop
 8001430:	10320000 	.word	0x10320000
 8001434:	10310000 	.word	0x10310000
 8001438:	10220000 	.word	0x10220000
 800143c:	10210000 	.word	0x10210000
 8001440:	10120000 	.word	0x10120000
 8001444:	10110000 	.word	0x10110000
 8001448:	40021000 	.word	0x40021000
 800144c:	40010000 	.word	0x40010000
 8001450:	40010800 	.word	0x40010800
 8001454:	40010c00 	.word	0x40010c00
 8001458:	40011000 	.word	0x40011000
 800145c:	40011400 	.word	0x40011400
 8001460:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001464:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <HAL_GPIO_Init+0x304>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	43db      	mvns	r3, r3
 800146c:	4909      	ldr	r1, [pc, #36]	@ (8001494 <HAL_GPIO_Init+0x304>)
 800146e:	4013      	ands	r3, r2
 8001470:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001474:	3301      	adds	r3, #1
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147e:	fa22 f303 	lsr.w	r3, r2, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	f47f ae8e 	bne.w	80011a4 <HAL_GPIO_Init+0x14>
  }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	372c      	adds	r7, #44	@ 0x2c
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	40010400 	.word	0x40010400

08001498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]
 80014a4:	4613      	mov	r3, r2
 80014a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014a8:	787b      	ldrb	r3, [r7, #1]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ae:	887a      	ldrh	r2, [r7, #2]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014b4:	e003      	b.n	80014be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014b6:	887b      	ldrh	r3, [r7, #2]
 80014b8:	041a      	lsls	r2, r3, #16
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	611a      	str	r2, [r3, #16]
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e12b      	b.n	8001732 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d106      	bne.n	80014f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fb5a 	bl	8000ba8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2224      	movs	r2, #36	@ 0x24
 80014f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 0201 	bic.w	r2, r2, #1
 800150a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800151a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800152a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800152c:	f001 f842 	bl	80025b4 <HAL_RCC_GetPCLK1Freq>
 8001530:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	4a81      	ldr	r2, [pc, #516]	@ (800173c <HAL_I2C_Init+0x274>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d807      	bhi.n	800154c <HAL_I2C_Init+0x84>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4a80      	ldr	r2, [pc, #512]	@ (8001740 <HAL_I2C_Init+0x278>)
 8001540:	4293      	cmp	r3, r2
 8001542:	bf94      	ite	ls
 8001544:	2301      	movls	r3, #1
 8001546:	2300      	movhi	r3, #0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	e006      	b.n	800155a <HAL_I2C_Init+0x92>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4a7d      	ldr	r2, [pc, #500]	@ (8001744 <HAL_I2C_Init+0x27c>)
 8001550:	4293      	cmp	r3, r2
 8001552:	bf94      	ite	ls
 8001554:	2301      	movls	r3, #1
 8001556:	2300      	movhi	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e0e7      	b.n	8001732 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4a78      	ldr	r2, [pc, #480]	@ (8001748 <HAL_I2C_Init+0x280>)
 8001566:	fba2 2303 	umull	r2, r3, r2, r3
 800156a:	0c9b      	lsrs	r3, r3, #18
 800156c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	430a      	orrs	r2, r1
 8001580:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	4a6a      	ldr	r2, [pc, #424]	@ (800173c <HAL_I2C_Init+0x274>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d802      	bhi.n	800159c <HAL_I2C_Init+0xd4>
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	3301      	adds	r3, #1
 800159a:	e009      	b.n	80015b0 <HAL_I2C_Init+0xe8>
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015a2:	fb02 f303 	mul.w	r3, r2, r3
 80015a6:	4a69      	ldr	r2, [pc, #420]	@ (800174c <HAL_I2C_Init+0x284>)
 80015a8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ac:	099b      	lsrs	r3, r3, #6
 80015ae:	3301      	adds	r3, #1
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	430b      	orrs	r3, r1
 80015b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80015c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	495c      	ldr	r1, [pc, #368]	@ (800173c <HAL_I2C_Init+0x274>)
 80015cc:	428b      	cmp	r3, r1
 80015ce:	d819      	bhi.n	8001604 <HAL_I2C_Init+0x13c>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	1e59      	subs	r1, r3, #1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	fbb1 f3f3 	udiv	r3, r1, r3
 80015de:	1c59      	adds	r1, r3, #1
 80015e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80015e4:	400b      	ands	r3, r1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00a      	beq.n	8001600 <HAL_I2C_Init+0x138>
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	1e59      	subs	r1, r3, #1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80015f8:	3301      	adds	r3, #1
 80015fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015fe:	e051      	b.n	80016a4 <HAL_I2C_Init+0x1dc>
 8001600:	2304      	movs	r3, #4
 8001602:	e04f      	b.n	80016a4 <HAL_I2C_Init+0x1dc>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d111      	bne.n	8001630 <HAL_I2C_Init+0x168>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	1e58      	subs	r0, r3, #1
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6859      	ldr	r1, [r3, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	440b      	add	r3, r1
 800161a:	fbb0 f3f3 	udiv	r3, r0, r3
 800161e:	3301      	adds	r3, #1
 8001620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001624:	2b00      	cmp	r3, #0
 8001626:	bf0c      	ite	eq
 8001628:	2301      	moveq	r3, #1
 800162a:	2300      	movne	r3, #0
 800162c:	b2db      	uxtb	r3, r3
 800162e:	e012      	b.n	8001656 <HAL_I2C_Init+0x18e>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	1e58      	subs	r0, r3, #1
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6859      	ldr	r1, [r3, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	440b      	add	r3, r1
 800163e:	0099      	lsls	r1, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	fbb0 f3f3 	udiv	r3, r0, r3
 8001646:	3301      	adds	r3, #1
 8001648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800164c:	2b00      	cmp	r3, #0
 800164e:	bf0c      	ite	eq
 8001650:	2301      	moveq	r3, #1
 8001652:	2300      	movne	r3, #0
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_I2C_Init+0x196>
 800165a:	2301      	movs	r3, #1
 800165c:	e022      	b.n	80016a4 <HAL_I2C_Init+0x1dc>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10e      	bne.n	8001684 <HAL_I2C_Init+0x1bc>
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	1e58      	subs	r0, r3, #1
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6859      	ldr	r1, [r3, #4]
 800166e:	460b      	mov	r3, r1
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	440b      	add	r3, r1
 8001674:	fbb0 f3f3 	udiv	r3, r0, r3
 8001678:	3301      	adds	r3, #1
 800167a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800167e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001682:	e00f      	b.n	80016a4 <HAL_I2C_Init+0x1dc>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	1e58      	subs	r0, r3, #1
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6859      	ldr	r1, [r3, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	0099      	lsls	r1, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	fbb0 f3f3 	udiv	r3, r0, r3
 800169a:	3301      	adds	r3, #1
 800169c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	6809      	ldr	r1, [r1, #0]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69da      	ldr	r2, [r3, #28]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80016d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6911      	ldr	r1, [r2, #16]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	68d2      	ldr	r2, [r2, #12]
 80016de:	4311      	orrs	r1, r2
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6812      	ldr	r2, [r2, #0]
 80016e4:	430b      	orrs	r3, r1
 80016e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695a      	ldr	r2, [r3, #20]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0201 	orr.w	r2, r2, #1
 8001712:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2220      	movs	r2, #32
 800171e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	000186a0 	.word	0x000186a0
 8001740:	001e847f 	.word	0x001e847f
 8001744:	003d08ff 	.word	0x003d08ff
 8001748:	431bde83 	.word	0x431bde83
 800174c:	10624dd3 	.word	0x10624dd3

08001750 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af02      	add	r7, sp, #8
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	4608      	mov	r0, r1
 800175a:	4611      	mov	r1, r2
 800175c:	461a      	mov	r2, r3
 800175e:	4603      	mov	r3, r0
 8001760:	817b      	strh	r3, [r7, #10]
 8001762:	460b      	mov	r3, r1
 8001764:	813b      	strh	r3, [r7, #8]
 8001766:	4613      	mov	r3, r2
 8001768:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800176a:	f7ff fbd5 	bl	8000f18 <HAL_GetTick>
 800176e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b20      	cmp	r3, #32
 800177a:	f040 80d9 	bne.w	8001930 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	2319      	movs	r3, #25
 8001784:	2201      	movs	r2, #1
 8001786:	496d      	ldr	r1, [pc, #436]	@ (800193c <HAL_I2C_Mem_Write+0x1ec>)
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f000 f971 	bl	8001a70 <I2C_WaitOnFlagUntilTimeout>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001794:	2302      	movs	r3, #2
 8001796:	e0cc      	b.n	8001932 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d101      	bne.n	80017a6 <HAL_I2C_Mem_Write+0x56>
 80017a2:	2302      	movs	r3, #2
 80017a4:	e0c5      	b.n	8001932 <HAL_I2C_Mem_Write+0x1e2>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d007      	beq.n	80017cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0201 	orr.w	r2, r2, #1
 80017ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2221      	movs	r2, #33	@ 0x21
 80017e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2240      	movs	r2, #64	@ 0x40
 80017e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6a3a      	ldr	r2, [r7, #32]
 80017f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80017fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001802:	b29a      	uxth	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4a4d      	ldr	r2, [pc, #308]	@ (8001940 <HAL_I2C_Mem_Write+0x1f0>)
 800180c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800180e:	88f8      	ldrh	r0, [r7, #6]
 8001810:	893a      	ldrh	r2, [r7, #8]
 8001812:	8979      	ldrh	r1, [r7, #10]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	9301      	str	r3, [sp, #4]
 8001818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	4603      	mov	r3, r0
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f000 f890 	bl	8001944 <I2C_RequestMemoryWrite>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d052      	beq.n	80018d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e081      	b.n	8001932 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f000 fa36 	bl	8001ca4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00d      	beq.n	800185a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	2b04      	cmp	r3, #4
 8001844:	d107      	bne.n	8001856 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001854:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e06b      	b.n	8001932 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185e:	781a      	ldrb	r2, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001874:	3b01      	subs	r3, #1
 8001876:	b29a      	uxth	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001880:	b29b      	uxth	r3, r3
 8001882:	3b01      	subs	r3, #1
 8001884:	b29a      	uxth	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b04      	cmp	r3, #4
 8001896:	d11b      	bne.n	80018d0 <HAL_I2C_Mem_Write+0x180>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800189c:	2b00      	cmp	r3, #0
 800189e:	d017      	beq.n	80018d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a4:	781a      	ldrb	r2, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b0:	1c5a      	adds	r2, r3, #1
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ba:	3b01      	subs	r3, #1
 80018bc:	b29a      	uxth	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	3b01      	subs	r3, #1
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1aa      	bne.n	800182e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f000 fa29 	bl	8001d34 <I2C_WaitOnBTFFlagUntilTimeout>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00d      	beq.n	8001904 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d107      	bne.n	8001900 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e016      	b.n	8001932 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2220      	movs	r2, #32
 8001918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	e000      	b.n	8001932 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001930:	2302      	movs	r3, #2
  }
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	00100002 	.word	0x00100002
 8001940:	ffff0000 	.word	0xffff0000

08001944 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af02      	add	r7, sp, #8
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	4608      	mov	r0, r1
 800194e:	4611      	mov	r1, r2
 8001950:	461a      	mov	r2, r3
 8001952:	4603      	mov	r3, r0
 8001954:	817b      	strh	r3, [r7, #10]
 8001956:	460b      	mov	r3, r1
 8001958:	813b      	strh	r3, [r7, #8]
 800195a:	4613      	mov	r3, r2
 800195c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800196c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	2200      	movs	r2, #0
 8001976:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 f878 	bl	8001a70 <I2C_WaitOnFlagUntilTimeout>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00d      	beq.n	80019a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001990:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001994:	d103      	bne.n	800199e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800199c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e05f      	b.n	8001a62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019a2:	897b      	ldrh	r3, [r7, #10]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80019b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b4:	6a3a      	ldr	r2, [r7, #32]
 80019b6:	492d      	ldr	r1, [pc, #180]	@ (8001a6c <I2C_RequestMemoryWrite+0x128>)
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f000 f8d3 	bl	8001b64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e04c      	b.n	8001a62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019e0:	6a39      	ldr	r1, [r7, #32]
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f000 f95e 	bl	8001ca4 <I2C_WaitOnTXEFlagUntilTimeout>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00d      	beq.n	8001a0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d107      	bne.n	8001a06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e02b      	b.n	8001a62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d105      	bne.n	8001a1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a10:	893b      	ldrh	r3, [r7, #8]
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	611a      	str	r2, [r3, #16]
 8001a1a:	e021      	b.n	8001a60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001a1c:	893b      	ldrh	r3, [r7, #8]
 8001a1e:	0a1b      	lsrs	r3, r3, #8
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a2c:	6a39      	ldr	r1, [r7, #32]
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 f938 	bl	8001ca4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00d      	beq.n	8001a56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d107      	bne.n	8001a52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e005      	b.n	8001a62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a56:	893b      	ldrh	r3, [r7, #8]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	00010002 	.word	0x00010002

08001a70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a80:	e048      	b.n	8001b14 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a88:	d044      	beq.n	8001b14 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a8a:	f7ff fa45 	bl	8000f18 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d302      	bcc.n	8001aa0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d139      	bne.n	8001b14 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	0c1b      	lsrs	r3, r3, #16
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d10d      	bne.n	8001ac6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	43da      	mvns	r2, r3
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	bf0c      	ite	eq
 8001abc:	2301      	moveq	r3, #1
 8001abe:	2300      	movne	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	e00c      	b.n	8001ae0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	43da      	mvns	r2, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	bf0c      	ite	eq
 8001ad8:	2301      	moveq	r3, #1
 8001ada:	2300      	movne	r3, #0
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	461a      	mov	r2, r3
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d116      	bne.n	8001b14 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2220      	movs	r2, #32
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b00:	f043 0220 	orr.w	r2, r3, #32
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e023      	b.n	8001b5c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	0c1b      	lsrs	r3, r3, #16
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d10d      	bne.n	8001b3a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	43da      	mvns	r2, r3
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bf0c      	ite	eq
 8001b30:	2301      	moveq	r3, #1
 8001b32:	2300      	movne	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	461a      	mov	r2, r3
 8001b38:	e00c      	b.n	8001b54 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	43da      	mvns	r2, r3
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	4013      	ands	r3, r2
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	bf0c      	ite	eq
 8001b4c:	2301      	moveq	r3, #1
 8001b4e:	2300      	movne	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	461a      	mov	r2, r3
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d093      	beq.n	8001a82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
 8001b70:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b72:	e071      	b.n	8001c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b82:	d123      	bne.n	8001bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b92:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb8:	f043 0204 	orr.w	r2, r3, #4
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e067      	b.n	8001c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd2:	d041      	beq.n	8001c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd4:	f7ff f9a0 	bl	8000f18 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d302      	bcc.n	8001bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d136      	bne.n	8001c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	0c1b      	lsrs	r3, r3, #16
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d10c      	bne.n	8001c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	bf14      	ite	ne
 8001c06:	2301      	movne	r3, #1
 8001c08:	2300      	moveq	r3, #0
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	e00b      	b.n	8001c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	43da      	mvns	r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bf14      	ite	ne
 8001c20:	2301      	movne	r3, #1
 8001c22:	2300      	moveq	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d016      	beq.n	8001c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2220      	movs	r2, #32
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c44:	f043 0220 	orr.w	r2, r3, #32
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e021      	b.n	8001c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	0c1b      	lsrs	r3, r3, #16
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d10c      	bne.n	8001c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	43da      	mvns	r2, r3
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bf14      	ite	ne
 8001c74:	2301      	movne	r3, #1
 8001c76:	2300      	moveq	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	e00b      	b.n	8001c94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	43da      	mvns	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	4013      	ands	r3, r2
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	bf14      	ite	ne
 8001c8e:	2301      	movne	r3, #1
 8001c90:	2300      	moveq	r3, #0
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f47f af6d 	bne.w	8001b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cb0:	e034      	b.n	8001d1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 f886 	bl	8001dc4 <I2C_IsAcknowledgeFailed>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e034      	b.n	8001d2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc8:	d028      	beq.n	8001d1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cca:	f7ff f925 	bl	8000f18 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	68ba      	ldr	r2, [r7, #8]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d302      	bcc.n	8001ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d11d      	bne.n	8001d1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cea:	2b80      	cmp	r3, #128	@ 0x80
 8001cec:	d016      	beq.n	8001d1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d08:	f043 0220 	orr.w	r2, r3, #32
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e007      	b.n	8001d2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d26:	2b80      	cmp	r3, #128	@ 0x80
 8001d28:	d1c3      	bne.n	8001cb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d40:	e034      	b.n	8001dac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 f83e 	bl	8001dc4 <I2C_IsAcknowledgeFailed>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e034      	b.n	8001dbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d028      	beq.n	8001dac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d5a:	f7ff f8dd 	bl	8000f18 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	68ba      	ldr	r2, [r7, #8]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d302      	bcc.n	8001d70 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d11d      	bne.n	8001dac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d016      	beq.n	8001dac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2220      	movs	r2, #32
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d98:	f043 0220 	orr.w	r2, r3, #32
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e007      	b.n	8001dbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d1c3      	bne.n	8001d42 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dda:	d11b      	bne.n	8001e14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001de4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2220      	movs	r2, #32
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e00:	f043 0204 	orr.w	r2, r3, #4
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e272      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 8087 	beq.w	8001f4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e40:	4b92      	ldr	r3, [pc, #584]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d00c      	beq.n	8001e66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e4c:	4b8f      	ldr	r3, [pc, #572]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d112      	bne.n	8001e7e <HAL_RCC_OscConfig+0x5e>
 8001e58:	4b8c      	ldr	r3, [pc, #560]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e64:	d10b      	bne.n	8001e7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e66:	4b89      	ldr	r3, [pc, #548]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d06c      	beq.n	8001f4c <HAL_RCC_OscConfig+0x12c>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d168      	bne.n	8001f4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e24c      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e86:	d106      	bne.n	8001e96 <HAL_RCC_OscConfig+0x76>
 8001e88:	4b80      	ldr	r3, [pc, #512]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a7f      	ldr	r2, [pc, #508]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	e02e      	b.n	8001ef4 <HAL_RCC_OscConfig+0xd4>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x98>
 8001e9e:	4b7b      	ldr	r3, [pc, #492]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a7a      	ldr	r2, [pc, #488]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	4b78      	ldr	r3, [pc, #480]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a77      	ldr	r2, [pc, #476]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e01d      	b.n	8001ef4 <HAL_RCC_OscConfig+0xd4>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0xbc>
 8001ec2:	4b72      	ldr	r3, [pc, #456]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a71      	ldr	r2, [pc, #452]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4b6f      	ldr	r3, [pc, #444]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a6e      	ldr	r2, [pc, #440]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e00b      	b.n	8001ef4 <HAL_RCC_OscConfig+0xd4>
 8001edc:	4b6b      	ldr	r3, [pc, #428]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a6a      	ldr	r2, [pc, #424]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	4b68      	ldr	r3, [pc, #416]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a67      	ldr	r2, [pc, #412]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001eee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ef2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d013      	beq.n	8001f24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff f80c 	bl	8000f18 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f04:	f7ff f808 	bl	8000f18 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	@ 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e200      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f16:	4b5d      	ldr	r3, [pc, #372]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0xe4>
 8001f22:	e014      	b.n	8001f4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7fe fff8 	bl	8000f18 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f2c:	f7fe fff4 	bl	8000f18 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	@ 0x64
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e1ec      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3e:	4b53      	ldr	r3, [pc, #332]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x10c>
 8001f4a:	e000      	b.n	8001f4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d063      	beq.n	8002022 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f5a:	4b4c      	ldr	r3, [pc, #304]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00b      	beq.n	8001f7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f66:	4b49      	ldr	r3, [pc, #292]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d11c      	bne.n	8001fac <HAL_RCC_OscConfig+0x18c>
 8001f72:	4b46      	ldr	r3, [pc, #280]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d116      	bne.n	8001fac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7e:	4b43      	ldr	r3, [pc, #268]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d005      	beq.n	8001f96 <HAL_RCC_OscConfig+0x176>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d001      	beq.n	8001f96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e1c0      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f96:	4b3d      	ldr	r3, [pc, #244]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4939      	ldr	r1, [pc, #228]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001faa:	e03a      	b.n	8002022 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d020      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb4:	4b36      	ldr	r3, [pc, #216]	@ (8002090 <HAL_RCC_OscConfig+0x270>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7fe ffad 	bl	8000f18 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc2:	f7fe ffa9 	bl	8000f18 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e1a1      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd4:	4b2d      	ldr	r3, [pc, #180]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe0:	4b2a      	ldr	r3, [pc, #168]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4927      	ldr	r1, [pc, #156]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	600b      	str	r3, [r1, #0]
 8001ff4:	e015      	b.n	8002022 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff6:	4b26      	ldr	r3, [pc, #152]	@ (8002090 <HAL_RCC_OscConfig+0x270>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7fe ff8c 	bl	8000f18 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002004:	f7fe ff88 	bl	8000f18 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e180      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002016:	4b1d      	ldr	r3, [pc, #116]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d03a      	beq.n	80020a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d019      	beq.n	800206a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002036:	4b17      	ldr	r3, [pc, #92]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8002038:	2201      	movs	r2, #1
 800203a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203c:	f7fe ff6c 	bl	8000f18 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002044:	f7fe ff68 	bl	8000f18 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e160      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002056:	4b0d      	ldr	r3, [pc, #52]	@ (800208c <HAL_RCC_OscConfig+0x26c>)
 8002058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002062:	2001      	movs	r0, #1
 8002064:	f000 faba 	bl	80025dc <RCC_Delay>
 8002068:	e01c      	b.n	80020a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800206a:	4b0a      	ldr	r3, [pc, #40]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002070:	f7fe ff52 	bl	8000f18 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002076:	e00f      	b.n	8002098 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002078:	f7fe ff4e 	bl	8000f18 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d908      	bls.n	8002098 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e146      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000
 8002090:	42420000 	.word	0x42420000
 8002094:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002098:	4b92      	ldr	r3, [pc, #584]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800209a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1e9      	bne.n	8002078 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 80a6 	beq.w	80021fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b6:	4b8b      	ldr	r3, [pc, #556]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10d      	bne.n	80020de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c2:	4b88      	ldr	r3, [pc, #544]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	4a87      	ldr	r2, [pc, #540]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80020c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020cc:	61d3      	str	r3, [r2, #28]
 80020ce:	4b85      	ldr	r3, [pc, #532]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020da:	2301      	movs	r3, #1
 80020dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020de:	4b82      	ldr	r3, [pc, #520]	@ (80022e8 <HAL_RCC_OscConfig+0x4c8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d118      	bne.n	800211c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ea:	4b7f      	ldr	r3, [pc, #508]	@ (80022e8 <HAL_RCC_OscConfig+0x4c8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a7e      	ldr	r2, [pc, #504]	@ (80022e8 <HAL_RCC_OscConfig+0x4c8>)
 80020f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f6:	f7fe ff0f 	bl	8000f18 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020fe:	f7fe ff0b 	bl	8000f18 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b64      	cmp	r3, #100	@ 0x64
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e103      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002110:	4b75      	ldr	r3, [pc, #468]	@ (80022e8 <HAL_RCC_OscConfig+0x4c8>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d106      	bne.n	8002132 <HAL_RCC_OscConfig+0x312>
 8002124:	4b6f      	ldr	r3, [pc, #444]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	4a6e      	ldr	r2, [pc, #440]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6213      	str	r3, [r2, #32]
 8002130:	e02d      	b.n	800218e <HAL_RCC_OscConfig+0x36e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10c      	bne.n	8002154 <HAL_RCC_OscConfig+0x334>
 800213a:	4b6a      	ldr	r3, [pc, #424]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	4a69      	ldr	r2, [pc, #420]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	6213      	str	r3, [r2, #32]
 8002146:	4b67      	ldr	r3, [pc, #412]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	4a66      	ldr	r2, [pc, #408]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800214c:	f023 0304 	bic.w	r3, r3, #4
 8002150:	6213      	str	r3, [r2, #32]
 8002152:	e01c      	b.n	800218e <HAL_RCC_OscConfig+0x36e>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b05      	cmp	r3, #5
 800215a:	d10c      	bne.n	8002176 <HAL_RCC_OscConfig+0x356>
 800215c:	4b61      	ldr	r3, [pc, #388]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4a60      	ldr	r2, [pc, #384]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002162:	f043 0304 	orr.w	r3, r3, #4
 8002166:	6213      	str	r3, [r2, #32]
 8002168:	4b5e      	ldr	r3, [pc, #376]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4a5d      	ldr	r2, [pc, #372]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6213      	str	r3, [r2, #32]
 8002174:	e00b      	b.n	800218e <HAL_RCC_OscConfig+0x36e>
 8002176:	4b5b      	ldr	r3, [pc, #364]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4a5a      	ldr	r2, [pc, #360]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	f023 0301 	bic.w	r3, r3, #1
 8002180:	6213      	str	r3, [r2, #32]
 8002182:	4b58      	ldr	r3, [pc, #352]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	4a57      	ldr	r2, [pc, #348]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002188:	f023 0304 	bic.w	r3, r3, #4
 800218c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d015      	beq.n	80021c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002196:	f7fe febf 	bl	8000f18 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219c:	e00a      	b.n	80021b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219e:	f7fe febb 	bl	8000f18 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e0b1      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b4:	4b4b      	ldr	r3, [pc, #300]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0ee      	beq.n	800219e <HAL_RCC_OscConfig+0x37e>
 80021c0:	e014      	b.n	80021ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c2:	f7fe fea9 	bl	8000f18 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7fe fea5 	bl	8000f18 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e09b      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e0:	4b40      	ldr	r3, [pc, #256]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1ee      	bne.n	80021ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d105      	bne.n	80021fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f2:	4b3c      	ldr	r3, [pc, #240]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	4a3b      	ldr	r2, [pc, #236]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 8087 	beq.w	8002316 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002208:	4b36      	ldr	r3, [pc, #216]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	2b08      	cmp	r3, #8
 8002212:	d061      	beq.n	80022d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d146      	bne.n	80022aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221c:	4b33      	ldr	r3, [pc, #204]	@ (80022ec <HAL_RCC_OscConfig+0x4cc>)
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002222:	f7fe fe79 	bl	8000f18 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222a:	f7fe fe75 	bl	8000f18 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e06d      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223c:	4b29      	ldr	r3, [pc, #164]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f0      	bne.n	800222a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002250:	d108      	bne.n	8002264 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002252:	4b24      	ldr	r3, [pc, #144]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	4921      	ldr	r1, [pc, #132]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002264:	4b1f      	ldr	r3, [pc, #124]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a19      	ldr	r1, [r3, #32]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002274:	430b      	orrs	r3, r1
 8002276:	491b      	ldr	r1, [pc, #108]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800227c:	4b1b      	ldr	r3, [pc, #108]	@ (80022ec <HAL_RCC_OscConfig+0x4cc>)
 800227e:	2201      	movs	r2, #1
 8002280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7fe fe49 	bl	8000f18 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228a:	f7fe fe45 	bl	8000f18 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e03d      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800229c:	4b11      	ldr	r3, [pc, #68]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x46a>
 80022a8:	e035      	b.n	8002316 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022aa:	4b10      	ldr	r3, [pc, #64]	@ (80022ec <HAL_RCC_OscConfig+0x4cc>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7fe fe32 	bl	8000f18 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b8:	f7fe fe2e 	bl	8000f18 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e026      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ca:	4b06      	ldr	r3, [pc, #24]	@ (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x498>
 80022d6:	e01e      	b.n	8002316 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d107      	bne.n	80022f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e019      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40007000 	.word	0x40007000
 80022ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002320 <HAL_RCC_OscConfig+0x500>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	429a      	cmp	r2, r3
 8002302:	d106      	bne.n	8002312 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	429a      	cmp	r2, r3
 8002310:	d001      	beq.n	8002316 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000

08002324 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0d0      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002338:	4b6a      	ldr	r3, [pc, #424]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d910      	bls.n	8002368 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002346:	4b67      	ldr	r3, [pc, #412]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 0207 	bic.w	r2, r3, #7
 800234e:	4965      	ldr	r1, [pc, #404]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002356:	4b63      	ldr	r3, [pc, #396]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d001      	beq.n	8002368 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0b8      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d020      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002380:	4b59      	ldr	r3, [pc, #356]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	4a58      	ldr	r2, [pc, #352]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800238a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002398:	4b53      	ldr	r3, [pc, #332]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	4a52      	ldr	r2, [pc, #328]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80023a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a4:	4b50      	ldr	r3, [pc, #320]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	494d      	ldr	r1, [pc, #308]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d040      	beq.n	8002444 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	4b47      	ldr	r3, [pc, #284]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d115      	bne.n	8002402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e07f      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d107      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e2:	4b41      	ldr	r3, [pc, #260]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d109      	bne.n	8002402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e073      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f2:	4b3d      	ldr	r3, [pc, #244]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e06b      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002402:	4b39      	ldr	r3, [pc, #228]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f023 0203 	bic.w	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4936      	ldr	r1, [pc, #216]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	4313      	orrs	r3, r2
 8002412:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002414:	f7fe fd80 	bl	8000f18 <HAL_GetTick>
 8002418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241a:	e00a      	b.n	8002432 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800241c:	f7fe fd7c 	bl	8000f18 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800242a:	4293      	cmp	r3, r2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e053      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002432:	4b2d      	ldr	r3, [pc, #180]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 020c 	and.w	r2, r3, #12
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	429a      	cmp	r2, r3
 8002442:	d1eb      	bne.n	800241c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002444:	4b27      	ldr	r3, [pc, #156]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d210      	bcs.n	8002474 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002452:	4b24      	ldr	r3, [pc, #144]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 0207 	bic.w	r2, r3, #7
 800245a:	4922      	ldr	r1, [pc, #136]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002462:	4b20      	ldr	r3, [pc, #128]	@ (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e032      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002480:	4b19      	ldr	r3, [pc, #100]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4916      	ldr	r1, [pc, #88]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	4313      	orrs	r3, r2
 8002490:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800249e:	4b12      	ldr	r3, [pc, #72]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	490e      	ldr	r1, [pc, #56]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024b2:	f000 f821 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 80024b6:	4602      	mov	r2, r0
 80024b8:	4b0b      	ldr	r3, [pc, #44]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	091b      	lsrs	r3, r3, #4
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	490a      	ldr	r1, [pc, #40]	@ (80024ec <HAL_RCC_ClockConfig+0x1c8>)
 80024c4:	5ccb      	ldrb	r3, [r1, r3]
 80024c6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ca:	4a09      	ldr	r2, [pc, #36]	@ (80024f0 <HAL_RCC_ClockConfig+0x1cc>)
 80024cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024ce:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <HAL_RCC_ClockConfig+0x1d0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe fcde 	bl	8000e94 <HAL_InitTick>

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40022000 	.word	0x40022000
 80024e8:	40021000 	.word	0x40021000
 80024ec:	08004798 	.word	0x08004798
 80024f0:	20000000 	.word	0x20000000
 80024f4:	20000004 	.word	0x20000004

080024f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b087      	sub	sp, #28
 80024fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	2300      	movs	r3, #0
 800250c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002512:	4b1e      	ldr	r3, [pc, #120]	@ (800258c <HAL_RCC_GetSysClockFreq+0x94>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b04      	cmp	r3, #4
 8002520:	d002      	beq.n	8002528 <HAL_RCC_GetSysClockFreq+0x30>
 8002522:	2b08      	cmp	r3, #8
 8002524:	d003      	beq.n	800252e <HAL_RCC_GetSysClockFreq+0x36>
 8002526:	e027      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002528:	4b19      	ldr	r3, [pc, #100]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x98>)
 800252a:	613b      	str	r3, [r7, #16]
      break;
 800252c:	e027      	b.n	800257e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	0c9b      	lsrs	r3, r3, #18
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	4a17      	ldr	r2, [pc, #92]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002538:	5cd3      	ldrb	r3, [r2, r3]
 800253a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d010      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002546:	4b11      	ldr	r3, [pc, #68]	@ (800258c <HAL_RCC_GetSysClockFreq+0x94>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	0c5b      	lsrs	r3, r3, #17
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	4a11      	ldr	r2, [pc, #68]	@ (8002598 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002552:	5cd3      	ldrb	r3, [r2, r3]
 8002554:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a0d      	ldr	r2, [pc, #52]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x98>)
 800255a:	fb03 f202 	mul.w	r2, r3, r2
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	fbb2 f3f3 	udiv	r3, r2, r3
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	e004      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a0c      	ldr	r2, [pc, #48]	@ (800259c <HAL_RCC_GetSysClockFreq+0xa4>)
 800256c:	fb02 f303 	mul.w	r3, r2, r3
 8002570:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	613b      	str	r3, [r7, #16]
      break;
 8002576:	e002      	b.n	800257e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002578:	4b05      	ldr	r3, [pc, #20]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x98>)
 800257a:	613b      	str	r3, [r7, #16]
      break;
 800257c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800257e:	693b      	ldr	r3, [r7, #16]
}
 8002580:	4618      	mov	r0, r3
 8002582:	371c      	adds	r7, #28
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000
 8002590:	007a1200 	.word	0x007a1200
 8002594:	080047b0 	.word	0x080047b0
 8002598:	080047c0 	.word	0x080047c0
 800259c:	003d0900 	.word	0x003d0900

080025a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a4:	4b02      	ldr	r3, [pc, #8]	@ (80025b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	20000000 	.word	0x20000000

080025b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025b8:	f7ff fff2 	bl	80025a0 <HAL_RCC_GetHCLKFreq>
 80025bc:	4602      	mov	r2, r0
 80025be:	4b05      	ldr	r3, [pc, #20]	@ (80025d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	0a1b      	lsrs	r3, r3, #8
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	4903      	ldr	r1, [pc, #12]	@ (80025d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ca:	5ccb      	ldrb	r3, [r1, r3]
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40021000 	.word	0x40021000
 80025d8:	080047a8 	.word	0x080047a8

080025dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002610 <RCC_Delay+0x34>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002614 <RCC_Delay+0x38>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	0a5b      	lsrs	r3, r3, #9
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	fb02 f303 	mul.w	r3, r2, r3
 80025f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025f8:	bf00      	nop
  }
  while (Delay --);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1e5a      	subs	r2, r3, #1
 80025fe:	60fa      	str	r2, [r7, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1f9      	bne.n	80025f8 <RCC_Delay+0x1c>
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	20000000 	.word	0x20000000
 8002614:	10624dd3 	.word	0x10624dd3

08002618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e041      	b.n	80026ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d106      	bne.n	8002644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fe faf0 	bl	8000c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3304      	adds	r3, #4
 8002654:	4619      	mov	r1, r3
 8002656:	4610      	mov	r0, r2
 8002658:	f000 fd96 	bl	8003188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e041      	b.n	800274c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d106      	bne.n	80026e2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f839 	bl	8002754 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2202      	movs	r2, #2
 80026e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3304      	adds	r3, #4
 80026f2:	4619      	mov	r1, r3
 80026f4:	4610      	mov	r0, r2
 80026f6:	f000 fd47 	bl	8003188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr
	...

08002768 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d104      	bne.n	8002786 <HAL_TIM_IC_Start_IT+0x1e>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002782:	b2db      	uxtb	r3, r3
 8002784:	e013      	b.n	80027ae <HAL_TIM_IC_Start_IT+0x46>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2b04      	cmp	r3, #4
 800278a:	d104      	bne.n	8002796 <HAL_TIM_IC_Start_IT+0x2e>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002792:	b2db      	uxtb	r3, r3
 8002794:	e00b      	b.n	80027ae <HAL_TIM_IC_Start_IT+0x46>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2b08      	cmp	r3, #8
 800279a:	d104      	bne.n	80027a6 <HAL_TIM_IC_Start_IT+0x3e>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	e003      	b.n	80027ae <HAL_TIM_IC_Start_IT+0x46>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d104      	bne.n	80027c0 <HAL_TIM_IC_Start_IT+0x58>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	e013      	b.n	80027e8 <HAL_TIM_IC_Start_IT+0x80>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d104      	bne.n	80027d0 <HAL_TIM_IC_Start_IT+0x68>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	e00b      	b.n	80027e8 <HAL_TIM_IC_Start_IT+0x80>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d104      	bne.n	80027e0 <HAL_TIM_IC_Start_IT+0x78>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	e003      	b.n	80027e8 <HAL_TIM_IC_Start_IT+0x80>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80027ea:	7bbb      	ldrb	r3, [r7, #14]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d102      	bne.n	80027f6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80027f0:	7b7b      	ldrb	r3, [r7, #13]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d001      	beq.n	80027fa <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e0b8      	b.n	800296c <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d104      	bne.n	800280a <HAL_TIM_IC_Start_IT+0xa2>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002808:	e013      	b.n	8002832 <HAL_TIM_IC_Start_IT+0xca>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2b04      	cmp	r3, #4
 800280e:	d104      	bne.n	800281a <HAL_TIM_IC_Start_IT+0xb2>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002818:	e00b      	b.n	8002832 <HAL_TIM_IC_Start_IT+0xca>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b08      	cmp	r3, #8
 800281e:	d104      	bne.n	800282a <HAL_TIM_IC_Start_IT+0xc2>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002828:	e003      	b.n	8002832 <HAL_TIM_IC_Start_IT+0xca>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2202      	movs	r2, #2
 800282e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d104      	bne.n	8002842 <HAL_TIM_IC_Start_IT+0xda>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002840:	e013      	b.n	800286a <HAL_TIM_IC_Start_IT+0x102>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b04      	cmp	r3, #4
 8002846:	d104      	bne.n	8002852 <HAL_TIM_IC_Start_IT+0xea>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002850:	e00b      	b.n	800286a <HAL_TIM_IC_Start_IT+0x102>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b08      	cmp	r3, #8
 8002856:	d104      	bne.n	8002862 <HAL_TIM_IC_Start_IT+0xfa>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002860:	e003      	b.n	800286a <HAL_TIM_IC_Start_IT+0x102>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2202      	movs	r2, #2
 8002866:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b0c      	cmp	r3, #12
 800286e:	d841      	bhi.n	80028f4 <HAL_TIM_IC_Start_IT+0x18c>
 8002870:	a201      	add	r2, pc, #4	@ (adr r2, 8002878 <HAL_TIM_IC_Start_IT+0x110>)
 8002872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002876:	bf00      	nop
 8002878:	080028ad 	.word	0x080028ad
 800287c:	080028f5 	.word	0x080028f5
 8002880:	080028f5 	.word	0x080028f5
 8002884:	080028f5 	.word	0x080028f5
 8002888:	080028bf 	.word	0x080028bf
 800288c:	080028f5 	.word	0x080028f5
 8002890:	080028f5 	.word	0x080028f5
 8002894:	080028f5 	.word	0x080028f5
 8002898:	080028d1 	.word	0x080028d1
 800289c:	080028f5 	.word	0x080028f5
 80028a0:	080028f5 	.word	0x080028f5
 80028a4:	080028f5 	.word	0x080028f5
 80028a8:	080028e3 	.word	0x080028e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0202 	orr.w	r2, r2, #2
 80028ba:	60da      	str	r2, [r3, #12]
      break;
 80028bc:	e01d      	b.n	80028fa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0204 	orr.w	r2, r2, #4
 80028cc:	60da      	str	r2, [r3, #12]
      break;
 80028ce:	e014      	b.n	80028fa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0208 	orr.w	r2, r2, #8
 80028de:	60da      	str	r2, [r3, #12]
      break;
 80028e0:	e00b      	b.n	80028fa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f042 0210 	orr.w	r2, r2, #16
 80028f0:	60da      	str	r2, [r3, #12]
      break;
 80028f2:	e002      	b.n	80028fa <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	73fb      	strb	r3, [r7, #15]
      break;
 80028f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d134      	bne.n	800296a <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2201      	movs	r2, #1
 8002906:	6839      	ldr	r1, [r7, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f000 fee0 	bl	80036ce <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a18      	ldr	r2, [pc, #96]	@ (8002974 <HAL_TIM_IC_Start_IT+0x20c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d00e      	beq.n	8002936 <HAL_TIM_IC_Start_IT+0x1ce>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002920:	d009      	beq.n	8002936 <HAL_TIM_IC_Start_IT+0x1ce>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a14      	ldr	r2, [pc, #80]	@ (8002978 <HAL_TIM_IC_Start_IT+0x210>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d004      	beq.n	8002936 <HAL_TIM_IC_Start_IT+0x1ce>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a12      	ldr	r2, [pc, #72]	@ (800297c <HAL_TIM_IC_Start_IT+0x214>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d111      	bne.n	800295a <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b06      	cmp	r3, #6
 8002946:	d010      	beq.n	800296a <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002958:	e007      	b.n	800296a <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0201 	orr.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800296a:	7bfb      	ldrb	r3, [r7, #15]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40012c00 	.word	0x40012c00
 8002978:	40000400 	.word	0x40000400
 800297c:	40000800 	.word	0x40000800

08002980 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b0c      	cmp	r3, #12
 8002992:	d841      	bhi.n	8002a18 <HAL_TIM_IC_Stop_IT+0x98>
 8002994:	a201      	add	r2, pc, #4	@ (adr r2, 800299c <HAL_TIM_IC_Stop_IT+0x1c>)
 8002996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299a:	bf00      	nop
 800299c:	080029d1 	.word	0x080029d1
 80029a0:	08002a19 	.word	0x08002a19
 80029a4:	08002a19 	.word	0x08002a19
 80029a8:	08002a19 	.word	0x08002a19
 80029ac:	080029e3 	.word	0x080029e3
 80029b0:	08002a19 	.word	0x08002a19
 80029b4:	08002a19 	.word	0x08002a19
 80029b8:	08002a19 	.word	0x08002a19
 80029bc:	080029f5 	.word	0x080029f5
 80029c0:	08002a19 	.word	0x08002a19
 80029c4:	08002a19 	.word	0x08002a19
 80029c8:	08002a19 	.word	0x08002a19
 80029cc:	08002a07 	.word	0x08002a07
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0202 	bic.w	r2, r2, #2
 80029de:	60da      	str	r2, [r3, #12]
      break;
 80029e0:	e01d      	b.n	8002a1e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0204 	bic.w	r2, r2, #4
 80029f0:	60da      	str	r2, [r3, #12]
      break;
 80029f2:	e014      	b.n	8002a1e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0208 	bic.w	r2, r2, #8
 8002a02:	60da      	str	r2, [r3, #12]
      break;
 8002a04:	e00b      	b.n	8002a1e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0210 	bic.w	r2, r2, #16
 8002a14:	60da      	str	r2, [r3, #12]
      break;
 8002a16:	e002      	b.n	8002a1e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d156      	bne.n	8002ad2 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	6839      	ldr	r1, [r7, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f000 fe4e 	bl	80036ce <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6a1a      	ldr	r2, [r3, #32]
 8002a38:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10f      	bne.n	8002a62 <HAL_TIM_IC_Stop_IT+0xe2>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6a1a      	ldr	r2, [r3, #32]
 8002a48:	f240 4344 	movw	r3, #1092	@ 0x444
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d107      	bne.n	8002a62 <HAL_TIM_IC_Stop_IT+0xe2>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0201 	bic.w	r2, r2, #1
 8002a60:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d104      	bne.n	8002a72 <HAL_TIM_IC_Stop_IT+0xf2>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a70:	e013      	b.n	8002a9a <HAL_TIM_IC_Stop_IT+0x11a>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d104      	bne.n	8002a82 <HAL_TIM_IC_Stop_IT+0x102>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a80:	e00b      	b.n	8002a9a <HAL_TIM_IC_Stop_IT+0x11a>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d104      	bne.n	8002a92 <HAL_TIM_IC_Stop_IT+0x112>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a90:	e003      	b.n	8002a9a <HAL_TIM_IC_Stop_IT+0x11a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d104      	bne.n	8002aaa <HAL_TIM_IC_Stop_IT+0x12a>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002aa8:	e013      	b.n	8002ad2 <HAL_TIM_IC_Stop_IT+0x152>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d104      	bne.n	8002aba <HAL_TIM_IC_Stop_IT+0x13a>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ab8:	e00b      	b.n	8002ad2 <HAL_TIM_IC_Stop_IT+0x152>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d104      	bne.n	8002aca <HAL_TIM_IC_Stop_IT+0x14a>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ac8:	e003      	b.n	8002ad2 <HAL_TIM_IC_Stop_IT+0x152>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e041      	b.n	8002b74 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d106      	bne.n	8002b0a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f839 	bl	8002b7c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	f000 fb33 	bl	8003188 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0208 	bic.w	r2, r2, #8
 8002b30:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6819      	ldr	r1, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d020      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d01b      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f06f 0202 	mvn.w	r2, #2
 8002bc2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7fe f8c3 	bl	8000d64 <HAL_TIM_IC_CaptureCallback>
 8002bde:	e005      	b.n	8002bec <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 fab6 	bl	8003152 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fabc 	bl	8003164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d020      	beq.n	8002c3e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d01b      	beq.n	8002c3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f06f 0204 	mvn.w	r2, #4
 8002c0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2202      	movs	r2, #2
 8002c14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7fe f89d 	bl	8000d64 <HAL_TIM_IC_CaptureCallback>
 8002c2a:	e005      	b.n	8002c38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 fa90 	bl	8003152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 fa96 	bl	8003164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d020      	beq.n	8002c8a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d01b      	beq.n	8002c8a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f06f 0208 	mvn.w	r2, #8
 8002c5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2204      	movs	r2, #4
 8002c60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7fe f877 	bl	8000d64 <HAL_TIM_IC_CaptureCallback>
 8002c76:	e005      	b.n	8002c84 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 fa6a 	bl	8003152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fa70 	bl	8003164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d020      	beq.n	8002cd6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d01b      	beq.n	8002cd6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f06f 0210 	mvn.w	r2, #16
 8002ca6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2208      	movs	r2, #8
 8002cac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7fe f851 	bl	8000d64 <HAL_TIM_IC_CaptureCallback>
 8002cc2:	e005      	b.n	8002cd0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 fa44 	bl	8003152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fa4a 	bl	8003164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00c      	beq.n	8002cfa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d007      	beq.n	8002cfa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f06f 0201 	mvn.w	r2, #1
 8002cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fa23 	bl	8003140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00c      	beq.n	8002d1e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d007      	beq.n	8002d1e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 fd64 	bl	80037e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00c      	beq.n	8002d42 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 fa1a 	bl	8003176 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00c      	beq.n	8002d66 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d007      	beq.n	8002d66 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f06f 0220 	mvn.w	r2, #32
 8002d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 fd37 	bl	80037d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d66:	bf00      	nop
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b086      	sub	sp, #24
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_TIM_IC_ConfigChannel+0x1e>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e088      	b.n	8002e9e <HAL_TIM_IC_ConfigChannel+0x130>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d11b      	bne.n	8002dd2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002daa:	f000 faed 	bl	8003388 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	699a      	ldr	r2, [r3, #24]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 020c 	bic.w	r2, r2, #12
 8002dbc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6999      	ldr	r1, [r3, #24]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	619a      	str	r2, [r3, #24]
 8002dd0:	e060      	b.n	8002e94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d11c      	bne.n	8002e12 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002de8:	f000 fb56 	bl	8003498 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699a      	ldr	r2, [r3, #24]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002dfa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6999      	ldr	r1, [r3, #24]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	021a      	lsls	r2, r3, #8
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	619a      	str	r2, [r3, #24]
 8002e10:	e040      	b.n	8002e94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d11b      	bne.n	8002e50 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002e28:	f000 fba1 	bl	800356e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 020c 	bic.w	r2, r2, #12
 8002e3a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	69d9      	ldr	r1, [r3, #28]
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	61da      	str	r2, [r3, #28]
 8002e4e:	e021      	b.n	8002e94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b0c      	cmp	r3, #12
 8002e54:	d11c      	bne.n	8002e90 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002e66:	f000 fbbd 	bl	80035e4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69da      	ldr	r2, [r3, #28]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002e78:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	69d9      	ldr	r1, [r3, #28]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	021a      	lsls	r2, r3, #8
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	61da      	str	r2, [r3, #28]
 8002e8e:	e001      	b.n	8002e94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_TIM_ConfigClockSource+0x1c>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e0b4      	b.n	800302c <HAL_TIM_ConfigClockSource+0x186>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2202      	movs	r2, #2
 8002ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002ee0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ee8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002efa:	d03e      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0xd4>
 8002efc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f00:	f200 8087 	bhi.w	8003012 <HAL_TIM_ConfigClockSource+0x16c>
 8002f04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f08:	f000 8086 	beq.w	8003018 <HAL_TIM_ConfigClockSource+0x172>
 8002f0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f10:	d87f      	bhi.n	8003012 <HAL_TIM_ConfigClockSource+0x16c>
 8002f12:	2b70      	cmp	r3, #112	@ 0x70
 8002f14:	d01a      	beq.n	8002f4c <HAL_TIM_ConfigClockSource+0xa6>
 8002f16:	2b70      	cmp	r3, #112	@ 0x70
 8002f18:	d87b      	bhi.n	8003012 <HAL_TIM_ConfigClockSource+0x16c>
 8002f1a:	2b60      	cmp	r3, #96	@ 0x60
 8002f1c:	d050      	beq.n	8002fc0 <HAL_TIM_ConfigClockSource+0x11a>
 8002f1e:	2b60      	cmp	r3, #96	@ 0x60
 8002f20:	d877      	bhi.n	8003012 <HAL_TIM_ConfigClockSource+0x16c>
 8002f22:	2b50      	cmp	r3, #80	@ 0x50
 8002f24:	d03c      	beq.n	8002fa0 <HAL_TIM_ConfigClockSource+0xfa>
 8002f26:	2b50      	cmp	r3, #80	@ 0x50
 8002f28:	d873      	bhi.n	8003012 <HAL_TIM_ConfigClockSource+0x16c>
 8002f2a:	2b40      	cmp	r3, #64	@ 0x40
 8002f2c:	d058      	beq.n	8002fe0 <HAL_TIM_ConfigClockSource+0x13a>
 8002f2e:	2b40      	cmp	r3, #64	@ 0x40
 8002f30:	d86f      	bhi.n	8003012 <HAL_TIM_ConfigClockSource+0x16c>
 8002f32:	2b30      	cmp	r3, #48	@ 0x30
 8002f34:	d064      	beq.n	8003000 <HAL_TIM_ConfigClockSource+0x15a>
 8002f36:	2b30      	cmp	r3, #48	@ 0x30
 8002f38:	d86b      	bhi.n	8003012 <HAL_TIM_ConfigClockSource+0x16c>
 8002f3a:	2b20      	cmp	r3, #32
 8002f3c:	d060      	beq.n	8003000 <HAL_TIM_ConfigClockSource+0x15a>
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	d867      	bhi.n	8003012 <HAL_TIM_ConfigClockSource+0x16c>
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d05c      	beq.n	8003000 <HAL_TIM_ConfigClockSource+0x15a>
 8002f46:	2b10      	cmp	r3, #16
 8002f48:	d05a      	beq.n	8003000 <HAL_TIM_ConfigClockSource+0x15a>
 8002f4a:	e062      	b.n	8003012 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f5c:	f000 fb98 	bl	8003690 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002f6e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	609a      	str	r2, [r3, #8]
      break;
 8002f78:	e04f      	b.n	800301a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f8a:	f000 fb81 	bl	8003690 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f9c:	609a      	str	r2, [r3, #8]
      break;
 8002f9e:	e03c      	b.n	800301a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fac:	461a      	mov	r2, r3
 8002fae:	f000 fa45 	bl	800343c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2150      	movs	r1, #80	@ 0x50
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 fb4f 	bl	800365c <TIM_ITRx_SetConfig>
      break;
 8002fbe:	e02c      	b.n	800301a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fcc:	461a      	mov	r2, r3
 8002fce:	f000 fa9f 	bl	8003510 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2160      	movs	r1, #96	@ 0x60
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 fb3f 	bl	800365c <TIM_ITRx_SetConfig>
      break;
 8002fde:	e01c      	b.n	800301a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fec:	461a      	mov	r2, r3
 8002fee:	f000 fa25 	bl	800343c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2140      	movs	r1, #64	@ 0x40
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fb2f 	bl	800365c <TIM_ITRx_SetConfig>
      break;
 8002ffe:	e00c      	b.n	800301a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4619      	mov	r1, r3
 800300a:	4610      	mov	r0, r2
 800300c:	f000 fb26 	bl	800365c <TIM_ITRx_SetConfig>
      break;
 8003010:	e003      	b.n	800301a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	73fb      	strb	r3, [r7, #15]
      break;
 8003016:	e000      	b.n	800301a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003018:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800302a:	7bfb      	ldrb	r3, [r7, #15]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_TIM_SlaveConfigSynchro+0x18>
 8003048:	2302      	movs	r3, #2
 800304a:	e031      	b.n	80030b0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800305c:	6839      	ldr	r1, [r7, #0]
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f900 	bl	8003264 <TIM_SlaveTimer_SetConfig>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d009      	beq.n	800307e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e018      	b.n	80030b0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800308c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800309c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b0c      	cmp	r3, #12
 80030ca:	d831      	bhi.n	8003130 <HAL_TIM_ReadCapturedValue+0x78>
 80030cc:	a201      	add	r2, pc, #4	@ (adr r2, 80030d4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80030ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d2:	bf00      	nop
 80030d4:	08003109 	.word	0x08003109
 80030d8:	08003131 	.word	0x08003131
 80030dc:	08003131 	.word	0x08003131
 80030e0:	08003131 	.word	0x08003131
 80030e4:	08003113 	.word	0x08003113
 80030e8:	08003131 	.word	0x08003131
 80030ec:	08003131 	.word	0x08003131
 80030f0:	08003131 	.word	0x08003131
 80030f4:	0800311d 	.word	0x0800311d
 80030f8:	08003131 	.word	0x08003131
 80030fc:	08003131 	.word	0x08003131
 8003100:	08003131 	.word	0x08003131
 8003104:	08003127 	.word	0x08003127
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800310e:	60fb      	str	r3, [r7, #12]

      break;
 8003110:	e00f      	b.n	8003132 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003118:	60fb      	str	r3, [r7, #12]

      break;
 800311a:	e00a      	b.n	8003132 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003122:	60fb      	str	r3, [r7, #12]

      break;
 8003124:	e005      	b.n	8003132 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312c:	60fb      	str	r3, [r7, #12]

      break;
 800312e:	e000      	b.n	8003132 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003130:	bf00      	nop
  }

  return tmpreg;
 8003132:	68fb      	ldr	r3, [r7, #12]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop

08003140 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr

08003152 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr

08003164 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr

08003188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a2f      	ldr	r2, [pc, #188]	@ (8003258 <TIM_Base_SetConfig+0xd0>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d00b      	beq.n	80031b8 <TIM_Base_SetConfig+0x30>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031a6:	d007      	beq.n	80031b8 <TIM_Base_SetConfig+0x30>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a2c      	ldr	r2, [pc, #176]	@ (800325c <TIM_Base_SetConfig+0xd4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d003      	beq.n	80031b8 <TIM_Base_SetConfig+0x30>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a2b      	ldr	r2, [pc, #172]	@ (8003260 <TIM_Base_SetConfig+0xd8>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d108      	bne.n	80031ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a22      	ldr	r2, [pc, #136]	@ (8003258 <TIM_Base_SetConfig+0xd0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d00b      	beq.n	80031ea <TIM_Base_SetConfig+0x62>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031d8:	d007      	beq.n	80031ea <TIM_Base_SetConfig+0x62>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a1f      	ldr	r2, [pc, #124]	@ (800325c <TIM_Base_SetConfig+0xd4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d003      	beq.n	80031ea <TIM_Base_SetConfig+0x62>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003260 <TIM_Base_SetConfig+0xd8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d108      	bne.n	80031fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	4313      	orrs	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a0d      	ldr	r2, [pc, #52]	@ (8003258 <TIM_Base_SetConfig+0xd0>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d103      	bne.n	8003230 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f023 0201 	bic.w	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	611a      	str	r2, [r3, #16]
  }
}
 800324e:	bf00      	nop
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr
 8003258:	40012c00 	.word	0x40012c00
 800325c:	40000400 	.word	0x40000400
 8003260:	40000800 	.word	0x40000800

08003264 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003280:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f023 0307 	bic.w	r3, r3, #7
 8003292:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	4313      	orrs	r3, r2
 800329c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b70      	cmp	r3, #112	@ 0x70
 80032ac:	d01a      	beq.n	80032e4 <TIM_SlaveTimer_SetConfig+0x80>
 80032ae:	2b70      	cmp	r3, #112	@ 0x70
 80032b0:	d860      	bhi.n	8003374 <TIM_SlaveTimer_SetConfig+0x110>
 80032b2:	2b60      	cmp	r3, #96	@ 0x60
 80032b4:	d054      	beq.n	8003360 <TIM_SlaveTimer_SetConfig+0xfc>
 80032b6:	2b60      	cmp	r3, #96	@ 0x60
 80032b8:	d85c      	bhi.n	8003374 <TIM_SlaveTimer_SetConfig+0x110>
 80032ba:	2b50      	cmp	r3, #80	@ 0x50
 80032bc:	d046      	beq.n	800334c <TIM_SlaveTimer_SetConfig+0xe8>
 80032be:	2b50      	cmp	r3, #80	@ 0x50
 80032c0:	d858      	bhi.n	8003374 <TIM_SlaveTimer_SetConfig+0x110>
 80032c2:	2b40      	cmp	r3, #64	@ 0x40
 80032c4:	d019      	beq.n	80032fa <TIM_SlaveTimer_SetConfig+0x96>
 80032c6:	2b40      	cmp	r3, #64	@ 0x40
 80032c8:	d854      	bhi.n	8003374 <TIM_SlaveTimer_SetConfig+0x110>
 80032ca:	2b30      	cmp	r3, #48	@ 0x30
 80032cc:	d055      	beq.n	800337a <TIM_SlaveTimer_SetConfig+0x116>
 80032ce:	2b30      	cmp	r3, #48	@ 0x30
 80032d0:	d850      	bhi.n	8003374 <TIM_SlaveTimer_SetConfig+0x110>
 80032d2:	2b20      	cmp	r3, #32
 80032d4:	d051      	beq.n	800337a <TIM_SlaveTimer_SetConfig+0x116>
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d84c      	bhi.n	8003374 <TIM_SlaveTimer_SetConfig+0x110>
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d04d      	beq.n	800337a <TIM_SlaveTimer_SetConfig+0x116>
 80032de:	2b10      	cmp	r3, #16
 80032e0:	d04b      	beq.n	800337a <TIM_SlaveTimer_SetConfig+0x116>
 80032e2:	e047      	b.n	8003374 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80032f4:	f000 f9cc 	bl	8003690 <TIM_ETR_SetConfig>
      break;
 80032f8:	e040      	b.n	800337c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b05      	cmp	r3, #5
 8003300:	d101      	bne.n	8003306 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e03b      	b.n	800337e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6a1a      	ldr	r2, [r3, #32]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0201 	bic.w	r2, r2, #1
 800331c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800332c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	4313      	orrs	r3, r2
 8003338:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	621a      	str	r2, [r3, #32]
      break;
 800334a:	e017      	b.n	800337c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003358:	461a      	mov	r2, r3
 800335a:	f000 f86f 	bl	800343c <TIM_TI1_ConfigInputStage>
      break;
 800335e:	e00d      	b.n	800337c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800336c:	461a      	mov	r2, r3
 800336e:	f000 f8cf 	bl	8003510 <TIM_TI2_ConfigInputStage>
      break;
 8003372:	e003      	b.n	800337c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	75fb      	strb	r3, [r7, #23]
      break;
 8003378:	e000      	b.n	800337c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800337a:	bf00      	nop
  }

  return status;
 800337c:	7dfb      	ldrb	r3, [r7, #23]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
	...

08003388 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
 8003394:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	f023 0201 	bic.w	r2, r3, #1
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003430 <TIM_TI1_SetConfig+0xa8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00b      	beq.n	80033ce <TIM_TI1_SetConfig+0x46>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033bc:	d007      	beq.n	80033ce <TIM_TI1_SetConfig+0x46>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003434 <TIM_TI1_SetConfig+0xac>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d003      	beq.n	80033ce <TIM_TI1_SetConfig+0x46>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003438 <TIM_TI1_SetConfig+0xb0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d101      	bne.n	80033d2 <TIM_TI1_SetConfig+0x4a>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <TIM_TI1_SetConfig+0x4c>
 80033d2:	2300      	movs	r3, #0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f023 0303 	bic.w	r3, r3, #3
 80033de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	e003      	b.n	80033f2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f043 0301 	orr.w	r3, r3, #1
 80033f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	4313      	orrs	r3, r2
 8003404:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f023 030a 	bic.w	r3, r3, #10
 800340c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	f003 030a 	and.w	r3, r3, #10
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	621a      	str	r2, [r3, #32]
}
 8003426:	bf00      	nop
 8003428:	371c      	adds	r7, #28
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr
 8003430:	40012c00 	.word	0x40012c00
 8003434:	40000400 	.word	0x40000400
 8003438:	40000800 	.word	0x40000800

0800343c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	f023 0201 	bic.w	r2, r3, #1
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4313      	orrs	r3, r2
 8003470:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f023 030a 	bic.w	r3, r3, #10
 8003478:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	4313      	orrs	r3, r2
 8003480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	621a      	str	r2, [r3, #32]
}
 800348e:	bf00      	nop
 8003490:	371c      	adds	r7, #28
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr

08003498 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
 80034a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	f023 0210 	bic.w	r2, r3, #16
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	021b      	lsls	r3, r3, #8
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80034d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	031b      	lsls	r3, r3, #12
 80034dc:	b29b      	uxth	r3, r3
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80034ea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	621a      	str	r2, [r3, #32]
}
 8003506:	bf00      	nop
 8003508:	371c      	adds	r7, #28
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr

08003510 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	f023 0210 	bic.w	r2, r3, #16
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800353a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	031b      	lsls	r3, r3, #12
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800354c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	621a      	str	r2, [r3, #32]
}
 8003564:	bf00      	nop
 8003566:	371c      	adds	r7, #28
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr

0800356e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800356e:	b480      	push	{r7}
 8003570:	b087      	sub	sp, #28
 8003572:	af00      	add	r7, sp, #0
 8003574:	60f8      	str	r0, [r7, #12]
 8003576:	60b9      	str	r1, [r7, #8]
 8003578:	607a      	str	r2, [r7, #4]
 800357a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f023 0303 	bic.w	r3, r3, #3
 800359a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035aa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035be:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	021b      	lsls	r3, r3, #8
 80035c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	621a      	str	r2, [r3, #32]
}
 80035da:	bf00      	nop
 80035dc:	371c      	adds	r7, #28
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr

080035e4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
 80035f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003610:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	021b      	lsls	r3, r3, #8
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003622:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	031b      	lsls	r3, r3, #12
 8003628:	b29b      	uxth	r3, r3
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003636:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	031b      	lsls	r3, r3, #12
 800363c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	4313      	orrs	r3, r2
 8003644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	621a      	str	r2, [r3, #32]
}
 8003652:	bf00      	nop
 8003654:	371c      	adds	r7, #28
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003672:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	4313      	orrs	r3, r2
 800367a:	f043 0307 	orr.w	r3, r3, #7
 800367e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	609a      	str	r2, [r3, #8]
}
 8003686:	bf00      	nop
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr

08003690 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003690:	b480      	push	{r7}
 8003692:	b087      	sub	sp, #28
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	021a      	lsls	r2, r3, #8
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	431a      	orrs	r2, r3
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	609a      	str	r2, [r3, #8]
}
 80036c4:	bf00      	nop
 80036c6:	371c      	adds	r7, #28
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr

080036ce <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b087      	sub	sp, #28
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f003 031f 	and.w	r3, r3, #31
 80036e0:	2201      	movs	r2, #1
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a1a      	ldr	r2, [r3, #32]
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	43db      	mvns	r3, r3
 80036f0:	401a      	ands	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a1a      	ldr	r2, [r3, #32]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f003 031f 	and.w	r3, r3, #31
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	fa01 f303 	lsl.w	r3, r1, r3
 8003706:	431a      	orrs	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	621a      	str	r2, [r3, #32]
}
 800370c:	bf00      	nop
 800370e:	371c      	adds	r7, #28
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr
	...

08003718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800372c:	2302      	movs	r3, #2
 800372e:	e046      	b.n	80037be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003756:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a16      	ldr	r2, [pc, #88]	@ (80037c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d00e      	beq.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800377c:	d009      	beq.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a12      	ldr	r2, [pc, #72]	@ (80037cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d004      	beq.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a10      	ldr	r2, [pc, #64]	@ (80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d10c      	bne.n	80037ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003798:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr
 80037c8:	40012c00 	.word	0x40012c00
 80037cc:	40000400 	.word	0x40000400
 80037d0:	40000800 	.word	0x40000800

080037d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr

080037e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr

080037f8 <siprintf>:
 80037f8:	b40e      	push	{r1, r2, r3}
 80037fa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80037fe:	b510      	push	{r4, lr}
 8003800:	2400      	movs	r4, #0
 8003802:	b09d      	sub	sp, #116	@ 0x74
 8003804:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003806:	9002      	str	r0, [sp, #8]
 8003808:	9006      	str	r0, [sp, #24]
 800380a:	9107      	str	r1, [sp, #28]
 800380c:	9104      	str	r1, [sp, #16]
 800380e:	4809      	ldr	r0, [pc, #36]	@ (8003834 <siprintf+0x3c>)
 8003810:	4909      	ldr	r1, [pc, #36]	@ (8003838 <siprintf+0x40>)
 8003812:	f853 2b04 	ldr.w	r2, [r3], #4
 8003816:	9105      	str	r1, [sp, #20]
 8003818:	6800      	ldr	r0, [r0, #0]
 800381a:	a902      	add	r1, sp, #8
 800381c:	9301      	str	r3, [sp, #4]
 800381e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003820:	f000 f9a0 	bl	8003b64 <_svfiprintf_r>
 8003824:	9b02      	ldr	r3, [sp, #8]
 8003826:	701c      	strb	r4, [r3, #0]
 8003828:	b01d      	add	sp, #116	@ 0x74
 800382a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800382e:	b003      	add	sp, #12
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	2000000c 	.word	0x2000000c
 8003838:	ffff0208 	.word	0xffff0208

0800383c <memset>:
 800383c:	4603      	mov	r3, r0
 800383e:	4402      	add	r2, r0
 8003840:	4293      	cmp	r3, r2
 8003842:	d100      	bne.n	8003846 <memset+0xa>
 8003844:	4770      	bx	lr
 8003846:	f803 1b01 	strb.w	r1, [r3], #1
 800384a:	e7f9      	b.n	8003840 <memset+0x4>

0800384c <__errno>:
 800384c:	4b01      	ldr	r3, [pc, #4]	@ (8003854 <__errno+0x8>)
 800384e:	6818      	ldr	r0, [r3, #0]
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	2000000c 	.word	0x2000000c

08003858 <__libc_init_array>:
 8003858:	b570      	push	{r4, r5, r6, lr}
 800385a:	2600      	movs	r6, #0
 800385c:	4d0c      	ldr	r5, [pc, #48]	@ (8003890 <__libc_init_array+0x38>)
 800385e:	4c0d      	ldr	r4, [pc, #52]	@ (8003894 <__libc_init_array+0x3c>)
 8003860:	1b64      	subs	r4, r4, r5
 8003862:	10a4      	asrs	r4, r4, #2
 8003864:	42a6      	cmp	r6, r4
 8003866:	d109      	bne.n	800387c <__libc_init_array+0x24>
 8003868:	f000 fc76 	bl	8004158 <_init>
 800386c:	2600      	movs	r6, #0
 800386e:	4d0a      	ldr	r5, [pc, #40]	@ (8003898 <__libc_init_array+0x40>)
 8003870:	4c0a      	ldr	r4, [pc, #40]	@ (800389c <__libc_init_array+0x44>)
 8003872:	1b64      	subs	r4, r4, r5
 8003874:	10a4      	asrs	r4, r4, #2
 8003876:	42a6      	cmp	r6, r4
 8003878:	d105      	bne.n	8003886 <__libc_init_array+0x2e>
 800387a:	bd70      	pop	{r4, r5, r6, pc}
 800387c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003880:	4798      	blx	r3
 8003882:	3601      	adds	r6, #1
 8003884:	e7ee      	b.n	8003864 <__libc_init_array+0xc>
 8003886:	f855 3b04 	ldr.w	r3, [r5], #4
 800388a:	4798      	blx	r3
 800388c:	3601      	adds	r6, #1
 800388e:	e7f2      	b.n	8003876 <__libc_init_array+0x1e>
 8003890:	080047f8 	.word	0x080047f8
 8003894:	080047f8 	.word	0x080047f8
 8003898:	080047f8 	.word	0x080047f8
 800389c:	080047fc 	.word	0x080047fc

080038a0 <__retarget_lock_acquire_recursive>:
 80038a0:	4770      	bx	lr

080038a2 <__retarget_lock_release_recursive>:
 80038a2:	4770      	bx	lr

080038a4 <memcpy>:
 80038a4:	440a      	add	r2, r1
 80038a6:	4291      	cmp	r1, r2
 80038a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80038ac:	d100      	bne.n	80038b0 <memcpy+0xc>
 80038ae:	4770      	bx	lr
 80038b0:	b510      	push	{r4, lr}
 80038b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038b6:	4291      	cmp	r1, r2
 80038b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038bc:	d1f9      	bne.n	80038b2 <memcpy+0xe>
 80038be:	bd10      	pop	{r4, pc}

080038c0 <_free_r>:
 80038c0:	b538      	push	{r3, r4, r5, lr}
 80038c2:	4605      	mov	r5, r0
 80038c4:	2900      	cmp	r1, #0
 80038c6:	d040      	beq.n	800394a <_free_r+0x8a>
 80038c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038cc:	1f0c      	subs	r4, r1, #4
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	bfb8      	it	lt
 80038d2:	18e4      	addlt	r4, r4, r3
 80038d4:	f000 f8de 	bl	8003a94 <__malloc_lock>
 80038d8:	4a1c      	ldr	r2, [pc, #112]	@ (800394c <_free_r+0x8c>)
 80038da:	6813      	ldr	r3, [r2, #0]
 80038dc:	b933      	cbnz	r3, 80038ec <_free_r+0x2c>
 80038de:	6063      	str	r3, [r4, #4]
 80038e0:	6014      	str	r4, [r2, #0]
 80038e2:	4628      	mov	r0, r5
 80038e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038e8:	f000 b8da 	b.w	8003aa0 <__malloc_unlock>
 80038ec:	42a3      	cmp	r3, r4
 80038ee:	d908      	bls.n	8003902 <_free_r+0x42>
 80038f0:	6820      	ldr	r0, [r4, #0]
 80038f2:	1821      	adds	r1, r4, r0
 80038f4:	428b      	cmp	r3, r1
 80038f6:	bf01      	itttt	eq
 80038f8:	6819      	ldreq	r1, [r3, #0]
 80038fa:	685b      	ldreq	r3, [r3, #4]
 80038fc:	1809      	addeq	r1, r1, r0
 80038fe:	6021      	streq	r1, [r4, #0]
 8003900:	e7ed      	b.n	80038de <_free_r+0x1e>
 8003902:	461a      	mov	r2, r3
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	b10b      	cbz	r3, 800390c <_free_r+0x4c>
 8003908:	42a3      	cmp	r3, r4
 800390a:	d9fa      	bls.n	8003902 <_free_r+0x42>
 800390c:	6811      	ldr	r1, [r2, #0]
 800390e:	1850      	adds	r0, r2, r1
 8003910:	42a0      	cmp	r0, r4
 8003912:	d10b      	bne.n	800392c <_free_r+0x6c>
 8003914:	6820      	ldr	r0, [r4, #0]
 8003916:	4401      	add	r1, r0
 8003918:	1850      	adds	r0, r2, r1
 800391a:	4283      	cmp	r3, r0
 800391c:	6011      	str	r1, [r2, #0]
 800391e:	d1e0      	bne.n	80038e2 <_free_r+0x22>
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4408      	add	r0, r1
 8003926:	6010      	str	r0, [r2, #0]
 8003928:	6053      	str	r3, [r2, #4]
 800392a:	e7da      	b.n	80038e2 <_free_r+0x22>
 800392c:	d902      	bls.n	8003934 <_free_r+0x74>
 800392e:	230c      	movs	r3, #12
 8003930:	602b      	str	r3, [r5, #0]
 8003932:	e7d6      	b.n	80038e2 <_free_r+0x22>
 8003934:	6820      	ldr	r0, [r4, #0]
 8003936:	1821      	adds	r1, r4, r0
 8003938:	428b      	cmp	r3, r1
 800393a:	bf01      	itttt	eq
 800393c:	6819      	ldreq	r1, [r3, #0]
 800393e:	685b      	ldreq	r3, [r3, #4]
 8003940:	1809      	addeq	r1, r1, r0
 8003942:	6021      	streq	r1, [r4, #0]
 8003944:	6063      	str	r3, [r4, #4]
 8003946:	6054      	str	r4, [r2, #4]
 8003948:	e7cb      	b.n	80038e2 <_free_r+0x22>
 800394a:	bd38      	pop	{r3, r4, r5, pc}
 800394c:	200006b8 	.word	0x200006b8

08003950 <sbrk_aligned>:
 8003950:	b570      	push	{r4, r5, r6, lr}
 8003952:	4e0f      	ldr	r6, [pc, #60]	@ (8003990 <sbrk_aligned+0x40>)
 8003954:	460c      	mov	r4, r1
 8003956:	6831      	ldr	r1, [r6, #0]
 8003958:	4605      	mov	r5, r0
 800395a:	b911      	cbnz	r1, 8003962 <sbrk_aligned+0x12>
 800395c:	f000 fba8 	bl	80040b0 <_sbrk_r>
 8003960:	6030      	str	r0, [r6, #0]
 8003962:	4621      	mov	r1, r4
 8003964:	4628      	mov	r0, r5
 8003966:	f000 fba3 	bl	80040b0 <_sbrk_r>
 800396a:	1c43      	adds	r3, r0, #1
 800396c:	d103      	bne.n	8003976 <sbrk_aligned+0x26>
 800396e:	f04f 34ff 	mov.w	r4, #4294967295
 8003972:	4620      	mov	r0, r4
 8003974:	bd70      	pop	{r4, r5, r6, pc}
 8003976:	1cc4      	adds	r4, r0, #3
 8003978:	f024 0403 	bic.w	r4, r4, #3
 800397c:	42a0      	cmp	r0, r4
 800397e:	d0f8      	beq.n	8003972 <sbrk_aligned+0x22>
 8003980:	1a21      	subs	r1, r4, r0
 8003982:	4628      	mov	r0, r5
 8003984:	f000 fb94 	bl	80040b0 <_sbrk_r>
 8003988:	3001      	adds	r0, #1
 800398a:	d1f2      	bne.n	8003972 <sbrk_aligned+0x22>
 800398c:	e7ef      	b.n	800396e <sbrk_aligned+0x1e>
 800398e:	bf00      	nop
 8003990:	200006b4 	.word	0x200006b4

08003994 <_malloc_r>:
 8003994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003998:	1ccd      	adds	r5, r1, #3
 800399a:	f025 0503 	bic.w	r5, r5, #3
 800399e:	3508      	adds	r5, #8
 80039a0:	2d0c      	cmp	r5, #12
 80039a2:	bf38      	it	cc
 80039a4:	250c      	movcc	r5, #12
 80039a6:	2d00      	cmp	r5, #0
 80039a8:	4606      	mov	r6, r0
 80039aa:	db01      	blt.n	80039b0 <_malloc_r+0x1c>
 80039ac:	42a9      	cmp	r1, r5
 80039ae:	d904      	bls.n	80039ba <_malloc_r+0x26>
 80039b0:	230c      	movs	r3, #12
 80039b2:	6033      	str	r3, [r6, #0]
 80039b4:	2000      	movs	r0, #0
 80039b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a90 <_malloc_r+0xfc>
 80039be:	f000 f869 	bl	8003a94 <__malloc_lock>
 80039c2:	f8d8 3000 	ldr.w	r3, [r8]
 80039c6:	461c      	mov	r4, r3
 80039c8:	bb44      	cbnz	r4, 8003a1c <_malloc_r+0x88>
 80039ca:	4629      	mov	r1, r5
 80039cc:	4630      	mov	r0, r6
 80039ce:	f7ff ffbf 	bl	8003950 <sbrk_aligned>
 80039d2:	1c43      	adds	r3, r0, #1
 80039d4:	4604      	mov	r4, r0
 80039d6:	d158      	bne.n	8003a8a <_malloc_r+0xf6>
 80039d8:	f8d8 4000 	ldr.w	r4, [r8]
 80039dc:	4627      	mov	r7, r4
 80039de:	2f00      	cmp	r7, #0
 80039e0:	d143      	bne.n	8003a6a <_malloc_r+0xd6>
 80039e2:	2c00      	cmp	r4, #0
 80039e4:	d04b      	beq.n	8003a7e <_malloc_r+0xea>
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	4639      	mov	r1, r7
 80039ea:	4630      	mov	r0, r6
 80039ec:	eb04 0903 	add.w	r9, r4, r3
 80039f0:	f000 fb5e 	bl	80040b0 <_sbrk_r>
 80039f4:	4581      	cmp	r9, r0
 80039f6:	d142      	bne.n	8003a7e <_malloc_r+0xea>
 80039f8:	6821      	ldr	r1, [r4, #0]
 80039fa:	4630      	mov	r0, r6
 80039fc:	1a6d      	subs	r5, r5, r1
 80039fe:	4629      	mov	r1, r5
 8003a00:	f7ff ffa6 	bl	8003950 <sbrk_aligned>
 8003a04:	3001      	adds	r0, #1
 8003a06:	d03a      	beq.n	8003a7e <_malloc_r+0xea>
 8003a08:	6823      	ldr	r3, [r4, #0]
 8003a0a:	442b      	add	r3, r5
 8003a0c:	6023      	str	r3, [r4, #0]
 8003a0e:	f8d8 3000 	ldr.w	r3, [r8]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	bb62      	cbnz	r2, 8003a70 <_malloc_r+0xdc>
 8003a16:	f8c8 7000 	str.w	r7, [r8]
 8003a1a:	e00f      	b.n	8003a3c <_malloc_r+0xa8>
 8003a1c:	6822      	ldr	r2, [r4, #0]
 8003a1e:	1b52      	subs	r2, r2, r5
 8003a20:	d420      	bmi.n	8003a64 <_malloc_r+0xd0>
 8003a22:	2a0b      	cmp	r2, #11
 8003a24:	d917      	bls.n	8003a56 <_malloc_r+0xc2>
 8003a26:	1961      	adds	r1, r4, r5
 8003a28:	42a3      	cmp	r3, r4
 8003a2a:	6025      	str	r5, [r4, #0]
 8003a2c:	bf18      	it	ne
 8003a2e:	6059      	strne	r1, [r3, #4]
 8003a30:	6863      	ldr	r3, [r4, #4]
 8003a32:	bf08      	it	eq
 8003a34:	f8c8 1000 	streq.w	r1, [r8]
 8003a38:	5162      	str	r2, [r4, r5]
 8003a3a:	604b      	str	r3, [r1, #4]
 8003a3c:	4630      	mov	r0, r6
 8003a3e:	f000 f82f 	bl	8003aa0 <__malloc_unlock>
 8003a42:	f104 000b 	add.w	r0, r4, #11
 8003a46:	1d23      	adds	r3, r4, #4
 8003a48:	f020 0007 	bic.w	r0, r0, #7
 8003a4c:	1ac2      	subs	r2, r0, r3
 8003a4e:	bf1c      	itt	ne
 8003a50:	1a1b      	subne	r3, r3, r0
 8003a52:	50a3      	strne	r3, [r4, r2]
 8003a54:	e7af      	b.n	80039b6 <_malloc_r+0x22>
 8003a56:	6862      	ldr	r2, [r4, #4]
 8003a58:	42a3      	cmp	r3, r4
 8003a5a:	bf0c      	ite	eq
 8003a5c:	f8c8 2000 	streq.w	r2, [r8]
 8003a60:	605a      	strne	r2, [r3, #4]
 8003a62:	e7eb      	b.n	8003a3c <_malloc_r+0xa8>
 8003a64:	4623      	mov	r3, r4
 8003a66:	6864      	ldr	r4, [r4, #4]
 8003a68:	e7ae      	b.n	80039c8 <_malloc_r+0x34>
 8003a6a:	463c      	mov	r4, r7
 8003a6c:	687f      	ldr	r7, [r7, #4]
 8003a6e:	e7b6      	b.n	80039de <_malloc_r+0x4a>
 8003a70:	461a      	mov	r2, r3
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	42a3      	cmp	r3, r4
 8003a76:	d1fb      	bne.n	8003a70 <_malloc_r+0xdc>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	6053      	str	r3, [r2, #4]
 8003a7c:	e7de      	b.n	8003a3c <_malloc_r+0xa8>
 8003a7e:	230c      	movs	r3, #12
 8003a80:	4630      	mov	r0, r6
 8003a82:	6033      	str	r3, [r6, #0]
 8003a84:	f000 f80c 	bl	8003aa0 <__malloc_unlock>
 8003a88:	e794      	b.n	80039b4 <_malloc_r+0x20>
 8003a8a:	6005      	str	r5, [r0, #0]
 8003a8c:	e7d6      	b.n	8003a3c <_malloc_r+0xa8>
 8003a8e:	bf00      	nop
 8003a90:	200006b8 	.word	0x200006b8

08003a94 <__malloc_lock>:
 8003a94:	4801      	ldr	r0, [pc, #4]	@ (8003a9c <__malloc_lock+0x8>)
 8003a96:	f7ff bf03 	b.w	80038a0 <__retarget_lock_acquire_recursive>
 8003a9a:	bf00      	nop
 8003a9c:	200006b0 	.word	0x200006b0

08003aa0 <__malloc_unlock>:
 8003aa0:	4801      	ldr	r0, [pc, #4]	@ (8003aa8 <__malloc_unlock+0x8>)
 8003aa2:	f7ff befe 	b.w	80038a2 <__retarget_lock_release_recursive>
 8003aa6:	bf00      	nop
 8003aa8:	200006b0 	.word	0x200006b0

08003aac <__ssputs_r>:
 8003aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ab0:	461f      	mov	r7, r3
 8003ab2:	688e      	ldr	r6, [r1, #8]
 8003ab4:	4682      	mov	sl, r0
 8003ab6:	42be      	cmp	r6, r7
 8003ab8:	460c      	mov	r4, r1
 8003aba:	4690      	mov	r8, r2
 8003abc:	680b      	ldr	r3, [r1, #0]
 8003abe:	d82d      	bhi.n	8003b1c <__ssputs_r+0x70>
 8003ac0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ac4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003ac8:	d026      	beq.n	8003b18 <__ssputs_r+0x6c>
 8003aca:	6965      	ldr	r5, [r4, #20]
 8003acc:	6909      	ldr	r1, [r1, #16]
 8003ace:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ad2:	eba3 0901 	sub.w	r9, r3, r1
 8003ad6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ada:	1c7b      	adds	r3, r7, #1
 8003adc:	444b      	add	r3, r9
 8003ade:	106d      	asrs	r5, r5, #1
 8003ae0:	429d      	cmp	r5, r3
 8003ae2:	bf38      	it	cc
 8003ae4:	461d      	movcc	r5, r3
 8003ae6:	0553      	lsls	r3, r2, #21
 8003ae8:	d527      	bpl.n	8003b3a <__ssputs_r+0x8e>
 8003aea:	4629      	mov	r1, r5
 8003aec:	f7ff ff52 	bl	8003994 <_malloc_r>
 8003af0:	4606      	mov	r6, r0
 8003af2:	b360      	cbz	r0, 8003b4e <__ssputs_r+0xa2>
 8003af4:	464a      	mov	r2, r9
 8003af6:	6921      	ldr	r1, [r4, #16]
 8003af8:	f7ff fed4 	bl	80038a4 <memcpy>
 8003afc:	89a3      	ldrh	r3, [r4, #12]
 8003afe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b06:	81a3      	strh	r3, [r4, #12]
 8003b08:	6126      	str	r6, [r4, #16]
 8003b0a:	444e      	add	r6, r9
 8003b0c:	6026      	str	r6, [r4, #0]
 8003b0e:	463e      	mov	r6, r7
 8003b10:	6165      	str	r5, [r4, #20]
 8003b12:	eba5 0509 	sub.w	r5, r5, r9
 8003b16:	60a5      	str	r5, [r4, #8]
 8003b18:	42be      	cmp	r6, r7
 8003b1a:	d900      	bls.n	8003b1e <__ssputs_r+0x72>
 8003b1c:	463e      	mov	r6, r7
 8003b1e:	4632      	mov	r2, r6
 8003b20:	4641      	mov	r1, r8
 8003b22:	6820      	ldr	r0, [r4, #0]
 8003b24:	f000 faaa 	bl	800407c <memmove>
 8003b28:	2000      	movs	r0, #0
 8003b2a:	68a3      	ldr	r3, [r4, #8]
 8003b2c:	1b9b      	subs	r3, r3, r6
 8003b2e:	60a3      	str	r3, [r4, #8]
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	4433      	add	r3, r6
 8003b34:	6023      	str	r3, [r4, #0]
 8003b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b3a:	462a      	mov	r2, r5
 8003b3c:	f000 fad6 	bl	80040ec <_realloc_r>
 8003b40:	4606      	mov	r6, r0
 8003b42:	2800      	cmp	r0, #0
 8003b44:	d1e0      	bne.n	8003b08 <__ssputs_r+0x5c>
 8003b46:	4650      	mov	r0, sl
 8003b48:	6921      	ldr	r1, [r4, #16]
 8003b4a:	f7ff feb9 	bl	80038c0 <_free_r>
 8003b4e:	230c      	movs	r3, #12
 8003b50:	f8ca 3000 	str.w	r3, [sl]
 8003b54:	89a3      	ldrh	r3, [r4, #12]
 8003b56:	f04f 30ff 	mov.w	r0, #4294967295
 8003b5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b5e:	81a3      	strh	r3, [r4, #12]
 8003b60:	e7e9      	b.n	8003b36 <__ssputs_r+0x8a>
	...

08003b64 <_svfiprintf_r>:
 8003b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b68:	4698      	mov	r8, r3
 8003b6a:	898b      	ldrh	r3, [r1, #12]
 8003b6c:	4607      	mov	r7, r0
 8003b6e:	061b      	lsls	r3, r3, #24
 8003b70:	460d      	mov	r5, r1
 8003b72:	4614      	mov	r4, r2
 8003b74:	b09d      	sub	sp, #116	@ 0x74
 8003b76:	d510      	bpl.n	8003b9a <_svfiprintf_r+0x36>
 8003b78:	690b      	ldr	r3, [r1, #16]
 8003b7a:	b973      	cbnz	r3, 8003b9a <_svfiprintf_r+0x36>
 8003b7c:	2140      	movs	r1, #64	@ 0x40
 8003b7e:	f7ff ff09 	bl	8003994 <_malloc_r>
 8003b82:	6028      	str	r0, [r5, #0]
 8003b84:	6128      	str	r0, [r5, #16]
 8003b86:	b930      	cbnz	r0, 8003b96 <_svfiprintf_r+0x32>
 8003b88:	230c      	movs	r3, #12
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b90:	b01d      	add	sp, #116	@ 0x74
 8003b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b96:	2340      	movs	r3, #64	@ 0x40
 8003b98:	616b      	str	r3, [r5, #20]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b9e:	2320      	movs	r3, #32
 8003ba0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ba4:	2330      	movs	r3, #48	@ 0x30
 8003ba6:	f04f 0901 	mov.w	r9, #1
 8003baa:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bae:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003d48 <_svfiprintf_r+0x1e4>
 8003bb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003bb6:	4623      	mov	r3, r4
 8003bb8:	469a      	mov	sl, r3
 8003bba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bbe:	b10a      	cbz	r2, 8003bc4 <_svfiprintf_r+0x60>
 8003bc0:	2a25      	cmp	r2, #37	@ 0x25
 8003bc2:	d1f9      	bne.n	8003bb8 <_svfiprintf_r+0x54>
 8003bc4:	ebba 0b04 	subs.w	fp, sl, r4
 8003bc8:	d00b      	beq.n	8003be2 <_svfiprintf_r+0x7e>
 8003bca:	465b      	mov	r3, fp
 8003bcc:	4622      	mov	r2, r4
 8003bce:	4629      	mov	r1, r5
 8003bd0:	4638      	mov	r0, r7
 8003bd2:	f7ff ff6b 	bl	8003aac <__ssputs_r>
 8003bd6:	3001      	adds	r0, #1
 8003bd8:	f000 80a7 	beq.w	8003d2a <_svfiprintf_r+0x1c6>
 8003bdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003bde:	445a      	add	r2, fp
 8003be0:	9209      	str	r2, [sp, #36]	@ 0x24
 8003be2:	f89a 3000 	ldrb.w	r3, [sl]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 809f 	beq.w	8003d2a <_svfiprintf_r+0x1c6>
 8003bec:	2300      	movs	r3, #0
 8003bee:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bf6:	f10a 0a01 	add.w	sl, sl, #1
 8003bfa:	9304      	str	r3, [sp, #16]
 8003bfc:	9307      	str	r3, [sp, #28]
 8003bfe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c02:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c04:	4654      	mov	r4, sl
 8003c06:	2205      	movs	r2, #5
 8003c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c0c:	484e      	ldr	r0, [pc, #312]	@ (8003d48 <_svfiprintf_r+0x1e4>)
 8003c0e:	f000 fa5f 	bl	80040d0 <memchr>
 8003c12:	9a04      	ldr	r2, [sp, #16]
 8003c14:	b9d8      	cbnz	r0, 8003c4e <_svfiprintf_r+0xea>
 8003c16:	06d0      	lsls	r0, r2, #27
 8003c18:	bf44      	itt	mi
 8003c1a:	2320      	movmi	r3, #32
 8003c1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c20:	0711      	lsls	r1, r2, #28
 8003c22:	bf44      	itt	mi
 8003c24:	232b      	movmi	r3, #43	@ 0x2b
 8003c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8003c2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c30:	d015      	beq.n	8003c5e <_svfiprintf_r+0xfa>
 8003c32:	4654      	mov	r4, sl
 8003c34:	2000      	movs	r0, #0
 8003c36:	f04f 0c0a 	mov.w	ip, #10
 8003c3a:	9a07      	ldr	r2, [sp, #28]
 8003c3c:	4621      	mov	r1, r4
 8003c3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c42:	3b30      	subs	r3, #48	@ 0x30
 8003c44:	2b09      	cmp	r3, #9
 8003c46:	d94b      	bls.n	8003ce0 <_svfiprintf_r+0x17c>
 8003c48:	b1b0      	cbz	r0, 8003c78 <_svfiprintf_r+0x114>
 8003c4a:	9207      	str	r2, [sp, #28]
 8003c4c:	e014      	b.n	8003c78 <_svfiprintf_r+0x114>
 8003c4e:	eba0 0308 	sub.w	r3, r0, r8
 8003c52:	fa09 f303 	lsl.w	r3, r9, r3
 8003c56:	4313      	orrs	r3, r2
 8003c58:	46a2      	mov	sl, r4
 8003c5a:	9304      	str	r3, [sp, #16]
 8003c5c:	e7d2      	b.n	8003c04 <_svfiprintf_r+0xa0>
 8003c5e:	9b03      	ldr	r3, [sp, #12]
 8003c60:	1d19      	adds	r1, r3, #4
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	9103      	str	r1, [sp, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	bfbb      	ittet	lt
 8003c6a:	425b      	neglt	r3, r3
 8003c6c:	f042 0202 	orrlt.w	r2, r2, #2
 8003c70:	9307      	strge	r3, [sp, #28]
 8003c72:	9307      	strlt	r3, [sp, #28]
 8003c74:	bfb8      	it	lt
 8003c76:	9204      	strlt	r2, [sp, #16]
 8003c78:	7823      	ldrb	r3, [r4, #0]
 8003c7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c7c:	d10a      	bne.n	8003c94 <_svfiprintf_r+0x130>
 8003c7e:	7863      	ldrb	r3, [r4, #1]
 8003c80:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c82:	d132      	bne.n	8003cea <_svfiprintf_r+0x186>
 8003c84:	9b03      	ldr	r3, [sp, #12]
 8003c86:	3402      	adds	r4, #2
 8003c88:	1d1a      	adds	r2, r3, #4
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	9203      	str	r2, [sp, #12]
 8003c8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c92:	9305      	str	r3, [sp, #20]
 8003c94:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003d4c <_svfiprintf_r+0x1e8>
 8003c98:	2203      	movs	r2, #3
 8003c9a:	4650      	mov	r0, sl
 8003c9c:	7821      	ldrb	r1, [r4, #0]
 8003c9e:	f000 fa17 	bl	80040d0 <memchr>
 8003ca2:	b138      	cbz	r0, 8003cb4 <_svfiprintf_r+0x150>
 8003ca4:	2240      	movs	r2, #64	@ 0x40
 8003ca6:	9b04      	ldr	r3, [sp, #16]
 8003ca8:	eba0 000a 	sub.w	r0, r0, sl
 8003cac:	4082      	lsls	r2, r0
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	3401      	adds	r4, #1
 8003cb2:	9304      	str	r3, [sp, #16]
 8003cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cb8:	2206      	movs	r2, #6
 8003cba:	4825      	ldr	r0, [pc, #148]	@ (8003d50 <_svfiprintf_r+0x1ec>)
 8003cbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003cc0:	f000 fa06 	bl	80040d0 <memchr>
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	d036      	beq.n	8003d36 <_svfiprintf_r+0x1d2>
 8003cc8:	4b22      	ldr	r3, [pc, #136]	@ (8003d54 <_svfiprintf_r+0x1f0>)
 8003cca:	bb1b      	cbnz	r3, 8003d14 <_svfiprintf_r+0x1b0>
 8003ccc:	9b03      	ldr	r3, [sp, #12]
 8003cce:	3307      	adds	r3, #7
 8003cd0:	f023 0307 	bic.w	r3, r3, #7
 8003cd4:	3308      	adds	r3, #8
 8003cd6:	9303      	str	r3, [sp, #12]
 8003cd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cda:	4433      	add	r3, r6
 8003cdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cde:	e76a      	b.n	8003bb6 <_svfiprintf_r+0x52>
 8003ce0:	460c      	mov	r4, r1
 8003ce2:	2001      	movs	r0, #1
 8003ce4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ce8:	e7a8      	b.n	8003c3c <_svfiprintf_r+0xd8>
 8003cea:	2300      	movs	r3, #0
 8003cec:	f04f 0c0a 	mov.w	ip, #10
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	3401      	adds	r4, #1
 8003cf4:	9305      	str	r3, [sp, #20]
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cfc:	3a30      	subs	r2, #48	@ 0x30
 8003cfe:	2a09      	cmp	r2, #9
 8003d00:	d903      	bls.n	8003d0a <_svfiprintf_r+0x1a6>
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0c6      	beq.n	8003c94 <_svfiprintf_r+0x130>
 8003d06:	9105      	str	r1, [sp, #20]
 8003d08:	e7c4      	b.n	8003c94 <_svfiprintf_r+0x130>
 8003d0a:	4604      	mov	r4, r0
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d12:	e7f0      	b.n	8003cf6 <_svfiprintf_r+0x192>
 8003d14:	ab03      	add	r3, sp, #12
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	462a      	mov	r2, r5
 8003d1a:	4638      	mov	r0, r7
 8003d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003d58 <_svfiprintf_r+0x1f4>)
 8003d1e:	a904      	add	r1, sp, #16
 8003d20:	f3af 8000 	nop.w
 8003d24:	1c42      	adds	r2, r0, #1
 8003d26:	4606      	mov	r6, r0
 8003d28:	d1d6      	bne.n	8003cd8 <_svfiprintf_r+0x174>
 8003d2a:	89ab      	ldrh	r3, [r5, #12]
 8003d2c:	065b      	lsls	r3, r3, #25
 8003d2e:	f53f af2d 	bmi.w	8003b8c <_svfiprintf_r+0x28>
 8003d32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d34:	e72c      	b.n	8003b90 <_svfiprintf_r+0x2c>
 8003d36:	ab03      	add	r3, sp, #12
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	462a      	mov	r2, r5
 8003d3c:	4638      	mov	r0, r7
 8003d3e:	4b06      	ldr	r3, [pc, #24]	@ (8003d58 <_svfiprintf_r+0x1f4>)
 8003d40:	a904      	add	r1, sp, #16
 8003d42:	f000 f87d 	bl	8003e40 <_printf_i>
 8003d46:	e7ed      	b.n	8003d24 <_svfiprintf_r+0x1c0>
 8003d48:	080047c2 	.word	0x080047c2
 8003d4c:	080047c8 	.word	0x080047c8
 8003d50:	080047cc 	.word	0x080047cc
 8003d54:	00000000 	.word	0x00000000
 8003d58:	08003aad 	.word	0x08003aad

08003d5c <_printf_common>:
 8003d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d60:	4616      	mov	r6, r2
 8003d62:	4698      	mov	r8, r3
 8003d64:	688a      	ldr	r2, [r1, #8]
 8003d66:	690b      	ldr	r3, [r1, #16]
 8003d68:	4607      	mov	r7, r0
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	bfb8      	it	lt
 8003d6e:	4613      	movlt	r3, r2
 8003d70:	6033      	str	r3, [r6, #0]
 8003d72:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d76:	460c      	mov	r4, r1
 8003d78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d7c:	b10a      	cbz	r2, 8003d82 <_printf_common+0x26>
 8003d7e:	3301      	adds	r3, #1
 8003d80:	6033      	str	r3, [r6, #0]
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	0699      	lsls	r1, r3, #26
 8003d86:	bf42      	ittt	mi
 8003d88:	6833      	ldrmi	r3, [r6, #0]
 8003d8a:	3302      	addmi	r3, #2
 8003d8c:	6033      	strmi	r3, [r6, #0]
 8003d8e:	6825      	ldr	r5, [r4, #0]
 8003d90:	f015 0506 	ands.w	r5, r5, #6
 8003d94:	d106      	bne.n	8003da4 <_printf_common+0x48>
 8003d96:	f104 0a19 	add.w	sl, r4, #25
 8003d9a:	68e3      	ldr	r3, [r4, #12]
 8003d9c:	6832      	ldr	r2, [r6, #0]
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	42ab      	cmp	r3, r5
 8003da2:	dc2b      	bgt.n	8003dfc <_printf_common+0xa0>
 8003da4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003da8:	6822      	ldr	r2, [r4, #0]
 8003daa:	3b00      	subs	r3, #0
 8003dac:	bf18      	it	ne
 8003dae:	2301      	movne	r3, #1
 8003db0:	0692      	lsls	r2, r2, #26
 8003db2:	d430      	bmi.n	8003e16 <_printf_common+0xba>
 8003db4:	4641      	mov	r1, r8
 8003db6:	4638      	mov	r0, r7
 8003db8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003dbc:	47c8      	blx	r9
 8003dbe:	3001      	adds	r0, #1
 8003dc0:	d023      	beq.n	8003e0a <_printf_common+0xae>
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	6922      	ldr	r2, [r4, #16]
 8003dc6:	f003 0306 	and.w	r3, r3, #6
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	bf14      	ite	ne
 8003dce:	2500      	movne	r5, #0
 8003dd0:	6833      	ldreq	r3, [r6, #0]
 8003dd2:	f04f 0600 	mov.w	r6, #0
 8003dd6:	bf08      	it	eq
 8003dd8:	68e5      	ldreq	r5, [r4, #12]
 8003dda:	f104 041a 	add.w	r4, r4, #26
 8003dde:	bf08      	it	eq
 8003de0:	1aed      	subeq	r5, r5, r3
 8003de2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003de6:	bf08      	it	eq
 8003de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dec:	4293      	cmp	r3, r2
 8003dee:	bfc4      	itt	gt
 8003df0:	1a9b      	subgt	r3, r3, r2
 8003df2:	18ed      	addgt	r5, r5, r3
 8003df4:	42b5      	cmp	r5, r6
 8003df6:	d11a      	bne.n	8003e2e <_printf_common+0xd2>
 8003df8:	2000      	movs	r0, #0
 8003dfa:	e008      	b.n	8003e0e <_printf_common+0xb2>
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	4652      	mov	r2, sl
 8003e00:	4641      	mov	r1, r8
 8003e02:	4638      	mov	r0, r7
 8003e04:	47c8      	blx	r9
 8003e06:	3001      	adds	r0, #1
 8003e08:	d103      	bne.n	8003e12 <_printf_common+0xb6>
 8003e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e12:	3501      	adds	r5, #1
 8003e14:	e7c1      	b.n	8003d9a <_printf_common+0x3e>
 8003e16:	2030      	movs	r0, #48	@ 0x30
 8003e18:	18e1      	adds	r1, r4, r3
 8003e1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e24:	4422      	add	r2, r4
 8003e26:	3302      	adds	r3, #2
 8003e28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e2c:	e7c2      	b.n	8003db4 <_printf_common+0x58>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	4622      	mov	r2, r4
 8003e32:	4641      	mov	r1, r8
 8003e34:	4638      	mov	r0, r7
 8003e36:	47c8      	blx	r9
 8003e38:	3001      	adds	r0, #1
 8003e3a:	d0e6      	beq.n	8003e0a <_printf_common+0xae>
 8003e3c:	3601      	adds	r6, #1
 8003e3e:	e7d9      	b.n	8003df4 <_printf_common+0x98>

08003e40 <_printf_i>:
 8003e40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e44:	7e0f      	ldrb	r7, [r1, #24]
 8003e46:	4691      	mov	r9, r2
 8003e48:	2f78      	cmp	r7, #120	@ 0x78
 8003e4a:	4680      	mov	r8, r0
 8003e4c:	460c      	mov	r4, r1
 8003e4e:	469a      	mov	sl, r3
 8003e50:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e56:	d807      	bhi.n	8003e68 <_printf_i+0x28>
 8003e58:	2f62      	cmp	r7, #98	@ 0x62
 8003e5a:	d80a      	bhi.n	8003e72 <_printf_i+0x32>
 8003e5c:	2f00      	cmp	r7, #0
 8003e5e:	f000 80d1 	beq.w	8004004 <_printf_i+0x1c4>
 8003e62:	2f58      	cmp	r7, #88	@ 0x58
 8003e64:	f000 80b8 	beq.w	8003fd8 <_printf_i+0x198>
 8003e68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e70:	e03a      	b.n	8003ee8 <_printf_i+0xa8>
 8003e72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e76:	2b15      	cmp	r3, #21
 8003e78:	d8f6      	bhi.n	8003e68 <_printf_i+0x28>
 8003e7a:	a101      	add	r1, pc, #4	@ (adr r1, 8003e80 <_printf_i+0x40>)
 8003e7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e80:	08003ed9 	.word	0x08003ed9
 8003e84:	08003eed 	.word	0x08003eed
 8003e88:	08003e69 	.word	0x08003e69
 8003e8c:	08003e69 	.word	0x08003e69
 8003e90:	08003e69 	.word	0x08003e69
 8003e94:	08003e69 	.word	0x08003e69
 8003e98:	08003eed 	.word	0x08003eed
 8003e9c:	08003e69 	.word	0x08003e69
 8003ea0:	08003e69 	.word	0x08003e69
 8003ea4:	08003e69 	.word	0x08003e69
 8003ea8:	08003e69 	.word	0x08003e69
 8003eac:	08003feb 	.word	0x08003feb
 8003eb0:	08003f17 	.word	0x08003f17
 8003eb4:	08003fa5 	.word	0x08003fa5
 8003eb8:	08003e69 	.word	0x08003e69
 8003ebc:	08003e69 	.word	0x08003e69
 8003ec0:	0800400d 	.word	0x0800400d
 8003ec4:	08003e69 	.word	0x08003e69
 8003ec8:	08003f17 	.word	0x08003f17
 8003ecc:	08003e69 	.word	0x08003e69
 8003ed0:	08003e69 	.word	0x08003e69
 8003ed4:	08003fad 	.word	0x08003fad
 8003ed8:	6833      	ldr	r3, [r6, #0]
 8003eda:	1d1a      	adds	r2, r3, #4
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6032      	str	r2, [r6, #0]
 8003ee0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ee4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e09c      	b.n	8004026 <_printf_i+0x1e6>
 8003eec:	6833      	ldr	r3, [r6, #0]
 8003eee:	6820      	ldr	r0, [r4, #0]
 8003ef0:	1d19      	adds	r1, r3, #4
 8003ef2:	6031      	str	r1, [r6, #0]
 8003ef4:	0606      	lsls	r6, r0, #24
 8003ef6:	d501      	bpl.n	8003efc <_printf_i+0xbc>
 8003ef8:	681d      	ldr	r5, [r3, #0]
 8003efa:	e003      	b.n	8003f04 <_printf_i+0xc4>
 8003efc:	0645      	lsls	r5, r0, #25
 8003efe:	d5fb      	bpl.n	8003ef8 <_printf_i+0xb8>
 8003f00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f04:	2d00      	cmp	r5, #0
 8003f06:	da03      	bge.n	8003f10 <_printf_i+0xd0>
 8003f08:	232d      	movs	r3, #45	@ 0x2d
 8003f0a:	426d      	negs	r5, r5
 8003f0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f10:	230a      	movs	r3, #10
 8003f12:	4858      	ldr	r0, [pc, #352]	@ (8004074 <_printf_i+0x234>)
 8003f14:	e011      	b.n	8003f3a <_printf_i+0xfa>
 8003f16:	6821      	ldr	r1, [r4, #0]
 8003f18:	6833      	ldr	r3, [r6, #0]
 8003f1a:	0608      	lsls	r0, r1, #24
 8003f1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f20:	d402      	bmi.n	8003f28 <_printf_i+0xe8>
 8003f22:	0649      	lsls	r1, r1, #25
 8003f24:	bf48      	it	mi
 8003f26:	b2ad      	uxthmi	r5, r5
 8003f28:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f2a:	6033      	str	r3, [r6, #0]
 8003f2c:	bf14      	ite	ne
 8003f2e:	230a      	movne	r3, #10
 8003f30:	2308      	moveq	r3, #8
 8003f32:	4850      	ldr	r0, [pc, #320]	@ (8004074 <_printf_i+0x234>)
 8003f34:	2100      	movs	r1, #0
 8003f36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f3a:	6866      	ldr	r6, [r4, #4]
 8003f3c:	2e00      	cmp	r6, #0
 8003f3e:	60a6      	str	r6, [r4, #8]
 8003f40:	db05      	blt.n	8003f4e <_printf_i+0x10e>
 8003f42:	6821      	ldr	r1, [r4, #0]
 8003f44:	432e      	orrs	r6, r5
 8003f46:	f021 0104 	bic.w	r1, r1, #4
 8003f4a:	6021      	str	r1, [r4, #0]
 8003f4c:	d04b      	beq.n	8003fe6 <_printf_i+0x1a6>
 8003f4e:	4616      	mov	r6, r2
 8003f50:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f54:	fb03 5711 	mls	r7, r3, r1, r5
 8003f58:	5dc7      	ldrb	r7, [r0, r7]
 8003f5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f5e:	462f      	mov	r7, r5
 8003f60:	42bb      	cmp	r3, r7
 8003f62:	460d      	mov	r5, r1
 8003f64:	d9f4      	bls.n	8003f50 <_printf_i+0x110>
 8003f66:	2b08      	cmp	r3, #8
 8003f68:	d10b      	bne.n	8003f82 <_printf_i+0x142>
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	07df      	lsls	r7, r3, #31
 8003f6e:	d508      	bpl.n	8003f82 <_printf_i+0x142>
 8003f70:	6923      	ldr	r3, [r4, #16]
 8003f72:	6861      	ldr	r1, [r4, #4]
 8003f74:	4299      	cmp	r1, r3
 8003f76:	bfde      	ittt	le
 8003f78:	2330      	movle	r3, #48	@ 0x30
 8003f7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f82:	1b92      	subs	r2, r2, r6
 8003f84:	6122      	str	r2, [r4, #16]
 8003f86:	464b      	mov	r3, r9
 8003f88:	4621      	mov	r1, r4
 8003f8a:	4640      	mov	r0, r8
 8003f8c:	f8cd a000 	str.w	sl, [sp]
 8003f90:	aa03      	add	r2, sp, #12
 8003f92:	f7ff fee3 	bl	8003d5c <_printf_common>
 8003f96:	3001      	adds	r0, #1
 8003f98:	d14a      	bne.n	8004030 <_printf_i+0x1f0>
 8003f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9e:	b004      	add	sp, #16
 8003fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	f043 0320 	orr.w	r3, r3, #32
 8003faa:	6023      	str	r3, [r4, #0]
 8003fac:	2778      	movs	r7, #120	@ 0x78
 8003fae:	4832      	ldr	r0, [pc, #200]	@ (8004078 <_printf_i+0x238>)
 8003fb0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	6831      	ldr	r1, [r6, #0]
 8003fb8:	061f      	lsls	r7, r3, #24
 8003fba:	f851 5b04 	ldr.w	r5, [r1], #4
 8003fbe:	d402      	bmi.n	8003fc6 <_printf_i+0x186>
 8003fc0:	065f      	lsls	r7, r3, #25
 8003fc2:	bf48      	it	mi
 8003fc4:	b2ad      	uxthmi	r5, r5
 8003fc6:	6031      	str	r1, [r6, #0]
 8003fc8:	07d9      	lsls	r1, r3, #31
 8003fca:	bf44      	itt	mi
 8003fcc:	f043 0320 	orrmi.w	r3, r3, #32
 8003fd0:	6023      	strmi	r3, [r4, #0]
 8003fd2:	b11d      	cbz	r5, 8003fdc <_printf_i+0x19c>
 8003fd4:	2310      	movs	r3, #16
 8003fd6:	e7ad      	b.n	8003f34 <_printf_i+0xf4>
 8003fd8:	4826      	ldr	r0, [pc, #152]	@ (8004074 <_printf_i+0x234>)
 8003fda:	e7e9      	b.n	8003fb0 <_printf_i+0x170>
 8003fdc:	6823      	ldr	r3, [r4, #0]
 8003fde:	f023 0320 	bic.w	r3, r3, #32
 8003fe2:	6023      	str	r3, [r4, #0]
 8003fe4:	e7f6      	b.n	8003fd4 <_printf_i+0x194>
 8003fe6:	4616      	mov	r6, r2
 8003fe8:	e7bd      	b.n	8003f66 <_printf_i+0x126>
 8003fea:	6833      	ldr	r3, [r6, #0]
 8003fec:	6825      	ldr	r5, [r4, #0]
 8003fee:	1d18      	adds	r0, r3, #4
 8003ff0:	6961      	ldr	r1, [r4, #20]
 8003ff2:	6030      	str	r0, [r6, #0]
 8003ff4:	062e      	lsls	r6, r5, #24
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	d501      	bpl.n	8003ffe <_printf_i+0x1be>
 8003ffa:	6019      	str	r1, [r3, #0]
 8003ffc:	e002      	b.n	8004004 <_printf_i+0x1c4>
 8003ffe:	0668      	lsls	r0, r5, #25
 8004000:	d5fb      	bpl.n	8003ffa <_printf_i+0x1ba>
 8004002:	8019      	strh	r1, [r3, #0]
 8004004:	2300      	movs	r3, #0
 8004006:	4616      	mov	r6, r2
 8004008:	6123      	str	r3, [r4, #16]
 800400a:	e7bc      	b.n	8003f86 <_printf_i+0x146>
 800400c:	6833      	ldr	r3, [r6, #0]
 800400e:	2100      	movs	r1, #0
 8004010:	1d1a      	adds	r2, r3, #4
 8004012:	6032      	str	r2, [r6, #0]
 8004014:	681e      	ldr	r6, [r3, #0]
 8004016:	6862      	ldr	r2, [r4, #4]
 8004018:	4630      	mov	r0, r6
 800401a:	f000 f859 	bl	80040d0 <memchr>
 800401e:	b108      	cbz	r0, 8004024 <_printf_i+0x1e4>
 8004020:	1b80      	subs	r0, r0, r6
 8004022:	6060      	str	r0, [r4, #4]
 8004024:	6863      	ldr	r3, [r4, #4]
 8004026:	6123      	str	r3, [r4, #16]
 8004028:	2300      	movs	r3, #0
 800402a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800402e:	e7aa      	b.n	8003f86 <_printf_i+0x146>
 8004030:	4632      	mov	r2, r6
 8004032:	4649      	mov	r1, r9
 8004034:	4640      	mov	r0, r8
 8004036:	6923      	ldr	r3, [r4, #16]
 8004038:	47d0      	blx	sl
 800403a:	3001      	adds	r0, #1
 800403c:	d0ad      	beq.n	8003f9a <_printf_i+0x15a>
 800403e:	6823      	ldr	r3, [r4, #0]
 8004040:	079b      	lsls	r3, r3, #30
 8004042:	d413      	bmi.n	800406c <_printf_i+0x22c>
 8004044:	68e0      	ldr	r0, [r4, #12]
 8004046:	9b03      	ldr	r3, [sp, #12]
 8004048:	4298      	cmp	r0, r3
 800404a:	bfb8      	it	lt
 800404c:	4618      	movlt	r0, r3
 800404e:	e7a6      	b.n	8003f9e <_printf_i+0x15e>
 8004050:	2301      	movs	r3, #1
 8004052:	4632      	mov	r2, r6
 8004054:	4649      	mov	r1, r9
 8004056:	4640      	mov	r0, r8
 8004058:	47d0      	blx	sl
 800405a:	3001      	adds	r0, #1
 800405c:	d09d      	beq.n	8003f9a <_printf_i+0x15a>
 800405e:	3501      	adds	r5, #1
 8004060:	68e3      	ldr	r3, [r4, #12]
 8004062:	9903      	ldr	r1, [sp, #12]
 8004064:	1a5b      	subs	r3, r3, r1
 8004066:	42ab      	cmp	r3, r5
 8004068:	dcf2      	bgt.n	8004050 <_printf_i+0x210>
 800406a:	e7eb      	b.n	8004044 <_printf_i+0x204>
 800406c:	2500      	movs	r5, #0
 800406e:	f104 0619 	add.w	r6, r4, #25
 8004072:	e7f5      	b.n	8004060 <_printf_i+0x220>
 8004074:	080047d3 	.word	0x080047d3
 8004078:	080047e4 	.word	0x080047e4

0800407c <memmove>:
 800407c:	4288      	cmp	r0, r1
 800407e:	b510      	push	{r4, lr}
 8004080:	eb01 0402 	add.w	r4, r1, r2
 8004084:	d902      	bls.n	800408c <memmove+0x10>
 8004086:	4284      	cmp	r4, r0
 8004088:	4623      	mov	r3, r4
 800408a:	d807      	bhi.n	800409c <memmove+0x20>
 800408c:	1e43      	subs	r3, r0, #1
 800408e:	42a1      	cmp	r1, r4
 8004090:	d008      	beq.n	80040a4 <memmove+0x28>
 8004092:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004096:	f803 2f01 	strb.w	r2, [r3, #1]!
 800409a:	e7f8      	b.n	800408e <memmove+0x12>
 800409c:	4601      	mov	r1, r0
 800409e:	4402      	add	r2, r0
 80040a0:	428a      	cmp	r2, r1
 80040a2:	d100      	bne.n	80040a6 <memmove+0x2a>
 80040a4:	bd10      	pop	{r4, pc}
 80040a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040ae:	e7f7      	b.n	80040a0 <memmove+0x24>

080040b0 <_sbrk_r>:
 80040b0:	b538      	push	{r3, r4, r5, lr}
 80040b2:	2300      	movs	r3, #0
 80040b4:	4d05      	ldr	r5, [pc, #20]	@ (80040cc <_sbrk_r+0x1c>)
 80040b6:	4604      	mov	r4, r0
 80040b8:	4608      	mov	r0, r1
 80040ba:	602b      	str	r3, [r5, #0]
 80040bc:	f7fc fe72 	bl	8000da4 <_sbrk>
 80040c0:	1c43      	adds	r3, r0, #1
 80040c2:	d102      	bne.n	80040ca <_sbrk_r+0x1a>
 80040c4:	682b      	ldr	r3, [r5, #0]
 80040c6:	b103      	cbz	r3, 80040ca <_sbrk_r+0x1a>
 80040c8:	6023      	str	r3, [r4, #0]
 80040ca:	bd38      	pop	{r3, r4, r5, pc}
 80040cc:	200006ac 	.word	0x200006ac

080040d0 <memchr>:
 80040d0:	4603      	mov	r3, r0
 80040d2:	b510      	push	{r4, lr}
 80040d4:	b2c9      	uxtb	r1, r1
 80040d6:	4402      	add	r2, r0
 80040d8:	4293      	cmp	r3, r2
 80040da:	4618      	mov	r0, r3
 80040dc:	d101      	bne.n	80040e2 <memchr+0x12>
 80040de:	2000      	movs	r0, #0
 80040e0:	e003      	b.n	80040ea <memchr+0x1a>
 80040e2:	7804      	ldrb	r4, [r0, #0]
 80040e4:	3301      	adds	r3, #1
 80040e6:	428c      	cmp	r4, r1
 80040e8:	d1f6      	bne.n	80040d8 <memchr+0x8>
 80040ea:	bd10      	pop	{r4, pc}

080040ec <_realloc_r>:
 80040ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040f0:	4607      	mov	r7, r0
 80040f2:	4614      	mov	r4, r2
 80040f4:	460d      	mov	r5, r1
 80040f6:	b921      	cbnz	r1, 8004102 <_realloc_r+0x16>
 80040f8:	4611      	mov	r1, r2
 80040fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040fe:	f7ff bc49 	b.w	8003994 <_malloc_r>
 8004102:	b92a      	cbnz	r2, 8004110 <_realloc_r+0x24>
 8004104:	f7ff fbdc 	bl	80038c0 <_free_r>
 8004108:	4625      	mov	r5, r4
 800410a:	4628      	mov	r0, r5
 800410c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004110:	f000 f81a 	bl	8004148 <_malloc_usable_size_r>
 8004114:	4284      	cmp	r4, r0
 8004116:	4606      	mov	r6, r0
 8004118:	d802      	bhi.n	8004120 <_realloc_r+0x34>
 800411a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800411e:	d8f4      	bhi.n	800410a <_realloc_r+0x1e>
 8004120:	4621      	mov	r1, r4
 8004122:	4638      	mov	r0, r7
 8004124:	f7ff fc36 	bl	8003994 <_malloc_r>
 8004128:	4680      	mov	r8, r0
 800412a:	b908      	cbnz	r0, 8004130 <_realloc_r+0x44>
 800412c:	4645      	mov	r5, r8
 800412e:	e7ec      	b.n	800410a <_realloc_r+0x1e>
 8004130:	42b4      	cmp	r4, r6
 8004132:	4622      	mov	r2, r4
 8004134:	4629      	mov	r1, r5
 8004136:	bf28      	it	cs
 8004138:	4632      	movcs	r2, r6
 800413a:	f7ff fbb3 	bl	80038a4 <memcpy>
 800413e:	4629      	mov	r1, r5
 8004140:	4638      	mov	r0, r7
 8004142:	f7ff fbbd 	bl	80038c0 <_free_r>
 8004146:	e7f1      	b.n	800412c <_realloc_r+0x40>

08004148 <_malloc_usable_size_r>:
 8004148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800414c:	1f18      	subs	r0, r3, #4
 800414e:	2b00      	cmp	r3, #0
 8004150:	bfbc      	itt	lt
 8004152:	580b      	ldrlt	r3, [r1, r0]
 8004154:	18c0      	addlt	r0, r0, r3
 8004156:	4770      	bx	lr

08004158 <_init>:
 8004158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415a:	bf00      	nop
 800415c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800415e:	bc08      	pop	{r3}
 8004160:	469e      	mov	lr, r3
 8004162:	4770      	bx	lr

08004164 <_fini>:
 8004164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004166:	bf00      	nop
 8004168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800416a:	bc08      	pop	{r3}
 800416c:	469e      	mov	lr, r3
 800416e:	4770      	bx	lr
