
HC_SR04_Ultrasonic_Sensing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005048  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  08005154  08005154  00006154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057fc  080057fc  0000705c  2**0
                  CONTENTS
  4 .ARM          00000000  080057fc  080057fc  0000705c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057fc  080057fc  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057fc  080057fc  000067fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005800  08005800  00006800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005804  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000680  2000005c  08005860  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006dc  08005860  000076dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e467  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f4  00000000  00000000  000154ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00017be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf4  00000000  00000000  00018b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d1d  00000000  00000000  0001974c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130e6  00000000  00000000  00032469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008db9f  00000000  00000000  0004554f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d30ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004514  00000000  00000000  000d3134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000d7648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800513c 	.word	0x0800513c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800513c 	.word	0x0800513c

0800014c <HC_SR04_Init>:

static inline void DWT_Delay_Init(void);
static inline void delay_us(uint32_t us);

void HC_SR04_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000150:	f000 f82e 	bl	80001b0 <DWT_Delay_Init>
}
 8000154:	bf00      	nop
 8000156:	bd80      	pop	{r7, pc}

08000158 <HC_SR04_Trigger>:

void HC_SR04_Trigger(void)
{
 8000158:	b580      	push	{r7, lr}
 800015a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);
 800015c:	2201      	movs	r2, #1
 800015e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000162:	4807      	ldr	r0, [pc, #28]	@ (8000180 <HC_SR04_Trigger+0x28>)
 8000164:	f001 fa74 	bl	8001650 <HAL_GPIO_WritePin>
	  delay_us(10);
 8000168:	200a      	movs	r0, #10
 800016a:	f000 f83b 	bl	80001e4 <delay_us>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
 800016e:	2200      	movs	r2, #0
 8000170:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000174:	4802      	ldr	r0, [pc, #8]	@ (8000180 <HC_SR04_Trigger+0x28>)
 8000176:	f001 fa6b 	bl	8001650 <HAL_GPIO_WritePin>
}
 800017a:	bf00      	nop
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	40010800 	.word	0x40010800

08000184 <HC_SR04_Distance_Calculate>:

uint16_t HC_SR04_Distance_Calculate(uint32_t pulse_us)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
	return (pulse_us+1) * 340/20000U;
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	3301      	adds	r3, #1
 8000190:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8000194:	fb02 f303 	mul.w	r3, r2, r3
 8000198:	4a04      	ldr	r2, [pc, #16]	@ (80001ac <HC_SR04_Distance_Calculate+0x28>)
 800019a:	fba2 2303 	umull	r2, r3, r2, r3
 800019e:	0b9b      	lsrs	r3, r3, #14
 80001a0:	b29b      	uxth	r3, r3
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	d1b71759 	.word	0xd1b71759

080001b0 <DWT_Delay_Init>:

static inline void DWT_Delay_Init(void){
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80001b4:	4b09      	ldr	r3, [pc, #36]	@ (80001dc <DWT_Delay_Init+0x2c>)
 80001b6:	68db      	ldr	r3, [r3, #12]
 80001b8:	4a08      	ldr	r2, [pc, #32]	@ (80001dc <DWT_Delay_Init+0x2c>)
 80001ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80001be:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 80001c0:	4b07      	ldr	r3, [pc, #28]	@ (80001e0 <DWT_Delay_Init+0x30>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80001c6:	4b06      	ldr	r3, [pc, #24]	@ (80001e0 <DWT_Delay_Init+0x30>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	4a05      	ldr	r2, [pc, #20]	@ (80001e0 <DWT_Delay_Init+0x30>)
 80001cc:	f043 0301 	orr.w	r3, r3, #1
 80001d0:	6013      	str	r3, [r2, #0]
}
 80001d2:	bf00      	nop
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	e000edf0 	.word	0xe000edf0
 80001e0:	e0001000 	.word	0xe0001000

080001e4 <delay_us>:

static inline void delay_us(uint32_t us){
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 80001ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000224 <delay_us+0x40>)
 80001ee:	685b      	ldr	r3, [r3, #4]
 80001f0:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * (SystemCoreClock/1000000U);
 80001f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000228 <delay_us+0x44>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a0d      	ldr	r2, [pc, #52]	@ (800022c <delay_us+0x48>)
 80001f8:	fba2 2303 	umull	r2, r3, r2, r3
 80001fc:	0c9a      	lsrs	r2, r3, #18
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	fb02 f303 	mul.w	r3, r2, r3
 8000204:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks);
 8000206:	bf00      	nop
 8000208:	4b06      	ldr	r3, [pc, #24]	@ (8000224 <delay_us+0x40>)
 800020a:	685a      	ldr	r2, [r3, #4]
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	1ad3      	subs	r3, r2, r3
 8000210:	68ba      	ldr	r2, [r7, #8]
 8000212:	429a      	cmp	r2, r3
 8000214:	d8f8      	bhi.n	8000208 <delay_us+0x24>
}
 8000216:	bf00      	nop
 8000218:	bf00      	nop
 800021a:	3714      	adds	r7, #20
 800021c:	46bd      	mov	sp, r7
 800021e:	bc80      	pop	{r7}
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	e0001000 	.word	0xe0001000
 8000228:	20000000 	.word	0x20000000
 800022c:	431bde83 	.word	0x431bde83

08000230 <oled_init>:
#include "stdio.h"
#include "main.h"


// OLED Initialization Function
void oled_init(void) {
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8000234:	f000 f88a 	bl	800034c <ssd1306_Init>
}
 8000238:	bf00      	nop
 800023a:	bd80      	pop	{r7, pc}

0800023c <oled_display_wavelength_distance_rtc>:


void oled_display_wavelength_distance_rtc(int wavelength, int distance, uint32_t rtc)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b08e      	sub	sp, #56	@ 0x38
 8000240:	af02      	add	r7, sp, #8
 8000242:	60f8      	str	r0, [r7, #12]
 8000244:	60b9      	str	r1, [r7, #8]
 8000246:	607a      	str	r2, [r7, #4]
    char buffer[30];
    ssd1306_Fill(Black);
 8000248:	2000      	movs	r0, #0
 800024a:	f000 f8e9 	bl	8000420 <ssd1306_Fill>

    ssd1306_SetCursor(2, 2);
 800024e:	2102      	movs	r1, #2
 8000250:	2002      	movs	r0, #2
 8000252:	f000 fa2d 	bl	80006b0 <ssd1306_SetCursor>
    sprintf(buffer, "wavelength: %d microseconds", wavelength);  // use %d for int
 8000256:	f107 0310 	add.w	r3, r7, #16
 800025a:	68fa      	ldr	r2, [r7, #12]
 800025c:	491b      	ldr	r1, [pc, #108]	@ (80002cc <oled_display_wavelength_distance_rtc+0x90>)
 800025e:	4618      	mov	r0, r3
 8000260:	f004 fabc 	bl	80047dc <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 8000264:	4b1a      	ldr	r3, [pc, #104]	@ (80002d0 <oled_display_wavelength_distance_rtc+0x94>)
 8000266:	f107 0010 	add.w	r0, r7, #16
 800026a:	2201      	movs	r2, #1
 800026c:	9200      	str	r2, [sp, #0]
 800026e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000270:	f000 f9f8 	bl	8000664 <ssd1306_WriteString>

    ssd1306_SetCursor(2, 12);
 8000274:	210c      	movs	r1, #12
 8000276:	2002      	movs	r0, #2
 8000278:	f000 fa1a 	bl	80006b0 <ssd1306_SetCursor>
    sprintf(buffer, "distance: %d cm", distance);      // use %% to print literal '%'
 800027c:	f107 0310 	add.w	r3, r7, #16
 8000280:	68ba      	ldr	r2, [r7, #8]
 8000282:	4914      	ldr	r1, [pc, #80]	@ (80002d4 <oled_display_wavelength_distance_rtc+0x98>)
 8000284:	4618      	mov	r0, r3
 8000286:	f004 faa9 	bl	80047dc <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 800028a:	4b11      	ldr	r3, [pc, #68]	@ (80002d0 <oled_display_wavelength_distance_rtc+0x94>)
 800028c:	f107 0010 	add.w	r0, r7, #16
 8000290:	2201      	movs	r2, #1
 8000292:	9200      	str	r2, [sp, #0]
 8000294:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000296:	f000 f9e5 	bl	8000664 <ssd1306_WriteString>

    ssd1306_SetCursor(2, 22);
 800029a:	2116      	movs	r1, #22
 800029c:	2002      	movs	r0, #2
 800029e:	f000 fa07 	bl	80006b0 <ssd1306_SetCursor>
    sprintf(buffer, "rtc: %ld ", rtc);      // use %% to print literal '%'
 80002a2:	f107 0310 	add.w	r3, r7, #16
 80002a6:	687a      	ldr	r2, [r7, #4]
 80002a8:	490b      	ldr	r1, [pc, #44]	@ (80002d8 <oled_display_wavelength_distance_rtc+0x9c>)
 80002aa:	4618      	mov	r0, r3
 80002ac:	f004 fa96 	bl	80047dc <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 80002b0:	4b07      	ldr	r3, [pc, #28]	@ (80002d0 <oled_display_wavelength_distance_rtc+0x94>)
 80002b2:	f107 0010 	add.w	r0, r7, #16
 80002b6:	2201      	movs	r2, #1
 80002b8:	9200      	str	r2, [sp, #0]
 80002ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80002bc:	f000 f9d2 	bl	8000664 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 80002c0:	f000 f8c6 	bl	8000450 <ssd1306_UpdateScreen>
}
 80002c4:	bf00      	nop
 80002c6:	3730      	adds	r7, #48	@ 0x30
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	08005154 	.word	0x08005154
 80002d0:	0800577c 	.word	0x0800577c
 80002d4:	08005170 	.word	0x08005170
 80002d8:	08005180 	.word	0x08005180

080002dc <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr

080002e8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b086      	sub	sp, #24
 80002ec:	af04      	add	r7, sp, #16
 80002ee:	4603      	mov	r3, r0
 80002f0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1,
 80002f2:	f04f 33ff 	mov.w	r3, #4294967295
 80002f6:	9302      	str	r3, [sp, #8]
 80002f8:	2301      	movs	r3, #1
 80002fa:	9301      	str	r3, [sp, #4]
 80002fc:	1dfb      	adds	r3, r7, #7
 80002fe:	9300      	str	r3, [sp, #0]
 8000300:	2301      	movs	r3, #1
 8000302:	2200      	movs	r2, #0
 8000304:	2178      	movs	r1, #120	@ 0x78
 8000306:	4803      	ldr	r0, [pc, #12]	@ (8000314 <ssd1306_WriteCommand+0x2c>)
 8000308:	f001 fafe 	bl	8001908 <HAL_I2C_Mem_Write>
			HAL_MAX_DELAY);
}
 800030c:	bf00      	nop
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20000480 	.word	0x20000480

08000318 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t *buffer, size_t buff_size) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af04      	add	r7, sp, #16
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer,
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	b29b      	uxth	r3, r3
 8000326:	f04f 32ff 	mov.w	r2, #4294967295
 800032a:	9202      	str	r2, [sp, #8]
 800032c:	9301      	str	r3, [sp, #4]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	2301      	movs	r3, #1
 8000334:	2240      	movs	r2, #64	@ 0x40
 8000336:	2178      	movs	r1, #120	@ 0x78
 8000338:	4803      	ldr	r0, [pc, #12]	@ (8000348 <ssd1306_WriteData+0x30>)
 800033a:	f001 fae5 	bl	8001908 <HAL_I2C_Mem_Write>
			buff_size, HAL_MAX_DELAY);
}
 800033e:	bf00      	nop
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20000480 	.word	0x20000480

0800034c <ssd1306_Init>:
	}
	return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8000350:	f7ff ffc4 	bl	80002dc <ssd1306_Reset>

	// Wait for the screen to boot
	HAL_Delay(100);
 8000354:	2064      	movs	r0, #100	@ 0x64
 8000356:	f000 fea9 	bl	80010ac <HAL_Delay>

	// Init OLED
	ssd1306_SetDisplayOn(0); //display off
 800035a:	2000      	movs	r0, #0
 800035c:	f000 f9d4 	bl	8000708 <ssd1306_SetDisplayOn>

	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000360:	2020      	movs	r0, #32
 8000362:	f7ff ffc1 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000366:	2000      	movs	r0, #0
 8000368:	f7ff ffbe 	bl	80002e8 <ssd1306_WriteCommand>
								// 10b,Page Addressing Mode (RESET); 11b,Invalid

	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800036c:	20b0      	movs	r0, #176	@ 0xb0
 800036e:	f7ff ffbb 	bl	80002e8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000372:	20c8      	movs	r0, #200	@ 0xc8
 8000374:	f7ff ffb8 	bl	80002e8 <ssd1306_WriteCommand>
#endif

	ssd1306_WriteCommand(0x00); //---set low column address
 8000378:	2000      	movs	r0, #0
 800037a:	f7ff ffb5 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 800037e:	2010      	movs	r0, #16
 8000380:	f7ff ffb2 	bl	80002e8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000384:	2040      	movs	r0, #64	@ 0x40
 8000386:	f7ff ffaf 	bl	80002e8 <ssd1306_WriteCommand>

	ssd1306_SetContrast(0xFF);
 800038a:	20ff      	movs	r0, #255	@ 0xff
 800038c:	f000 f9a8 	bl	80006e0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000390:	20a1      	movs	r0, #161	@ 0xa1
 8000392:	f7ff ffa9 	bl	80002e8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
	ssd1306_WriteCommand(0xA6); //--set normal color
 8000396:	20a6      	movs	r0, #166	@ 0xa6
 8000398:	f7ff ffa6 	bl	80002e8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800039c:	20a8      	movs	r0, #168	@ 0xa8
 800039e:	f7ff ffa3 	bl	80002e8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x3F); //
 80003a2:	203f      	movs	r0, #63	@ 0x3f
 80003a4:	f7ff ffa0 	bl	80002e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80003a8:	20a4      	movs	r0, #164	@ 0xa4
 80003aa:	f7ff ff9d 	bl	80002e8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80003ae:	20d3      	movs	r0, #211	@ 0xd3
 80003b0:	f7ff ff9a 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80003b4:	2000      	movs	r0, #0
 80003b6:	f7ff ff97 	bl	80002e8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80003ba:	20d5      	movs	r0, #213	@ 0xd5
 80003bc:	f7ff ff94 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80003c0:	20f0      	movs	r0, #240	@ 0xf0
 80003c2:	f7ff ff91 	bl	80002e8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80003c6:	20d9      	movs	r0, #217	@ 0xd9
 80003c8:	f7ff ff8e 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80003cc:	2022      	movs	r0, #34	@ 0x22
 80003ce:	f7ff ff8b 	bl	80002e8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80003d2:	20da      	movs	r0, #218	@ 0xda
 80003d4:	f7ff ff88 	bl	80002e8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x12);
 80003d8:	2012      	movs	r0, #18
 80003da:	f7ff ff85 	bl	80002e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xDB); //--set vcomh
 80003de:	20db      	movs	r0, #219	@ 0xdb
 80003e0:	f7ff ff82 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80003e4:	2020      	movs	r0, #32
 80003e6:	f7ff ff7f 	bl	80002e8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80003ea:	208d      	movs	r0, #141	@ 0x8d
 80003ec:	f7ff ff7c 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 80003f0:	2014      	movs	r0, #20
 80003f2:	f7ff ff79 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80003f6:	2001      	movs	r0, #1
 80003f8:	f000 f986 	bl	8000708 <ssd1306_SetDisplayOn>

	// Clear screen
	ssd1306_Fill(Black);
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f80f 	bl	8000420 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8000402:	f000 f825 	bl	8000450 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8000406:	4b05      	ldr	r3, [pc, #20]	@ (800041c <ssd1306_Init+0xd0>)
 8000408:	2200      	movs	r2, #0
 800040a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800040c:	4b03      	ldr	r3, [pc, #12]	@ (800041c <ssd1306_Init+0xd0>)
 800040e:	2200      	movs	r2, #0
 8000410:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8000412:	4b02      	ldr	r3, [pc, #8]	@ (800041c <ssd1306_Init+0xd0>)
 8000414:	2201      	movs	r2, #1
 8000416:	711a      	strb	r2, [r3, #4]
}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000478 	.word	0x20000478

08000420 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF,
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d101      	bne.n	8000434 <ssd1306_Fill+0x14>
 8000430:	2300      	movs	r3, #0
 8000432:	e000      	b.n	8000436 <ssd1306_Fill+0x16>
 8000434:	23ff      	movs	r3, #255	@ 0xff
 8000436:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800043a:	4619      	mov	r1, r3
 800043c:	4803      	ldr	r0, [pc, #12]	@ (800044c <ssd1306_Fill+0x2c>)
 800043e:	f004 f9ed 	bl	800481c <memset>
			sizeof(SSD1306_Buffer));
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	20000078 	.word	0x20000078

08000450 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
	// depends on the screen height:
	//
	//  * 32px   ==  4 pages
	//  * 64px   ==  8 pages
	//  * 128px  ==  16 pages
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 8000456:	2300      	movs	r3, #0
 8000458:	71fb      	strb	r3, [r7, #7]
 800045a:	e016      	b.n	800048a <ssd1306_UpdateScreen+0x3a>
		ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	3b50      	subs	r3, #80	@ 0x50
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ff40 	bl	80002e8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000468:	2000      	movs	r0, #0
 800046a:	f7ff ff3d 	bl	80002e8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800046e:	2010      	movs	r0, #16
 8000470:	f7ff ff3a 	bl	80002e8 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	01db      	lsls	r3, r3, #7
 8000478:	4a08      	ldr	r2, [pc, #32]	@ (800049c <ssd1306_UpdateScreen+0x4c>)
 800047a:	4413      	add	r3, r2
 800047c:	2180      	movs	r1, #128	@ 0x80
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff4a 	bl	8000318 <ssd1306_WriteData>
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	3301      	adds	r3, #1
 8000488:	71fb      	strb	r3, [r7, #7]
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	2b07      	cmp	r3, #7
 800048e:	d9e5      	bls.n	800045c <ssd1306_UpdateScreen+0xc>
	}
}
 8000490:	bf00      	nop
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	20000078 	.word	0x20000078

080004a0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]
 80004aa:	460b      	mov	r3, r1
 80004ac:	71bb      	strb	r3, [r7, #6]
 80004ae:	4613      	mov	r3, r2
 80004b0:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80004b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	db3d      	blt.n	8000536 <ssd1306_DrawPixel+0x96>
 80004ba:	79bb      	ldrb	r3, [r7, #6]
 80004bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80004be:	d83a      	bhi.n	8000536 <ssd1306_DrawPixel+0x96>
		// Don't write outside the buffer
		return;
	}

	// Draw in the right color
	if (color == White) {
 80004c0:	797b      	ldrb	r3, [r7, #5]
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d11a      	bne.n	80004fc <ssd1306_DrawPixel+0x5c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80004c6:	79fa      	ldrb	r2, [r7, #7]
 80004c8:	79bb      	ldrb	r3, [r7, #6]
 80004ca:	08db      	lsrs	r3, r3, #3
 80004cc:	b2d8      	uxtb	r0, r3
 80004ce:	4603      	mov	r3, r0
 80004d0:	01db      	lsls	r3, r3, #7
 80004d2:	4413      	add	r3, r2
 80004d4:	4a1a      	ldr	r2, [pc, #104]	@ (8000540 <ssd1306_DrawPixel+0xa0>)
 80004d6:	5cd3      	ldrb	r3, [r2, r3]
 80004d8:	b25a      	sxtb	r2, r3
 80004da:	79bb      	ldrb	r3, [r7, #6]
 80004dc:	f003 0307 	and.w	r3, r3, #7
 80004e0:	2101      	movs	r1, #1
 80004e2:	fa01 f303 	lsl.w	r3, r1, r3
 80004e6:	b25b      	sxtb	r3, r3
 80004e8:	4313      	orrs	r3, r2
 80004ea:	b259      	sxtb	r1, r3
 80004ec:	79fa      	ldrb	r2, [r7, #7]
 80004ee:	4603      	mov	r3, r0
 80004f0:	01db      	lsls	r3, r3, #7
 80004f2:	4413      	add	r3, r2
 80004f4:	b2c9      	uxtb	r1, r1
 80004f6:	4a12      	ldr	r2, [pc, #72]	@ (8000540 <ssd1306_DrawPixel+0xa0>)
 80004f8:	54d1      	strb	r1, [r2, r3]
 80004fa:	e01d      	b.n	8000538 <ssd1306_DrawPixel+0x98>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80004fc:	79fa      	ldrb	r2, [r7, #7]
 80004fe:	79bb      	ldrb	r3, [r7, #6]
 8000500:	08db      	lsrs	r3, r3, #3
 8000502:	b2d8      	uxtb	r0, r3
 8000504:	4603      	mov	r3, r0
 8000506:	01db      	lsls	r3, r3, #7
 8000508:	4413      	add	r3, r2
 800050a:	4a0d      	ldr	r2, [pc, #52]	@ (8000540 <ssd1306_DrawPixel+0xa0>)
 800050c:	5cd3      	ldrb	r3, [r2, r3]
 800050e:	b25a      	sxtb	r2, r3
 8000510:	79bb      	ldrb	r3, [r7, #6]
 8000512:	f003 0307 	and.w	r3, r3, #7
 8000516:	2101      	movs	r1, #1
 8000518:	fa01 f303 	lsl.w	r3, r1, r3
 800051c:	b25b      	sxtb	r3, r3
 800051e:	43db      	mvns	r3, r3
 8000520:	b25b      	sxtb	r3, r3
 8000522:	4013      	ands	r3, r2
 8000524:	b259      	sxtb	r1, r3
 8000526:	79fa      	ldrb	r2, [r7, #7]
 8000528:	4603      	mov	r3, r0
 800052a:	01db      	lsls	r3, r3, #7
 800052c:	4413      	add	r3, r2
 800052e:	b2c9      	uxtb	r1, r1
 8000530:	4a03      	ldr	r2, [pc, #12]	@ (8000540 <ssd1306_DrawPixel+0xa0>)
 8000532:	54d1      	strb	r1, [r2, r3]
 8000534:	e000      	b.n	8000538 <ssd1306_DrawPixel+0x98>
		return;
 8000536:	bf00      	nop
	}
}
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	20000078 	.word	0x20000078

08000544 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000544:	b590      	push	{r4, r7, lr}
 8000546:	b089      	sub	sp, #36	@ 0x24
 8000548:	af00      	add	r7, sp, #0
 800054a:	4604      	mov	r4, r0
 800054c:	4638      	mov	r0, r7
 800054e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000552:	4623      	mov	r3, r4
 8000554:	73fb      	strb	r3, [r7, #15]
	uint32_t i, b, j;

	// Check if character is valid
	if (ch < 32 || ch > 126)
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	2b1f      	cmp	r3, #31
 800055a:	d902      	bls.n	8000562 <ssd1306_WriteChar+0x1e>
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	2b7e      	cmp	r3, #126	@ 0x7e
 8000560:	d901      	bls.n	8000566 <ssd1306_WriteChar+0x22>
		return 0;
 8000562:	2300      	movs	r3, #0
 8000564:	e077      	b.n	8000656 <ssd1306_WriteChar+0x112>

	// Check remaining space on current line
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000566:	4b3e      	ldr	r3, [pc, #248]	@ (8000660 <ssd1306_WriteChar+0x11c>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	461a      	mov	r2, r3
 800056c:	783b      	ldrb	r3, [r7, #0]
 800056e:	4413      	add	r3, r2
 8000570:	2b80      	cmp	r3, #128	@ 0x80
 8000572:	dc06      	bgt.n	8000582 <ssd1306_WriteChar+0x3e>
	SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height)) {
 8000574:	4b3a      	ldr	r3, [pc, #232]	@ (8000660 <ssd1306_WriteChar+0x11c>)
 8000576:	885b      	ldrh	r3, [r3, #2]
 8000578:	461a      	mov	r2, r3
 800057a:	787b      	ldrb	r3, [r7, #1]
 800057c:	4413      	add	r3, r2
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800057e:	2b40      	cmp	r3, #64	@ 0x40
 8000580:	dd01      	ble.n	8000586 <ssd1306_WriteChar+0x42>
		// Not enough space on current line
		return 0;
 8000582:	2300      	movs	r3, #0
 8000584:	e067      	b.n	8000656 <ssd1306_WriteChar+0x112>
	}

	// Use the font to write
	for (i = 0; i < Font.height; i++) {
 8000586:	2300      	movs	r3, #0
 8000588:	61fb      	str	r3, [r7, #28]
 800058a:	e04e      	b.n	800062a <ssd1306_WriteChar+0xe6>
		b = Font.data[(ch - 32) * Font.height + i];
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	3b20      	subs	r3, #32
 8000592:	7879      	ldrb	r1, [r7, #1]
 8000594:	fb01 f303 	mul.w	r3, r1, r3
 8000598:	4619      	mov	r1, r3
 800059a:	69fb      	ldr	r3, [r7, #28]
 800059c:	440b      	add	r3, r1
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	4413      	add	r3, r2
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.width; j++) {
 80005a6:	2300      	movs	r3, #0
 80005a8:	61bb      	str	r3, [r7, #24]
 80005aa:	e036      	b.n	800061a <ssd1306_WriteChar+0xd6>
			if ((b << j) & 0x8000) {
 80005ac:	697a      	ldr	r2, [r7, #20]
 80005ae:	69bb      	ldr	r3, [r7, #24]
 80005b0:	fa02 f303 	lsl.w	r3, r2, r3
 80005b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d013      	beq.n	80005e4 <ssd1306_WriteChar+0xa0>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 80005bc:	4b28      	ldr	r3, [pc, #160]	@ (8000660 <ssd1306_WriteChar+0x11c>)
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	69bb      	ldr	r3, [r7, #24]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	4413      	add	r3, r2
 80005c8:	b2d8      	uxtb	r0, r3
 80005ca:	4b25      	ldr	r3, [pc, #148]	@ (8000660 <ssd1306_WriteChar+0x11c>)
 80005cc:	885b      	ldrh	r3, [r3, #2]
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	4413      	add	r3, r2
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80005dc:	4619      	mov	r1, r3
 80005de:	f7ff ff5f 	bl	80004a0 <ssd1306_DrawPixel>
 80005e2:	e017      	b.n	8000614 <ssd1306_WriteChar+0xd0>
						(SSD1306_COLOR) color);
			} else {
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 80005e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000660 <ssd1306_WriteChar+0x11c>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	69bb      	ldr	r3, [r7, #24]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	4413      	add	r3, r2
 80005f0:	b2d8      	uxtb	r0, r3
 80005f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000660 <ssd1306_WriteChar+0x11c>)
 80005f4:	885b      	ldrh	r3, [r3, #2]
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	69fb      	ldr	r3, [r7, #28]
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	4413      	add	r3, r2
 80005fe:	b2d9      	uxtb	r1, r3
 8000600:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000604:	2b00      	cmp	r3, #0
 8000606:	bf0c      	ite	eq
 8000608:	2301      	moveq	r3, #1
 800060a:	2300      	movne	r3, #0
 800060c:	b2db      	uxtb	r3, r3
 800060e:	461a      	mov	r2, r3
 8000610:	f7ff ff46 	bl	80004a0 <ssd1306_DrawPixel>
		for (j = 0; j < Font.width; j++) {
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	3301      	adds	r3, #1
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	783b      	ldrb	r3, [r7, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	69bb      	ldr	r3, [r7, #24]
 8000620:	4293      	cmp	r3, r2
 8000622:	d3c3      	bcc.n	80005ac <ssd1306_WriteChar+0x68>
	for (i = 0; i < Font.height; i++) {
 8000624:	69fb      	ldr	r3, [r7, #28]
 8000626:	3301      	adds	r3, #1
 8000628:	61fb      	str	r3, [r7, #28]
 800062a:	787b      	ldrb	r3, [r7, #1]
 800062c:	461a      	mov	r2, r3
 800062e:	69fb      	ldr	r3, [r7, #28]
 8000630:	4293      	cmp	r3, r2
 8000632:	d3ab      	bcc.n	800058c <ssd1306_WriteChar+0x48>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <ssd1306_WriteChar+0x11c>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	68ba      	ldr	r2, [r7, #8]
 800063a:	2a00      	cmp	r2, #0
 800063c:	d005      	beq.n	800064a <ssd1306_WriteChar+0x106>
 800063e:	68b9      	ldr	r1, [r7, #8]
 8000640:	7bfa      	ldrb	r2, [r7, #15]
 8000642:	3a20      	subs	r2, #32
 8000644:	440a      	add	r2, r1
 8000646:	7812      	ldrb	r2, [r2, #0]
 8000648:	e000      	b.n	800064c <ssd1306_WriteChar+0x108>
 800064a:	783a      	ldrb	r2, [r7, #0]
 800064c:	4413      	add	r3, r2
 800064e:	b29a      	uxth	r2, r3
 8000650:	4b03      	ldr	r3, [pc, #12]	@ (8000660 <ssd1306_WriteChar+0x11c>)
 8000652:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8000654:	7bfb      	ldrb	r3, [r7, #15]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3724      	adds	r7, #36	@ 0x24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd90      	pop	{r4, r7, pc}
 800065e:	bf00      	nop
 8000660:	20000478 	.word	0x20000478

08000664 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char *str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af02      	add	r7, sp, #8
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	4638      	mov	r0, r7
 800066e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	while (*str) {
 8000672:	e013      	b.n	800069c <ssd1306_WriteString+0x38>
		if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	7818      	ldrb	r0, [r3, #0]
 8000678:	7e3b      	ldrb	r3, [r7, #24]
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	463b      	mov	r3, r7
 800067e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000680:	f7ff ff60 	bl	8000544 <ssd1306_WriteChar>
 8000684:	4603      	mov	r3, r0
 8000686:	461a      	mov	r2, r3
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	429a      	cmp	r2, r3
 800068e:	d002      	beq.n	8000696 <ssd1306_WriteString+0x32>
			// Char could not be written
			return *str;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	e008      	b.n	80006a8 <ssd1306_WriteString+0x44>
		}
		str++;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	3301      	adds	r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1e7      	bne.n	8000674 <ssd1306_WriteString+0x10>
	}

	// Everything ok
	return *str;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	781b      	ldrb	r3, [r3, #0]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	460a      	mov	r2, r1
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	4613      	mov	r3, r2
 80006be:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	4b05      	ldr	r3, [pc, #20]	@ (80006dc <ssd1306_SetCursor+0x2c>)
 80006c6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80006c8:	79bb      	ldrb	r3, [r7, #6]
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	4b03      	ldr	r3, [pc, #12]	@ (80006dc <ssd1306_SetCursor+0x2c>)
 80006ce:	805a      	strh	r2, [r3, #2]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	20000478 	.word	0x20000478

080006e0 <ssd1306_SetContrast>:
		}
	}
	return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
	const uint8_t kSetContrastControlRegister = 0x81;
 80006ea:	2381      	movs	r3, #129	@ 0x81
 80006ec:	73fb      	strb	r3, [r7, #15]
	ssd1306_WriteCommand(kSetContrastControlRegister);
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fdf9 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(value);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff fdf5 	bl	80002e8 <ssd1306_WriteCommand>
}
 80006fe:	bf00      	nop
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	if (on) {
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d005      	beq.n	8000724 <ssd1306_SetDisplayOn+0x1c>
		value = 0xAF;   // Display on
 8000718:	23af      	movs	r3, #175	@ 0xaf
 800071a:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 1;
 800071c:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <ssd1306_SetDisplayOn+0x38>)
 800071e:	2201      	movs	r2, #1
 8000720:	715a      	strb	r2, [r3, #5]
 8000722:	e004      	b.n	800072e <ssd1306_SetDisplayOn+0x26>
	} else {
		value = 0xAE;   // Display off
 8000724:	23ae      	movs	r3, #174	@ 0xae
 8000726:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 0;
 8000728:	4b05      	ldr	r3, [pc, #20]	@ (8000740 <ssd1306_SetDisplayOn+0x38>)
 800072a:	2200      	movs	r2, #0
 800072c:	715a      	strb	r2, [r3, #5]
	}
	ssd1306_WriteCommand(value);
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fdd9 	bl	80002e8 <ssd1306_WriteCommand>
}
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000478 	.word	0x20000478

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000748:	f000 fc4e 	bl	8000fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074c:	f000 f880 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000750:	f000 fa18 	bl	8000b84 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000754:	f000 f8da 	bl	800090c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000758:	f000 f922 	bl	80009a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800075c:	f000 f978 	bl	8000a50 <MX_TIM2_Init>
  MX_RTC_Init();
 8000760:	f000 f902 	bl	8000968 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  oled_init();
 8000764:	f7ff fd64 	bl	8000230 <oled_init>
  HC_SR04_Init();
 8000768:	f7ff fcf0 	bl	800014c <HC_SR04_Init>


  distance_update_flag = 0;
 800076c:	4b2f      	ldr	r3, [pc, #188]	@ (800082c <main+0xe8>)
 800076e:	2200      	movs	r2, #0
 8000770:	701a      	strb	r2, [r3, #0]
    {
      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
  	  //trigger signal
  	  HC_SR04_Trigger(); // trigger the HC_SR04 chip
 8000772:	f7ff fcf1 	bl	8000158 <HC_SR04_Trigger>

  	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // activate the interrupt for the falling edge of the echo wave
 8000776:	2100      	movs	r1, #0
 8000778:	482d      	ldr	r0, [pc, #180]	@ (8000830 <main+0xec>)
 800077a:	f002 ffe7 	bl	800374c <HAL_TIM_IC_Start_IT>

  	  while(!distance_update_flag); // wait the measure to be done
 800077e:	bf00      	nop
 8000780:	4b2a      	ldr	r3, [pc, #168]	@ (800082c <main+0xe8>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d0fb      	beq.n	8000780 <main+0x3c>
  	  distance_update_flag = 0; // reset the flag for next run
 8000788:	4b28      	ldr	r3, [pc, #160]	@ (800082c <main+0xe8>)
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]

  	  HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 800078e:	2100      	movs	r1, #0
 8000790:	4827      	ldr	r0, [pc, #156]	@ (8000830 <main+0xec>)
 8000792:	f003 f8e7 	bl	8003964 <HAL_TIM_IC_Stop_IT>

  	  distance = HC_SR04_Distance_Calculate(pulse_us); //distance calculated in cm 325cm & 280cm
 8000796:	4b27      	ldr	r3, [pc, #156]	@ (8000834 <main+0xf0>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fcf2 	bl	8000184 <HC_SR04_Distance_Calculate>
 80007a0:	4603      	mov	r3, r0
 80007a2:	461a      	mov	r2, r3
 80007a4:	4b24      	ldr	r3, [pc, #144]	@ (8000838 <main+0xf4>)
 80007a6:	801a      	strh	r2, [r3, #0]

  	  HAL_RTC_GetTime(&hrtc,&this_type,RTC_FORMAT_BIN);
 80007a8:	2200      	movs	r2, #0
 80007aa:	4924      	ldr	r1, [pc, #144]	@ (800083c <main+0xf8>)
 80007ac:	4824      	ldr	r0, [pc, #144]	@ (8000840 <main+0xfc>)
 80007ae:	f002 fa61 	bl	8002c74 <HAL_RTC_GetTime>
  	  oled_display_wavelength_distance_rtc(pulse_us, distance, this_type.Seconds); // update oled
 80007b2:	4b20      	ldr	r3, [pc, #128]	@ (8000834 <main+0xf0>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000838 <main+0xf4>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	4b1f      	ldr	r3, [pc, #124]	@ (800083c <main+0xf8>)
 80007c0:	789b      	ldrb	r3, [r3, #2]
 80007c2:	461a      	mov	r2, r3
 80007c4:	f7ff fd3a 	bl	800023c <oled_display_wavelength_distance_rtc>

  	  // entering the sleep mode
  	  // 1.prepare to stop

  	  HAL_RTC_GetTime(&hrtc,&this_rtc_alarm.AlarmTime ,RTC_FORMAT_BIN);
 80007c8:	2200      	movs	r2, #0
 80007ca:	491e      	ldr	r1, [pc, #120]	@ (8000844 <main+0x100>)
 80007cc:	481c      	ldr	r0, [pc, #112]	@ (8000840 <main+0xfc>)
 80007ce:	f002 fa51 	bl	8002c74 <HAL_RTC_GetTime>
  	  // this code can cause minutes update issue, but As I just want to wake up the system
  	  //every 2 seconds, if you want to keep track of the time, please be weary of it
  	  this_rtc_alarm.AlarmTime.Seconds =(this_rtc_alarm.AlarmTime.Seconds+2)%60;
 80007d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000844 <main+0x100>)
 80007d4:	789b      	ldrb	r3, [r3, #2]
 80007d6:	1c9a      	adds	r2, r3, #2
 80007d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000848 <main+0x104>)
 80007da:	fb83 1302 	smull	r1, r3, r3, r2
 80007de:	4413      	add	r3, r2
 80007e0:	1159      	asrs	r1, r3, #5
 80007e2:	17d3      	asrs	r3, r2, #31
 80007e4:	1ac9      	subs	r1, r1, r3
 80007e6:	460b      	mov	r3, r1
 80007e8:	011b      	lsls	r3, r3, #4
 80007ea:	1a5b      	subs	r3, r3, r1
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	1ad1      	subs	r1, r2, r3
 80007f0:	b2ca      	uxtb	r2, r1
 80007f2:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <main+0x100>)
 80007f4:	709a      	strb	r2, [r3, #2]


  	  HAL_RTC_SetAlarm_IT(&hrtc,&this_rtc_alarm,RTC_FORMAT_BIN);
 80007f6:	2200      	movs	r2, #0
 80007f8:	4912      	ldr	r1, [pc, #72]	@ (8000844 <main+0x100>)
 80007fa:	4811      	ldr	r0, [pc, #68]	@ (8000840 <main+0xfc>)
 80007fc:	f002 fb12 	bl	8002e24 <HAL_RTC_SetAlarm_IT>

  	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000800:	4b12      	ldr	r3, [pc, #72]	@ (800084c <main+0x108>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a11      	ldr	r2, [pc, #68]	@ (800084c <main+0x108>)
 8000806:	f043 0304 	orr.w	r3, r3, #4
 800080a:	6013      	str	r3, [r2, #0]
  	  HAL_SuspendTick();
 800080c:	f000 fc72 	bl	80010f4 <HAL_SuspendTick>
  	  // 2. Enter STOP mode (system is off here until interrupt)
  	  HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000810:	2101      	movs	r1, #1
 8000812:	2000      	movs	r0, #0
 8000814:	f001 fbf4 	bl	8002000 <HAL_PWR_EnterSTOPMode>
  	  // 3.wake up the system and do the work
  	  SystemClock_Config();
 8000818:	f000 f81a 	bl	8000850 <SystemClock_Config>
  	  HAL_ResumeTick();
 800081c:	f000 fc78 	bl	8001110 <HAL_ResumeTick>
  	  HAL_RTC_DeactivateAlarm(&hrtc,RTC_ALARM_A);
 8000820:	2100      	movs	r1, #0
 8000822:	4807      	ldr	r0, [pc, #28]	@ (8000840 <main+0xfc>)
 8000824:	f002 fbb6 	bl	8002f94 <HAL_RTC_DeactivateAlarm>
  	  HC_SR04_Trigger(); // trigger the HC_SR04 chip
 8000828:	e7a3      	b.n	8000772 <main+0x2e>
 800082a:	bf00      	nop
 800082c:	2000057c 	.word	0x2000057c
 8000830:	20000530 	.word	0x20000530
 8000834:	20000578 	.word	0x20000578
 8000838:	2000057e 	.word	0x2000057e
 800083c:	20000580 	.word	0x20000580
 8000840:	200004d4 	.word	0x200004d4
 8000844:	20000584 	.word	0x20000584
 8000848:	88888889 	.word	0x88888889
 800084c:	40007000 	.word	0x40007000

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b094      	sub	sp, #80	@ 0x50
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800085a:	2228      	movs	r2, #40	@ 0x28
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f003 ffdc 	bl	800481c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000880:	2305      	movs	r3, #5
 8000882:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000884:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000888:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800088e:	2301      	movs	r3, #1
 8000890:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000892:	2301      	movs	r3, #1
 8000894:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000896:	2302      	movs	r3, #2
 8000898:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800089e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008a0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80008a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 fbda 	bl	8002064 <HAL_RCC_OscConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80008b6:	f000 f9c9 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ba:	230f      	movs	r3, #15
 80008bc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008be:	2302      	movs	r3, #2
 80008c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	2102      	movs	r1, #2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 fe46 	bl	8002568 <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008e2:	f000 f9b3 	bl	8000c4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008e6:	2301      	movs	r3, #1
 80008e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80008ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008ee:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 ffc6 	bl	8002884 <HAL_RCCEx_PeriphCLKConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80008fe:	f000 f9a5 	bl	8000c4c <Error_Handler>
  }
}
 8000902:	bf00      	nop
 8000904:	3750      	adds	r7, #80	@ 0x50
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000910:	4b12      	ldr	r3, [pc, #72]	@ (800095c <MX_I2C1_Init+0x50>)
 8000912:	4a13      	ldr	r2, [pc, #76]	@ (8000960 <MX_I2C1_Init+0x54>)
 8000914:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000916:	4b11      	ldr	r3, [pc, #68]	@ (800095c <MX_I2C1_Init+0x50>)
 8000918:	4a12      	ldr	r2, [pc, #72]	@ (8000964 <MX_I2C1_Init+0x58>)
 800091a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800091c:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <MX_I2C1_Init+0x50>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000922:	4b0e      	ldr	r3, [pc, #56]	@ (800095c <MX_I2C1_Init+0x50>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000928:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <MX_I2C1_Init+0x50>)
 800092a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800092e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000930:	4b0a      	ldr	r3, [pc, #40]	@ (800095c <MX_I2C1_Init+0x50>)
 8000932:	2200      	movs	r2, #0
 8000934:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000936:	4b09      	ldr	r3, [pc, #36]	@ (800095c <MX_I2C1_Init+0x50>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800093c:	4b07      	ldr	r3, [pc, #28]	@ (800095c <MX_I2C1_Init+0x50>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000942:	4b06      	ldr	r3, [pc, #24]	@ (800095c <MX_I2C1_Init+0x50>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	@ (800095c <MX_I2C1_Init+0x50>)
 800094a:	f000 fe99 	bl	8001680 <HAL_I2C_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000954:	f000 f97a 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000480 	.word	0x20000480
 8000960:	40005400 	.word	0x40005400
 8000964:	000186a0 	.word	0x000186a0

08000968 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800096c:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <MX_RTC_Init+0x30>)
 800096e:	4a0b      	ldr	r2, [pc, #44]	@ (800099c <MX_RTC_Init+0x34>)
 8000970:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000972:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <MX_RTC_Init+0x30>)
 8000974:	f04f 32ff 	mov.w	r2, #4294967295
 8000978:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800097a:	4b07      	ldr	r3, [pc, #28]	@ (8000998 <MX_RTC_Init+0x30>)
 800097c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000980:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	@ (8000998 <MX_RTC_Init+0x30>)
 8000984:	f002 f8ea 	bl	8002b5c <HAL_RTC_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 800098e:	f000 f95d 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200004d4 	.word	0x200004d4
 800099c:	40002800 	.word	0x40002800

080009a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b4:	463b      	mov	r3, r7
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009bc:	4b22      	ldr	r3, [pc, #136]	@ (8000a48 <MX_TIM1_Init+0xa8>)
 80009be:	4a23      	ldr	r2, [pc, #140]	@ (8000a4c <MX_TIM1_Init+0xac>)
 80009c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80009c2:	4b21      	ldr	r3, [pc, #132]	@ (8000a48 <MX_TIM1_Init+0xa8>)
 80009c4:	2247      	movs	r2, #71	@ 0x47
 80009c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a48 <MX_TIM1_Init+0xa8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10;
 80009ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000a48 <MX_TIM1_Init+0xa8>)
 80009d0:	220a      	movs	r2, #10
 80009d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <MX_TIM1_Init+0xa8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009da:	4b1b      	ldr	r3, [pc, #108]	@ (8000a48 <MX_TIM1_Init+0xa8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e0:	4b19      	ldr	r3, [pc, #100]	@ (8000a48 <MX_TIM1_Init+0xa8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009e6:	4818      	ldr	r0, [pc, #96]	@ (8000a48 <MX_TIM1_Init+0xa8>)
 80009e8:	f002 fe08 	bl	80035fc <HAL_TIM_Base_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80009f2:	f000 f92b 	bl	8000c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009fc:	f107 0308 	add.w	r3, r7, #8
 8000a00:	4619      	mov	r1, r3
 8000a02:	4811      	ldr	r0, [pc, #68]	@ (8000a48 <MX_TIM1_Init+0xa8>)
 8000a04:	f003 fa41 	bl	8003e8a <HAL_TIM_ConfigClockSource>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000a0e:	f000 f91d 	bl	8000c4c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000a12:	2108      	movs	r1, #8
 8000a14:	480c      	ldr	r0, [pc, #48]	@ (8000a48 <MX_TIM1_Init+0xa8>)
 8000a16:	f003 f853 	bl	8003ac0 <HAL_TIM_OnePulse_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000a20:	f000 f914 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a24:	2300      	movs	r3, #0
 8000a26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4805      	ldr	r0, [pc, #20]	@ (8000a48 <MX_TIM1_Init+0xa8>)
 8000a32:	f003 fe63 	bl	80046fc <HAL_TIMEx_MasterConfigSynchronization>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000a3c:	f000 f906 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	200004e8 	.word	0x200004e8
 8000a4c:	40012c00 	.word	0x40012c00

08000a50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b090      	sub	sp, #64	@ 0x40
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a56:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a8a:	4b3d      	ldr	r3, [pc, #244]	@ (8000b80 <MX_TIM2_Init+0x130>)
 8000a8c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000a92:	4b3b      	ldr	r3, [pc, #236]	@ (8000b80 <MX_TIM2_Init+0x130>)
 8000a94:	2247      	movs	r2, #71	@ 0x47
 8000a96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a98:	4b39      	ldr	r3, [pc, #228]	@ (8000b80 <MX_TIM2_Init+0x130>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a9e:	4b38      	ldr	r3, [pc, #224]	@ (8000b80 <MX_TIM2_Init+0x130>)
 8000aa0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000aa4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa6:	4b36      	ldr	r3, [pc, #216]	@ (8000b80 <MX_TIM2_Init+0x130>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aac:	4b34      	ldr	r3, [pc, #208]	@ (8000b80 <MX_TIM2_Init+0x130>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ab2:	4833      	ldr	r0, [pc, #204]	@ (8000b80 <MX_TIM2_Init+0x130>)
 8000ab4:	f002 fda2 	bl	80035fc <HAL_TIM_Base_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000abe:	f000 f8c5 	bl	8000c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ac6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ac8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000acc:	4619      	mov	r1, r3
 8000ace:	482c      	ldr	r0, [pc, #176]	@ (8000b80 <MX_TIM2_Init+0x130>)
 8000ad0:	f003 f9db 	bl	8003e8a <HAL_TIM_ConfigClockSource>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ada:	f000 f8b7 	bl	8000c4c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000ade:	4828      	ldr	r0, [pc, #160]	@ (8000b80 <MX_TIM2_Init+0x130>)
 8000ae0:	f002 fddb 	bl	800369a <HAL_TIM_IC_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000aea:	f000 f8af 	bl	8000c4c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000aee:	2304      	movs	r3, #4
 8000af0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8000af2:	2360      	movs	r3, #96	@ 0x60
 8000af4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	481e      	ldr	r0, [pc, #120]	@ (8000b80 <MX_TIM2_Init+0x130>)
 8000b06:	f003 fa87 	bl	8004018 <HAL_TIM_SlaveConfigSynchro>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8000b10:	f000 f89c 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	4817      	ldr	r0, [pc, #92]	@ (8000b80 <MX_TIM2_Init+0x130>)
 8000b24:	f003 fdea 	bl	80046fc <HAL_TIMEx_MasterConfigSynchronization>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000b2e:	f000 f88d 	bl	8000c4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b32:	2302      	movs	r3, #2
 8000b34:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000b36:	2302      	movs	r3, #2
 8000b38:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2200      	movs	r2, #0
 8000b46:	4619      	mov	r1, r3
 8000b48:	480d      	ldr	r0, [pc, #52]	@ (8000b80 <MX_TIM2_Init+0x130>)
 8000b4a:	f003 f902 	bl	8003d52 <HAL_TIM_IC_ConfigChannel>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000b54:	f000 f87a 	bl	8000c4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2204      	movs	r2, #4
 8000b64:	4619      	mov	r1, r3
 8000b66:	4806      	ldr	r0, [pc, #24]	@ (8000b80 <MX_TIM2_Init+0x130>)
 8000b68:	f003 f8f3 	bl	8003d52 <HAL_TIM_IC_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM2_Init+0x126>
  {
    Error_Handler();
 8000b72:	f000 f86b 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	3740      	adds	r7, #64	@ 0x40
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000530 	.word	0x20000530

08000b84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b98:	4b2a      	ldr	r3, [pc, #168]	@ (8000c44 <MX_GPIO_Init+0xc0>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a29      	ldr	r2, [pc, #164]	@ (8000c44 <MX_GPIO_Init+0xc0>)
 8000b9e:	f043 0310 	orr.w	r3, r3, #16
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b27      	ldr	r3, [pc, #156]	@ (8000c44 <MX_GPIO_Init+0xc0>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f003 0310 	and.w	r3, r3, #16
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb0:	4b24      	ldr	r3, [pc, #144]	@ (8000c44 <MX_GPIO_Init+0xc0>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	4a23      	ldr	r2, [pc, #140]	@ (8000c44 <MX_GPIO_Init+0xc0>)
 8000bb6:	f043 0320 	orr.w	r3, r3, #32
 8000bba:	6193      	str	r3, [r2, #24]
 8000bbc:	4b21      	ldr	r3, [pc, #132]	@ (8000c44 <MX_GPIO_Init+0xc0>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f003 0320 	and.w	r3, r3, #32
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c44 <MX_GPIO_Init+0xc0>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8000c44 <MX_GPIO_Init+0xc0>)
 8000bce:	f043 0304 	orr.w	r3, r3, #4
 8000bd2:	6193      	str	r3, [r2, #24]
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c44 <MX_GPIO_Init+0xc0>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f003 0304 	and.w	r3, r3, #4
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be0:	4b18      	ldr	r3, [pc, #96]	@ (8000c44 <MX_GPIO_Init+0xc0>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a17      	ldr	r2, [pc, #92]	@ (8000c44 <MX_GPIO_Init+0xc0>)
 8000be6:	f043 0308 	orr.w	r3, r3, #8
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b15      	ldr	r3, [pc, #84]	@ (8000c44 <MX_GPIO_Init+0xc0>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f003 0308 	and.w	r3, r3, #8
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bfe:	4812      	ldr	r0, [pc, #72]	@ (8000c48 <MX_GPIO_Init+0xc4>)
 8000c00:	f000 fd26 	bl	8001650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 0310 	add.w	r3, r7, #16
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	480a      	ldr	r0, [pc, #40]	@ (8000c48 <MX_GPIO_Init+0xc4>)
 8000c1e:	f000 fb93 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	4619      	mov	r1, r3
 8000c36:	4804      	ldr	r0, [pc, #16]	@ (8000c48 <MX_GPIO_Init+0xc4>)
 8000c38:	f000 fb86 	bl	8001348 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c3c:	bf00      	nop
 8000c3e:	3720      	adds	r7, #32
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40010800 	.word	0x40010800

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <Error_Handler+0x8>

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c5e:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <HAL_MspInit+0x5c>)
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	4a14      	ldr	r2, [pc, #80]	@ (8000cb4 <HAL_MspInit+0x5c>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6193      	str	r3, [r2, #24]
 8000c6a:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <HAL_MspInit+0x5c>)
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <HAL_MspInit+0x5c>)
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000cb4 <HAL_MspInit+0x5c>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c80:	61d3      	str	r3, [r2, #28]
 8000c82:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <HAL_MspInit+0x5c>)
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <HAL_MspInit+0x60>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	4a04      	ldr	r2, [pc, #16]	@ (8000cb8 <HAL_MspInit+0x60>)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000caa:	bf00      	nop
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40010000 	.word	0x40010000

08000cbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a15      	ldr	r2, [pc, #84]	@ (8000d2c <HAL_I2C_MspInit+0x70>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d123      	bne.n	8000d24 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cdc:	4b14      	ldr	r3, [pc, #80]	@ (8000d30 <HAL_I2C_MspInit+0x74>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a13      	ldr	r2, [pc, #76]	@ (8000d30 <HAL_I2C_MspInit+0x74>)
 8000ce2:	f043 0308 	orr.w	r3, r3, #8
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <HAL_I2C_MspInit+0x74>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0308 	and.w	r3, r3, #8
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cf4:	23c0      	movs	r3, #192	@ 0xc0
 8000cf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf8:	2312      	movs	r3, #18
 8000cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	4619      	mov	r1, r3
 8000d06:	480b      	ldr	r0, [pc, #44]	@ (8000d34 <HAL_I2C_MspInit+0x78>)
 8000d08:	f000 fb1e 	bl	8001348 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d0c:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <HAL_I2C_MspInit+0x74>)
 8000d0e:	69db      	ldr	r3, [r3, #28]
 8000d10:	4a07      	ldr	r2, [pc, #28]	@ (8000d30 <HAL_I2C_MspInit+0x74>)
 8000d12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d16:	61d3      	str	r3, [r2, #28]
 8000d18:	4b05      	ldr	r3, [pc, #20]	@ (8000d30 <HAL_I2C_MspInit+0x74>)
 8000d1a:	69db      	ldr	r3, [r3, #28]
 8000d1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d24:	bf00      	nop
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40005400 	.word	0x40005400
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40010c00 	.word	0x40010c00

08000d38 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a0f      	ldr	r2, [pc, #60]	@ (8000d84 <HAL_RTC_MspInit+0x4c>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d118      	bne.n	8000d7c <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000d4a:	f001 f94d 	bl	8001fe8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <HAL_RTC_MspInit+0x50>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	4a0d      	ldr	r2, [pc, #52]	@ (8000d88 <HAL_RTC_MspInit+0x50>)
 8000d54:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000d58:	61d3      	str	r3, [r2, #28]
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <HAL_RTC_MspInit+0x50>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d66:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <HAL_RTC_MspInit+0x54>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2029      	movs	r0, #41	@ 0x29
 8000d72:	f000 fab2 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000d76:	2029      	movs	r0, #41	@ 0x29
 8000d78:	f000 facb 	bl	8001312 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000d7c:	bf00      	nop
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40002800 	.word	0x40002800
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	4242043c 	.word	0x4242043c

08000d90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	@ 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0318 	add.w	r3, r7, #24
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a26      	ldr	r2, [pc, #152]	@ (8000e44 <HAL_TIM_Base_MspInit+0xb4>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d114      	bne.n	8000dda <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000db0:	4b25      	ldr	r3, [pc, #148]	@ (8000e48 <HAL_TIM_Base_MspInit+0xb8>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4a24      	ldr	r2, [pc, #144]	@ (8000e48 <HAL_TIM_Base_MspInit+0xb8>)
 8000db6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000dba:	6193      	str	r3, [r2, #24]
 8000dbc:	4b22      	ldr	r3, [pc, #136]	@ (8000e48 <HAL_TIM_Base_MspInit+0xb8>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2019      	movs	r0, #25
 8000dce:	f000 fa84 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000dd2:	2019      	movs	r0, #25
 8000dd4:	f000 fa9d 	bl	8001312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dd8:	e030      	b.n	8000e3c <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM2)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000de2:	d12b      	bne.n	8000e3c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000de4:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <HAL_TIM_Base_MspInit+0xb8>)
 8000de6:	69db      	ldr	r3, [r3, #28]
 8000de8:	4a17      	ldr	r2, [pc, #92]	@ (8000e48 <HAL_TIM_Base_MspInit+0xb8>)
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	61d3      	str	r3, [r2, #28]
 8000df0:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <HAL_TIM_Base_MspInit+0xb8>)
 8000df2:	69db      	ldr	r3, [r3, #28]
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <HAL_TIM_Base_MspInit+0xb8>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a11      	ldr	r2, [pc, #68]	@ (8000e48 <HAL_TIM_Base_MspInit+0xb8>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <HAL_TIM_Base_MspInit+0xb8>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 0318 	add.w	r3, r7, #24
 8000e24:	4619      	mov	r1, r3
 8000e26:	4809      	ldr	r0, [pc, #36]	@ (8000e4c <HAL_TIM_Base_MspInit+0xbc>)
 8000e28:	f000 fa8e 	bl	8001348 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2100      	movs	r1, #0
 8000e30:	201c      	movs	r0, #28
 8000e32:	f000 fa52 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e36:	201c      	movs	r0, #28
 8000e38:	f000 fa6b 	bl	8001312 <HAL_NVIC_EnableIRQ>
}
 8000e3c:	bf00      	nop
 8000e3e:	3728      	adds	r7, #40	@ 0x28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40012c00 	.word	0x40012c00
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40010800 	.word	0x40010800

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <NMI_Handler+0x4>

08000e58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <HardFault_Handler+0x4>

08000e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <MemManage_Handler+0x4>

08000e68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea0:	f000 f8e8 	bl	8001074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000eac:	4802      	ldr	r0, [pc, #8]	@ (8000eb8 <TIM1_UP_IRQHandler+0x10>)
 8000eae:	f002 fe60 	bl	8003b72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200004e8 	.word	0x200004e8

08000ebc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ec0:	4802      	ldr	r0, [pc, #8]	@ (8000ecc <TIM2_IRQHandler+0x10>)
 8000ec2:	f002 fe56 	bl	8003b72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000530 	.word	0x20000530

08000ed0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000ed4:	4802      	ldr	r0, [pc, #8]	@ (8000ee0 <RTC_Alarm_IRQHandler+0x10>)
 8000ed6:	f002 f8bd 	bl	8003054 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200004d4 	.word	0x200004d4

08000ee4 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
    if(htim->Instance==TIM2 && htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1){
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ef4:	d10d      	bne.n	8000f12 <HAL_TIM_IC_CaptureCallback+0x2e>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	7f1b      	ldrb	r3, [r3, #28]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d109      	bne.n	8000f12 <HAL_TIM_IC_CaptureCallback+0x2e>
        pulse_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000efe:	2100      	movs	r1, #0
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f003 f8cb 	bl	800409c <HAL_TIM_ReadCapturedValue>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4a04      	ldr	r2, [pc, #16]	@ (8000f1c <HAL_TIM_IC_CaptureCallback+0x38>)
 8000f0a:	6013      	str	r3, [r2, #0]
        distance_update_flag = 1;
 8000f0c:	4b04      	ldr	r3, [pc, #16]	@ (8000f20 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	701a      	strb	r2, [r3, #0]

    }
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000578 	.word	0x20000578
 8000f20:	2000057c 	.word	0x2000057c

08000f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f2c:	4a14      	ldr	r2, [pc, #80]	@ (8000f80 <_sbrk+0x5c>)
 8000f2e:	4b15      	ldr	r3, [pc, #84]	@ (8000f84 <_sbrk+0x60>)
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f38:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d102      	bne.n	8000f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f40:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <_sbrk+0x64>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	@ (8000f8c <_sbrk+0x68>)
 8000f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f46:	4b10      	ldr	r3, [pc, #64]	@ (8000f88 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d207      	bcs.n	8000f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f54:	f003 fc6a 	bl	800482c <__errno>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	e009      	b.n	8000f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f64:	4b08      	ldr	r3, [pc, #32]	@ (8000f88 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6a:	4b07      	ldr	r3, [pc, #28]	@ (8000f88 <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	4a05      	ldr	r2, [pc, #20]	@ (8000f88 <_sbrk+0x64>)
 8000f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f76:	68fb      	ldr	r3, [r7, #12]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20005000 	.word	0x20005000
 8000f84:	00000400 	.word	0x00000400
 8000f88:	2000058c 	.word	0x2000058c
 8000f8c:	200006e0 	.word	0x200006e0

08000f90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f9c:	f7ff fff8 	bl	8000f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa0:	480b      	ldr	r0, [pc, #44]	@ (8000fd0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fa2:	490c      	ldr	r1, [pc, #48]	@ (8000fd4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fa4:	4a0c      	ldr	r2, [pc, #48]	@ (8000fd8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa8:	e002      	b.n	8000fb0 <LoopCopyDataInit>

08000faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fae:	3304      	adds	r3, #4

08000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb4:	d3f9      	bcc.n	8000faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb6:	4a09      	ldr	r2, [pc, #36]	@ (8000fdc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fb8:	4c09      	ldr	r4, [pc, #36]	@ (8000fe0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fbc:	e001      	b.n	8000fc2 <LoopFillZerobss>

08000fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc0:	3204      	adds	r2, #4

08000fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc4:	d3fb      	bcc.n	8000fbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fc6:	f003 fc37 	bl	8004838 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fca:	f7ff fbbb 	bl	8000744 <main>
  bx lr
 8000fce:	4770      	bx	lr
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000fd8:	08005804 	.word	0x08005804
  ldr r2, =_sbss
 8000fdc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000fe0:	200006dc 	.word	0x200006dc

08000fe4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC1_2_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fec:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <HAL_Init+0x28>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a07      	ldr	r2, [pc, #28]	@ (8001010 <HAL_Init+0x28>)
 8000ff2:	f043 0310 	orr.w	r3, r3, #16
 8000ff6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f000 f963 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffe:	200f      	movs	r0, #15
 8001000:	f000 f808 	bl	8001014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001004:	f7ff fe28 	bl	8000c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40022000 	.word	0x40022000

08001014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800101c:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <HAL_InitTick+0x54>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b12      	ldr	r3, [pc, #72]	@ (800106c <HAL_InitTick+0x58>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4619      	mov	r1, r3
 8001026:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102a:	fbb3 f3f1 	udiv	r3, r3, r1
 800102e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f97b 	bl	800132e <HAL_SYSTICK_Config>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e00e      	b.n	8001060 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b0f      	cmp	r3, #15
 8001046:	d80a      	bhi.n	800105e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001048:	2200      	movs	r2, #0
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f000 f943 	bl	80012da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001054:	4a06      	ldr	r2, [pc, #24]	@ (8001070 <HAL_InitTick+0x5c>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	e000      	b.n	8001060 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000000 	.word	0x20000000
 800106c:	20000008 	.word	0x20000008
 8001070:	20000004 	.word	0x20000004

08001074 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001078:	4b05      	ldr	r3, [pc, #20]	@ (8001090 <HAL_IncTick+0x1c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <HAL_IncTick+0x20>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4413      	add	r3, r2
 8001084:	4a03      	ldr	r2, [pc, #12]	@ (8001094 <HAL_IncTick+0x20>)
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr
 8001090:	20000008 	.word	0x20000008
 8001094:	20000590 	.word	0x20000590

08001098 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b02      	ldr	r3, [pc, #8]	@ (80010a8 <HAL_GetTick+0x10>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	20000590 	.word	0x20000590

080010ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b4:	f7ff fff0 	bl	8001098 <HAL_GetTick>
 80010b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c4:	d005      	beq.n	80010d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c6:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <HAL_Delay+0x44>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010d2:	bf00      	nop
 80010d4:	f7ff ffe0 	bl	8001098 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d8f7      	bhi.n	80010d4 <HAL_Delay+0x28>
  {
  }
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008

080010f4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80010f8:	4b04      	ldr	r3, [pc, #16]	@ (800110c <HAL_SuspendTick+0x18>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a03      	ldr	r2, [pc, #12]	@ (800110c <HAL_SuspendTick+0x18>)
 80010fe:	f023 0302 	bic.w	r3, r3, #2
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	e000e010 	.word	0xe000e010

08001110 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001114:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <HAL_ResumeTick+0x18>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a03      	ldr	r2, [pc, #12]	@ (8001128 <HAL_ResumeTick+0x18>)
 800111a:	f043 0302 	orr.w	r3, r3, #2
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	e000e010 	.word	0xe000e010

0800112c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001148:	4013      	ands	r3, r2
 800114a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001154:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001158:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800115c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115e:	4a04      	ldr	r2, [pc, #16]	@ (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	60d3      	str	r3, [r2, #12]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001178:	4b04      	ldr	r3, [pc, #16]	@ (800118c <__NVIC_GetPriorityGrouping+0x18>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	f003 0307 	and.w	r3, r3, #7
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	db0b      	blt.n	80011ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	f003 021f 	and.w	r2, r3, #31
 80011a8:	4906      	ldr	r1, [pc, #24]	@ (80011c4 <__NVIC_EnableIRQ+0x34>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	095b      	lsrs	r3, r3, #5
 80011b0:	2001      	movs	r0, #1
 80011b2:	fa00 f202 	lsl.w	r2, r0, r2
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	e000e100 	.word	0xe000e100

080011c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db0a      	blt.n	80011f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	490c      	ldr	r1, [pc, #48]	@ (8001214 <__NVIC_SetPriority+0x4c>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f0:	e00a      	b.n	8001208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4908      	ldr	r1, [pc, #32]	@ (8001218 <__NVIC_SetPriority+0x50>)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	3b04      	subs	r3, #4
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	440b      	add	r3, r1
 8001206:	761a      	strb	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000e100 	.word	0xe000e100
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	@ 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f1c3 0307 	rsb	r3, r3, #7
 8001236:	2b04      	cmp	r3, #4
 8001238:	bf28      	it	cs
 800123a:	2304      	movcs	r3, #4
 800123c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3304      	adds	r3, #4
 8001242:	2b06      	cmp	r3, #6
 8001244:	d902      	bls.n	800124c <NVIC_EncodePriority+0x30>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3b03      	subs	r3, #3
 800124a:	e000      	b.n	800124e <NVIC_EncodePriority+0x32>
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	f04f 32ff 	mov.w	r2, #4294967295
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43d9      	mvns	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	4313      	orrs	r3, r2
         );
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	@ 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001290:	d301      	bcc.n	8001296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001292:	2301      	movs	r3, #1
 8001294:	e00f      	b.n	80012b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001296:	4a0a      	ldr	r2, [pc, #40]	@ (80012c0 <SysTick_Config+0x40>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129e:	210f      	movs	r1, #15
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f7ff ff90 	bl	80011c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a8:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <SysTick_Config+0x40>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <SysTick_Config+0x40>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff2d 	bl	800112c <__NVIC_SetPriorityGrouping>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ec:	f7ff ff42 	bl	8001174 <__NVIC_GetPriorityGrouping>
 80012f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f7ff ff90 	bl	800121c <NVIC_EncodePriority>
 80012fc:	4602      	mov	r2, r0
 80012fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff5f 	bl	80011c8 <__NVIC_SetPriority>
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff35 	bl	8001190 <__NVIC_EnableIRQ>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ffa2 	bl	8001280 <SysTick_Config>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001348:	b480      	push	{r7}
 800134a:	b08b      	sub	sp, #44	@ 0x2c
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001356:	2300      	movs	r3, #0
 8001358:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135a:	e169      	b.n	8001630 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800135c:	2201      	movs	r2, #1
 800135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	69fa      	ldr	r2, [r7, #28]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	429a      	cmp	r2, r3
 8001376:	f040 8158 	bne.w	800162a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	4a9a      	ldr	r2, [pc, #616]	@ (80015e8 <HAL_GPIO_Init+0x2a0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d05e      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 8001384:	4a98      	ldr	r2, [pc, #608]	@ (80015e8 <HAL_GPIO_Init+0x2a0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d875      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 800138a:	4a98      	ldr	r2, [pc, #608]	@ (80015ec <HAL_GPIO_Init+0x2a4>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d058      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 8001390:	4a96      	ldr	r2, [pc, #600]	@ (80015ec <HAL_GPIO_Init+0x2a4>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d86f      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 8001396:	4a96      	ldr	r2, [pc, #600]	@ (80015f0 <HAL_GPIO_Init+0x2a8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d052      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 800139c:	4a94      	ldr	r2, [pc, #592]	@ (80015f0 <HAL_GPIO_Init+0x2a8>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d869      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 80013a2:	4a94      	ldr	r2, [pc, #592]	@ (80015f4 <HAL_GPIO_Init+0x2ac>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d04c      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 80013a8:	4a92      	ldr	r2, [pc, #584]	@ (80015f4 <HAL_GPIO_Init+0x2ac>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d863      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 80013ae:	4a92      	ldr	r2, [pc, #584]	@ (80015f8 <HAL_GPIO_Init+0x2b0>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d046      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 80013b4:	4a90      	ldr	r2, [pc, #576]	@ (80015f8 <HAL_GPIO_Init+0x2b0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d85d      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 80013ba:	2b12      	cmp	r3, #18
 80013bc:	d82a      	bhi.n	8001414 <HAL_GPIO_Init+0xcc>
 80013be:	2b12      	cmp	r3, #18
 80013c0:	d859      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 80013c2:	a201      	add	r2, pc, #4	@ (adr r2, 80013c8 <HAL_GPIO_Init+0x80>)
 80013c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c8:	08001443 	.word	0x08001443
 80013cc:	0800141d 	.word	0x0800141d
 80013d0:	0800142f 	.word	0x0800142f
 80013d4:	08001471 	.word	0x08001471
 80013d8:	08001477 	.word	0x08001477
 80013dc:	08001477 	.word	0x08001477
 80013e0:	08001477 	.word	0x08001477
 80013e4:	08001477 	.word	0x08001477
 80013e8:	08001477 	.word	0x08001477
 80013ec:	08001477 	.word	0x08001477
 80013f0:	08001477 	.word	0x08001477
 80013f4:	08001477 	.word	0x08001477
 80013f8:	08001477 	.word	0x08001477
 80013fc:	08001477 	.word	0x08001477
 8001400:	08001477 	.word	0x08001477
 8001404:	08001477 	.word	0x08001477
 8001408:	08001477 	.word	0x08001477
 800140c:	08001425 	.word	0x08001425
 8001410:	08001439 	.word	0x08001439
 8001414:	4a79      	ldr	r2, [pc, #484]	@ (80015fc <HAL_GPIO_Init+0x2b4>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d013      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800141a:	e02c      	b.n	8001476 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	623b      	str	r3, [r7, #32]
          break;
 8001422:	e029      	b.n	8001478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	3304      	adds	r3, #4
 800142a:	623b      	str	r3, [r7, #32]
          break;
 800142c:	e024      	b.n	8001478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	3308      	adds	r3, #8
 8001434:	623b      	str	r3, [r7, #32]
          break;
 8001436:	e01f      	b.n	8001478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	330c      	adds	r3, #12
 800143e:	623b      	str	r3, [r7, #32]
          break;
 8001440:	e01a      	b.n	8001478 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d102      	bne.n	8001450 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800144a:	2304      	movs	r3, #4
 800144c:	623b      	str	r3, [r7, #32]
          break;
 800144e:	e013      	b.n	8001478 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d105      	bne.n	8001464 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001458:	2308      	movs	r3, #8
 800145a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69fa      	ldr	r2, [r7, #28]
 8001460:	611a      	str	r2, [r3, #16]
          break;
 8001462:	e009      	b.n	8001478 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001464:	2308      	movs	r3, #8
 8001466:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69fa      	ldr	r2, [r7, #28]
 800146c:	615a      	str	r2, [r3, #20]
          break;
 800146e:	e003      	b.n	8001478 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
          break;
 8001474:	e000      	b.n	8001478 <HAL_GPIO_Init+0x130>
          break;
 8001476:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	2bff      	cmp	r3, #255	@ 0xff
 800147c:	d801      	bhi.n	8001482 <HAL_GPIO_Init+0x13a>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	e001      	b.n	8001486 <HAL_GPIO_Init+0x13e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3304      	adds	r3, #4
 8001486:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	2bff      	cmp	r3, #255	@ 0xff
 800148c:	d802      	bhi.n	8001494 <HAL_GPIO_Init+0x14c>
 800148e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	e002      	b.n	800149a <HAL_GPIO_Init+0x152>
 8001494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001496:	3b08      	subs	r3, #8
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	210f      	movs	r1, #15
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	fa01 f303 	lsl.w	r3, r1, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	401a      	ands	r2, r3
 80014ac:	6a39      	ldr	r1, [r7, #32]
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	fa01 f303 	lsl.w	r3, r1, r3
 80014b4:	431a      	orrs	r2, r3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 80b1 	beq.w	800162a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001600 <HAL_GPIO_Init+0x2b8>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	4a4c      	ldr	r2, [pc, #304]	@ (8001600 <HAL_GPIO_Init+0x2b8>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6193      	str	r3, [r2, #24]
 80014d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001600 <HAL_GPIO_Init+0x2b8>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014e0:	4a48      	ldr	r2, [pc, #288]	@ (8001604 <HAL_GPIO_Init+0x2bc>)
 80014e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e4:	089b      	lsrs	r3, r3, #2
 80014e6:	3302      	adds	r3, #2
 80014e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	220f      	movs	r2, #15
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4013      	ands	r3, r2
 8001502:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a40      	ldr	r2, [pc, #256]	@ (8001608 <HAL_GPIO_Init+0x2c0>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d013      	beq.n	8001534 <HAL_GPIO_Init+0x1ec>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a3f      	ldr	r2, [pc, #252]	@ (800160c <HAL_GPIO_Init+0x2c4>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d00d      	beq.n	8001530 <HAL_GPIO_Init+0x1e8>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a3e      	ldr	r2, [pc, #248]	@ (8001610 <HAL_GPIO_Init+0x2c8>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d007      	beq.n	800152c <HAL_GPIO_Init+0x1e4>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a3d      	ldr	r2, [pc, #244]	@ (8001614 <HAL_GPIO_Init+0x2cc>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d101      	bne.n	8001528 <HAL_GPIO_Init+0x1e0>
 8001524:	2303      	movs	r3, #3
 8001526:	e006      	b.n	8001536 <HAL_GPIO_Init+0x1ee>
 8001528:	2304      	movs	r3, #4
 800152a:	e004      	b.n	8001536 <HAL_GPIO_Init+0x1ee>
 800152c:	2302      	movs	r3, #2
 800152e:	e002      	b.n	8001536 <HAL_GPIO_Init+0x1ee>
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <HAL_GPIO_Init+0x1ee>
 8001534:	2300      	movs	r3, #0
 8001536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001538:	f002 0203 	and.w	r2, r2, #3
 800153c:	0092      	lsls	r2, r2, #2
 800153e:	4093      	lsls	r3, r2
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	4313      	orrs	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001546:	492f      	ldr	r1, [pc, #188]	@ (8001604 <HAL_GPIO_Init+0x2bc>)
 8001548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154a:	089b      	lsrs	r3, r3, #2
 800154c:	3302      	adds	r3, #2
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001560:	4b2d      	ldr	r3, [pc, #180]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	492c      	ldr	r1, [pc, #176]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	608b      	str	r3, [r1, #8]
 800156c:	e006      	b.n	800157c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800156e:	4b2a      	ldr	r3, [pc, #168]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	43db      	mvns	r3, r3
 8001576:	4928      	ldr	r1, [pc, #160]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 8001578:	4013      	ands	r3, r2
 800157a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d006      	beq.n	8001596 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001588:	4b23      	ldr	r3, [pc, #140]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	4922      	ldr	r1, [pc, #136]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	60cb      	str	r3, [r1, #12]
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001596:	4b20      	ldr	r3, [pc, #128]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	43db      	mvns	r3, r3
 800159e:	491e      	ldr	r1, [pc, #120]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d006      	beq.n	80015be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015b0:	4b19      	ldr	r3, [pc, #100]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	4918      	ldr	r1, [pc, #96]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
 80015bc:	e006      	b.n	80015cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015be:	4b16      	ldr	r3, [pc, #88]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	4914      	ldr	r1, [pc, #80]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d021      	beq.n	800161c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	490e      	ldr	r1, [pc, #56]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	600b      	str	r3, [r1, #0]
 80015e4:	e021      	b.n	800162a <HAL_GPIO_Init+0x2e2>
 80015e6:	bf00      	nop
 80015e8:	10320000 	.word	0x10320000
 80015ec:	10310000 	.word	0x10310000
 80015f0:	10220000 	.word	0x10220000
 80015f4:	10210000 	.word	0x10210000
 80015f8:	10120000 	.word	0x10120000
 80015fc:	10110000 	.word	0x10110000
 8001600:	40021000 	.word	0x40021000
 8001604:	40010000 	.word	0x40010000
 8001608:	40010800 	.word	0x40010800
 800160c:	40010c00 	.word	0x40010c00
 8001610:	40011000 	.word	0x40011000
 8001614:	40011400 	.word	0x40011400
 8001618:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800161c:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <HAL_GPIO_Init+0x304>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	43db      	mvns	r3, r3
 8001624:	4909      	ldr	r1, [pc, #36]	@ (800164c <HAL_GPIO_Init+0x304>)
 8001626:	4013      	ands	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800162a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162c:	3301      	adds	r3, #1
 800162e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001636:	fa22 f303 	lsr.w	r3, r2, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	f47f ae8e 	bne.w	800135c <HAL_GPIO_Init+0x14>
  }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	372c      	adds	r7, #44	@ 0x2c
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	40010400 	.word	0x40010400

08001650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	807b      	strh	r3, [r7, #2]
 800165c:	4613      	mov	r3, r2
 800165e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001660:	787b      	ldrb	r3, [r7, #1]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001666:	887a      	ldrh	r2, [r7, #2]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800166c:	e003      	b.n	8001676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800166e:	887b      	ldrh	r3, [r7, #2]
 8001670:	041a      	lsls	r2, r3, #16
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	611a      	str	r2, [r3, #16]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e12b      	b.n	80018ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d106      	bne.n	80016ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff fb08 	bl	8000cbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2224      	movs	r2, #36	@ 0x24
 80016b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0201 	bic.w	r2, r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016e4:	f001 f888 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
 80016e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	4a81      	ldr	r2, [pc, #516]	@ (80018f4 <HAL_I2C_Init+0x274>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d807      	bhi.n	8001704 <HAL_I2C_Init+0x84>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4a80      	ldr	r2, [pc, #512]	@ (80018f8 <HAL_I2C_Init+0x278>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	bf94      	ite	ls
 80016fc:	2301      	movls	r3, #1
 80016fe:	2300      	movhi	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	e006      	b.n	8001712 <HAL_I2C_Init+0x92>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4a7d      	ldr	r2, [pc, #500]	@ (80018fc <HAL_I2C_Init+0x27c>)
 8001708:	4293      	cmp	r3, r2
 800170a:	bf94      	ite	ls
 800170c:	2301      	movls	r3, #1
 800170e:	2300      	movhi	r3, #0
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e0e7      	b.n	80018ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4a78      	ldr	r2, [pc, #480]	@ (8001900 <HAL_I2C_Init+0x280>)
 800171e:	fba2 2303 	umull	r2, r3, r2, r3
 8001722:	0c9b      	lsrs	r3, r3, #18
 8001724:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	430a      	orrs	r2, r1
 8001738:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4a6a      	ldr	r2, [pc, #424]	@ (80018f4 <HAL_I2C_Init+0x274>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d802      	bhi.n	8001754 <HAL_I2C_Init+0xd4>
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	3301      	adds	r3, #1
 8001752:	e009      	b.n	8001768 <HAL_I2C_Init+0xe8>
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800175a:	fb02 f303 	mul.w	r3, r2, r3
 800175e:	4a69      	ldr	r2, [pc, #420]	@ (8001904 <HAL_I2C_Init+0x284>)
 8001760:	fba2 2303 	umull	r2, r3, r2, r3
 8001764:	099b      	lsrs	r3, r3, #6
 8001766:	3301      	adds	r3, #1
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	430b      	orrs	r3, r1
 800176e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800177a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	495c      	ldr	r1, [pc, #368]	@ (80018f4 <HAL_I2C_Init+0x274>)
 8001784:	428b      	cmp	r3, r1
 8001786:	d819      	bhi.n	80017bc <HAL_I2C_Init+0x13c>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	1e59      	subs	r1, r3, #1
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	fbb1 f3f3 	udiv	r3, r1, r3
 8001796:	1c59      	adds	r1, r3, #1
 8001798:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800179c:	400b      	ands	r3, r1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00a      	beq.n	80017b8 <HAL_I2C_Init+0x138>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	1e59      	subs	r1, r3, #1
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80017b0:	3301      	adds	r3, #1
 80017b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b6:	e051      	b.n	800185c <HAL_I2C_Init+0x1dc>
 80017b8:	2304      	movs	r3, #4
 80017ba:	e04f      	b.n	800185c <HAL_I2C_Init+0x1dc>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d111      	bne.n	80017e8 <HAL_I2C_Init+0x168>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	1e58      	subs	r0, r3, #1
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6859      	ldr	r1, [r3, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	440b      	add	r3, r1
 80017d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017d6:	3301      	adds	r3, #1
 80017d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017dc:	2b00      	cmp	r3, #0
 80017de:	bf0c      	ite	eq
 80017e0:	2301      	moveq	r3, #1
 80017e2:	2300      	movne	r3, #0
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	e012      	b.n	800180e <HAL_I2C_Init+0x18e>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	1e58      	subs	r0, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6859      	ldr	r1, [r3, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	0099      	lsls	r1, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80017fe:	3301      	adds	r3, #1
 8001800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001804:	2b00      	cmp	r3, #0
 8001806:	bf0c      	ite	eq
 8001808:	2301      	moveq	r3, #1
 800180a:	2300      	movne	r3, #0
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_I2C_Init+0x196>
 8001812:	2301      	movs	r3, #1
 8001814:	e022      	b.n	800185c <HAL_I2C_Init+0x1dc>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10e      	bne.n	800183c <HAL_I2C_Init+0x1bc>
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	1e58      	subs	r0, r3, #1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6859      	ldr	r1, [r3, #4]
 8001826:	460b      	mov	r3, r1
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	440b      	add	r3, r1
 800182c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001830:	3301      	adds	r3, #1
 8001832:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001836:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800183a:	e00f      	b.n	800185c <HAL_I2C_Init+0x1dc>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	1e58      	subs	r0, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6859      	ldr	r1, [r3, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	0099      	lsls	r1, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001852:	3301      	adds	r3, #1
 8001854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001858:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	6809      	ldr	r1, [r1, #0]
 8001860:	4313      	orrs	r3, r2
 8001862:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69da      	ldr	r2, [r3, #28]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800188a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6911      	ldr	r1, [r2, #16]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68d2      	ldr	r2, [r2, #12]
 8001896:	4311      	orrs	r1, r2
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	430b      	orrs	r3, r1
 800189e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695a      	ldr	r2, [r3, #20]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0201 	orr.w	r2, r2, #1
 80018ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2220      	movs	r2, #32
 80018d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	000186a0 	.word	0x000186a0
 80018f8:	001e847f 	.word	0x001e847f
 80018fc:	003d08ff 	.word	0x003d08ff
 8001900:	431bde83 	.word	0x431bde83
 8001904:	10624dd3 	.word	0x10624dd3

08001908 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af02      	add	r7, sp, #8
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	4608      	mov	r0, r1
 8001912:	4611      	mov	r1, r2
 8001914:	461a      	mov	r2, r3
 8001916:	4603      	mov	r3, r0
 8001918:	817b      	strh	r3, [r7, #10]
 800191a:	460b      	mov	r3, r1
 800191c:	813b      	strh	r3, [r7, #8]
 800191e:	4613      	mov	r3, r2
 8001920:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001922:	f7ff fbb9 	bl	8001098 <HAL_GetTick>
 8001926:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b20      	cmp	r3, #32
 8001932:	f040 80d9 	bne.w	8001ae8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2319      	movs	r3, #25
 800193c:	2201      	movs	r2, #1
 800193e:	496d      	ldr	r1, [pc, #436]	@ (8001af4 <HAL_I2C_Mem_Write+0x1ec>)
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 f971 	bl	8001c28 <I2C_WaitOnFlagUntilTimeout>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800194c:	2302      	movs	r3, #2
 800194e:	e0cc      	b.n	8001aea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <HAL_I2C_Mem_Write+0x56>
 800195a:	2302      	movs	r3, #2
 800195c:	e0c5      	b.n	8001aea <HAL_I2C_Mem_Write+0x1e2>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b01      	cmp	r3, #1
 8001972:	d007      	beq.n	8001984 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0201 	orr.w	r2, r2, #1
 8001982:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001992:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2221      	movs	r2, #33	@ 0x21
 8001998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2240      	movs	r2, #64	@ 0x40
 80019a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6a3a      	ldr	r2, [r7, #32]
 80019ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80019b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4a4d      	ldr	r2, [pc, #308]	@ (8001af8 <HAL_I2C_Mem_Write+0x1f0>)
 80019c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019c6:	88f8      	ldrh	r0, [r7, #6]
 80019c8:	893a      	ldrh	r2, [r7, #8]
 80019ca:	8979      	ldrh	r1, [r7, #10]
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	4603      	mov	r3, r0
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f000 f890 	bl	8001afc <I2C_RequestMemoryWrite>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d052      	beq.n	8001a88 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e081      	b.n	8001aea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f000 fa36 	bl	8001e5c <I2C_WaitOnTXEFlagUntilTimeout>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00d      	beq.n	8001a12 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d107      	bne.n	8001a0e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e06b      	b.n	8001aea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a16:	781a      	ldrb	r2, [r3, #0]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	d11b      	bne.n	8001a88 <HAL_I2C_Mem_Write+0x180>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d017      	beq.n	8001a88 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5c:	781a      	ldrb	r2, [r3, #0]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a72:	3b01      	subs	r3, #1
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	3b01      	subs	r3, #1
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1aa      	bne.n	80019e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f000 fa29 	bl	8001eec <I2C_WaitOnBTFFlagUntilTimeout>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00d      	beq.n	8001abc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d107      	bne.n	8001ab8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ab6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e016      	b.n	8001aea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001aca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2220      	movs	r2, #32
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	e000      	b.n	8001aea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001ae8:	2302      	movs	r3, #2
  }
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	00100002 	.word	0x00100002
 8001af8:	ffff0000 	.word	0xffff0000

08001afc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af02      	add	r7, sp, #8
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	4608      	mov	r0, r1
 8001b06:	4611      	mov	r1, r2
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	817b      	strh	r3, [r7, #10]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	813b      	strh	r3, [r7, #8]
 8001b12:	4613      	mov	r3, r2
 8001b14:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 f878 	bl	8001c28 <I2C_WaitOnFlagUntilTimeout>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00d      	beq.n	8001b5a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b4c:	d103      	bne.n	8001b56 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b54:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e05f      	b.n	8001c1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b5a:	897b      	ldrh	r3, [r7, #10]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	461a      	mov	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001b68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6c:	6a3a      	ldr	r2, [r7, #32]
 8001b6e:	492d      	ldr	r1, [pc, #180]	@ (8001c24 <I2C_RequestMemoryWrite+0x128>)
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f000 f8d3 	bl	8001d1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e04c      	b.n	8001c1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b98:	6a39      	ldr	r1, [r7, #32]
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 f95e 	bl	8001e5c <I2C_WaitOnTXEFlagUntilTimeout>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00d      	beq.n	8001bc2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d107      	bne.n	8001bbe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e02b      	b.n	8001c1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d105      	bne.n	8001bd4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bc8:	893b      	ldrh	r3, [r7, #8]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	611a      	str	r2, [r3, #16]
 8001bd2:	e021      	b.n	8001c18 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001bd4:	893b      	ldrh	r3, [r7, #8]
 8001bd6:	0a1b      	lsrs	r3, r3, #8
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001be4:	6a39      	ldr	r1, [r7, #32]
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f000 f938 	bl	8001e5c <I2C_WaitOnTXEFlagUntilTimeout>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00d      	beq.n	8001c0e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d107      	bne.n	8001c0a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e005      	b.n	8001c1a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c0e:	893b      	ldrh	r3, [r7, #8]
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	00010002 	.word	0x00010002

08001c28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	4613      	mov	r3, r2
 8001c36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c38:	e048      	b.n	8001ccc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c40:	d044      	beq.n	8001ccc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c42:	f7ff fa29 	bl	8001098 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d302      	bcc.n	8001c58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d139      	bne.n	8001ccc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	0c1b      	lsrs	r3, r3, #16
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d10d      	bne.n	8001c7e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	43da      	mvns	r2, r3
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bf0c      	ite	eq
 8001c74:	2301      	moveq	r3, #1
 8001c76:	2300      	movne	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	e00c      	b.n	8001c98 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	43da      	mvns	r2, r3
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	bf0c      	ite	eq
 8001c90:	2301      	moveq	r3, #1
 8001c92:	2300      	movne	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	461a      	mov	r2, r3
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d116      	bne.n	8001ccc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb8:	f043 0220 	orr.w	r2, r3, #32
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e023      	b.n	8001d14 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	0c1b      	lsrs	r3, r3, #16
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d10d      	bne.n	8001cf2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	43da      	mvns	r2, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	bf0c      	ite	eq
 8001ce8:	2301      	moveq	r3, #1
 8001cea:	2300      	movne	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	e00c      	b.n	8001d0c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	43da      	mvns	r2, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	bf0c      	ite	eq
 8001d04:	2301      	moveq	r3, #1
 8001d06:	2300      	movne	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d093      	beq.n	8001c3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d2a:	e071      	b.n	8001e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d3a:	d123      	bne.n	8001d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d4a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d70:	f043 0204 	orr.w	r2, r3, #4
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e067      	b.n	8001e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d8a:	d041      	beq.n	8001e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d8c:	f7ff f984 	bl	8001098 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d302      	bcc.n	8001da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d136      	bne.n	8001e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	0c1b      	lsrs	r3, r3, #16
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d10c      	bne.n	8001dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	43da      	mvns	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	4013      	ands	r3, r2
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	bf14      	ite	ne
 8001dbe:	2301      	movne	r3, #1
 8001dc0:	2300      	moveq	r3, #0
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	e00b      	b.n	8001dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	43da      	mvns	r2, r3
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	bf14      	ite	ne
 8001dd8:	2301      	movne	r3, #1
 8001dda:	2300      	moveq	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d016      	beq.n	8001e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2220      	movs	r2, #32
 8001dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfc:	f043 0220 	orr.w	r2, r3, #32
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e021      	b.n	8001e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	0c1b      	lsrs	r3, r3, #16
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d10c      	bne.n	8001e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	43da      	mvns	r2, r3
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	4013      	ands	r3, r2
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf14      	ite	ne
 8001e2c:	2301      	movne	r3, #1
 8001e2e:	2300      	moveq	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	e00b      	b.n	8001e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	bf14      	ite	ne
 8001e46:	2301      	movne	r3, #1
 8001e48:	2300      	moveq	r3, #0
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f47f af6d 	bne.w	8001d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e68:	e034      	b.n	8001ed4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 f886 	bl	8001f7c <I2C_IsAcknowledgeFailed>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e034      	b.n	8001ee4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e80:	d028      	beq.n	8001ed4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e82:	f7ff f909 	bl	8001098 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d302      	bcc.n	8001e98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d11d      	bne.n	8001ed4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ea2:	2b80      	cmp	r3, #128	@ 0x80
 8001ea4:	d016      	beq.n	8001ed4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec0:	f043 0220 	orr.w	r2, r3, #32
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e007      	b.n	8001ee4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ede:	2b80      	cmp	r3, #128	@ 0x80
 8001ee0:	d1c3      	bne.n	8001e6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ef8:	e034      	b.n	8001f64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 f83e 	bl	8001f7c <I2C_IsAcknowledgeFailed>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e034      	b.n	8001f74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f10:	d028      	beq.n	8001f64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f12:	f7ff f8c1 	bl	8001098 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d302      	bcc.n	8001f28 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d11d      	bne.n	8001f64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d016      	beq.n	8001f64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f50:	f043 0220 	orr.w	r2, r3, #32
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e007      	b.n	8001f74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d1c3      	bne.n	8001efa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f92:	d11b      	bne.n	8001fcc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb8:	f043 0204 	orr.w	r2, r3, #4
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <PWR_OverloadWfe>:
static void PWR_OverloadWfe(void);

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  __asm volatile( "wfe" );
 8001fdc:	bf20      	wfe
  __asm volatile( "nop" );
 8001fde:	bf00      	nop
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001fec:	4b03      	ldr	r3, [pc, #12]	@ (8001ffc <HAL_PWR_EnableBkUpAccess+0x14>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	420e0020 	.word	0x420e0020

08002000 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 800200c:	4b13      	ldr	r3, [pc, #76]	@ (800205c <HAL_PWR_EnterSTOPMode+0x5c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a12      	ldr	r2, [pc, #72]	@ (800205c <HAL_PWR_EnterSTOPMode+0x5c>)
 8002012:	f023 0302 	bic.w	r3, r3, #2
 8002016:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 8002018:	4b10      	ldr	r3, [pc, #64]	@ (800205c <HAL_PWR_EnterSTOPMode+0x5c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f023 0201 	bic.w	r2, r3, #1
 8002020:	490e      	ldr	r1, [pc, #56]	@ (800205c <HAL_PWR_EnterSTOPMode+0x5c>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002028:	4b0d      	ldr	r3, [pc, #52]	@ (8002060 <HAL_PWR_EnterSTOPMode+0x60>)
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	4a0c      	ldr	r2, [pc, #48]	@ (8002060 <HAL_PWR_EnterSTOPMode+0x60>)
 800202e:	f043 0304 	orr.w	r3, r3, #4
 8002032:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_PWR_EnterSTOPMode+0x3e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800203a:	bf30      	wfi
 800203c:	e004      	b.n	8002048 <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800203e:	bf40      	sev
    PWR_OverloadWfe(); /* WFE redefine locally */
 8002040:	f7ff ffca 	bl	8001fd8 <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 8002044:	f7ff ffc8 	bl	8001fd8 <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002048:	4b05      	ldr	r3, [pc, #20]	@ (8002060 <HAL_PWR_EnterSTOPMode+0x60>)
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	4a04      	ldr	r2, [pc, #16]	@ (8002060 <HAL_PWR_EnterSTOPMode+0x60>)
 800204e:	f023 0304 	bic.w	r3, r3, #4
 8002052:	6113      	str	r3, [r2, #16]
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40007000 	.word	0x40007000
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e272      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 8087 	beq.w	8002192 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002084:	4b92      	ldr	r3, [pc, #584]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 030c 	and.w	r3, r3, #12
 800208c:	2b04      	cmp	r3, #4
 800208e:	d00c      	beq.n	80020aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002090:	4b8f      	ldr	r3, [pc, #572]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b08      	cmp	r3, #8
 800209a:	d112      	bne.n	80020c2 <HAL_RCC_OscConfig+0x5e>
 800209c:	4b8c      	ldr	r3, [pc, #560]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020a8:	d10b      	bne.n	80020c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020aa:	4b89      	ldr	r3, [pc, #548]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d06c      	beq.n	8002190 <HAL_RCC_OscConfig+0x12c>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d168      	bne.n	8002190 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e24c      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020ca:	d106      	bne.n	80020da <HAL_RCC_OscConfig+0x76>
 80020cc:	4b80      	ldr	r3, [pc, #512]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a7f      	ldr	r2, [pc, #508]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	e02e      	b.n	8002138 <HAL_RCC_OscConfig+0xd4>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10c      	bne.n	80020fc <HAL_RCC_OscConfig+0x98>
 80020e2:	4b7b      	ldr	r3, [pc, #492]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a7a      	ldr	r2, [pc, #488]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	4b78      	ldr	r3, [pc, #480]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a77      	ldr	r2, [pc, #476]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	e01d      	b.n	8002138 <HAL_RCC_OscConfig+0xd4>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002104:	d10c      	bne.n	8002120 <HAL_RCC_OscConfig+0xbc>
 8002106:	4b72      	ldr	r3, [pc, #456]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a71      	ldr	r2, [pc, #452]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800210c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	4b6f      	ldr	r3, [pc, #444]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a6e      	ldr	r2, [pc, #440]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e00b      	b.n	8002138 <HAL_RCC_OscConfig+0xd4>
 8002120:	4b6b      	ldr	r3, [pc, #428]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a6a      	ldr	r2, [pc, #424]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	4b68      	ldr	r3, [pc, #416]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a67      	ldr	r2, [pc, #412]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002132:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002136:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d013      	beq.n	8002168 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7fe ffaa 	bl	8001098 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002148:	f7fe ffa6 	bl	8001098 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	@ 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e200      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	4b5d      	ldr	r3, [pc, #372]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCC_OscConfig+0xe4>
 8002166:	e014      	b.n	8002192 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7fe ff96 	bl	8001098 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002170:	f7fe ff92 	bl	8001098 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	@ 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e1ec      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002182:	4b53      	ldr	r3, [pc, #332]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x10c>
 800218e:	e000      	b.n	8002192 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d063      	beq.n	8002266 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800219e:	4b4c      	ldr	r3, [pc, #304]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00b      	beq.n	80021c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021aa:	4b49      	ldr	r3, [pc, #292]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d11c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x18c>
 80021b6:	4b46      	ldr	r3, [pc, #280]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d116      	bne.n	80021f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c2:	4b43      	ldr	r3, [pc, #268]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d005      	beq.n	80021da <HAL_RCC_OscConfig+0x176>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d001      	beq.n	80021da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e1c0      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021da:	4b3d      	ldr	r3, [pc, #244]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4939      	ldr	r1, [pc, #228]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ee:	e03a      	b.n	8002266 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d020      	beq.n	800223a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f8:	4b36      	ldr	r3, [pc, #216]	@ (80022d4 <HAL_RCC_OscConfig+0x270>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7fe ff4b 	bl	8001098 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002206:	f7fe ff47 	bl	8001098 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e1a1      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002218:	4b2d      	ldr	r3, [pc, #180]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002224:	4b2a      	ldr	r3, [pc, #168]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	4927      	ldr	r1, [pc, #156]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002234:	4313      	orrs	r3, r2
 8002236:	600b      	str	r3, [r1, #0]
 8002238:	e015      	b.n	8002266 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223a:	4b26      	ldr	r3, [pc, #152]	@ (80022d4 <HAL_RCC_OscConfig+0x270>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7fe ff2a 	bl	8001098 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002248:	f7fe ff26 	bl	8001098 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e180      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225a:	4b1d      	ldr	r3, [pc, #116]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d03a      	beq.n	80022e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d019      	beq.n	80022ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227a:	4b17      	ldr	r3, [pc, #92]	@ (80022d8 <HAL_RCC_OscConfig+0x274>)
 800227c:	2201      	movs	r2, #1
 800227e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002280:	f7fe ff0a 	bl	8001098 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002288:	f7fe ff06 	bl	8001098 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e160      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229a:	4b0d      	ldr	r3, [pc, #52]	@ (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800229c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022a6:	2001      	movs	r0, #1
 80022a8:	f000 face 	bl	8002848 <RCC_Delay>
 80022ac:	e01c      	b.n	80022e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ae:	4b0a      	ldr	r3, [pc, #40]	@ (80022d8 <HAL_RCC_OscConfig+0x274>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b4:	f7fe fef0 	bl	8001098 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ba:	e00f      	b.n	80022dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022bc:	f7fe feec 	bl	8001098 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d908      	bls.n	80022dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e146      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000
 80022d4:	42420000 	.word	0x42420000
 80022d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022dc:	4b92      	ldr	r3, [pc, #584]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80022de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1e9      	bne.n	80022bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80a6 	beq.w	8002442 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022f6:	2300      	movs	r3, #0
 80022f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022fa:	4b8b      	ldr	r3, [pc, #556]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10d      	bne.n	8002322 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002306:	4b88      	ldr	r3, [pc, #544]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	4a87      	ldr	r2, [pc, #540]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 800230c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002310:	61d3      	str	r3, [r2, #28]
 8002312:	4b85      	ldr	r3, [pc, #532]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800231e:	2301      	movs	r3, #1
 8002320:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002322:	4b82      	ldr	r3, [pc, #520]	@ (800252c <HAL_RCC_OscConfig+0x4c8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800232a:	2b00      	cmp	r3, #0
 800232c:	d118      	bne.n	8002360 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800232e:	4b7f      	ldr	r3, [pc, #508]	@ (800252c <HAL_RCC_OscConfig+0x4c8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a7e      	ldr	r2, [pc, #504]	@ (800252c <HAL_RCC_OscConfig+0x4c8>)
 8002334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800233a:	f7fe fead 	bl	8001098 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002342:	f7fe fea9 	bl	8001098 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b64      	cmp	r3, #100	@ 0x64
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e103      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002354:	4b75      	ldr	r3, [pc, #468]	@ (800252c <HAL_RCC_OscConfig+0x4c8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d106      	bne.n	8002376 <HAL_RCC_OscConfig+0x312>
 8002368:	4b6f      	ldr	r3, [pc, #444]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	4a6e      	ldr	r2, [pc, #440]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6213      	str	r3, [r2, #32]
 8002374:	e02d      	b.n	80023d2 <HAL_RCC_OscConfig+0x36e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10c      	bne.n	8002398 <HAL_RCC_OscConfig+0x334>
 800237e:	4b6a      	ldr	r3, [pc, #424]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	4a69      	ldr	r2, [pc, #420]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	f023 0301 	bic.w	r3, r3, #1
 8002388:	6213      	str	r3, [r2, #32]
 800238a:	4b67      	ldr	r3, [pc, #412]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	4a66      	ldr	r2, [pc, #408]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002390:	f023 0304 	bic.w	r3, r3, #4
 8002394:	6213      	str	r3, [r2, #32]
 8002396:	e01c      	b.n	80023d2 <HAL_RCC_OscConfig+0x36e>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b05      	cmp	r3, #5
 800239e:	d10c      	bne.n	80023ba <HAL_RCC_OscConfig+0x356>
 80023a0:	4b61      	ldr	r3, [pc, #388]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	4a60      	ldr	r2, [pc, #384]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	f043 0304 	orr.w	r3, r3, #4
 80023aa:	6213      	str	r3, [r2, #32]
 80023ac:	4b5e      	ldr	r3, [pc, #376]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	6213      	str	r3, [r2, #32]
 80023b8:	e00b      	b.n	80023d2 <HAL_RCC_OscConfig+0x36e>
 80023ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4a5a      	ldr	r2, [pc, #360]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	f023 0301 	bic.w	r3, r3, #1
 80023c4:	6213      	str	r3, [r2, #32]
 80023c6:	4b58      	ldr	r3, [pc, #352]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4a57      	ldr	r2, [pc, #348]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	f023 0304 	bic.w	r3, r3, #4
 80023d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d015      	beq.n	8002406 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023da:	f7fe fe5d 	bl	8001098 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e0:	e00a      	b.n	80023f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e2:	f7fe fe59 	bl	8001098 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e0b1      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0ee      	beq.n	80023e2 <HAL_RCC_OscConfig+0x37e>
 8002404:	e014      	b.n	8002430 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002406:	f7fe fe47 	bl	8001098 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240c:	e00a      	b.n	8002424 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240e:	f7fe fe43 	bl	8001098 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800241c:	4293      	cmp	r3, r2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e09b      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002424:	4b40      	ldr	r3, [pc, #256]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1ee      	bne.n	800240e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002430:	7dfb      	ldrb	r3, [r7, #23]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d105      	bne.n	8002442 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002436:	4b3c      	ldr	r3, [pc, #240]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	4a3b      	ldr	r2, [pc, #236]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002440:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 8087 	beq.w	800255a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800244c:	4b36      	ldr	r3, [pc, #216]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 030c 	and.w	r3, r3, #12
 8002454:	2b08      	cmp	r3, #8
 8002456:	d061      	beq.n	800251c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d146      	bne.n	80024ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002460:	4b33      	ldr	r3, [pc, #204]	@ (8002530 <HAL_RCC_OscConfig+0x4cc>)
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002466:	f7fe fe17 	bl	8001098 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246e:	f7fe fe13 	bl	8001098 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e06d      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002480:	4b29      	ldr	r3, [pc, #164]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f0      	bne.n	800246e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002494:	d108      	bne.n	80024a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002496:	4b24      	ldr	r3, [pc, #144]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	4921      	ldr	r1, [pc, #132]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a19      	ldr	r1, [r3, #32]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b8:	430b      	orrs	r3, r1
 80024ba:	491b      	ldr	r1, [pc, #108]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002530 <HAL_RCC_OscConfig+0x4cc>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c6:	f7fe fde7 	bl	8001098 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ce:	f7fe fde3 	bl	8001098 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e03d      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e0:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x46a>
 80024ec:	e035      	b.n	800255a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ee:	4b10      	ldr	r3, [pc, #64]	@ (8002530 <HAL_RCC_OscConfig+0x4cc>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7fe fdd0 	bl	8001098 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fc:	f7fe fdcc 	bl	8001098 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e026      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800250e:	4b06      	ldr	r3, [pc, #24]	@ (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x498>
 800251a:	e01e      	b.n	800255a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d107      	bne.n	8002534 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e019      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
 8002528:	40021000 	.word	0x40021000
 800252c:	40007000 	.word	0x40007000
 8002530:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002534:	4b0b      	ldr	r3, [pc, #44]	@ (8002564 <HAL_RCC_OscConfig+0x500>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	429a      	cmp	r2, r3
 8002546:	d106      	bne.n	8002556 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d001      	beq.n	800255a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40021000 	.word	0x40021000

08002568 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0d0      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800257c:	4b6a      	ldr	r3, [pc, #424]	@ (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d910      	bls.n	80025ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b67      	ldr	r3, [pc, #412]	@ (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 0207 	bic.w	r2, r3, #7
 8002592:	4965      	ldr	r1, [pc, #404]	@ (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259a:	4b63      	ldr	r3, [pc, #396]	@ (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0b8      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d020      	beq.n	80025fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c4:	4b59      	ldr	r3, [pc, #356]	@ (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	4a58      	ldr	r2, [pc, #352]	@ (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d005      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025dc:	4b53      	ldr	r3, [pc, #332]	@ (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4a52      	ldr	r2, [pc, #328]	@ (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80025e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e8:	4b50      	ldr	r3, [pc, #320]	@ (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	494d      	ldr	r1, [pc, #308]	@ (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d040      	beq.n	8002688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d107      	bne.n	800261e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260e:	4b47      	ldr	r3, [pc, #284]	@ (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d115      	bne.n	8002646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e07f      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d107      	bne.n	8002636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002626:	4b41      	ldr	r3, [pc, #260]	@ (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e073      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002636:	4b3d      	ldr	r3, [pc, #244]	@ (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e06b      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002646:	4b39      	ldr	r3, [pc, #228]	@ (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f023 0203 	bic.w	r2, r3, #3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	4936      	ldr	r1, [pc, #216]	@ (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	4313      	orrs	r3, r2
 8002656:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002658:	f7fe fd1e 	bl	8001098 <HAL_GetTick>
 800265c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265e:	e00a      	b.n	8002676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002660:	f7fe fd1a 	bl	8001098 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800266e:	4293      	cmp	r3, r2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e053      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002676:	4b2d      	ldr	r3, [pc, #180]	@ (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 020c 	and.w	r2, r3, #12
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	429a      	cmp	r2, r3
 8002686:	d1eb      	bne.n	8002660 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002688:	4b27      	ldr	r3, [pc, #156]	@ (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d210      	bcs.n	80026b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002696:	4b24      	ldr	r3, [pc, #144]	@ (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 0207 	bic.w	r2, r3, #7
 800269e:	4922      	ldr	r1, [pc, #136]	@ (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a6:	4b20      	ldr	r3, [pc, #128]	@ (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e032      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c4:	4b19      	ldr	r3, [pc, #100]	@ (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4916      	ldr	r1, [pc, #88]	@ (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d009      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026e2:	4b12      	ldr	r3, [pc, #72]	@ (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	490e      	ldr	r1, [pc, #56]	@ (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026f6:	f000 f821 	bl	800273c <HAL_RCC_GetSysClockFreq>
 80026fa:	4602      	mov	r2, r0
 80026fc:	4b0b      	ldr	r3, [pc, #44]	@ (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	490a      	ldr	r1, [pc, #40]	@ (8002730 <HAL_RCC_ClockConfig+0x1c8>)
 8002708:	5ccb      	ldrb	r3, [r1, r3]
 800270a:	fa22 f303 	lsr.w	r3, r2, r3
 800270e:	4a09      	ldr	r2, [pc, #36]	@ (8002734 <HAL_RCC_ClockConfig+0x1cc>)
 8002710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002712:	4b09      	ldr	r3, [pc, #36]	@ (8002738 <HAL_RCC_ClockConfig+0x1d0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe fc7c 	bl	8001014 <HAL_InitTick>

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40022000 	.word	0x40022000
 800272c:	40021000 	.word	0x40021000
 8002730:	08005788 	.word	0x08005788
 8002734:	20000000 	.word	0x20000000
 8002738:	20000004 	.word	0x20000004

0800273c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	2300      	movs	r3, #0
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	2300      	movs	r3, #0
 8002750:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002756:	4b1e      	ldr	r3, [pc, #120]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 030c 	and.w	r3, r3, #12
 8002762:	2b04      	cmp	r3, #4
 8002764:	d002      	beq.n	800276c <HAL_RCC_GetSysClockFreq+0x30>
 8002766:	2b08      	cmp	r3, #8
 8002768:	d003      	beq.n	8002772 <HAL_RCC_GetSysClockFreq+0x36>
 800276a:	e027      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800276c:	4b19      	ldr	r3, [pc, #100]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800276e:	613b      	str	r3, [r7, #16]
      break;
 8002770:	e027      	b.n	80027c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	0c9b      	lsrs	r3, r3, #18
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	4a17      	ldr	r2, [pc, #92]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800277c:	5cd3      	ldrb	r3, [r2, r3]
 800277e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d010      	beq.n	80027ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800278a:	4b11      	ldr	r3, [pc, #68]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	0c5b      	lsrs	r3, r3, #17
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	4a11      	ldr	r2, [pc, #68]	@ (80027dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002796:	5cd3      	ldrb	r3, [r2, r3]
 8002798:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a0d      	ldr	r2, [pc, #52]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800279e:	fb03 f202 	mul.w	r2, r3, r2
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	e004      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a0c      	ldr	r2, [pc, #48]	@ (80027e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027b0:	fb02 f303 	mul.w	r3, r2, r3
 80027b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	613b      	str	r3, [r7, #16]
      break;
 80027ba:	e002      	b.n	80027c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027bc:	4b05      	ldr	r3, [pc, #20]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80027be:	613b      	str	r3, [r7, #16]
      break;
 80027c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027c2:	693b      	ldr	r3, [r7, #16]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	371c      	adds	r7, #28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000
 80027d4:	007a1200 	.word	0x007a1200
 80027d8:	080057a0 	.word	0x080057a0
 80027dc:	080057b0 	.word	0x080057b0
 80027e0:	003d0900 	.word	0x003d0900

080027e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e8:	4b02      	ldr	r3, [pc, #8]	@ (80027f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr
 80027f4:	20000000 	.word	0x20000000

080027f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027fc:	f7ff fff2 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 8002800:	4602      	mov	r2, r0
 8002802:	4b05      	ldr	r3, [pc, #20]	@ (8002818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	0a1b      	lsrs	r3, r3, #8
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	4903      	ldr	r1, [pc, #12]	@ (800281c <HAL_RCC_GetPCLK1Freq+0x24>)
 800280e:	5ccb      	ldrb	r3, [r1, r3]
 8002810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002814:	4618      	mov	r0, r3
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40021000 	.word	0x40021000
 800281c:	08005798 	.word	0x08005798

08002820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002824:	f7ff ffde 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 8002828:	4602      	mov	r2, r0
 800282a:	4b05      	ldr	r3, [pc, #20]	@ (8002840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	0adb      	lsrs	r3, r3, #11
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	4903      	ldr	r1, [pc, #12]	@ (8002844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002836:	5ccb      	ldrb	r3, [r1, r3]
 8002838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800283c:	4618      	mov	r0, r3
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40021000 	.word	0x40021000
 8002844:	08005798 	.word	0x08005798

08002848 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002850:	4b0a      	ldr	r3, [pc, #40]	@ (800287c <RCC_Delay+0x34>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0a      	ldr	r2, [pc, #40]	@ (8002880 <RCC_Delay+0x38>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	0a5b      	lsrs	r3, r3, #9
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	fb02 f303 	mul.w	r3, r2, r3
 8002862:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002864:	bf00      	nop
  }
  while (Delay --);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1e5a      	subs	r2, r3, #1
 800286a:	60fa      	str	r2, [r7, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f9      	bne.n	8002864 <RCC_Delay+0x1c>
}
 8002870:	bf00      	nop
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr
 800287c:	20000000 	.word	0x20000000
 8002880:	10624dd3 	.word	0x10624dd3

08002884 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d07d      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80028a0:	2300      	movs	r3, #0
 80028a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028a4:	4b4f      	ldr	r3, [pc, #316]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10d      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b0:	4b4c      	ldr	r3, [pc, #304]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	4a4b      	ldr	r2, [pc, #300]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ba:	61d3      	str	r3, [r2, #28]
 80028bc:	4b49      	ldr	r3, [pc, #292]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028c8:	2301      	movs	r3, #1
 80028ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028cc:	4b46      	ldr	r3, [pc, #280]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d118      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028d8:	4b43      	ldr	r3, [pc, #268]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a42      	ldr	r2, [pc, #264]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028e4:	f7fe fbd8 	bl	8001098 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ea:	e008      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ec:	f7fe fbd4 	bl	8001098 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	@ 0x64
 80028f8:	d901      	bls.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e06d      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fe:	4b3a      	ldr	r3, [pc, #232]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800290a:	4b36      	ldr	r3, [pc, #216]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002912:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d02e      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	429a      	cmp	r2, r3
 8002926:	d027      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002928:	4b2e      	ldr	r3, [pc, #184]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002930:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002932:	4b2e      	ldr	r3, [pc, #184]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002934:	2201      	movs	r2, #1
 8002936:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002938:	4b2c      	ldr	r3, [pc, #176]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800293e:	4a29      	ldr	r2, [pc, #164]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d014      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294e:	f7fe fba3 	bl	8001098 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002954:	e00a      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002956:	f7fe fb9f 	bl	8001098 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002964:	4293      	cmp	r3, r2
 8002966:	d901      	bls.n	800296c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e036      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296c:	4b1d      	ldr	r3, [pc, #116]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0ee      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002978:	4b1a      	ldr	r3, [pc, #104]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	4917      	ldr	r1, [pc, #92]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002986:	4313      	orrs	r3, r2
 8002988:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800298a:	7dfb      	ldrb	r3, [r7, #23]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d105      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002990:	4b14      	ldr	r3, [pc, #80]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	4a13      	ldr	r2, [pc, #76]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800299a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029a8:	4b0e      	ldr	r3, [pc, #56]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	490b      	ldr	r1, [pc, #44]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0310 	and.w	r3, r3, #16
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d008      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029c6:	4b07      	ldr	r3, [pc, #28]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	4904      	ldr	r1, [pc, #16]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40007000 	.word	0x40007000
 80029ec:	42420440 	.word	0x42420440

080029f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b088      	sub	sp, #32
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	2300      	movs	r3, #0
 80029fe:	61fb      	str	r3, [r7, #28]
 8002a00:	2300      	movs	r3, #0
 8002a02:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b10      	cmp	r3, #16
 8002a10:	d00a      	beq.n	8002a28 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b10      	cmp	r3, #16
 8002a16:	f200 808a 	bhi.w	8002b2e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d045      	beq.n	8002aac <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d075      	beq.n	8002b12 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002a26:	e082      	b.n	8002b2e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002a28:	4b46      	ldr	r3, [pc, #280]	@ (8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002a2e:	4b45      	ldr	r3, [pc, #276]	@ (8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d07b      	beq.n	8002b32 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	0c9b      	lsrs	r3, r3, #18
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	4a41      	ldr	r2, [pc, #260]	@ (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002a44:	5cd3      	ldrb	r3, [r2, r3]
 8002a46:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d015      	beq.n	8002a7e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a52:	4b3c      	ldr	r3, [pc, #240]	@ (8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	0c5b      	lsrs	r3, r3, #17
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	4a3b      	ldr	r2, [pc, #236]	@ (8002b4c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002a5e:	5cd3      	ldrb	r3, [r2, r3]
 8002a60:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00d      	beq.n	8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002a6c:	4a38      	ldr	r2, [pc, #224]	@ (8002b50 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	fb02 f303 	mul.w	r3, r2, r3
 8002a7a:	61fb      	str	r3, [r7, #28]
 8002a7c:	e004      	b.n	8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4a34      	ldr	r2, [pc, #208]	@ (8002b54 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002a82:	fb02 f303 	mul.w	r3, r2, r3
 8002a86:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002a88:	4b2e      	ldr	r3, [pc, #184]	@ (8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a94:	d102      	bne.n	8002a9c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	61bb      	str	r3, [r7, #24]
      break;
 8002a9a:	e04a      	b.n	8002b32 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	4a2d      	ldr	r2, [pc, #180]	@ (8002b58 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa6:	085b      	lsrs	r3, r3, #1
 8002aa8:	61bb      	str	r3, [r7, #24]
      break;
 8002aaa:	e042      	b.n	8002b32 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002aac:	4b25      	ldr	r3, [pc, #148]	@ (8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ab8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002abc:	d108      	bne.n	8002ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002ac8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	e01f      	b.n	8002b10 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ad6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ada:	d109      	bne.n	8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002adc:	4b19      	ldr	r3, [pc, #100]	@ (8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002ae8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002aec:	61bb      	str	r3, [r7, #24]
 8002aee:	e00f      	b.n	8002b10 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002af6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002afa:	d11c      	bne.n	8002b36 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002afc:	4b11      	ldr	r3, [pc, #68]	@ (8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d016      	beq.n	8002b36 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002b08:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002b0c:	61bb      	str	r3, [r7, #24]
      break;
 8002b0e:	e012      	b.n	8002b36 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002b10:	e011      	b.n	8002b36 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002b12:	f7ff fe85 	bl	8002820 <HAL_RCC_GetPCLK2Freq>
 8002b16:	4602      	mov	r2, r0
 8002b18:	4b0a      	ldr	r3, [pc, #40]	@ (8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	0b9b      	lsrs	r3, r3, #14
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	3301      	adds	r3, #1
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2a:	61bb      	str	r3, [r7, #24]
      break;
 8002b2c:	e004      	b.n	8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002b2e:	bf00      	nop
 8002b30:	e002      	b.n	8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002b32:	bf00      	nop
 8002b34:	e000      	b.n	8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002b36:	bf00      	nop
    }
  }
  return (frequency);
 8002b38:	69bb      	ldr	r3, [r7, #24]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3720      	adds	r7, #32
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40021000 	.word	0x40021000
 8002b48:	080057b4 	.word	0x080057b4
 8002b4c:	080057c4 	.word	0x080057c4
 8002b50:	007a1200 	.word	0x007a1200
 8002b54:	003d0900 	.word	0x003d0900
 8002b58:	aaaaaaab 	.word	0xaaaaaaab

08002b5c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e07a      	b.n	8002c68 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	7c5b      	ldrb	r3, [r3, #17]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d105      	bne.n	8002b88 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7fe f8d8 	bl	8000d38 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fa93 	bl	80030ba <HAL_RTC_WaitForSynchro>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d004      	beq.n	8002ba4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2204      	movs	r2, #4
 8002b9e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e061      	b.n	8002c68 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 fb4c 	bl	8003242 <RTC_EnterInitMode>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d004      	beq.n	8002bba <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2204      	movs	r2, #4
 8002bb4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e056      	b.n	8002c68 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0207 	bic.w	r2, r2, #7
 8002bc8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002bd2:	4b27      	ldr	r3, [pc, #156]	@ (8002c70 <HAL_RTC_Init+0x114>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	4a26      	ldr	r2, [pc, #152]	@ (8002c70 <HAL_RTC_Init+0x114>)
 8002bd8:	f023 0301 	bic.w	r3, r3, #1
 8002bdc:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002bde:	4b24      	ldr	r3, [pc, #144]	@ (8002c70 <HAL_RTC_Init+0x114>)
 8002be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be2:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	4921      	ldr	r1, [pc, #132]	@ (8002c70 <HAL_RTC_Init+0x114>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf8:	d003      	beq.n	8002c02 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	e00e      	b.n	8002c20 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002c02:	2001      	movs	r0, #1
 8002c04:	f7ff fef4 	bl	80029f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c08:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d104      	bne.n	8002c1a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2204      	movs	r2, #4
 8002c14:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e026      	b.n	8002c68 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	0c1a      	lsrs	r2, r3, #16
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f002 020f 	and.w	r2, r2, #15
 8002c2c:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	b292      	uxth	r2, r2
 8002c36:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 fb2a 	bl	8003292 <RTC_ExitInitMode>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d004      	beq.n	8002c4e <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2204      	movs	r2, #4
 8002c48:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e00c      	b.n	8002c68 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002c66:	2300      	movs	r3, #0
  }
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40006c00 	.word	0x40006c00

08002c74 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	61bb      	str	r3, [r7, #24]
 8002c84:	2300      	movs	r3, #0
 8002c86:	61fb      	str	r3, [r7, #28]
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <HAL_RTC_GetTime+0x28>
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0b5      	b.n	8002e0c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e0ac      	b.n	8002e0c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 fa2e 	bl	8003114 <RTC_ReadTimeCounter>
 8002cb8:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	4a55      	ldr	r2, [pc, #340]	@ (8002e14 <HAL_RTC_GetTime+0x1a0>)
 8002cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc2:	0adb      	lsrs	r3, r3, #11
 8002cc4:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4b52      	ldr	r3, [pc, #328]	@ (8002e14 <HAL_RTC_GetTime+0x1a0>)
 8002cca:	fba3 1302 	umull	r1, r3, r3, r2
 8002cce:	0adb      	lsrs	r3, r3, #11
 8002cd0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	4a4f      	ldr	r2, [pc, #316]	@ (8002e18 <HAL_RTC_GetTime+0x1a4>)
 8002cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce0:	095b      	lsrs	r3, r3, #5
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	4a4a      	ldr	r2, [pc, #296]	@ (8002e14 <HAL_RTC_GetTime+0x1a0>)
 8002cec:	fba2 1203 	umull	r1, r2, r2, r3
 8002cf0:	0ad2      	lsrs	r2, r2, #11
 8002cf2:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8002cf6:	fb01 f202 	mul.w	r2, r1, r2
 8002cfa:	1a9a      	subs	r2, r3, r2
 8002cfc:	4b46      	ldr	r3, [pc, #280]	@ (8002e18 <HAL_RTC_GetTime+0x1a4>)
 8002cfe:	fba3 1302 	umull	r1, r3, r3, r2
 8002d02:	0959      	lsrs	r1, r3, #5
 8002d04:	460b      	mov	r3, r1
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	1a5b      	subs	r3, r3, r1
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	1ad1      	subs	r1, r2, r3
 8002d0e:	b2ca      	uxtb	r2, r1
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	2b17      	cmp	r3, #23
 8002d18:	d955      	bls.n	8002dc6 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4a3f      	ldr	r2, [pc, #252]	@ (8002e1c <HAL_RTC_GetTime+0x1a8>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	091b      	lsrs	r3, r3, #4
 8002d24:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8002d26:	6939      	ldr	r1, [r7, #16]
 8002d28:	4b3c      	ldr	r3, [pc, #240]	@ (8002e1c <HAL_RTC_GetTime+0x1a8>)
 8002d2a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d2e:	091a      	lsrs	r2, r3, #4
 8002d30:	4613      	mov	r3, r2
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	4413      	add	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	1aca      	subs	r2, r1, r3
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 fa3e 	bl	80031c2 <RTC_ReadAlarmCounter>
 8002d46:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4e:	d008      	beq.n	8002d62 <HAL_RTC_GetTime+0xee>
 8002d50:	69fa      	ldr	r2, [r7, #28]
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d904      	bls.n	8002d62 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002d58:	69fa      	ldr	r2, [r7, #28]
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	e002      	b.n	8002d68 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8002d62:	f04f 33ff 	mov.w	r3, #4294967295
 8002d66:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	4a2d      	ldr	r2, [pc, #180]	@ (8002e20 <HAL_RTC_GetTime+0x1ac>)
 8002d6c:	fb02 f303 	mul.w	r3, r2, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002d76:	69b9      	ldr	r1, [r7, #24]
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f9fb 	bl	8003174 <RTC_WriteTimeCounter>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e041      	b.n	8002e0c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8e:	d00c      	beq.n	8002daa <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8002d90:	69fa      	ldr	r2, [r7, #28]
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	4413      	add	r3, r2
 8002d96:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002d98:	69f9      	ldr	r1, [r7, #28]
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 fa2a 	bl	80031f4 <RTC_WriteAlarmCounter>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e030      	b.n	8002e0c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002daa:	69f9      	ldr	r1, [r7, #28]
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 fa21 	bl	80031f4 <RTC_WriteAlarmCounter>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e027      	b.n	8002e0c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8002dbc:	6979      	ldr	r1, [r7, #20]
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 fac9 	bl	8003356 <RTC_DateUpdate>
 8002dc4:	e003      	b.n	8002dce <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d01a      	beq.n	8002e0a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fa82 	bl	80032e2 <RTC_ByteToBcd2>
 8002dde:	4603      	mov	r3, r0
 8002de0:	461a      	mov	r2, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	785b      	ldrb	r3, [r3, #1]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 fa79 	bl	80032e2 <RTC_ByteToBcd2>
 8002df0:	4603      	mov	r3, r0
 8002df2:	461a      	mov	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	789b      	ldrb	r3, [r3, #2]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 fa70 	bl	80032e2 <RTC_ByteToBcd2>
 8002e02:	4603      	mov	r3, r0
 8002e04:	461a      	mov	r2, r3
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3720      	adds	r7, #32
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	91a2b3c5 	.word	0x91a2b3c5
 8002e18:	88888889 	.word	0x88888889
 8002e1c:	aaaaaaab 	.word	0xaaaaaaab
 8002e20:	00015180 	.word	0x00015180

08002e24 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002e24:	b590      	push	{r4, r7, lr}
 8002e26:	b089      	sub	sp, #36	@ 0x24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8002e34:	f107 0314 	add.w	r3, r7, #20
 8002e38:	2100      	movs	r1, #0
 8002e3a:	460a      	mov	r2, r1
 8002e3c:	801a      	strh	r2, [r3, #0]
 8002e3e:	460a      	mov	r2, r1
 8002e40:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <HAL_RTC_SetAlarm_IT+0x2a>
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e099      	b.n	8002f86 <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	7c1b      	ldrb	r3, [r3, #16]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_RTC_SetAlarm_IT+0x3a>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e093      	b.n	8002f86 <HAL_RTC_SetAlarm_IT+0x162>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2201      	movs	r2, #1
 8002e62:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2202      	movs	r2, #2
 8002e68:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002e6a:	f107 0314 	add.w	r3, r7, #20
 8002e6e:	2200      	movs	r2, #0
 8002e70:	4619      	mov	r1, r3
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f7ff fefe 	bl	8002c74 <HAL_RTC_GetTime>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e081      	b.n	8002f86 <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002e82:	7d3b      	ldrb	r3, [r7, #20]
 8002e84:	461a      	mov	r2, r3
 8002e86:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002e8a:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8002e8e:	7d7b      	ldrb	r3, [r7, #21]
 8002e90:	4619      	mov	r1, r3
 8002e92:	460b      	mov	r3, r1
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	1a5b      	subs	r3, r3, r1
 8002e98:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002e9a:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8002e9c:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002e9e:	4413      	add	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d113      	bne.n	8002ed0 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	461a      	mov	r2, r3
 8002eae:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002eb2:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	785b      	ldrb	r3, [r3, #1]
 8002eba:	4619      	mov	r1, r3
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	1a5b      	subs	r3, r3, r1
 8002ec2:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002ec4:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002eca:	4413      	add	r3, r2
 8002ecc:	61fb      	str	r3, [r7, #28]
 8002ece:	e01e      	b.n	8002f0e <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fa21 	bl	800331c <RTC_Bcd2ToByte>
 8002eda:	4603      	mov	r3, r0
 8002edc:	461a      	mov	r2, r3
 8002ede:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002ee2:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	785b      	ldrb	r3, [r3, #1]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fa16 	bl	800331c <RTC_Bcd2ToByte>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002efc:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	789b      	ldrb	r3, [r3, #2]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 fa0a 	bl	800331c <RTC_Bcd2ToByte>
 8002f08:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002f0a:	4423      	add	r3, r4
 8002f0c:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8002f0e:	69fa      	ldr	r2, [r7, #28]
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d205      	bcs.n	8002f22 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8002f1c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002f20:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002f22:	69f9      	ldr	r1, [r7, #28]
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 f965 	bl	80031f4 <RTC_WriteAlarmCounter>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d007      	beq.n	8002f40 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2204      	movs	r2, #4
 8002f34:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e022      	b.n	8002f86 <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0202 	bic.w	r2, r2, #2
 8002f4e:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0202 	orr.w	r2, r2, #2
 8002f5e:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002f60:	4b0b      	ldr	r3, [pc, #44]	@ (8002f90 <HAL_RTC_SetAlarm_IT+0x16c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a0a      	ldr	r2, [pc, #40]	@ (8002f90 <HAL_RTC_SetAlarm_IT+0x16c>)
 8002f66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f6a:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002f6c:	4b08      	ldr	r3, [pc, #32]	@ (8002f90 <HAL_RTC_SetAlarm_IT+0x16c>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	4a07      	ldr	r2, [pc, #28]	@ (8002f90 <HAL_RTC_SetAlarm_IT+0x16c>)
 8002f72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f76:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002f84:	2300      	movs	r3, #0
  }
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3724      	adds	r7, #36	@ 0x24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd90      	pop	{r4, r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40010400 	.word	0x40010400

08002f94 <HAL_RTC_DeactivateAlarm>:
  *          This parameter can be one of the following values:
  *            @arg RTC_ALARM_A:  AlarmA
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Check input parameters */
  if (hrtc == NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_RTC_DeactivateAlarm+0x14>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e04e      	b.n	8003046 <HAL_RTC_DeactivateAlarm+0xb2>
  }

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	7c1b      	ldrb	r3, [r3, #16]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_RTC_DeactivateAlarm+0x20>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e048      	b.n	8003046 <HAL_RTC_DeactivateAlarm+0xb2>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	745a      	strb	r2, [r3, #17]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0202 	bic.w	r2, r2, #2
 8002fce:	601a      	str	r2, [r3, #0]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f936 	bl	8003242 <RTC_EnterInitMode>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d007      	beq.n	8002fec <HAL_RTC_DeactivateAlarm+0x58>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2204      	movs	r2, #4
 8002fe0:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e02c      	b.n	8003046 <HAL_RTC_DeactivateAlarm+0xb2>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0202 	bic.w	r2, r2, #2
 8002ffa:	605a      	str	r2, [r3, #4]

    /* Set to default values ALRH & ALRL registers */
    WRITE_REG(hrtc->Instance->ALRH, RTC_ALARM_RESETVALUE_REGISTER);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003004:	621a      	str	r2, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, RTC_ALARM_RESETVALUE_REGISTER);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800300e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* RTC Alarm Interrupt Configuration: Disable EXTI configuration */
    __HAL_RTC_ALARM_EXTI_DISABLE_IT();
 8003010:	4b0f      	ldr	r3, [pc, #60]	@ (8003050 <HAL_RTC_DeactivateAlarm+0xbc>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a0e      	ldr	r2, [pc, #56]	@ (8003050 <HAL_RTC_DeactivateAlarm+0xbc>)
 8003016:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800301a:	6013      	str	r3, [r2, #0]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f938 	bl	8003292 <RTC_ExitInitMode>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d007      	beq.n	8003038 <HAL_RTC_DeactivateAlarm+0xa4>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2204      	movs	r2, #4
 800302c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e006      	b.n	8003046 <HAL_RTC_DeactivateAlarm+0xb2>
    }
  }
  hrtc->State = HAL_RTC_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40010400 	.word	0x40010400

08003054 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d011      	beq.n	800308e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f815 	bl	80030a8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0202 	bic.w	r2, r2, #2
 800308c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800308e:	4b05      	ldr	r3, [pc, #20]	@ (80030a4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8003090:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003094:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	745a      	strb	r2, [r3, #17]
}
 800309c:	bf00      	nop
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40010400 	.word	0x40010400

080030a8 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr

080030ba <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b084      	sub	sp, #16
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e01d      	b.n	800310c <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0208 	bic.w	r2, r2, #8
 80030de:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80030e0:	f7fd ffda 	bl	8001098 <HAL_GetTick>
 80030e4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80030e6:	e009      	b.n	80030fc <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80030e8:	f7fd ffd6 	bl	8001098 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030f6:	d901      	bls.n	80030fc <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e007      	b.n	800310c <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0ee      	beq.n	80030e8 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	827b      	strh	r3, [r7, #18]
 8003120:	2300      	movs	r3, #0
 8003122:	823b      	strh	r3, [r7, #16]
 8003124:	2300      	movs	r3, #0
 8003126:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003144:	8a7a      	ldrh	r2, [r7, #18]
 8003146:	8a3b      	ldrh	r3, [r7, #16]
 8003148:	429a      	cmp	r2, r3
 800314a:	d008      	beq.n	800315e <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800314c:	8a3b      	ldrh	r3, [r7, #16]
 800314e:	041a      	lsls	r2, r3, #16
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	b29b      	uxth	r3, r3
 8003158:	4313      	orrs	r3, r2
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	e004      	b.n	8003168 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800315e:	8a7b      	ldrh	r3, [r7, #18]
 8003160:	041a      	lsls	r2, r3, #16
 8003162:	89fb      	ldrh	r3, [r7, #14]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003168:	697b      	ldr	r3, [r7, #20]
}
 800316a:	4618      	mov	r0, r3
 800316c:	371c      	adds	r7, #28
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr

08003174 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f85d 	bl	8003242 <RTC_EnterInitMode>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
 8003192:	e011      	b.n	80031b8 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	0c12      	lsrs	r2, r2, #16
 800319c:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	b292      	uxth	r2, r2
 80031a6:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f872 	bl	8003292 <RTC_ExitInitMode>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80031b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b085      	sub	sp, #20
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	81fb      	strh	r3, [r7, #14]
 80031ce:	2300      	movs	r3, #0
 80031d0:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e0:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80031e2:	89fb      	ldrh	r3, [r7, #14]
 80031e4:	041a      	lsls	r2, r3, #16
 80031e6:	89bb      	ldrh	r3, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f81d 	bl	8003242 <RTC_EnterInitMode>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	73fb      	strb	r3, [r7, #15]
 8003212:	e011      	b.n	8003238 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	0c12      	lsrs	r2, r2, #16
 800321c:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	b292      	uxth	r2, r2
 8003226:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f832 	bl	8003292 <RTC_ExitInitMode>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003238:	7bfb      	ldrb	r3, [r7, #15]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b084      	sub	sp, #16
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800324e:	f7fd ff23 	bl	8001098 <HAL_GetTick>
 8003252:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003254:	e009      	b.n	800326a <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003256:	f7fd ff1f 	bl	8001098 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003264:	d901      	bls.n	800326a <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e00f      	b.n	800328a <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 0320 	and.w	r3, r3, #32
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0ee      	beq.n	8003256 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0210 	orr.w	r2, r2, #16
 8003286:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800329a:	2300      	movs	r3, #0
 800329c:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0210 	bic.w	r2, r2, #16
 80032ac:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80032ae:	f7fd fef3 	bl	8001098 <HAL_GetTick>
 80032b2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80032b4:	e009      	b.n	80032ca <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80032b6:	f7fd feef 	bl	8001098 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032c4:	d901      	bls.n	80032ca <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e007      	b.n	80032da <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 0320 	and.w	r3, r3, #32
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0ee      	beq.n	80032b6 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b085      	sub	sp, #20
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	4603      	mov	r3, r0
 80032ea:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80032f0:	e005      	b.n	80032fe <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	3301      	adds	r3, #1
 80032f6:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	3b0a      	subs	r3, #10
 80032fc:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	2b09      	cmp	r3, #9
 8003302:	d8f6      	bhi.n	80032f2 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	b2da      	uxtb	r2, r3
 800330c:	79fb      	ldrb	r3, [r7, #7]
 800330e:	4313      	orrs	r3, r2
 8003310:	b2db      	uxtb	r3, r3
}
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr

0800331c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	091b      	lsrs	r3, r3, #4
 800332e:	b2db      	uxtb	r3, r3
 8003330:	461a      	mov	r2, r3
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	b2da      	uxtb	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	4413      	add	r3, r2
 800334a:	b2db      	uxtb	r3, r3
}
 800334c:	4618      	mov	r0, r3
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr

08003356 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b086      	sub	sp, #24
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]
 8003364:	2300      	movs	r3, #0
 8003366:	613b      	str	r3, [r7, #16]
 8003368:	2300      	movs	r3, #0
 800336a:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	7bdb      	ldrb	r3, [r3, #15]
 8003374:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	7b5b      	ldrb	r3, [r3, #13]
 800337a:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	7b9b      	ldrb	r3, [r3, #14]
 8003380:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003382:	2300      	movs	r3, #0
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	e06f      	b.n	8003468 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d011      	beq.n	80033b2 <RTC_DateUpdate+0x5c>
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	2b03      	cmp	r3, #3
 8003392:	d00e      	beq.n	80033b2 <RTC_DateUpdate+0x5c>
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	2b05      	cmp	r3, #5
 8003398:	d00b      	beq.n	80033b2 <RTC_DateUpdate+0x5c>
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2b07      	cmp	r3, #7
 800339e:	d008      	beq.n	80033b2 <RTC_DateUpdate+0x5c>
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d005      	beq.n	80033b2 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	2b0a      	cmp	r3, #10
 80033aa:	d002      	beq.n	80033b2 <RTC_DateUpdate+0x5c>
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	2b0c      	cmp	r3, #12
 80033b0:	d117      	bne.n	80033e2 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2b1e      	cmp	r3, #30
 80033b6:	d803      	bhi.n	80033c0 <RTC_DateUpdate+0x6a>
      {
        day++;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	3301      	adds	r3, #1
 80033bc:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80033be:	e050      	b.n	8003462 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	2b0c      	cmp	r3, #12
 80033c4:	d005      	beq.n	80033d2 <RTC_DateUpdate+0x7c>
        {
          month++;
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	3301      	adds	r3, #1
 80033ca:	613b      	str	r3, [r7, #16]
          day = 1U;
 80033cc:	2301      	movs	r3, #1
 80033ce:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80033d0:	e047      	b.n	8003462 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80033d2:	2301      	movs	r3, #1
 80033d4:	613b      	str	r3, [r7, #16]
          day = 1U;
 80033d6:	2301      	movs	r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]
          year++;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	3301      	adds	r3, #1
 80033de:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80033e0:	e03f      	b.n	8003462 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d008      	beq.n	80033fa <RTC_DateUpdate+0xa4>
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	2b06      	cmp	r3, #6
 80033ec:	d005      	beq.n	80033fa <RTC_DateUpdate+0xa4>
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	2b09      	cmp	r3, #9
 80033f2:	d002      	beq.n	80033fa <RTC_DateUpdate+0xa4>
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	2b0b      	cmp	r3, #11
 80033f8:	d10c      	bne.n	8003414 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2b1d      	cmp	r3, #29
 80033fe:	d803      	bhi.n	8003408 <RTC_DateUpdate+0xb2>
      {
        day++;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	3301      	adds	r3, #1
 8003404:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003406:	e02c      	b.n	8003462 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	3301      	adds	r3, #1
 800340c:	613b      	str	r3, [r7, #16]
        day = 1U;
 800340e:	2301      	movs	r3, #1
 8003410:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003412:	e026      	b.n	8003462 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	2b02      	cmp	r3, #2
 8003418:	d123      	bne.n	8003462 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2b1b      	cmp	r3, #27
 800341e:	d803      	bhi.n	8003428 <RTC_DateUpdate+0xd2>
      {
        day++;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	3301      	adds	r3, #1
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	e01c      	b.n	8003462 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b1c      	cmp	r3, #28
 800342c:	d111      	bne.n	8003452 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	b29b      	uxth	r3, r3
 8003432:	4618      	mov	r0, r3
 8003434:	f000 f838 	bl	80034a8 <RTC_IsLeapYear>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <RTC_DateUpdate+0xf0>
        {
          day++;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	3301      	adds	r3, #1
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	e00d      	b.n	8003462 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	3301      	adds	r3, #1
 800344a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800344c:	2301      	movs	r3, #1
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	e007      	b.n	8003462 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b1d      	cmp	r3, #29
 8003456:	d104      	bne.n	8003462 <RTC_DateUpdate+0x10c>
      {
        month++;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	3301      	adds	r3, #1
 800345c:	613b      	str	r3, [r7, #16]
        day = 1U;
 800345e:	2301      	movs	r3, #1
 8003460:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	3301      	adds	r3, #1
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d38b      	bcc.n	8003388 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	b2da      	uxtb	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	b2da      	uxtb	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	b2da      	uxtb	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	b2db      	uxtb	r3, r3
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	4619      	mov	r1, r3
 8003492:	6978      	ldr	r0, [r7, #20]
 8003494:	f000 f83a 	bl	800350c <RTC_WeekDayNum>
 8003498:	4603      	mov	r3, r0
 800349a:	461a      	mov	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	731a      	strb	r2, [r3, #12]
}
 80034a0:	bf00      	nop
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80034b2:	88fb      	ldrh	r3, [r7, #6]
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	e01d      	b.n	80034fe <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80034c2:	88fb      	ldrh	r3, [r7, #6]
 80034c4:	4a10      	ldr	r2, [pc, #64]	@ (8003508 <RTC_IsLeapYear+0x60>)
 80034c6:	fba2 1203 	umull	r1, r2, r2, r3
 80034ca:	0952      	lsrs	r2, r2, #5
 80034cc:	2164      	movs	r1, #100	@ 0x64
 80034ce:	fb01 f202 	mul.w	r2, r1, r2
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80034da:	2301      	movs	r3, #1
 80034dc:	e00f      	b.n	80034fe <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	4a09      	ldr	r2, [pc, #36]	@ (8003508 <RTC_IsLeapYear+0x60>)
 80034e2:	fba2 1203 	umull	r1, r2, r2, r3
 80034e6:	09d2      	lsrs	r2, r2, #7
 80034e8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80034ec:	fb01 f202 	mul.w	r2, r1, r2
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e000      	b.n	80034fe <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80034fc:	2300      	movs	r3, #0
  }
}
 80034fe:	4618      	mov	r0, r3
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr
 8003508:	51eb851f 	.word	0x51eb851f

0800350c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	460b      	mov	r3, r1
 8003516:	70fb      	strb	r3, [r7, #3]
 8003518:	4613      	mov	r3, r2
 800351a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	2300      	movs	r3, #0
 8003522:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800352a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d82d      	bhi.n	800358e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003532:	78fa      	ldrb	r2, [r7, #3]
 8003534:	4613      	mov	r3, r2
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	4413      	add	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	4a2c      	ldr	r2, [pc, #176]	@ (80035f0 <RTC_WeekDayNum+0xe4>)
 8003540:	fba2 2303 	umull	r2, r3, r2, r3
 8003544:	085a      	lsrs	r2, r3, #1
 8003546:	78bb      	ldrb	r3, [r7, #2]
 8003548:	441a      	add	r2, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	441a      	add	r2, r3
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	3b01      	subs	r3, #1
 8003552:	089b      	lsrs	r3, r3, #2
 8003554:	441a      	add	r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	3b01      	subs	r3, #1
 800355a:	4926      	ldr	r1, [pc, #152]	@ (80035f4 <RTC_WeekDayNum+0xe8>)
 800355c:	fba1 1303 	umull	r1, r3, r1, r3
 8003560:	095b      	lsrs	r3, r3, #5
 8003562:	1ad2      	subs	r2, r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	3b01      	subs	r3, #1
 8003568:	4922      	ldr	r1, [pc, #136]	@ (80035f4 <RTC_WeekDayNum+0xe8>)
 800356a:	fba1 1303 	umull	r1, r3, r1, r3
 800356e:	09db      	lsrs	r3, r3, #7
 8003570:	4413      	add	r3, r2
 8003572:	1d1a      	adds	r2, r3, #4
 8003574:	4b20      	ldr	r3, [pc, #128]	@ (80035f8 <RTC_WeekDayNum+0xec>)
 8003576:	fba3 1302 	umull	r1, r3, r3, r2
 800357a:	1ad1      	subs	r1, r2, r3
 800357c:	0849      	lsrs	r1, r1, #1
 800357e:	440b      	add	r3, r1
 8003580:	0899      	lsrs	r1, r3, #2
 8003582:	460b      	mov	r3, r1
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	1a5b      	subs	r3, r3, r1
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	e029      	b.n	80035e2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800358e:	78fa      	ldrb	r2, [r7, #3]
 8003590:	4613      	mov	r3, r2
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	4413      	add	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	4a15      	ldr	r2, [pc, #84]	@ (80035f0 <RTC_WeekDayNum+0xe4>)
 800359c:	fba2 2303 	umull	r2, r3, r2, r3
 80035a0:	085a      	lsrs	r2, r3, #1
 80035a2:	78bb      	ldrb	r3, [r7, #2]
 80035a4:	441a      	add	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	441a      	add	r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	089b      	lsrs	r3, r3, #2
 80035ae:	441a      	add	r2, r3
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4910      	ldr	r1, [pc, #64]	@ (80035f4 <RTC_WeekDayNum+0xe8>)
 80035b4:	fba1 1303 	umull	r1, r3, r1, r3
 80035b8:	095b      	lsrs	r3, r3, #5
 80035ba:	1ad2      	subs	r2, r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	490d      	ldr	r1, [pc, #52]	@ (80035f4 <RTC_WeekDayNum+0xe8>)
 80035c0:	fba1 1303 	umull	r1, r3, r1, r3
 80035c4:	09db      	lsrs	r3, r3, #7
 80035c6:	4413      	add	r3, r2
 80035c8:	1c9a      	adds	r2, r3, #2
 80035ca:	4b0b      	ldr	r3, [pc, #44]	@ (80035f8 <RTC_WeekDayNum+0xec>)
 80035cc:	fba3 1302 	umull	r1, r3, r3, r2
 80035d0:	1ad1      	subs	r1, r2, r3
 80035d2:	0849      	lsrs	r1, r1, #1
 80035d4:	440b      	add	r3, r1
 80035d6:	0899      	lsrs	r1, r3, #2
 80035d8:	460b      	mov	r3, r1
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	1a5b      	subs	r3, r3, r1
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	b2db      	uxtb	r3, r3
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	38e38e39 	.word	0x38e38e39
 80035f4:	51eb851f 	.word	0x51eb851f
 80035f8:	24924925 	.word	0x24924925

080035fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e041      	b.n	8003692 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7fd fbb4 	bl	8000d90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3304      	adds	r3, #4
 8003638:	4619      	mov	r1, r3
 800363a:	4610      	mov	r0, r2
 800363c:	f000 fd96 	bl	800416c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e041      	b.n	8003730 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d106      	bne.n	80036c6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f839 	bl	8003738 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2202      	movs	r2, #2
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	3304      	adds	r3, #4
 80036d6:	4619      	mov	r1, r3
 80036d8:	4610      	mov	r0, r2
 80036da:	f000 fd47 	bl	800416c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr
	...

0800374c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d104      	bne.n	800376a <HAL_TIM_IC_Start_IT+0x1e>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003766:	b2db      	uxtb	r3, r3
 8003768:	e013      	b.n	8003792 <HAL_TIM_IC_Start_IT+0x46>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b04      	cmp	r3, #4
 800376e:	d104      	bne.n	800377a <HAL_TIM_IC_Start_IT+0x2e>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003776:	b2db      	uxtb	r3, r3
 8003778:	e00b      	b.n	8003792 <HAL_TIM_IC_Start_IT+0x46>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b08      	cmp	r3, #8
 800377e:	d104      	bne.n	800378a <HAL_TIM_IC_Start_IT+0x3e>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003786:	b2db      	uxtb	r3, r3
 8003788:	e003      	b.n	8003792 <HAL_TIM_IC_Start_IT+0x46>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003790:	b2db      	uxtb	r3, r3
 8003792:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d104      	bne.n	80037a4 <HAL_TIM_IC_Start_IT+0x58>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	e013      	b.n	80037cc <HAL_TIM_IC_Start_IT+0x80>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d104      	bne.n	80037b4 <HAL_TIM_IC_Start_IT+0x68>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	e00b      	b.n	80037cc <HAL_TIM_IC_Start_IT+0x80>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d104      	bne.n	80037c4 <HAL_TIM_IC_Start_IT+0x78>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	e003      	b.n	80037cc <HAL_TIM_IC_Start_IT+0x80>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80037ce:	7bbb      	ldrb	r3, [r7, #14]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d102      	bne.n	80037da <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80037d4:	7b7b      	ldrb	r3, [r7, #13]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d001      	beq.n	80037de <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e0b8      	b.n	8003950 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d104      	bne.n	80037ee <HAL_TIM_IC_Start_IT+0xa2>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037ec:	e013      	b.n	8003816 <HAL_TIM_IC_Start_IT+0xca>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d104      	bne.n	80037fe <HAL_TIM_IC_Start_IT+0xb2>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037fc:	e00b      	b.n	8003816 <HAL_TIM_IC_Start_IT+0xca>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b08      	cmp	r3, #8
 8003802:	d104      	bne.n	800380e <HAL_TIM_IC_Start_IT+0xc2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800380c:	e003      	b.n	8003816 <HAL_TIM_IC_Start_IT+0xca>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2202      	movs	r2, #2
 8003812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d104      	bne.n	8003826 <HAL_TIM_IC_Start_IT+0xda>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003824:	e013      	b.n	800384e <HAL_TIM_IC_Start_IT+0x102>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b04      	cmp	r3, #4
 800382a:	d104      	bne.n	8003836 <HAL_TIM_IC_Start_IT+0xea>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2202      	movs	r2, #2
 8003830:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003834:	e00b      	b.n	800384e <HAL_TIM_IC_Start_IT+0x102>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b08      	cmp	r3, #8
 800383a:	d104      	bne.n	8003846 <HAL_TIM_IC_Start_IT+0xfa>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2202      	movs	r2, #2
 8003840:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003844:	e003      	b.n	800384e <HAL_TIM_IC_Start_IT+0x102>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2202      	movs	r2, #2
 800384a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b0c      	cmp	r3, #12
 8003852:	d841      	bhi.n	80038d8 <HAL_TIM_IC_Start_IT+0x18c>
 8003854:	a201      	add	r2, pc, #4	@ (adr r2, 800385c <HAL_TIM_IC_Start_IT+0x110>)
 8003856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385a:	bf00      	nop
 800385c:	08003891 	.word	0x08003891
 8003860:	080038d9 	.word	0x080038d9
 8003864:	080038d9 	.word	0x080038d9
 8003868:	080038d9 	.word	0x080038d9
 800386c:	080038a3 	.word	0x080038a3
 8003870:	080038d9 	.word	0x080038d9
 8003874:	080038d9 	.word	0x080038d9
 8003878:	080038d9 	.word	0x080038d9
 800387c:	080038b5 	.word	0x080038b5
 8003880:	080038d9 	.word	0x080038d9
 8003884:	080038d9 	.word	0x080038d9
 8003888:	080038d9 	.word	0x080038d9
 800388c:	080038c7 	.word	0x080038c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0202 	orr.w	r2, r2, #2
 800389e:	60da      	str	r2, [r3, #12]
      break;
 80038a0:	e01d      	b.n	80038de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 0204 	orr.w	r2, r2, #4
 80038b0:	60da      	str	r2, [r3, #12]
      break;
 80038b2:	e014      	b.n	80038de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0208 	orr.w	r2, r2, #8
 80038c2:	60da      	str	r2, [r3, #12]
      break;
 80038c4:	e00b      	b.n	80038de <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0210 	orr.w	r2, r2, #16
 80038d4:	60da      	str	r2, [r3, #12]
      break;
 80038d6:	e002      	b.n	80038de <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
      break;
 80038dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d134      	bne.n	800394e <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2201      	movs	r2, #1
 80038ea:	6839      	ldr	r1, [r7, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fee0 	bl	80046b2 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a18      	ldr	r2, [pc, #96]	@ (8003958 <HAL_TIM_IC_Start_IT+0x20c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00e      	beq.n	800391a <HAL_TIM_IC_Start_IT+0x1ce>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003904:	d009      	beq.n	800391a <HAL_TIM_IC_Start_IT+0x1ce>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a14      	ldr	r2, [pc, #80]	@ (800395c <HAL_TIM_IC_Start_IT+0x210>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d004      	beq.n	800391a <HAL_TIM_IC_Start_IT+0x1ce>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a12      	ldr	r2, [pc, #72]	@ (8003960 <HAL_TIM_IC_Start_IT+0x214>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d111      	bne.n	800393e <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b06      	cmp	r3, #6
 800392a:	d010      	beq.n	800394e <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800393c:	e007      	b.n	800394e <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 0201 	orr.w	r2, r2, #1
 800394c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800394e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40012c00 	.word	0x40012c00
 800395c:	40000400 	.word	0x40000400
 8003960:	40000800 	.word	0x40000800

08003964 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b0c      	cmp	r3, #12
 8003976:	d841      	bhi.n	80039fc <HAL_TIM_IC_Stop_IT+0x98>
 8003978:	a201      	add	r2, pc, #4	@ (adr r2, 8003980 <HAL_TIM_IC_Stop_IT+0x1c>)
 800397a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397e:	bf00      	nop
 8003980:	080039b5 	.word	0x080039b5
 8003984:	080039fd 	.word	0x080039fd
 8003988:	080039fd 	.word	0x080039fd
 800398c:	080039fd 	.word	0x080039fd
 8003990:	080039c7 	.word	0x080039c7
 8003994:	080039fd 	.word	0x080039fd
 8003998:	080039fd 	.word	0x080039fd
 800399c:	080039fd 	.word	0x080039fd
 80039a0:	080039d9 	.word	0x080039d9
 80039a4:	080039fd 	.word	0x080039fd
 80039a8:	080039fd 	.word	0x080039fd
 80039ac:	080039fd 	.word	0x080039fd
 80039b0:	080039eb 	.word	0x080039eb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0202 	bic.w	r2, r2, #2
 80039c2:	60da      	str	r2, [r3, #12]
      break;
 80039c4:	e01d      	b.n	8003a02 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0204 	bic.w	r2, r2, #4
 80039d4:	60da      	str	r2, [r3, #12]
      break;
 80039d6:	e014      	b.n	8003a02 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0208 	bic.w	r2, r2, #8
 80039e6:	60da      	str	r2, [r3, #12]
      break;
 80039e8:	e00b      	b.n	8003a02 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0210 	bic.w	r2, r2, #16
 80039f8:	60da      	str	r2, [r3, #12]
      break;
 80039fa:	e002      	b.n	8003a02 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003a00:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d156      	bne.n	8003ab6 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	6839      	ldr	r1, [r7, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 fe4e 	bl	80046b2 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6a1a      	ldr	r2, [r3, #32]
 8003a1c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10f      	bne.n	8003a46 <HAL_TIM_IC_Stop_IT+0xe2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6a1a      	ldr	r2, [r3, #32]
 8003a2c:	f240 4344 	movw	r3, #1092	@ 0x444
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d107      	bne.n	8003a46 <HAL_TIM_IC_Stop_IT+0xe2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0201 	bic.w	r2, r2, #1
 8003a44:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d104      	bne.n	8003a56 <HAL_TIM_IC_Stop_IT+0xf2>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a54:	e013      	b.n	8003a7e <HAL_TIM_IC_Stop_IT+0x11a>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d104      	bne.n	8003a66 <HAL_TIM_IC_Stop_IT+0x102>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a64:	e00b      	b.n	8003a7e <HAL_TIM_IC_Stop_IT+0x11a>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d104      	bne.n	8003a76 <HAL_TIM_IC_Stop_IT+0x112>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a74:	e003      	b.n	8003a7e <HAL_TIM_IC_Stop_IT+0x11a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d104      	bne.n	8003a8e <HAL_TIM_IC_Stop_IT+0x12a>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a8c:	e013      	b.n	8003ab6 <HAL_TIM_IC_Stop_IT+0x152>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d104      	bne.n	8003a9e <HAL_TIM_IC_Stop_IT+0x13a>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a9c:	e00b      	b.n	8003ab6 <HAL_TIM_IC_Stop_IT+0x152>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d104      	bne.n	8003aae <HAL_TIM_IC_Stop_IT+0x14a>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003aac:	e003      	b.n	8003ab6 <HAL_TIM_IC_Stop_IT+0x152>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e041      	b.n	8003b58 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d106      	bne.n	8003aee <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f839 	bl	8003b60 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2202      	movs	r2, #2
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3304      	adds	r3, #4
 8003afe:	4619      	mov	r1, r3
 8003b00:	4610      	mov	r0, r2
 8003b02:	f000 fb33 	bl	800416c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0208 	bic.w	r2, r2, #8
 8003b14:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6819      	ldr	r1, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr

08003b72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b084      	sub	sp, #16
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d020      	beq.n	8003bd6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d01b      	beq.n	8003bd6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f06f 0202 	mvn.w	r2, #2
 8003ba6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7fd f991 	bl	8000ee4 <HAL_TIM_IC_CaptureCallback>
 8003bc2:	e005      	b.n	8003bd0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 fab6 	bl	8004136 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fabc 	bl	8004148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d020      	beq.n	8003c22 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d01b      	beq.n	8003c22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f06f 0204 	mvn.w	r2, #4
 8003bf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7fd f96b 	bl	8000ee4 <HAL_TIM_IC_CaptureCallback>
 8003c0e:	e005      	b.n	8003c1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 fa90 	bl	8004136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fa96 	bl	8004148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d020      	beq.n	8003c6e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d01b      	beq.n	8003c6e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f06f 0208 	mvn.w	r2, #8
 8003c3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2204      	movs	r2, #4
 8003c44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	f003 0303 	and.w	r3, r3, #3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7fd f945 	bl	8000ee4 <HAL_TIM_IC_CaptureCallback>
 8003c5a:	e005      	b.n	8003c68 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 fa6a 	bl	8004136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fa70 	bl	8004148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d020      	beq.n	8003cba <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f003 0310 	and.w	r3, r3, #16
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d01b      	beq.n	8003cba <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f06f 0210 	mvn.w	r2, #16
 8003c8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2208      	movs	r2, #8
 8003c90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7fd f91f 	bl	8000ee4 <HAL_TIM_IC_CaptureCallback>
 8003ca6:	e005      	b.n	8003cb4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 fa44 	bl	8004136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fa4a 	bl	8004148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00c      	beq.n	8003cde <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d007      	beq.n	8003cde <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f06f 0201 	mvn.w	r2, #1
 8003cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 fa23 	bl	8004124 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00c      	beq.n	8003d02 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d007      	beq.n	8003d02 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 fd64 	bl	80047ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00c      	beq.n	8003d26 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d007      	beq.n	8003d26 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 fa1a 	bl	800415a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00c      	beq.n	8003d4a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d007      	beq.n	8003d4a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f06f 0220 	mvn.w	r2, #32
 8003d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 fd37 	bl	80047b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d4a:	bf00      	nop
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b086      	sub	sp, #24
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e088      	b.n	8003e82 <HAL_TIM_IC_ConfigChannel+0x130>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d11b      	bne.n	8003db6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003d8e:	f000 faed 	bl	800436c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	699a      	ldr	r2, [r3, #24]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 020c 	bic.w	r2, r2, #12
 8003da0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6999      	ldr	r1, [r3, #24]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	619a      	str	r2, [r3, #24]
 8003db4:	e060      	b.n	8003e78 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d11c      	bne.n	8003df6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003dcc:	f000 fb56 	bl	800447c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699a      	ldr	r2, [r3, #24]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003dde:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6999      	ldr	r1, [r3, #24]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	021a      	lsls	r2, r3, #8
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	619a      	str	r2, [r3, #24]
 8003df4:	e040      	b.n	8003e78 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d11b      	bne.n	8003e34 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003e0c:	f000 fba1 	bl	8004552 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	69da      	ldr	r2, [r3, #28]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 020c 	bic.w	r2, r2, #12
 8003e1e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	69d9      	ldr	r1, [r3, #28]
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	61da      	str	r2, [r3, #28]
 8003e32:	e021      	b.n	8003e78 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b0c      	cmp	r3, #12
 8003e38:	d11c      	bne.n	8003e74 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003e4a:	f000 fbbd 	bl	80045c8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69da      	ldr	r2, [r3, #28]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003e5c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69d9      	ldr	r1, [r3, #28]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	021a      	lsls	r2, r3, #8
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	61da      	str	r2, [r3, #28]
 8003e72:	e001      	b.n	8003e78 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e94:	2300      	movs	r3, #0
 8003e96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d101      	bne.n	8003ea6 <HAL_TIM_ConfigClockSource+0x1c>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e0b4      	b.n	8004010 <HAL_TIM_ConfigClockSource+0x186>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ec4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ecc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ede:	d03e      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0xd4>
 8003ee0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ee4:	f200 8087 	bhi.w	8003ff6 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eec:	f000 8086 	beq.w	8003ffc <HAL_TIM_ConfigClockSource+0x172>
 8003ef0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ef4:	d87f      	bhi.n	8003ff6 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef6:	2b70      	cmp	r3, #112	@ 0x70
 8003ef8:	d01a      	beq.n	8003f30 <HAL_TIM_ConfigClockSource+0xa6>
 8003efa:	2b70      	cmp	r3, #112	@ 0x70
 8003efc:	d87b      	bhi.n	8003ff6 <HAL_TIM_ConfigClockSource+0x16c>
 8003efe:	2b60      	cmp	r3, #96	@ 0x60
 8003f00:	d050      	beq.n	8003fa4 <HAL_TIM_ConfigClockSource+0x11a>
 8003f02:	2b60      	cmp	r3, #96	@ 0x60
 8003f04:	d877      	bhi.n	8003ff6 <HAL_TIM_ConfigClockSource+0x16c>
 8003f06:	2b50      	cmp	r3, #80	@ 0x50
 8003f08:	d03c      	beq.n	8003f84 <HAL_TIM_ConfigClockSource+0xfa>
 8003f0a:	2b50      	cmp	r3, #80	@ 0x50
 8003f0c:	d873      	bhi.n	8003ff6 <HAL_TIM_ConfigClockSource+0x16c>
 8003f0e:	2b40      	cmp	r3, #64	@ 0x40
 8003f10:	d058      	beq.n	8003fc4 <HAL_TIM_ConfigClockSource+0x13a>
 8003f12:	2b40      	cmp	r3, #64	@ 0x40
 8003f14:	d86f      	bhi.n	8003ff6 <HAL_TIM_ConfigClockSource+0x16c>
 8003f16:	2b30      	cmp	r3, #48	@ 0x30
 8003f18:	d064      	beq.n	8003fe4 <HAL_TIM_ConfigClockSource+0x15a>
 8003f1a:	2b30      	cmp	r3, #48	@ 0x30
 8003f1c:	d86b      	bhi.n	8003ff6 <HAL_TIM_ConfigClockSource+0x16c>
 8003f1e:	2b20      	cmp	r3, #32
 8003f20:	d060      	beq.n	8003fe4 <HAL_TIM_ConfigClockSource+0x15a>
 8003f22:	2b20      	cmp	r3, #32
 8003f24:	d867      	bhi.n	8003ff6 <HAL_TIM_ConfigClockSource+0x16c>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d05c      	beq.n	8003fe4 <HAL_TIM_ConfigClockSource+0x15a>
 8003f2a:	2b10      	cmp	r3, #16
 8003f2c:	d05a      	beq.n	8003fe4 <HAL_TIM_ConfigClockSource+0x15a>
 8003f2e:	e062      	b.n	8003ff6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f40:	f000 fb98 	bl	8004674 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f52:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	609a      	str	r2, [r3, #8]
      break;
 8003f5c:	e04f      	b.n	8003ffe <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f6e:	f000 fb81 	bl	8004674 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f80:	609a      	str	r2, [r3, #8]
      break;
 8003f82:	e03c      	b.n	8003ffe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f90:	461a      	mov	r2, r3
 8003f92:	f000 fa45 	bl	8004420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2150      	movs	r1, #80	@ 0x50
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fb4f 	bl	8004640 <TIM_ITRx_SetConfig>
      break;
 8003fa2:	e02c      	b.n	8003ffe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	f000 fa9f 	bl	80044f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2160      	movs	r1, #96	@ 0x60
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fb3f 	bl	8004640 <TIM_ITRx_SetConfig>
      break;
 8003fc2:	e01c      	b.n	8003ffe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	f000 fa25 	bl	8004420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2140      	movs	r1, #64	@ 0x40
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fb2f 	bl	8004640 <TIM_ITRx_SetConfig>
      break;
 8003fe2:	e00c      	b.n	8003ffe <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4619      	mov	r1, r3
 8003fee:	4610      	mov	r0, r2
 8003ff0:	f000 fb26 	bl	8004640 <TIM_ITRx_SetConfig>
      break;
 8003ff4:	e003      	b.n	8003ffe <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	73fb      	strb	r3, [r7, #15]
      break;
 8003ffa:	e000      	b.n	8003ffe <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ffc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800400e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_TIM_SlaveConfigSynchro+0x18>
 800402c:	2302      	movs	r3, #2
 800402e:	e031      	b.n	8004094 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004040:	6839      	ldr	r1, [r7, #0]
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f900 	bl	8004248 <TIM_SlaveTimer_SetConfig>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d009      	beq.n	8004062 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e018      	b.n	8004094 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004070:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004080:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b0c      	cmp	r3, #12
 80040ae:	d831      	bhi.n	8004114 <HAL_TIM_ReadCapturedValue+0x78>
 80040b0:	a201      	add	r2, pc, #4	@ (adr r2, 80040b8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80040b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b6:	bf00      	nop
 80040b8:	080040ed 	.word	0x080040ed
 80040bc:	08004115 	.word	0x08004115
 80040c0:	08004115 	.word	0x08004115
 80040c4:	08004115 	.word	0x08004115
 80040c8:	080040f7 	.word	0x080040f7
 80040cc:	08004115 	.word	0x08004115
 80040d0:	08004115 	.word	0x08004115
 80040d4:	08004115 	.word	0x08004115
 80040d8:	08004101 	.word	0x08004101
 80040dc:	08004115 	.word	0x08004115
 80040e0:	08004115 	.word	0x08004115
 80040e4:	08004115 	.word	0x08004115
 80040e8:	0800410b 	.word	0x0800410b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040f2:	60fb      	str	r3, [r7, #12]

      break;
 80040f4:	e00f      	b.n	8004116 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fc:	60fb      	str	r3, [r7, #12]

      break;
 80040fe:	e00a      	b.n	8004116 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004106:	60fb      	str	r3, [r7, #12]

      break;
 8004108:	e005      	b.n	8004116 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004110:	60fb      	str	r3, [r7, #12]

      break;
 8004112:	e000      	b.n	8004116 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004114:	bf00      	nop
  }

  return tmpreg;
 8004116:	68fb      	ldr	r3, [r7, #12]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop

08004124 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr

08004136 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr

08004148 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr

0800415a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr

0800416c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a2f      	ldr	r2, [pc, #188]	@ (800423c <TIM_Base_SetConfig+0xd0>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00b      	beq.n	800419c <TIM_Base_SetConfig+0x30>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800418a:	d007      	beq.n	800419c <TIM_Base_SetConfig+0x30>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a2c      	ldr	r2, [pc, #176]	@ (8004240 <TIM_Base_SetConfig+0xd4>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d003      	beq.n	800419c <TIM_Base_SetConfig+0x30>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a2b      	ldr	r2, [pc, #172]	@ (8004244 <TIM_Base_SetConfig+0xd8>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d108      	bne.n	80041ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a22      	ldr	r2, [pc, #136]	@ (800423c <TIM_Base_SetConfig+0xd0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d00b      	beq.n	80041ce <TIM_Base_SetConfig+0x62>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041bc:	d007      	beq.n	80041ce <TIM_Base_SetConfig+0x62>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004240 <TIM_Base_SetConfig+0xd4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d003      	beq.n	80041ce <TIM_Base_SetConfig+0x62>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004244 <TIM_Base_SetConfig+0xd8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d108      	bne.n	80041e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	4313      	orrs	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a0d      	ldr	r2, [pc, #52]	@ (800423c <TIM_Base_SetConfig+0xd0>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d103      	bne.n	8004214 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d005      	beq.n	8004232 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f023 0201 	bic.w	r2, r3, #1
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	611a      	str	r2, [r3, #16]
  }
}
 8004232:	bf00      	nop
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr
 800423c:	40012c00 	.word	0x40012c00
 8004240:	40000400 	.word	0x40000400
 8004244:	40000800 	.word	0x40000800

08004248 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004264:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	4313      	orrs	r3, r2
 800426e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f023 0307 	bic.w	r3, r3, #7
 8004276:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b70      	cmp	r3, #112	@ 0x70
 8004290:	d01a      	beq.n	80042c8 <TIM_SlaveTimer_SetConfig+0x80>
 8004292:	2b70      	cmp	r3, #112	@ 0x70
 8004294:	d860      	bhi.n	8004358 <TIM_SlaveTimer_SetConfig+0x110>
 8004296:	2b60      	cmp	r3, #96	@ 0x60
 8004298:	d054      	beq.n	8004344 <TIM_SlaveTimer_SetConfig+0xfc>
 800429a:	2b60      	cmp	r3, #96	@ 0x60
 800429c:	d85c      	bhi.n	8004358 <TIM_SlaveTimer_SetConfig+0x110>
 800429e:	2b50      	cmp	r3, #80	@ 0x50
 80042a0:	d046      	beq.n	8004330 <TIM_SlaveTimer_SetConfig+0xe8>
 80042a2:	2b50      	cmp	r3, #80	@ 0x50
 80042a4:	d858      	bhi.n	8004358 <TIM_SlaveTimer_SetConfig+0x110>
 80042a6:	2b40      	cmp	r3, #64	@ 0x40
 80042a8:	d019      	beq.n	80042de <TIM_SlaveTimer_SetConfig+0x96>
 80042aa:	2b40      	cmp	r3, #64	@ 0x40
 80042ac:	d854      	bhi.n	8004358 <TIM_SlaveTimer_SetConfig+0x110>
 80042ae:	2b30      	cmp	r3, #48	@ 0x30
 80042b0:	d055      	beq.n	800435e <TIM_SlaveTimer_SetConfig+0x116>
 80042b2:	2b30      	cmp	r3, #48	@ 0x30
 80042b4:	d850      	bhi.n	8004358 <TIM_SlaveTimer_SetConfig+0x110>
 80042b6:	2b20      	cmp	r3, #32
 80042b8:	d051      	beq.n	800435e <TIM_SlaveTimer_SetConfig+0x116>
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	d84c      	bhi.n	8004358 <TIM_SlaveTimer_SetConfig+0x110>
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d04d      	beq.n	800435e <TIM_SlaveTimer_SetConfig+0x116>
 80042c2:	2b10      	cmp	r3, #16
 80042c4:	d04b      	beq.n	800435e <TIM_SlaveTimer_SetConfig+0x116>
 80042c6:	e047      	b.n	8004358 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80042d8:	f000 f9cc 	bl	8004674 <TIM_ETR_SetConfig>
      break;
 80042dc:	e040      	b.n	8004360 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b05      	cmp	r3, #5
 80042e4:	d101      	bne.n	80042ea <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e03b      	b.n	8004362 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6a1a      	ldr	r2, [r3, #32]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0201 	bic.w	r2, r2, #1
 8004300:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004310:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	4313      	orrs	r3, r2
 800431c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	621a      	str	r2, [r3, #32]
      break;
 800432e:	e017      	b.n	8004360 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800433c:	461a      	mov	r2, r3
 800433e:	f000 f86f 	bl	8004420 <TIM_TI1_ConfigInputStage>
      break;
 8004342:	e00d      	b.n	8004360 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004350:	461a      	mov	r2, r3
 8004352:	f000 f8cf 	bl	80044f4 <TIM_TI2_ConfigInputStage>
      break;
 8004356:	e003      	b.n	8004360 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	75fb      	strb	r3, [r7, #23]
      break;
 800435c:	e000      	b.n	8004360 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800435e:	bf00      	nop
  }

  return status;
 8004360:	7dfb      	ldrb	r3, [r7, #23]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	f023 0201 	bic.w	r2, r3, #1
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4a1f      	ldr	r2, [pc, #124]	@ (8004414 <TIM_TI1_SetConfig+0xa8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00b      	beq.n	80043b2 <TIM_TI1_SetConfig+0x46>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043a0:	d007      	beq.n	80043b2 <TIM_TI1_SetConfig+0x46>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004418 <TIM_TI1_SetConfig+0xac>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d003      	beq.n	80043b2 <TIM_TI1_SetConfig+0x46>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4a1b      	ldr	r2, [pc, #108]	@ (800441c <TIM_TI1_SetConfig+0xb0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d101      	bne.n	80043b6 <TIM_TI1_SetConfig+0x4a>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <TIM_TI1_SetConfig+0x4c>
 80043b6:	2300      	movs	r3, #0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d008      	beq.n	80043ce <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f023 0303 	bic.w	r3, r3, #3
 80043c2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	e003      	b.n	80043d6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f043 0301 	orr.w	r3, r3, #1
 80043d4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	f023 030a 	bic.w	r3, r3, #10
 80043f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	f003 030a 	and.w	r3, r3, #10
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr
 8004414:	40012c00 	.word	0x40012c00
 8004418:	40000400 	.word	0x40000400
 800441c:	40000800 	.word	0x40000800

08004420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	f023 0201 	bic.w	r2, r3, #1
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800444a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4313      	orrs	r3, r2
 8004454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f023 030a 	bic.w	r3, r3, #10
 800445c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4313      	orrs	r3, r2
 8004464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	621a      	str	r2, [r3, #32]
}
 8004472:	bf00      	nop
 8004474:	371c      	adds	r7, #28
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr

0800447c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
 8004488:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	f023 0210 	bic.w	r2, r3, #16
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	021b      	lsls	r3, r3, #8
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	031b      	lsls	r3, r3, #12
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044ce:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4313      	orrs	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	621a      	str	r2, [r3, #32]
}
 80044ea:	bf00      	nop
 80044ec:	371c      	adds	r7, #28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr

080044f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	f023 0210 	bic.w	r2, r3, #16
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800451e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	031b      	lsls	r3, r3, #12
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	4313      	orrs	r3, r2
 8004528:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004530:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	621a      	str	r2, [r3, #32]
}
 8004548:	bf00      	nop
 800454a:	371c      	adds	r7, #28
 800454c:	46bd      	mov	sp, r7
 800454e:	bc80      	pop	{r7}
 8004550:	4770      	bx	lr

08004552 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004552:	b480      	push	{r7}
 8004554:	b087      	sub	sp, #28
 8004556:	af00      	add	r7, sp, #0
 8004558:	60f8      	str	r0, [r7, #12]
 800455a:	60b9      	str	r1, [r7, #8]
 800455c:	607a      	str	r2, [r7, #4]
 800455e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f023 0303 	bic.w	r3, r3, #3
 800457e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4313      	orrs	r3, r2
 8004586:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800458e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	b2db      	uxtb	r3, r3
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045a2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	021b      	lsls	r3, r3, #8
 80045a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	621a      	str	r2, [r3, #32]
}
 80045be:	bf00      	nop
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bc80      	pop	{r7}
 80045c6:	4770      	bx	lr

080045c8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045f4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	021b      	lsls	r3, r3, #8
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004606:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	031b      	lsls	r3, r3, #12
 800460c:	b29b      	uxth	r3, r3
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4313      	orrs	r3, r2
 8004612:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800461a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	031b      	lsls	r3, r3, #12
 8004620:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	4313      	orrs	r3, r2
 8004628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	621a      	str	r2, [r3, #32]
}
 8004636:	bf00      	nop
 8004638:	371c      	adds	r7, #28
 800463a:	46bd      	mov	sp, r7
 800463c:	bc80      	pop	{r7}
 800463e:	4770      	bx	lr

08004640 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004656:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4313      	orrs	r3, r2
 800465e:	f043 0307 	orr.w	r3, r3, #7
 8004662:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	609a      	str	r2, [r3, #8]
}
 800466a:	bf00      	nop
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr

08004674 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800468e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	021a      	lsls	r2, r3, #8
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	431a      	orrs	r2, r3
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4313      	orrs	r3, r2
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	4313      	orrs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	609a      	str	r2, [r3, #8]
}
 80046a8:	bf00      	nop
 80046aa:	371c      	adds	r7, #28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bc80      	pop	{r7}
 80046b0:	4770      	bx	lr

080046b2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b087      	sub	sp, #28
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	60f8      	str	r0, [r7, #12]
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f003 031f 	and.w	r3, r3, #31
 80046c4:	2201      	movs	r2, #1
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a1a      	ldr	r2, [r3, #32]
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	43db      	mvns	r3, r3
 80046d4:	401a      	ands	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a1a      	ldr	r2, [r3, #32]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	f003 031f 	and.w	r3, r3, #31
 80046e4:	6879      	ldr	r1, [r7, #4]
 80046e6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ea:	431a      	orrs	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	621a      	str	r2, [r3, #32]
}
 80046f0:	bf00      	nop
 80046f2:	371c      	adds	r7, #28
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bc80      	pop	{r7}
 80046f8:	4770      	bx	lr
	...

080046fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004710:	2302      	movs	r3, #2
 8004712:	e046      	b.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800473a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a16      	ldr	r2, [pc, #88]	@ (80047ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00e      	beq.n	8004776 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004760:	d009      	beq.n	8004776 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a12      	ldr	r2, [pc, #72]	@ (80047b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d004      	beq.n	8004776 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a10      	ldr	r2, [pc, #64]	@ (80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d10c      	bne.n	8004790 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800477c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	4313      	orrs	r3, r2
 8004786:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr
 80047ac:	40012c00 	.word	0x40012c00
 80047b0:	40000400 	.word	0x40000400
 80047b4:	40000800 	.word	0x40000800

080047b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bc80      	pop	{r7}
 80047c8:	4770      	bx	lr

080047ca <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bc80      	pop	{r7}
 80047da:	4770      	bx	lr

080047dc <siprintf>:
 80047dc:	b40e      	push	{r1, r2, r3}
 80047de:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80047e2:	b500      	push	{lr}
 80047e4:	b09c      	sub	sp, #112	@ 0x70
 80047e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80047e8:	9002      	str	r0, [sp, #8]
 80047ea:	9006      	str	r0, [sp, #24]
 80047ec:	9107      	str	r1, [sp, #28]
 80047ee:	9104      	str	r1, [sp, #16]
 80047f0:	4808      	ldr	r0, [pc, #32]	@ (8004814 <siprintf+0x38>)
 80047f2:	4909      	ldr	r1, [pc, #36]	@ (8004818 <siprintf+0x3c>)
 80047f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80047f8:	9105      	str	r1, [sp, #20]
 80047fa:	6800      	ldr	r0, [r0, #0]
 80047fc:	a902      	add	r1, sp, #8
 80047fe:	9301      	str	r3, [sp, #4]
 8004800:	f000 f9a0 	bl	8004b44 <_svfiprintf_r>
 8004804:	2200      	movs	r2, #0
 8004806:	9b02      	ldr	r3, [sp, #8]
 8004808:	701a      	strb	r2, [r3, #0]
 800480a:	b01c      	add	sp, #112	@ 0x70
 800480c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004810:	b003      	add	sp, #12
 8004812:	4770      	bx	lr
 8004814:	2000000c 	.word	0x2000000c
 8004818:	ffff0208 	.word	0xffff0208

0800481c <memset>:
 800481c:	4603      	mov	r3, r0
 800481e:	4402      	add	r2, r0
 8004820:	4293      	cmp	r3, r2
 8004822:	d100      	bne.n	8004826 <memset+0xa>
 8004824:	4770      	bx	lr
 8004826:	f803 1b01 	strb.w	r1, [r3], #1
 800482a:	e7f9      	b.n	8004820 <memset+0x4>

0800482c <__errno>:
 800482c:	4b01      	ldr	r3, [pc, #4]	@ (8004834 <__errno+0x8>)
 800482e:	6818      	ldr	r0, [r3, #0]
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	2000000c 	.word	0x2000000c

08004838 <__libc_init_array>:
 8004838:	b570      	push	{r4, r5, r6, lr}
 800483a:	2600      	movs	r6, #0
 800483c:	4d0c      	ldr	r5, [pc, #48]	@ (8004870 <__libc_init_array+0x38>)
 800483e:	4c0d      	ldr	r4, [pc, #52]	@ (8004874 <__libc_init_array+0x3c>)
 8004840:	1b64      	subs	r4, r4, r5
 8004842:	10a4      	asrs	r4, r4, #2
 8004844:	42a6      	cmp	r6, r4
 8004846:	d109      	bne.n	800485c <__libc_init_array+0x24>
 8004848:	f000 fc78 	bl	800513c <_init>
 800484c:	2600      	movs	r6, #0
 800484e:	4d0a      	ldr	r5, [pc, #40]	@ (8004878 <__libc_init_array+0x40>)
 8004850:	4c0a      	ldr	r4, [pc, #40]	@ (800487c <__libc_init_array+0x44>)
 8004852:	1b64      	subs	r4, r4, r5
 8004854:	10a4      	asrs	r4, r4, #2
 8004856:	42a6      	cmp	r6, r4
 8004858:	d105      	bne.n	8004866 <__libc_init_array+0x2e>
 800485a:	bd70      	pop	{r4, r5, r6, pc}
 800485c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004860:	4798      	blx	r3
 8004862:	3601      	adds	r6, #1
 8004864:	e7ee      	b.n	8004844 <__libc_init_array+0xc>
 8004866:	f855 3b04 	ldr.w	r3, [r5], #4
 800486a:	4798      	blx	r3
 800486c:	3601      	adds	r6, #1
 800486e:	e7f2      	b.n	8004856 <__libc_init_array+0x1e>
 8004870:	080057fc 	.word	0x080057fc
 8004874:	080057fc 	.word	0x080057fc
 8004878:	080057fc 	.word	0x080057fc
 800487c:	08005800 	.word	0x08005800

08004880 <__retarget_lock_acquire_recursive>:
 8004880:	4770      	bx	lr

08004882 <__retarget_lock_release_recursive>:
 8004882:	4770      	bx	lr

08004884 <memcpy>:
 8004884:	440a      	add	r2, r1
 8004886:	4291      	cmp	r1, r2
 8004888:	f100 33ff 	add.w	r3, r0, #4294967295
 800488c:	d100      	bne.n	8004890 <memcpy+0xc>
 800488e:	4770      	bx	lr
 8004890:	b510      	push	{r4, lr}
 8004892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004896:	4291      	cmp	r1, r2
 8004898:	f803 4f01 	strb.w	r4, [r3, #1]!
 800489c:	d1f9      	bne.n	8004892 <memcpy+0xe>
 800489e:	bd10      	pop	{r4, pc}

080048a0 <_free_r>:
 80048a0:	b538      	push	{r3, r4, r5, lr}
 80048a2:	4605      	mov	r5, r0
 80048a4:	2900      	cmp	r1, #0
 80048a6:	d040      	beq.n	800492a <_free_r+0x8a>
 80048a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048ac:	1f0c      	subs	r4, r1, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	bfb8      	it	lt
 80048b2:	18e4      	addlt	r4, r4, r3
 80048b4:	f000 f8de 	bl	8004a74 <__malloc_lock>
 80048b8:	4a1c      	ldr	r2, [pc, #112]	@ (800492c <_free_r+0x8c>)
 80048ba:	6813      	ldr	r3, [r2, #0]
 80048bc:	b933      	cbnz	r3, 80048cc <_free_r+0x2c>
 80048be:	6063      	str	r3, [r4, #4]
 80048c0:	6014      	str	r4, [r2, #0]
 80048c2:	4628      	mov	r0, r5
 80048c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048c8:	f000 b8da 	b.w	8004a80 <__malloc_unlock>
 80048cc:	42a3      	cmp	r3, r4
 80048ce:	d908      	bls.n	80048e2 <_free_r+0x42>
 80048d0:	6820      	ldr	r0, [r4, #0]
 80048d2:	1821      	adds	r1, r4, r0
 80048d4:	428b      	cmp	r3, r1
 80048d6:	bf01      	itttt	eq
 80048d8:	6819      	ldreq	r1, [r3, #0]
 80048da:	685b      	ldreq	r3, [r3, #4]
 80048dc:	1809      	addeq	r1, r1, r0
 80048de:	6021      	streq	r1, [r4, #0]
 80048e0:	e7ed      	b.n	80048be <_free_r+0x1e>
 80048e2:	461a      	mov	r2, r3
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	b10b      	cbz	r3, 80048ec <_free_r+0x4c>
 80048e8:	42a3      	cmp	r3, r4
 80048ea:	d9fa      	bls.n	80048e2 <_free_r+0x42>
 80048ec:	6811      	ldr	r1, [r2, #0]
 80048ee:	1850      	adds	r0, r2, r1
 80048f0:	42a0      	cmp	r0, r4
 80048f2:	d10b      	bne.n	800490c <_free_r+0x6c>
 80048f4:	6820      	ldr	r0, [r4, #0]
 80048f6:	4401      	add	r1, r0
 80048f8:	1850      	adds	r0, r2, r1
 80048fa:	4283      	cmp	r3, r0
 80048fc:	6011      	str	r1, [r2, #0]
 80048fe:	d1e0      	bne.n	80048c2 <_free_r+0x22>
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	4408      	add	r0, r1
 8004906:	6010      	str	r0, [r2, #0]
 8004908:	6053      	str	r3, [r2, #4]
 800490a:	e7da      	b.n	80048c2 <_free_r+0x22>
 800490c:	d902      	bls.n	8004914 <_free_r+0x74>
 800490e:	230c      	movs	r3, #12
 8004910:	602b      	str	r3, [r5, #0]
 8004912:	e7d6      	b.n	80048c2 <_free_r+0x22>
 8004914:	6820      	ldr	r0, [r4, #0]
 8004916:	1821      	adds	r1, r4, r0
 8004918:	428b      	cmp	r3, r1
 800491a:	bf01      	itttt	eq
 800491c:	6819      	ldreq	r1, [r3, #0]
 800491e:	685b      	ldreq	r3, [r3, #4]
 8004920:	1809      	addeq	r1, r1, r0
 8004922:	6021      	streq	r1, [r4, #0]
 8004924:	6063      	str	r3, [r4, #4]
 8004926:	6054      	str	r4, [r2, #4]
 8004928:	e7cb      	b.n	80048c2 <_free_r+0x22>
 800492a:	bd38      	pop	{r3, r4, r5, pc}
 800492c:	200006d8 	.word	0x200006d8

08004930 <sbrk_aligned>:
 8004930:	b570      	push	{r4, r5, r6, lr}
 8004932:	4e0f      	ldr	r6, [pc, #60]	@ (8004970 <sbrk_aligned+0x40>)
 8004934:	460c      	mov	r4, r1
 8004936:	6831      	ldr	r1, [r6, #0]
 8004938:	4605      	mov	r5, r0
 800493a:	b911      	cbnz	r1, 8004942 <sbrk_aligned+0x12>
 800493c:	f000 fbaa 	bl	8005094 <_sbrk_r>
 8004940:	6030      	str	r0, [r6, #0]
 8004942:	4621      	mov	r1, r4
 8004944:	4628      	mov	r0, r5
 8004946:	f000 fba5 	bl	8005094 <_sbrk_r>
 800494a:	1c43      	adds	r3, r0, #1
 800494c:	d103      	bne.n	8004956 <sbrk_aligned+0x26>
 800494e:	f04f 34ff 	mov.w	r4, #4294967295
 8004952:	4620      	mov	r0, r4
 8004954:	bd70      	pop	{r4, r5, r6, pc}
 8004956:	1cc4      	adds	r4, r0, #3
 8004958:	f024 0403 	bic.w	r4, r4, #3
 800495c:	42a0      	cmp	r0, r4
 800495e:	d0f8      	beq.n	8004952 <sbrk_aligned+0x22>
 8004960:	1a21      	subs	r1, r4, r0
 8004962:	4628      	mov	r0, r5
 8004964:	f000 fb96 	bl	8005094 <_sbrk_r>
 8004968:	3001      	adds	r0, #1
 800496a:	d1f2      	bne.n	8004952 <sbrk_aligned+0x22>
 800496c:	e7ef      	b.n	800494e <sbrk_aligned+0x1e>
 800496e:	bf00      	nop
 8004970:	200006d4 	.word	0x200006d4

08004974 <_malloc_r>:
 8004974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004978:	1ccd      	adds	r5, r1, #3
 800497a:	f025 0503 	bic.w	r5, r5, #3
 800497e:	3508      	adds	r5, #8
 8004980:	2d0c      	cmp	r5, #12
 8004982:	bf38      	it	cc
 8004984:	250c      	movcc	r5, #12
 8004986:	2d00      	cmp	r5, #0
 8004988:	4606      	mov	r6, r0
 800498a:	db01      	blt.n	8004990 <_malloc_r+0x1c>
 800498c:	42a9      	cmp	r1, r5
 800498e:	d904      	bls.n	800499a <_malloc_r+0x26>
 8004990:	230c      	movs	r3, #12
 8004992:	6033      	str	r3, [r6, #0]
 8004994:	2000      	movs	r0, #0
 8004996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800499a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a70 <_malloc_r+0xfc>
 800499e:	f000 f869 	bl	8004a74 <__malloc_lock>
 80049a2:	f8d8 3000 	ldr.w	r3, [r8]
 80049a6:	461c      	mov	r4, r3
 80049a8:	bb44      	cbnz	r4, 80049fc <_malloc_r+0x88>
 80049aa:	4629      	mov	r1, r5
 80049ac:	4630      	mov	r0, r6
 80049ae:	f7ff ffbf 	bl	8004930 <sbrk_aligned>
 80049b2:	1c43      	adds	r3, r0, #1
 80049b4:	4604      	mov	r4, r0
 80049b6:	d158      	bne.n	8004a6a <_malloc_r+0xf6>
 80049b8:	f8d8 4000 	ldr.w	r4, [r8]
 80049bc:	4627      	mov	r7, r4
 80049be:	2f00      	cmp	r7, #0
 80049c0:	d143      	bne.n	8004a4a <_malloc_r+0xd6>
 80049c2:	2c00      	cmp	r4, #0
 80049c4:	d04b      	beq.n	8004a5e <_malloc_r+0xea>
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	4639      	mov	r1, r7
 80049ca:	4630      	mov	r0, r6
 80049cc:	eb04 0903 	add.w	r9, r4, r3
 80049d0:	f000 fb60 	bl	8005094 <_sbrk_r>
 80049d4:	4581      	cmp	r9, r0
 80049d6:	d142      	bne.n	8004a5e <_malloc_r+0xea>
 80049d8:	6821      	ldr	r1, [r4, #0]
 80049da:	4630      	mov	r0, r6
 80049dc:	1a6d      	subs	r5, r5, r1
 80049de:	4629      	mov	r1, r5
 80049e0:	f7ff ffa6 	bl	8004930 <sbrk_aligned>
 80049e4:	3001      	adds	r0, #1
 80049e6:	d03a      	beq.n	8004a5e <_malloc_r+0xea>
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	442b      	add	r3, r5
 80049ec:	6023      	str	r3, [r4, #0]
 80049ee:	f8d8 3000 	ldr.w	r3, [r8]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	bb62      	cbnz	r2, 8004a50 <_malloc_r+0xdc>
 80049f6:	f8c8 7000 	str.w	r7, [r8]
 80049fa:	e00f      	b.n	8004a1c <_malloc_r+0xa8>
 80049fc:	6822      	ldr	r2, [r4, #0]
 80049fe:	1b52      	subs	r2, r2, r5
 8004a00:	d420      	bmi.n	8004a44 <_malloc_r+0xd0>
 8004a02:	2a0b      	cmp	r2, #11
 8004a04:	d917      	bls.n	8004a36 <_malloc_r+0xc2>
 8004a06:	1961      	adds	r1, r4, r5
 8004a08:	42a3      	cmp	r3, r4
 8004a0a:	6025      	str	r5, [r4, #0]
 8004a0c:	bf18      	it	ne
 8004a0e:	6059      	strne	r1, [r3, #4]
 8004a10:	6863      	ldr	r3, [r4, #4]
 8004a12:	bf08      	it	eq
 8004a14:	f8c8 1000 	streq.w	r1, [r8]
 8004a18:	5162      	str	r2, [r4, r5]
 8004a1a:	604b      	str	r3, [r1, #4]
 8004a1c:	4630      	mov	r0, r6
 8004a1e:	f000 f82f 	bl	8004a80 <__malloc_unlock>
 8004a22:	f104 000b 	add.w	r0, r4, #11
 8004a26:	1d23      	adds	r3, r4, #4
 8004a28:	f020 0007 	bic.w	r0, r0, #7
 8004a2c:	1ac2      	subs	r2, r0, r3
 8004a2e:	bf1c      	itt	ne
 8004a30:	1a1b      	subne	r3, r3, r0
 8004a32:	50a3      	strne	r3, [r4, r2]
 8004a34:	e7af      	b.n	8004996 <_malloc_r+0x22>
 8004a36:	6862      	ldr	r2, [r4, #4]
 8004a38:	42a3      	cmp	r3, r4
 8004a3a:	bf0c      	ite	eq
 8004a3c:	f8c8 2000 	streq.w	r2, [r8]
 8004a40:	605a      	strne	r2, [r3, #4]
 8004a42:	e7eb      	b.n	8004a1c <_malloc_r+0xa8>
 8004a44:	4623      	mov	r3, r4
 8004a46:	6864      	ldr	r4, [r4, #4]
 8004a48:	e7ae      	b.n	80049a8 <_malloc_r+0x34>
 8004a4a:	463c      	mov	r4, r7
 8004a4c:	687f      	ldr	r7, [r7, #4]
 8004a4e:	e7b6      	b.n	80049be <_malloc_r+0x4a>
 8004a50:	461a      	mov	r2, r3
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	42a3      	cmp	r3, r4
 8004a56:	d1fb      	bne.n	8004a50 <_malloc_r+0xdc>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	6053      	str	r3, [r2, #4]
 8004a5c:	e7de      	b.n	8004a1c <_malloc_r+0xa8>
 8004a5e:	230c      	movs	r3, #12
 8004a60:	4630      	mov	r0, r6
 8004a62:	6033      	str	r3, [r6, #0]
 8004a64:	f000 f80c 	bl	8004a80 <__malloc_unlock>
 8004a68:	e794      	b.n	8004994 <_malloc_r+0x20>
 8004a6a:	6005      	str	r5, [r0, #0]
 8004a6c:	e7d6      	b.n	8004a1c <_malloc_r+0xa8>
 8004a6e:	bf00      	nop
 8004a70:	200006d8 	.word	0x200006d8

08004a74 <__malloc_lock>:
 8004a74:	4801      	ldr	r0, [pc, #4]	@ (8004a7c <__malloc_lock+0x8>)
 8004a76:	f7ff bf03 	b.w	8004880 <__retarget_lock_acquire_recursive>
 8004a7a:	bf00      	nop
 8004a7c:	200006d0 	.word	0x200006d0

08004a80 <__malloc_unlock>:
 8004a80:	4801      	ldr	r0, [pc, #4]	@ (8004a88 <__malloc_unlock+0x8>)
 8004a82:	f7ff befe 	b.w	8004882 <__retarget_lock_release_recursive>
 8004a86:	bf00      	nop
 8004a88:	200006d0 	.word	0x200006d0

08004a8c <__ssputs_r>:
 8004a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a90:	461f      	mov	r7, r3
 8004a92:	688e      	ldr	r6, [r1, #8]
 8004a94:	4682      	mov	sl, r0
 8004a96:	42be      	cmp	r6, r7
 8004a98:	460c      	mov	r4, r1
 8004a9a:	4690      	mov	r8, r2
 8004a9c:	680b      	ldr	r3, [r1, #0]
 8004a9e:	d82d      	bhi.n	8004afc <__ssputs_r+0x70>
 8004aa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004aa4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004aa8:	d026      	beq.n	8004af8 <__ssputs_r+0x6c>
 8004aaa:	6965      	ldr	r5, [r4, #20]
 8004aac:	6909      	ldr	r1, [r1, #16]
 8004aae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ab2:	eba3 0901 	sub.w	r9, r3, r1
 8004ab6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004aba:	1c7b      	adds	r3, r7, #1
 8004abc:	444b      	add	r3, r9
 8004abe:	106d      	asrs	r5, r5, #1
 8004ac0:	429d      	cmp	r5, r3
 8004ac2:	bf38      	it	cc
 8004ac4:	461d      	movcc	r5, r3
 8004ac6:	0553      	lsls	r3, r2, #21
 8004ac8:	d527      	bpl.n	8004b1a <__ssputs_r+0x8e>
 8004aca:	4629      	mov	r1, r5
 8004acc:	f7ff ff52 	bl	8004974 <_malloc_r>
 8004ad0:	4606      	mov	r6, r0
 8004ad2:	b360      	cbz	r0, 8004b2e <__ssputs_r+0xa2>
 8004ad4:	464a      	mov	r2, r9
 8004ad6:	6921      	ldr	r1, [r4, #16]
 8004ad8:	f7ff fed4 	bl	8004884 <memcpy>
 8004adc:	89a3      	ldrh	r3, [r4, #12]
 8004ade:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ae6:	81a3      	strh	r3, [r4, #12]
 8004ae8:	6126      	str	r6, [r4, #16]
 8004aea:	444e      	add	r6, r9
 8004aec:	6026      	str	r6, [r4, #0]
 8004aee:	463e      	mov	r6, r7
 8004af0:	6165      	str	r5, [r4, #20]
 8004af2:	eba5 0509 	sub.w	r5, r5, r9
 8004af6:	60a5      	str	r5, [r4, #8]
 8004af8:	42be      	cmp	r6, r7
 8004afa:	d900      	bls.n	8004afe <__ssputs_r+0x72>
 8004afc:	463e      	mov	r6, r7
 8004afe:	4632      	mov	r2, r6
 8004b00:	4641      	mov	r1, r8
 8004b02:	6820      	ldr	r0, [r4, #0]
 8004b04:	f000 faac 	bl	8005060 <memmove>
 8004b08:	2000      	movs	r0, #0
 8004b0a:	68a3      	ldr	r3, [r4, #8]
 8004b0c:	1b9b      	subs	r3, r3, r6
 8004b0e:	60a3      	str	r3, [r4, #8]
 8004b10:	6823      	ldr	r3, [r4, #0]
 8004b12:	4433      	add	r3, r6
 8004b14:	6023      	str	r3, [r4, #0]
 8004b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b1a:	462a      	mov	r2, r5
 8004b1c:	f000 fad8 	bl	80050d0 <_realloc_r>
 8004b20:	4606      	mov	r6, r0
 8004b22:	2800      	cmp	r0, #0
 8004b24:	d1e0      	bne.n	8004ae8 <__ssputs_r+0x5c>
 8004b26:	4650      	mov	r0, sl
 8004b28:	6921      	ldr	r1, [r4, #16]
 8004b2a:	f7ff feb9 	bl	80048a0 <_free_r>
 8004b2e:	230c      	movs	r3, #12
 8004b30:	f8ca 3000 	str.w	r3, [sl]
 8004b34:	89a3      	ldrh	r3, [r4, #12]
 8004b36:	f04f 30ff 	mov.w	r0, #4294967295
 8004b3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b3e:	81a3      	strh	r3, [r4, #12]
 8004b40:	e7e9      	b.n	8004b16 <__ssputs_r+0x8a>
	...

08004b44 <_svfiprintf_r>:
 8004b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b48:	4698      	mov	r8, r3
 8004b4a:	898b      	ldrh	r3, [r1, #12]
 8004b4c:	4607      	mov	r7, r0
 8004b4e:	061b      	lsls	r3, r3, #24
 8004b50:	460d      	mov	r5, r1
 8004b52:	4614      	mov	r4, r2
 8004b54:	b09d      	sub	sp, #116	@ 0x74
 8004b56:	d510      	bpl.n	8004b7a <_svfiprintf_r+0x36>
 8004b58:	690b      	ldr	r3, [r1, #16]
 8004b5a:	b973      	cbnz	r3, 8004b7a <_svfiprintf_r+0x36>
 8004b5c:	2140      	movs	r1, #64	@ 0x40
 8004b5e:	f7ff ff09 	bl	8004974 <_malloc_r>
 8004b62:	6028      	str	r0, [r5, #0]
 8004b64:	6128      	str	r0, [r5, #16]
 8004b66:	b930      	cbnz	r0, 8004b76 <_svfiprintf_r+0x32>
 8004b68:	230c      	movs	r3, #12
 8004b6a:	603b      	str	r3, [r7, #0]
 8004b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b70:	b01d      	add	sp, #116	@ 0x74
 8004b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b76:	2340      	movs	r3, #64	@ 0x40
 8004b78:	616b      	str	r3, [r5, #20]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b7e:	2320      	movs	r3, #32
 8004b80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b84:	2330      	movs	r3, #48	@ 0x30
 8004b86:	f04f 0901 	mov.w	r9, #1
 8004b8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b8e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004d28 <_svfiprintf_r+0x1e4>
 8004b92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b96:	4623      	mov	r3, r4
 8004b98:	469a      	mov	sl, r3
 8004b9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b9e:	b10a      	cbz	r2, 8004ba4 <_svfiprintf_r+0x60>
 8004ba0:	2a25      	cmp	r2, #37	@ 0x25
 8004ba2:	d1f9      	bne.n	8004b98 <_svfiprintf_r+0x54>
 8004ba4:	ebba 0b04 	subs.w	fp, sl, r4
 8004ba8:	d00b      	beq.n	8004bc2 <_svfiprintf_r+0x7e>
 8004baa:	465b      	mov	r3, fp
 8004bac:	4622      	mov	r2, r4
 8004bae:	4629      	mov	r1, r5
 8004bb0:	4638      	mov	r0, r7
 8004bb2:	f7ff ff6b 	bl	8004a8c <__ssputs_r>
 8004bb6:	3001      	adds	r0, #1
 8004bb8:	f000 80a7 	beq.w	8004d0a <_svfiprintf_r+0x1c6>
 8004bbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bbe:	445a      	add	r2, fp
 8004bc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bc2:	f89a 3000 	ldrb.w	r3, [sl]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 809f 	beq.w	8004d0a <_svfiprintf_r+0x1c6>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bd6:	f10a 0a01 	add.w	sl, sl, #1
 8004bda:	9304      	str	r3, [sp, #16]
 8004bdc:	9307      	str	r3, [sp, #28]
 8004bde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004be2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004be4:	4654      	mov	r4, sl
 8004be6:	2205      	movs	r2, #5
 8004be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bec:	484e      	ldr	r0, [pc, #312]	@ (8004d28 <_svfiprintf_r+0x1e4>)
 8004bee:	f000 fa61 	bl	80050b4 <memchr>
 8004bf2:	9a04      	ldr	r2, [sp, #16]
 8004bf4:	b9d8      	cbnz	r0, 8004c2e <_svfiprintf_r+0xea>
 8004bf6:	06d0      	lsls	r0, r2, #27
 8004bf8:	bf44      	itt	mi
 8004bfa:	2320      	movmi	r3, #32
 8004bfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c00:	0711      	lsls	r1, r2, #28
 8004c02:	bf44      	itt	mi
 8004c04:	232b      	movmi	r3, #43	@ 0x2b
 8004c06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c0a:	f89a 3000 	ldrb.w	r3, [sl]
 8004c0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c10:	d015      	beq.n	8004c3e <_svfiprintf_r+0xfa>
 8004c12:	4654      	mov	r4, sl
 8004c14:	2000      	movs	r0, #0
 8004c16:	f04f 0c0a 	mov.w	ip, #10
 8004c1a:	9a07      	ldr	r2, [sp, #28]
 8004c1c:	4621      	mov	r1, r4
 8004c1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c22:	3b30      	subs	r3, #48	@ 0x30
 8004c24:	2b09      	cmp	r3, #9
 8004c26:	d94b      	bls.n	8004cc0 <_svfiprintf_r+0x17c>
 8004c28:	b1b0      	cbz	r0, 8004c58 <_svfiprintf_r+0x114>
 8004c2a:	9207      	str	r2, [sp, #28]
 8004c2c:	e014      	b.n	8004c58 <_svfiprintf_r+0x114>
 8004c2e:	eba0 0308 	sub.w	r3, r0, r8
 8004c32:	fa09 f303 	lsl.w	r3, r9, r3
 8004c36:	4313      	orrs	r3, r2
 8004c38:	46a2      	mov	sl, r4
 8004c3a:	9304      	str	r3, [sp, #16]
 8004c3c:	e7d2      	b.n	8004be4 <_svfiprintf_r+0xa0>
 8004c3e:	9b03      	ldr	r3, [sp, #12]
 8004c40:	1d19      	adds	r1, r3, #4
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	9103      	str	r1, [sp, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	bfbb      	ittet	lt
 8004c4a:	425b      	neglt	r3, r3
 8004c4c:	f042 0202 	orrlt.w	r2, r2, #2
 8004c50:	9307      	strge	r3, [sp, #28]
 8004c52:	9307      	strlt	r3, [sp, #28]
 8004c54:	bfb8      	it	lt
 8004c56:	9204      	strlt	r2, [sp, #16]
 8004c58:	7823      	ldrb	r3, [r4, #0]
 8004c5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c5c:	d10a      	bne.n	8004c74 <_svfiprintf_r+0x130>
 8004c5e:	7863      	ldrb	r3, [r4, #1]
 8004c60:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c62:	d132      	bne.n	8004cca <_svfiprintf_r+0x186>
 8004c64:	9b03      	ldr	r3, [sp, #12]
 8004c66:	3402      	adds	r4, #2
 8004c68:	1d1a      	adds	r2, r3, #4
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	9203      	str	r2, [sp, #12]
 8004c6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c72:	9305      	str	r3, [sp, #20]
 8004c74:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004d2c <_svfiprintf_r+0x1e8>
 8004c78:	2203      	movs	r2, #3
 8004c7a:	4650      	mov	r0, sl
 8004c7c:	7821      	ldrb	r1, [r4, #0]
 8004c7e:	f000 fa19 	bl	80050b4 <memchr>
 8004c82:	b138      	cbz	r0, 8004c94 <_svfiprintf_r+0x150>
 8004c84:	2240      	movs	r2, #64	@ 0x40
 8004c86:	9b04      	ldr	r3, [sp, #16]
 8004c88:	eba0 000a 	sub.w	r0, r0, sl
 8004c8c:	4082      	lsls	r2, r0
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	3401      	adds	r4, #1
 8004c92:	9304      	str	r3, [sp, #16]
 8004c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c98:	2206      	movs	r2, #6
 8004c9a:	4825      	ldr	r0, [pc, #148]	@ (8004d30 <_svfiprintf_r+0x1ec>)
 8004c9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ca0:	f000 fa08 	bl	80050b4 <memchr>
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	d036      	beq.n	8004d16 <_svfiprintf_r+0x1d2>
 8004ca8:	4b22      	ldr	r3, [pc, #136]	@ (8004d34 <_svfiprintf_r+0x1f0>)
 8004caa:	bb1b      	cbnz	r3, 8004cf4 <_svfiprintf_r+0x1b0>
 8004cac:	9b03      	ldr	r3, [sp, #12]
 8004cae:	3307      	adds	r3, #7
 8004cb0:	f023 0307 	bic.w	r3, r3, #7
 8004cb4:	3308      	adds	r3, #8
 8004cb6:	9303      	str	r3, [sp, #12]
 8004cb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cba:	4433      	add	r3, r6
 8004cbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cbe:	e76a      	b.n	8004b96 <_svfiprintf_r+0x52>
 8004cc0:	460c      	mov	r4, r1
 8004cc2:	2001      	movs	r0, #1
 8004cc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cc8:	e7a8      	b.n	8004c1c <_svfiprintf_r+0xd8>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f04f 0c0a 	mov.w	ip, #10
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	3401      	adds	r4, #1
 8004cd4:	9305      	str	r3, [sp, #20]
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cdc:	3a30      	subs	r2, #48	@ 0x30
 8004cde:	2a09      	cmp	r2, #9
 8004ce0:	d903      	bls.n	8004cea <_svfiprintf_r+0x1a6>
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0c6      	beq.n	8004c74 <_svfiprintf_r+0x130>
 8004ce6:	9105      	str	r1, [sp, #20]
 8004ce8:	e7c4      	b.n	8004c74 <_svfiprintf_r+0x130>
 8004cea:	4604      	mov	r4, r0
 8004cec:	2301      	movs	r3, #1
 8004cee:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cf2:	e7f0      	b.n	8004cd6 <_svfiprintf_r+0x192>
 8004cf4:	ab03      	add	r3, sp, #12
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	462a      	mov	r2, r5
 8004cfa:	4638      	mov	r0, r7
 8004cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8004d38 <_svfiprintf_r+0x1f4>)
 8004cfe:	a904      	add	r1, sp, #16
 8004d00:	f3af 8000 	nop.w
 8004d04:	1c42      	adds	r2, r0, #1
 8004d06:	4606      	mov	r6, r0
 8004d08:	d1d6      	bne.n	8004cb8 <_svfiprintf_r+0x174>
 8004d0a:	89ab      	ldrh	r3, [r5, #12]
 8004d0c:	065b      	lsls	r3, r3, #25
 8004d0e:	f53f af2d 	bmi.w	8004b6c <_svfiprintf_r+0x28>
 8004d12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d14:	e72c      	b.n	8004b70 <_svfiprintf_r+0x2c>
 8004d16:	ab03      	add	r3, sp, #12
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	462a      	mov	r2, r5
 8004d1c:	4638      	mov	r0, r7
 8004d1e:	4b06      	ldr	r3, [pc, #24]	@ (8004d38 <_svfiprintf_r+0x1f4>)
 8004d20:	a904      	add	r1, sp, #16
 8004d22:	f000 f87d 	bl	8004e20 <_printf_i>
 8004d26:	e7ed      	b.n	8004d04 <_svfiprintf_r+0x1c0>
 8004d28:	080057c6 	.word	0x080057c6
 8004d2c:	080057cc 	.word	0x080057cc
 8004d30:	080057d0 	.word	0x080057d0
 8004d34:	00000000 	.word	0x00000000
 8004d38:	08004a8d 	.word	0x08004a8d

08004d3c <_printf_common>:
 8004d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d40:	4616      	mov	r6, r2
 8004d42:	4698      	mov	r8, r3
 8004d44:	688a      	ldr	r2, [r1, #8]
 8004d46:	690b      	ldr	r3, [r1, #16]
 8004d48:	4607      	mov	r7, r0
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	bfb8      	it	lt
 8004d4e:	4613      	movlt	r3, r2
 8004d50:	6033      	str	r3, [r6, #0]
 8004d52:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d56:	460c      	mov	r4, r1
 8004d58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d5c:	b10a      	cbz	r2, 8004d62 <_printf_common+0x26>
 8004d5e:	3301      	adds	r3, #1
 8004d60:	6033      	str	r3, [r6, #0]
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	0699      	lsls	r1, r3, #26
 8004d66:	bf42      	ittt	mi
 8004d68:	6833      	ldrmi	r3, [r6, #0]
 8004d6a:	3302      	addmi	r3, #2
 8004d6c:	6033      	strmi	r3, [r6, #0]
 8004d6e:	6825      	ldr	r5, [r4, #0]
 8004d70:	f015 0506 	ands.w	r5, r5, #6
 8004d74:	d106      	bne.n	8004d84 <_printf_common+0x48>
 8004d76:	f104 0a19 	add.w	sl, r4, #25
 8004d7a:	68e3      	ldr	r3, [r4, #12]
 8004d7c:	6832      	ldr	r2, [r6, #0]
 8004d7e:	1a9b      	subs	r3, r3, r2
 8004d80:	42ab      	cmp	r3, r5
 8004d82:	dc2b      	bgt.n	8004ddc <_printf_common+0xa0>
 8004d84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d88:	6822      	ldr	r2, [r4, #0]
 8004d8a:	3b00      	subs	r3, #0
 8004d8c:	bf18      	it	ne
 8004d8e:	2301      	movne	r3, #1
 8004d90:	0692      	lsls	r2, r2, #26
 8004d92:	d430      	bmi.n	8004df6 <_printf_common+0xba>
 8004d94:	4641      	mov	r1, r8
 8004d96:	4638      	mov	r0, r7
 8004d98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d9c:	47c8      	blx	r9
 8004d9e:	3001      	adds	r0, #1
 8004da0:	d023      	beq.n	8004dea <_printf_common+0xae>
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	6922      	ldr	r2, [r4, #16]
 8004da6:	f003 0306 	and.w	r3, r3, #6
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	bf14      	ite	ne
 8004dae:	2500      	movne	r5, #0
 8004db0:	6833      	ldreq	r3, [r6, #0]
 8004db2:	f04f 0600 	mov.w	r6, #0
 8004db6:	bf08      	it	eq
 8004db8:	68e5      	ldreq	r5, [r4, #12]
 8004dba:	f104 041a 	add.w	r4, r4, #26
 8004dbe:	bf08      	it	eq
 8004dc0:	1aed      	subeq	r5, r5, r3
 8004dc2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004dc6:	bf08      	it	eq
 8004dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	bfc4      	itt	gt
 8004dd0:	1a9b      	subgt	r3, r3, r2
 8004dd2:	18ed      	addgt	r5, r5, r3
 8004dd4:	42b5      	cmp	r5, r6
 8004dd6:	d11a      	bne.n	8004e0e <_printf_common+0xd2>
 8004dd8:	2000      	movs	r0, #0
 8004dda:	e008      	b.n	8004dee <_printf_common+0xb2>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	4652      	mov	r2, sl
 8004de0:	4641      	mov	r1, r8
 8004de2:	4638      	mov	r0, r7
 8004de4:	47c8      	blx	r9
 8004de6:	3001      	adds	r0, #1
 8004de8:	d103      	bne.n	8004df2 <_printf_common+0xb6>
 8004dea:	f04f 30ff 	mov.w	r0, #4294967295
 8004dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004df2:	3501      	adds	r5, #1
 8004df4:	e7c1      	b.n	8004d7a <_printf_common+0x3e>
 8004df6:	2030      	movs	r0, #48	@ 0x30
 8004df8:	18e1      	adds	r1, r4, r3
 8004dfa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e04:	4422      	add	r2, r4
 8004e06:	3302      	adds	r3, #2
 8004e08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e0c:	e7c2      	b.n	8004d94 <_printf_common+0x58>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	4622      	mov	r2, r4
 8004e12:	4641      	mov	r1, r8
 8004e14:	4638      	mov	r0, r7
 8004e16:	47c8      	blx	r9
 8004e18:	3001      	adds	r0, #1
 8004e1a:	d0e6      	beq.n	8004dea <_printf_common+0xae>
 8004e1c:	3601      	adds	r6, #1
 8004e1e:	e7d9      	b.n	8004dd4 <_printf_common+0x98>

08004e20 <_printf_i>:
 8004e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e24:	7e0f      	ldrb	r7, [r1, #24]
 8004e26:	4691      	mov	r9, r2
 8004e28:	2f78      	cmp	r7, #120	@ 0x78
 8004e2a:	4680      	mov	r8, r0
 8004e2c:	460c      	mov	r4, r1
 8004e2e:	469a      	mov	sl, r3
 8004e30:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e36:	d807      	bhi.n	8004e48 <_printf_i+0x28>
 8004e38:	2f62      	cmp	r7, #98	@ 0x62
 8004e3a:	d80a      	bhi.n	8004e52 <_printf_i+0x32>
 8004e3c:	2f00      	cmp	r7, #0
 8004e3e:	f000 80d3 	beq.w	8004fe8 <_printf_i+0x1c8>
 8004e42:	2f58      	cmp	r7, #88	@ 0x58
 8004e44:	f000 80ba 	beq.w	8004fbc <_printf_i+0x19c>
 8004e48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e50:	e03a      	b.n	8004ec8 <_printf_i+0xa8>
 8004e52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e56:	2b15      	cmp	r3, #21
 8004e58:	d8f6      	bhi.n	8004e48 <_printf_i+0x28>
 8004e5a:	a101      	add	r1, pc, #4	@ (adr r1, 8004e60 <_printf_i+0x40>)
 8004e5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e60:	08004eb9 	.word	0x08004eb9
 8004e64:	08004ecd 	.word	0x08004ecd
 8004e68:	08004e49 	.word	0x08004e49
 8004e6c:	08004e49 	.word	0x08004e49
 8004e70:	08004e49 	.word	0x08004e49
 8004e74:	08004e49 	.word	0x08004e49
 8004e78:	08004ecd 	.word	0x08004ecd
 8004e7c:	08004e49 	.word	0x08004e49
 8004e80:	08004e49 	.word	0x08004e49
 8004e84:	08004e49 	.word	0x08004e49
 8004e88:	08004e49 	.word	0x08004e49
 8004e8c:	08004fcf 	.word	0x08004fcf
 8004e90:	08004ef7 	.word	0x08004ef7
 8004e94:	08004f89 	.word	0x08004f89
 8004e98:	08004e49 	.word	0x08004e49
 8004e9c:	08004e49 	.word	0x08004e49
 8004ea0:	08004ff1 	.word	0x08004ff1
 8004ea4:	08004e49 	.word	0x08004e49
 8004ea8:	08004ef7 	.word	0x08004ef7
 8004eac:	08004e49 	.word	0x08004e49
 8004eb0:	08004e49 	.word	0x08004e49
 8004eb4:	08004f91 	.word	0x08004f91
 8004eb8:	6833      	ldr	r3, [r6, #0]
 8004eba:	1d1a      	adds	r2, r3, #4
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6032      	str	r2, [r6, #0]
 8004ec0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ec4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e09e      	b.n	800500a <_printf_i+0x1ea>
 8004ecc:	6833      	ldr	r3, [r6, #0]
 8004ece:	6820      	ldr	r0, [r4, #0]
 8004ed0:	1d19      	adds	r1, r3, #4
 8004ed2:	6031      	str	r1, [r6, #0]
 8004ed4:	0606      	lsls	r6, r0, #24
 8004ed6:	d501      	bpl.n	8004edc <_printf_i+0xbc>
 8004ed8:	681d      	ldr	r5, [r3, #0]
 8004eda:	e003      	b.n	8004ee4 <_printf_i+0xc4>
 8004edc:	0645      	lsls	r5, r0, #25
 8004ede:	d5fb      	bpl.n	8004ed8 <_printf_i+0xb8>
 8004ee0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ee4:	2d00      	cmp	r5, #0
 8004ee6:	da03      	bge.n	8004ef0 <_printf_i+0xd0>
 8004ee8:	232d      	movs	r3, #45	@ 0x2d
 8004eea:	426d      	negs	r5, r5
 8004eec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ef0:	230a      	movs	r3, #10
 8004ef2:	4859      	ldr	r0, [pc, #356]	@ (8005058 <_printf_i+0x238>)
 8004ef4:	e011      	b.n	8004f1a <_printf_i+0xfa>
 8004ef6:	6821      	ldr	r1, [r4, #0]
 8004ef8:	6833      	ldr	r3, [r6, #0]
 8004efa:	0608      	lsls	r0, r1, #24
 8004efc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f00:	d402      	bmi.n	8004f08 <_printf_i+0xe8>
 8004f02:	0649      	lsls	r1, r1, #25
 8004f04:	bf48      	it	mi
 8004f06:	b2ad      	uxthmi	r5, r5
 8004f08:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f0a:	6033      	str	r3, [r6, #0]
 8004f0c:	bf14      	ite	ne
 8004f0e:	230a      	movne	r3, #10
 8004f10:	2308      	moveq	r3, #8
 8004f12:	4851      	ldr	r0, [pc, #324]	@ (8005058 <_printf_i+0x238>)
 8004f14:	2100      	movs	r1, #0
 8004f16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f1a:	6866      	ldr	r6, [r4, #4]
 8004f1c:	2e00      	cmp	r6, #0
 8004f1e:	bfa8      	it	ge
 8004f20:	6821      	ldrge	r1, [r4, #0]
 8004f22:	60a6      	str	r6, [r4, #8]
 8004f24:	bfa4      	itt	ge
 8004f26:	f021 0104 	bicge.w	r1, r1, #4
 8004f2a:	6021      	strge	r1, [r4, #0]
 8004f2c:	b90d      	cbnz	r5, 8004f32 <_printf_i+0x112>
 8004f2e:	2e00      	cmp	r6, #0
 8004f30:	d04b      	beq.n	8004fca <_printf_i+0x1aa>
 8004f32:	4616      	mov	r6, r2
 8004f34:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f38:	fb03 5711 	mls	r7, r3, r1, r5
 8004f3c:	5dc7      	ldrb	r7, [r0, r7]
 8004f3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f42:	462f      	mov	r7, r5
 8004f44:	42bb      	cmp	r3, r7
 8004f46:	460d      	mov	r5, r1
 8004f48:	d9f4      	bls.n	8004f34 <_printf_i+0x114>
 8004f4a:	2b08      	cmp	r3, #8
 8004f4c:	d10b      	bne.n	8004f66 <_printf_i+0x146>
 8004f4e:	6823      	ldr	r3, [r4, #0]
 8004f50:	07df      	lsls	r7, r3, #31
 8004f52:	d508      	bpl.n	8004f66 <_printf_i+0x146>
 8004f54:	6923      	ldr	r3, [r4, #16]
 8004f56:	6861      	ldr	r1, [r4, #4]
 8004f58:	4299      	cmp	r1, r3
 8004f5a:	bfde      	ittt	le
 8004f5c:	2330      	movle	r3, #48	@ 0x30
 8004f5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f62:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f66:	1b92      	subs	r2, r2, r6
 8004f68:	6122      	str	r2, [r4, #16]
 8004f6a:	464b      	mov	r3, r9
 8004f6c:	4621      	mov	r1, r4
 8004f6e:	4640      	mov	r0, r8
 8004f70:	f8cd a000 	str.w	sl, [sp]
 8004f74:	aa03      	add	r2, sp, #12
 8004f76:	f7ff fee1 	bl	8004d3c <_printf_common>
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	d14a      	bne.n	8005014 <_printf_i+0x1f4>
 8004f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f82:	b004      	add	sp, #16
 8004f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f88:	6823      	ldr	r3, [r4, #0]
 8004f8a:	f043 0320 	orr.w	r3, r3, #32
 8004f8e:	6023      	str	r3, [r4, #0]
 8004f90:	2778      	movs	r7, #120	@ 0x78
 8004f92:	4832      	ldr	r0, [pc, #200]	@ (800505c <_printf_i+0x23c>)
 8004f94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f98:	6823      	ldr	r3, [r4, #0]
 8004f9a:	6831      	ldr	r1, [r6, #0]
 8004f9c:	061f      	lsls	r7, r3, #24
 8004f9e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004fa2:	d402      	bmi.n	8004faa <_printf_i+0x18a>
 8004fa4:	065f      	lsls	r7, r3, #25
 8004fa6:	bf48      	it	mi
 8004fa8:	b2ad      	uxthmi	r5, r5
 8004faa:	6031      	str	r1, [r6, #0]
 8004fac:	07d9      	lsls	r1, r3, #31
 8004fae:	bf44      	itt	mi
 8004fb0:	f043 0320 	orrmi.w	r3, r3, #32
 8004fb4:	6023      	strmi	r3, [r4, #0]
 8004fb6:	b11d      	cbz	r5, 8004fc0 <_printf_i+0x1a0>
 8004fb8:	2310      	movs	r3, #16
 8004fba:	e7ab      	b.n	8004f14 <_printf_i+0xf4>
 8004fbc:	4826      	ldr	r0, [pc, #152]	@ (8005058 <_printf_i+0x238>)
 8004fbe:	e7e9      	b.n	8004f94 <_printf_i+0x174>
 8004fc0:	6823      	ldr	r3, [r4, #0]
 8004fc2:	f023 0320 	bic.w	r3, r3, #32
 8004fc6:	6023      	str	r3, [r4, #0]
 8004fc8:	e7f6      	b.n	8004fb8 <_printf_i+0x198>
 8004fca:	4616      	mov	r6, r2
 8004fcc:	e7bd      	b.n	8004f4a <_printf_i+0x12a>
 8004fce:	6833      	ldr	r3, [r6, #0]
 8004fd0:	6825      	ldr	r5, [r4, #0]
 8004fd2:	1d18      	adds	r0, r3, #4
 8004fd4:	6961      	ldr	r1, [r4, #20]
 8004fd6:	6030      	str	r0, [r6, #0]
 8004fd8:	062e      	lsls	r6, r5, #24
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	d501      	bpl.n	8004fe2 <_printf_i+0x1c2>
 8004fde:	6019      	str	r1, [r3, #0]
 8004fe0:	e002      	b.n	8004fe8 <_printf_i+0x1c8>
 8004fe2:	0668      	lsls	r0, r5, #25
 8004fe4:	d5fb      	bpl.n	8004fde <_printf_i+0x1be>
 8004fe6:	8019      	strh	r1, [r3, #0]
 8004fe8:	2300      	movs	r3, #0
 8004fea:	4616      	mov	r6, r2
 8004fec:	6123      	str	r3, [r4, #16]
 8004fee:	e7bc      	b.n	8004f6a <_printf_i+0x14a>
 8004ff0:	6833      	ldr	r3, [r6, #0]
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	1d1a      	adds	r2, r3, #4
 8004ff6:	6032      	str	r2, [r6, #0]
 8004ff8:	681e      	ldr	r6, [r3, #0]
 8004ffa:	6862      	ldr	r2, [r4, #4]
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	f000 f859 	bl	80050b4 <memchr>
 8005002:	b108      	cbz	r0, 8005008 <_printf_i+0x1e8>
 8005004:	1b80      	subs	r0, r0, r6
 8005006:	6060      	str	r0, [r4, #4]
 8005008:	6863      	ldr	r3, [r4, #4]
 800500a:	6123      	str	r3, [r4, #16]
 800500c:	2300      	movs	r3, #0
 800500e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005012:	e7aa      	b.n	8004f6a <_printf_i+0x14a>
 8005014:	4632      	mov	r2, r6
 8005016:	4649      	mov	r1, r9
 8005018:	4640      	mov	r0, r8
 800501a:	6923      	ldr	r3, [r4, #16]
 800501c:	47d0      	blx	sl
 800501e:	3001      	adds	r0, #1
 8005020:	d0ad      	beq.n	8004f7e <_printf_i+0x15e>
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	079b      	lsls	r3, r3, #30
 8005026:	d413      	bmi.n	8005050 <_printf_i+0x230>
 8005028:	68e0      	ldr	r0, [r4, #12]
 800502a:	9b03      	ldr	r3, [sp, #12]
 800502c:	4298      	cmp	r0, r3
 800502e:	bfb8      	it	lt
 8005030:	4618      	movlt	r0, r3
 8005032:	e7a6      	b.n	8004f82 <_printf_i+0x162>
 8005034:	2301      	movs	r3, #1
 8005036:	4632      	mov	r2, r6
 8005038:	4649      	mov	r1, r9
 800503a:	4640      	mov	r0, r8
 800503c:	47d0      	blx	sl
 800503e:	3001      	adds	r0, #1
 8005040:	d09d      	beq.n	8004f7e <_printf_i+0x15e>
 8005042:	3501      	adds	r5, #1
 8005044:	68e3      	ldr	r3, [r4, #12]
 8005046:	9903      	ldr	r1, [sp, #12]
 8005048:	1a5b      	subs	r3, r3, r1
 800504a:	42ab      	cmp	r3, r5
 800504c:	dcf2      	bgt.n	8005034 <_printf_i+0x214>
 800504e:	e7eb      	b.n	8005028 <_printf_i+0x208>
 8005050:	2500      	movs	r5, #0
 8005052:	f104 0619 	add.w	r6, r4, #25
 8005056:	e7f5      	b.n	8005044 <_printf_i+0x224>
 8005058:	080057d7 	.word	0x080057d7
 800505c:	080057e8 	.word	0x080057e8

08005060 <memmove>:
 8005060:	4288      	cmp	r0, r1
 8005062:	b510      	push	{r4, lr}
 8005064:	eb01 0402 	add.w	r4, r1, r2
 8005068:	d902      	bls.n	8005070 <memmove+0x10>
 800506a:	4284      	cmp	r4, r0
 800506c:	4623      	mov	r3, r4
 800506e:	d807      	bhi.n	8005080 <memmove+0x20>
 8005070:	1e43      	subs	r3, r0, #1
 8005072:	42a1      	cmp	r1, r4
 8005074:	d008      	beq.n	8005088 <memmove+0x28>
 8005076:	f811 2b01 	ldrb.w	r2, [r1], #1
 800507a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800507e:	e7f8      	b.n	8005072 <memmove+0x12>
 8005080:	4601      	mov	r1, r0
 8005082:	4402      	add	r2, r0
 8005084:	428a      	cmp	r2, r1
 8005086:	d100      	bne.n	800508a <memmove+0x2a>
 8005088:	bd10      	pop	{r4, pc}
 800508a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800508e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005092:	e7f7      	b.n	8005084 <memmove+0x24>

08005094 <_sbrk_r>:
 8005094:	b538      	push	{r3, r4, r5, lr}
 8005096:	2300      	movs	r3, #0
 8005098:	4d05      	ldr	r5, [pc, #20]	@ (80050b0 <_sbrk_r+0x1c>)
 800509a:	4604      	mov	r4, r0
 800509c:	4608      	mov	r0, r1
 800509e:	602b      	str	r3, [r5, #0]
 80050a0:	f7fb ff40 	bl	8000f24 <_sbrk>
 80050a4:	1c43      	adds	r3, r0, #1
 80050a6:	d102      	bne.n	80050ae <_sbrk_r+0x1a>
 80050a8:	682b      	ldr	r3, [r5, #0]
 80050aa:	b103      	cbz	r3, 80050ae <_sbrk_r+0x1a>
 80050ac:	6023      	str	r3, [r4, #0]
 80050ae:	bd38      	pop	{r3, r4, r5, pc}
 80050b0:	200006cc 	.word	0x200006cc

080050b4 <memchr>:
 80050b4:	4603      	mov	r3, r0
 80050b6:	b510      	push	{r4, lr}
 80050b8:	b2c9      	uxtb	r1, r1
 80050ba:	4402      	add	r2, r0
 80050bc:	4293      	cmp	r3, r2
 80050be:	4618      	mov	r0, r3
 80050c0:	d101      	bne.n	80050c6 <memchr+0x12>
 80050c2:	2000      	movs	r0, #0
 80050c4:	e003      	b.n	80050ce <memchr+0x1a>
 80050c6:	7804      	ldrb	r4, [r0, #0]
 80050c8:	3301      	adds	r3, #1
 80050ca:	428c      	cmp	r4, r1
 80050cc:	d1f6      	bne.n	80050bc <memchr+0x8>
 80050ce:	bd10      	pop	{r4, pc}

080050d0 <_realloc_r>:
 80050d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050d4:	4680      	mov	r8, r0
 80050d6:	4615      	mov	r5, r2
 80050d8:	460c      	mov	r4, r1
 80050da:	b921      	cbnz	r1, 80050e6 <_realloc_r+0x16>
 80050dc:	4611      	mov	r1, r2
 80050de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050e2:	f7ff bc47 	b.w	8004974 <_malloc_r>
 80050e6:	b92a      	cbnz	r2, 80050f4 <_realloc_r+0x24>
 80050e8:	f7ff fbda 	bl	80048a0 <_free_r>
 80050ec:	2400      	movs	r4, #0
 80050ee:	4620      	mov	r0, r4
 80050f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050f4:	f000 f81a 	bl	800512c <_malloc_usable_size_r>
 80050f8:	4285      	cmp	r5, r0
 80050fa:	4606      	mov	r6, r0
 80050fc:	d802      	bhi.n	8005104 <_realloc_r+0x34>
 80050fe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005102:	d8f4      	bhi.n	80050ee <_realloc_r+0x1e>
 8005104:	4629      	mov	r1, r5
 8005106:	4640      	mov	r0, r8
 8005108:	f7ff fc34 	bl	8004974 <_malloc_r>
 800510c:	4607      	mov	r7, r0
 800510e:	2800      	cmp	r0, #0
 8005110:	d0ec      	beq.n	80050ec <_realloc_r+0x1c>
 8005112:	42b5      	cmp	r5, r6
 8005114:	462a      	mov	r2, r5
 8005116:	4621      	mov	r1, r4
 8005118:	bf28      	it	cs
 800511a:	4632      	movcs	r2, r6
 800511c:	f7ff fbb2 	bl	8004884 <memcpy>
 8005120:	4621      	mov	r1, r4
 8005122:	4640      	mov	r0, r8
 8005124:	f7ff fbbc 	bl	80048a0 <_free_r>
 8005128:	463c      	mov	r4, r7
 800512a:	e7e0      	b.n	80050ee <_realloc_r+0x1e>

0800512c <_malloc_usable_size_r>:
 800512c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005130:	1f18      	subs	r0, r3, #4
 8005132:	2b00      	cmp	r3, #0
 8005134:	bfbc      	itt	lt
 8005136:	580b      	ldrlt	r3, [r1, r0]
 8005138:	18c0      	addlt	r0, r0, r3
 800513a:	4770      	bx	lr

0800513c <_init>:
 800513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513e:	bf00      	nop
 8005140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005142:	bc08      	pop	{r3}
 8005144:	469e      	mov	lr, r3
 8005146:	4770      	bx	lr

08005148 <_fini>:
 8005148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514a:	bf00      	nop
 800514c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800514e:	bc08      	pop	{r3}
 8005150:	469e      	mov	lr, r3
 8005152:	4770      	bx	lr
