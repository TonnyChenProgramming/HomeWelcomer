
HC_SR04_Ultrasonic_Sensing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005064  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  08005170  08005170  00006170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005818  08005818  0000705c  2**0
                  CONTENTS
  4 .ARM          00000000  08005818  08005818  0000705c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005818  08005818  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005818  08005818  00006818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800581c  0800581c  0000681c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005820  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000680  2000005c  0800587c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006dc  0800587c  000076dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e467  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f4  00000000  00000000  000154ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00017be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf4  00000000  00000000  00018b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d1d  00000000  00000000  0001974c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130f5  00000000  00000000  00032469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008db9f  00000000  00000000  0004555e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d30fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004514  00000000  00000000  000d3140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000d7654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005158 	.word	0x08005158

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08005158 	.word	0x08005158

0800014c <HC_SR04_Init>:

static inline void DWT_Delay_Init(void);
static inline void delay_us(uint32_t us);

void HC_SR04_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000150:	f000 f82e 	bl	80001b0 <DWT_Delay_Init>
}
 8000154:	bf00      	nop
 8000156:	bd80      	pop	{r7, pc}

08000158 <HC_SR04_Trigger>:

void HC_SR04_Trigger(void)
{
 8000158:	b580      	push	{r7, lr}
 800015a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);
 800015c:	2201      	movs	r2, #1
 800015e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000162:	4807      	ldr	r0, [pc, #28]	@ (8000180 <HC_SR04_Trigger+0x28>)
 8000164:	f001 fa82 	bl	800166c <HAL_GPIO_WritePin>
	  delay_us(10);
 8000168:	200a      	movs	r0, #10
 800016a:	f000 f83b 	bl	80001e4 <delay_us>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
 800016e:	2200      	movs	r2, #0
 8000170:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000174:	4802      	ldr	r0, [pc, #8]	@ (8000180 <HC_SR04_Trigger+0x28>)
 8000176:	f001 fa79 	bl	800166c <HAL_GPIO_WritePin>
}
 800017a:	bf00      	nop
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	40010800 	.word	0x40010800

08000184 <HC_SR04_Distance_Calculate>:

uint16_t HC_SR04_Distance_Calculate(uint32_t pulse_us)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
	return (pulse_us+1) * 340/20000U;
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	3301      	adds	r3, #1
 8000190:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8000194:	fb02 f303 	mul.w	r3, r2, r3
 8000198:	4a04      	ldr	r2, [pc, #16]	@ (80001ac <HC_SR04_Distance_Calculate+0x28>)
 800019a:	fba2 2303 	umull	r2, r3, r2, r3
 800019e:	0b9b      	lsrs	r3, r3, #14
 80001a0:	b29b      	uxth	r3, r3
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	d1b71759 	.word	0xd1b71759

080001b0 <DWT_Delay_Init>:

static inline void DWT_Delay_Init(void){
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80001b4:	4b09      	ldr	r3, [pc, #36]	@ (80001dc <DWT_Delay_Init+0x2c>)
 80001b6:	68db      	ldr	r3, [r3, #12]
 80001b8:	4a08      	ldr	r2, [pc, #32]	@ (80001dc <DWT_Delay_Init+0x2c>)
 80001ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80001be:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 80001c0:	4b07      	ldr	r3, [pc, #28]	@ (80001e0 <DWT_Delay_Init+0x30>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80001c6:	4b06      	ldr	r3, [pc, #24]	@ (80001e0 <DWT_Delay_Init+0x30>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	4a05      	ldr	r2, [pc, #20]	@ (80001e0 <DWT_Delay_Init+0x30>)
 80001cc:	f043 0301 	orr.w	r3, r3, #1
 80001d0:	6013      	str	r3, [r2, #0]
}
 80001d2:	bf00      	nop
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	e000edf0 	.word	0xe000edf0
 80001e0:	e0001000 	.word	0xe0001000

080001e4 <delay_us>:

static inline void delay_us(uint32_t us){
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 80001ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000224 <delay_us+0x40>)
 80001ee:	685b      	ldr	r3, [r3, #4]
 80001f0:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * (SystemCoreClock/1000000U);
 80001f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000228 <delay_us+0x44>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a0d      	ldr	r2, [pc, #52]	@ (800022c <delay_us+0x48>)
 80001f8:	fba2 2303 	umull	r2, r3, r2, r3
 80001fc:	0c9a      	lsrs	r2, r3, #18
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	fb02 f303 	mul.w	r3, r2, r3
 8000204:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks);
 8000206:	bf00      	nop
 8000208:	4b06      	ldr	r3, [pc, #24]	@ (8000224 <delay_us+0x40>)
 800020a:	685a      	ldr	r2, [r3, #4]
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	1ad3      	subs	r3, r2, r3
 8000210:	68ba      	ldr	r2, [r7, #8]
 8000212:	429a      	cmp	r2, r3
 8000214:	d8f8      	bhi.n	8000208 <delay_us+0x24>
}
 8000216:	bf00      	nop
 8000218:	bf00      	nop
 800021a:	3714      	adds	r7, #20
 800021c:	46bd      	mov	sp, r7
 800021e:	bc80      	pop	{r7}
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	e0001000 	.word	0xe0001000
 8000228:	20000000 	.word	0x20000000
 800022c:	431bde83 	.word	0x431bde83

08000230 <oled_init>:
#include "stdio.h"
#include "main.h"


// OLED Initialization Function
void oled_init(void) {
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8000234:	f000 f88a 	bl	800034c <ssd1306_Init>
}
 8000238:	bf00      	nop
 800023a:	bd80      	pop	{r7, pc}

0800023c <oled_display_wavelength_distance_rtc>:


void oled_display_wavelength_distance_rtc(int wavelength, int distance, uint32_t rtc)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b08e      	sub	sp, #56	@ 0x38
 8000240:	af02      	add	r7, sp, #8
 8000242:	60f8      	str	r0, [r7, #12]
 8000244:	60b9      	str	r1, [r7, #8]
 8000246:	607a      	str	r2, [r7, #4]
    char buffer[30];
    ssd1306_Fill(Black);
 8000248:	2000      	movs	r0, #0
 800024a:	f000 f8e9 	bl	8000420 <ssd1306_Fill>

    ssd1306_SetCursor(2, 2);
 800024e:	2102      	movs	r1, #2
 8000250:	2002      	movs	r0, #2
 8000252:	f000 fa2d 	bl	80006b0 <ssd1306_SetCursor>
    sprintf(buffer, "wavelength: %d microseconds", wavelength);  // use %d for int
 8000256:	f107 0310 	add.w	r3, r7, #16
 800025a:	68fa      	ldr	r2, [r7, #12]
 800025c:	491b      	ldr	r1, [pc, #108]	@ (80002cc <oled_display_wavelength_distance_rtc+0x90>)
 800025e:	4618      	mov	r0, r3
 8000260:	f004 faca 	bl	80047f8 <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 8000264:	4b1a      	ldr	r3, [pc, #104]	@ (80002d0 <oled_display_wavelength_distance_rtc+0x94>)
 8000266:	f107 0010 	add.w	r0, r7, #16
 800026a:	2201      	movs	r2, #1
 800026c:	9200      	str	r2, [sp, #0]
 800026e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000270:	f000 f9f8 	bl	8000664 <ssd1306_WriteString>

    ssd1306_SetCursor(2, 12);
 8000274:	210c      	movs	r1, #12
 8000276:	2002      	movs	r0, #2
 8000278:	f000 fa1a 	bl	80006b0 <ssd1306_SetCursor>
    sprintf(buffer, "distance: %d cm", distance);      // use %% to print literal '%'
 800027c:	f107 0310 	add.w	r3, r7, #16
 8000280:	68ba      	ldr	r2, [r7, #8]
 8000282:	4914      	ldr	r1, [pc, #80]	@ (80002d4 <oled_display_wavelength_distance_rtc+0x98>)
 8000284:	4618      	mov	r0, r3
 8000286:	f004 fab7 	bl	80047f8 <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 800028a:	4b11      	ldr	r3, [pc, #68]	@ (80002d0 <oled_display_wavelength_distance_rtc+0x94>)
 800028c:	f107 0010 	add.w	r0, r7, #16
 8000290:	2201      	movs	r2, #1
 8000292:	9200      	str	r2, [sp, #0]
 8000294:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000296:	f000 f9e5 	bl	8000664 <ssd1306_WriteString>

    ssd1306_SetCursor(2, 22);
 800029a:	2116      	movs	r1, #22
 800029c:	2002      	movs	r0, #2
 800029e:	f000 fa07 	bl	80006b0 <ssd1306_SetCursor>
    sprintf(buffer, "rtc: %ld ", rtc);      // use %% to print literal '%'
 80002a2:	f107 0310 	add.w	r3, r7, #16
 80002a6:	687a      	ldr	r2, [r7, #4]
 80002a8:	490b      	ldr	r1, [pc, #44]	@ (80002d8 <oled_display_wavelength_distance_rtc+0x9c>)
 80002aa:	4618      	mov	r0, r3
 80002ac:	f004 faa4 	bl	80047f8 <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 80002b0:	4b07      	ldr	r3, [pc, #28]	@ (80002d0 <oled_display_wavelength_distance_rtc+0x94>)
 80002b2:	f107 0010 	add.w	r0, r7, #16
 80002b6:	2201      	movs	r2, #1
 80002b8:	9200      	str	r2, [sp, #0]
 80002ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80002bc:	f000 f9d2 	bl	8000664 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 80002c0:	f000 f8c6 	bl	8000450 <ssd1306_UpdateScreen>
}
 80002c4:	bf00      	nop
 80002c6:	3730      	adds	r7, #48	@ 0x30
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	08005170 	.word	0x08005170
 80002d0:	08005798 	.word	0x08005798
 80002d4:	0800518c 	.word	0x0800518c
 80002d8:	0800519c 	.word	0x0800519c

080002dc <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr

080002e8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b086      	sub	sp, #24
 80002ec:	af04      	add	r7, sp, #16
 80002ee:	4603      	mov	r3, r0
 80002f0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1,
 80002f2:	f04f 33ff 	mov.w	r3, #4294967295
 80002f6:	9302      	str	r3, [sp, #8]
 80002f8:	2301      	movs	r3, #1
 80002fa:	9301      	str	r3, [sp, #4]
 80002fc:	1dfb      	adds	r3, r7, #7
 80002fe:	9300      	str	r3, [sp, #0]
 8000300:	2301      	movs	r3, #1
 8000302:	2200      	movs	r2, #0
 8000304:	2178      	movs	r1, #120	@ 0x78
 8000306:	4803      	ldr	r0, [pc, #12]	@ (8000314 <ssd1306_WriteCommand+0x2c>)
 8000308:	f001 fb0c 	bl	8001924 <HAL_I2C_Mem_Write>
			HAL_MAX_DELAY);
}
 800030c:	bf00      	nop
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20000480 	.word	0x20000480

08000318 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t *buffer, size_t buff_size) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af04      	add	r7, sp, #16
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer,
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	b29b      	uxth	r3, r3
 8000326:	f04f 32ff 	mov.w	r2, #4294967295
 800032a:	9202      	str	r2, [sp, #8]
 800032c:	9301      	str	r3, [sp, #4]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	2301      	movs	r3, #1
 8000334:	2240      	movs	r2, #64	@ 0x40
 8000336:	2178      	movs	r1, #120	@ 0x78
 8000338:	4803      	ldr	r0, [pc, #12]	@ (8000348 <ssd1306_WriteData+0x30>)
 800033a:	f001 faf3 	bl	8001924 <HAL_I2C_Mem_Write>
			buff_size, HAL_MAX_DELAY);
}
 800033e:	bf00      	nop
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20000480 	.word	0x20000480

0800034c <ssd1306_Init>:
	}
	return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8000350:	f7ff ffc4 	bl	80002dc <ssd1306_Reset>

	// Wait for the screen to boot
	HAL_Delay(100);
 8000354:	2064      	movs	r0, #100	@ 0x64
 8000356:	f000 feb7 	bl	80010c8 <HAL_Delay>

	// Init OLED
	ssd1306_SetDisplayOn(0); //display off
 800035a:	2000      	movs	r0, #0
 800035c:	f000 f9d4 	bl	8000708 <ssd1306_SetDisplayOn>

	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000360:	2020      	movs	r0, #32
 8000362:	f7ff ffc1 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000366:	2000      	movs	r0, #0
 8000368:	f7ff ffbe 	bl	80002e8 <ssd1306_WriteCommand>
								// 10b,Page Addressing Mode (RESET); 11b,Invalid

	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800036c:	20b0      	movs	r0, #176	@ 0xb0
 800036e:	f7ff ffbb 	bl	80002e8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000372:	20c8      	movs	r0, #200	@ 0xc8
 8000374:	f7ff ffb8 	bl	80002e8 <ssd1306_WriteCommand>
#endif

	ssd1306_WriteCommand(0x00); //---set low column address
 8000378:	2000      	movs	r0, #0
 800037a:	f7ff ffb5 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 800037e:	2010      	movs	r0, #16
 8000380:	f7ff ffb2 	bl	80002e8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000384:	2040      	movs	r0, #64	@ 0x40
 8000386:	f7ff ffaf 	bl	80002e8 <ssd1306_WriteCommand>

	ssd1306_SetContrast(0xFF);
 800038a:	20ff      	movs	r0, #255	@ 0xff
 800038c:	f000 f9a8 	bl	80006e0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000390:	20a1      	movs	r0, #161	@ 0xa1
 8000392:	f7ff ffa9 	bl	80002e8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
	ssd1306_WriteCommand(0xA6); //--set normal color
 8000396:	20a6      	movs	r0, #166	@ 0xa6
 8000398:	f7ff ffa6 	bl	80002e8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800039c:	20a8      	movs	r0, #168	@ 0xa8
 800039e:	f7ff ffa3 	bl	80002e8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x3F); //
 80003a2:	203f      	movs	r0, #63	@ 0x3f
 80003a4:	f7ff ffa0 	bl	80002e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80003a8:	20a4      	movs	r0, #164	@ 0xa4
 80003aa:	f7ff ff9d 	bl	80002e8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80003ae:	20d3      	movs	r0, #211	@ 0xd3
 80003b0:	f7ff ff9a 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80003b4:	2000      	movs	r0, #0
 80003b6:	f7ff ff97 	bl	80002e8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80003ba:	20d5      	movs	r0, #213	@ 0xd5
 80003bc:	f7ff ff94 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80003c0:	20f0      	movs	r0, #240	@ 0xf0
 80003c2:	f7ff ff91 	bl	80002e8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80003c6:	20d9      	movs	r0, #217	@ 0xd9
 80003c8:	f7ff ff8e 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80003cc:	2022      	movs	r0, #34	@ 0x22
 80003ce:	f7ff ff8b 	bl	80002e8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80003d2:	20da      	movs	r0, #218	@ 0xda
 80003d4:	f7ff ff88 	bl	80002e8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x12);
 80003d8:	2012      	movs	r0, #18
 80003da:	f7ff ff85 	bl	80002e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xDB); //--set vcomh
 80003de:	20db      	movs	r0, #219	@ 0xdb
 80003e0:	f7ff ff82 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80003e4:	2020      	movs	r0, #32
 80003e6:	f7ff ff7f 	bl	80002e8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80003ea:	208d      	movs	r0, #141	@ 0x8d
 80003ec:	f7ff ff7c 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 80003f0:	2014      	movs	r0, #20
 80003f2:	f7ff ff79 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80003f6:	2001      	movs	r0, #1
 80003f8:	f000 f986 	bl	8000708 <ssd1306_SetDisplayOn>

	// Clear screen
	ssd1306_Fill(Black);
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f80f 	bl	8000420 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8000402:	f000 f825 	bl	8000450 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8000406:	4b05      	ldr	r3, [pc, #20]	@ (800041c <ssd1306_Init+0xd0>)
 8000408:	2200      	movs	r2, #0
 800040a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800040c:	4b03      	ldr	r3, [pc, #12]	@ (800041c <ssd1306_Init+0xd0>)
 800040e:	2200      	movs	r2, #0
 8000410:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8000412:	4b02      	ldr	r3, [pc, #8]	@ (800041c <ssd1306_Init+0xd0>)
 8000414:	2201      	movs	r2, #1
 8000416:	711a      	strb	r2, [r3, #4]
}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000478 	.word	0x20000478

08000420 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF,
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d101      	bne.n	8000434 <ssd1306_Fill+0x14>
 8000430:	2300      	movs	r3, #0
 8000432:	e000      	b.n	8000436 <ssd1306_Fill+0x16>
 8000434:	23ff      	movs	r3, #255	@ 0xff
 8000436:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800043a:	4619      	mov	r1, r3
 800043c:	4803      	ldr	r0, [pc, #12]	@ (800044c <ssd1306_Fill+0x2c>)
 800043e:	f004 f9fb 	bl	8004838 <memset>
			sizeof(SSD1306_Buffer));
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	20000078 	.word	0x20000078

08000450 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
	// depends on the screen height:
	//
	//  * 32px   ==  4 pages
	//  * 64px   ==  8 pages
	//  * 128px  ==  16 pages
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 8000456:	2300      	movs	r3, #0
 8000458:	71fb      	strb	r3, [r7, #7]
 800045a:	e016      	b.n	800048a <ssd1306_UpdateScreen+0x3a>
		ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	3b50      	subs	r3, #80	@ 0x50
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ff40 	bl	80002e8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000468:	2000      	movs	r0, #0
 800046a:	f7ff ff3d 	bl	80002e8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800046e:	2010      	movs	r0, #16
 8000470:	f7ff ff3a 	bl	80002e8 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	01db      	lsls	r3, r3, #7
 8000478:	4a08      	ldr	r2, [pc, #32]	@ (800049c <ssd1306_UpdateScreen+0x4c>)
 800047a:	4413      	add	r3, r2
 800047c:	2180      	movs	r1, #128	@ 0x80
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff4a 	bl	8000318 <ssd1306_WriteData>
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	3301      	adds	r3, #1
 8000488:	71fb      	strb	r3, [r7, #7]
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	2b07      	cmp	r3, #7
 800048e:	d9e5      	bls.n	800045c <ssd1306_UpdateScreen+0xc>
	}
}
 8000490:	bf00      	nop
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	20000078 	.word	0x20000078

080004a0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]
 80004aa:	460b      	mov	r3, r1
 80004ac:	71bb      	strb	r3, [r7, #6]
 80004ae:	4613      	mov	r3, r2
 80004b0:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80004b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	db3d      	blt.n	8000536 <ssd1306_DrawPixel+0x96>
 80004ba:	79bb      	ldrb	r3, [r7, #6]
 80004bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80004be:	d83a      	bhi.n	8000536 <ssd1306_DrawPixel+0x96>
		// Don't write outside the buffer
		return;
	}

	// Draw in the right color
	if (color == White) {
 80004c0:	797b      	ldrb	r3, [r7, #5]
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d11a      	bne.n	80004fc <ssd1306_DrawPixel+0x5c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80004c6:	79fa      	ldrb	r2, [r7, #7]
 80004c8:	79bb      	ldrb	r3, [r7, #6]
 80004ca:	08db      	lsrs	r3, r3, #3
 80004cc:	b2d8      	uxtb	r0, r3
 80004ce:	4603      	mov	r3, r0
 80004d0:	01db      	lsls	r3, r3, #7
 80004d2:	4413      	add	r3, r2
 80004d4:	4a1a      	ldr	r2, [pc, #104]	@ (8000540 <ssd1306_DrawPixel+0xa0>)
 80004d6:	5cd3      	ldrb	r3, [r2, r3]
 80004d8:	b25a      	sxtb	r2, r3
 80004da:	79bb      	ldrb	r3, [r7, #6]
 80004dc:	f003 0307 	and.w	r3, r3, #7
 80004e0:	2101      	movs	r1, #1
 80004e2:	fa01 f303 	lsl.w	r3, r1, r3
 80004e6:	b25b      	sxtb	r3, r3
 80004e8:	4313      	orrs	r3, r2
 80004ea:	b259      	sxtb	r1, r3
 80004ec:	79fa      	ldrb	r2, [r7, #7]
 80004ee:	4603      	mov	r3, r0
 80004f0:	01db      	lsls	r3, r3, #7
 80004f2:	4413      	add	r3, r2
 80004f4:	b2c9      	uxtb	r1, r1
 80004f6:	4a12      	ldr	r2, [pc, #72]	@ (8000540 <ssd1306_DrawPixel+0xa0>)
 80004f8:	54d1      	strb	r1, [r2, r3]
 80004fa:	e01d      	b.n	8000538 <ssd1306_DrawPixel+0x98>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80004fc:	79fa      	ldrb	r2, [r7, #7]
 80004fe:	79bb      	ldrb	r3, [r7, #6]
 8000500:	08db      	lsrs	r3, r3, #3
 8000502:	b2d8      	uxtb	r0, r3
 8000504:	4603      	mov	r3, r0
 8000506:	01db      	lsls	r3, r3, #7
 8000508:	4413      	add	r3, r2
 800050a:	4a0d      	ldr	r2, [pc, #52]	@ (8000540 <ssd1306_DrawPixel+0xa0>)
 800050c:	5cd3      	ldrb	r3, [r2, r3]
 800050e:	b25a      	sxtb	r2, r3
 8000510:	79bb      	ldrb	r3, [r7, #6]
 8000512:	f003 0307 	and.w	r3, r3, #7
 8000516:	2101      	movs	r1, #1
 8000518:	fa01 f303 	lsl.w	r3, r1, r3
 800051c:	b25b      	sxtb	r3, r3
 800051e:	43db      	mvns	r3, r3
 8000520:	b25b      	sxtb	r3, r3
 8000522:	4013      	ands	r3, r2
 8000524:	b259      	sxtb	r1, r3
 8000526:	79fa      	ldrb	r2, [r7, #7]
 8000528:	4603      	mov	r3, r0
 800052a:	01db      	lsls	r3, r3, #7
 800052c:	4413      	add	r3, r2
 800052e:	b2c9      	uxtb	r1, r1
 8000530:	4a03      	ldr	r2, [pc, #12]	@ (8000540 <ssd1306_DrawPixel+0xa0>)
 8000532:	54d1      	strb	r1, [r2, r3]
 8000534:	e000      	b.n	8000538 <ssd1306_DrawPixel+0x98>
		return;
 8000536:	bf00      	nop
	}
}
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	20000078 	.word	0x20000078

08000544 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000544:	b590      	push	{r4, r7, lr}
 8000546:	b089      	sub	sp, #36	@ 0x24
 8000548:	af00      	add	r7, sp, #0
 800054a:	4604      	mov	r4, r0
 800054c:	4638      	mov	r0, r7
 800054e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000552:	4623      	mov	r3, r4
 8000554:	73fb      	strb	r3, [r7, #15]
	uint32_t i, b, j;

	// Check if character is valid
	if (ch < 32 || ch > 126)
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	2b1f      	cmp	r3, #31
 800055a:	d902      	bls.n	8000562 <ssd1306_WriteChar+0x1e>
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	2b7e      	cmp	r3, #126	@ 0x7e
 8000560:	d901      	bls.n	8000566 <ssd1306_WriteChar+0x22>
		return 0;
 8000562:	2300      	movs	r3, #0
 8000564:	e077      	b.n	8000656 <ssd1306_WriteChar+0x112>

	// Check remaining space on current line
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000566:	4b3e      	ldr	r3, [pc, #248]	@ (8000660 <ssd1306_WriteChar+0x11c>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	461a      	mov	r2, r3
 800056c:	783b      	ldrb	r3, [r7, #0]
 800056e:	4413      	add	r3, r2
 8000570:	2b80      	cmp	r3, #128	@ 0x80
 8000572:	dc06      	bgt.n	8000582 <ssd1306_WriteChar+0x3e>
	SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height)) {
 8000574:	4b3a      	ldr	r3, [pc, #232]	@ (8000660 <ssd1306_WriteChar+0x11c>)
 8000576:	885b      	ldrh	r3, [r3, #2]
 8000578:	461a      	mov	r2, r3
 800057a:	787b      	ldrb	r3, [r7, #1]
 800057c:	4413      	add	r3, r2
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800057e:	2b40      	cmp	r3, #64	@ 0x40
 8000580:	dd01      	ble.n	8000586 <ssd1306_WriteChar+0x42>
		// Not enough space on current line
		return 0;
 8000582:	2300      	movs	r3, #0
 8000584:	e067      	b.n	8000656 <ssd1306_WriteChar+0x112>
	}

	// Use the font to write
	for (i = 0; i < Font.height; i++) {
 8000586:	2300      	movs	r3, #0
 8000588:	61fb      	str	r3, [r7, #28]
 800058a:	e04e      	b.n	800062a <ssd1306_WriteChar+0xe6>
		b = Font.data[(ch - 32) * Font.height + i];
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	3b20      	subs	r3, #32
 8000592:	7879      	ldrb	r1, [r7, #1]
 8000594:	fb01 f303 	mul.w	r3, r1, r3
 8000598:	4619      	mov	r1, r3
 800059a:	69fb      	ldr	r3, [r7, #28]
 800059c:	440b      	add	r3, r1
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	4413      	add	r3, r2
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.width; j++) {
 80005a6:	2300      	movs	r3, #0
 80005a8:	61bb      	str	r3, [r7, #24]
 80005aa:	e036      	b.n	800061a <ssd1306_WriteChar+0xd6>
			if ((b << j) & 0x8000) {
 80005ac:	697a      	ldr	r2, [r7, #20]
 80005ae:	69bb      	ldr	r3, [r7, #24]
 80005b0:	fa02 f303 	lsl.w	r3, r2, r3
 80005b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d013      	beq.n	80005e4 <ssd1306_WriteChar+0xa0>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 80005bc:	4b28      	ldr	r3, [pc, #160]	@ (8000660 <ssd1306_WriteChar+0x11c>)
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	69bb      	ldr	r3, [r7, #24]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	4413      	add	r3, r2
 80005c8:	b2d8      	uxtb	r0, r3
 80005ca:	4b25      	ldr	r3, [pc, #148]	@ (8000660 <ssd1306_WriteChar+0x11c>)
 80005cc:	885b      	ldrh	r3, [r3, #2]
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	4413      	add	r3, r2
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80005dc:	4619      	mov	r1, r3
 80005de:	f7ff ff5f 	bl	80004a0 <ssd1306_DrawPixel>
 80005e2:	e017      	b.n	8000614 <ssd1306_WriteChar+0xd0>
						(SSD1306_COLOR) color);
			} else {
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 80005e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000660 <ssd1306_WriteChar+0x11c>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	69bb      	ldr	r3, [r7, #24]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	4413      	add	r3, r2
 80005f0:	b2d8      	uxtb	r0, r3
 80005f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000660 <ssd1306_WriteChar+0x11c>)
 80005f4:	885b      	ldrh	r3, [r3, #2]
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	69fb      	ldr	r3, [r7, #28]
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	4413      	add	r3, r2
 80005fe:	b2d9      	uxtb	r1, r3
 8000600:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000604:	2b00      	cmp	r3, #0
 8000606:	bf0c      	ite	eq
 8000608:	2301      	moveq	r3, #1
 800060a:	2300      	movne	r3, #0
 800060c:	b2db      	uxtb	r3, r3
 800060e:	461a      	mov	r2, r3
 8000610:	f7ff ff46 	bl	80004a0 <ssd1306_DrawPixel>
		for (j = 0; j < Font.width; j++) {
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	3301      	adds	r3, #1
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	783b      	ldrb	r3, [r7, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	69bb      	ldr	r3, [r7, #24]
 8000620:	4293      	cmp	r3, r2
 8000622:	d3c3      	bcc.n	80005ac <ssd1306_WriteChar+0x68>
	for (i = 0; i < Font.height; i++) {
 8000624:	69fb      	ldr	r3, [r7, #28]
 8000626:	3301      	adds	r3, #1
 8000628:	61fb      	str	r3, [r7, #28]
 800062a:	787b      	ldrb	r3, [r7, #1]
 800062c:	461a      	mov	r2, r3
 800062e:	69fb      	ldr	r3, [r7, #28]
 8000630:	4293      	cmp	r3, r2
 8000632:	d3ab      	bcc.n	800058c <ssd1306_WriteChar+0x48>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <ssd1306_WriteChar+0x11c>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	68ba      	ldr	r2, [r7, #8]
 800063a:	2a00      	cmp	r2, #0
 800063c:	d005      	beq.n	800064a <ssd1306_WriteChar+0x106>
 800063e:	68b9      	ldr	r1, [r7, #8]
 8000640:	7bfa      	ldrb	r2, [r7, #15]
 8000642:	3a20      	subs	r2, #32
 8000644:	440a      	add	r2, r1
 8000646:	7812      	ldrb	r2, [r2, #0]
 8000648:	e000      	b.n	800064c <ssd1306_WriteChar+0x108>
 800064a:	783a      	ldrb	r2, [r7, #0]
 800064c:	4413      	add	r3, r2
 800064e:	b29a      	uxth	r2, r3
 8000650:	4b03      	ldr	r3, [pc, #12]	@ (8000660 <ssd1306_WriteChar+0x11c>)
 8000652:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8000654:	7bfb      	ldrb	r3, [r7, #15]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3724      	adds	r7, #36	@ 0x24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd90      	pop	{r4, r7, pc}
 800065e:	bf00      	nop
 8000660:	20000478 	.word	0x20000478

08000664 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char *str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af02      	add	r7, sp, #8
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	4638      	mov	r0, r7
 800066e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	while (*str) {
 8000672:	e013      	b.n	800069c <ssd1306_WriteString+0x38>
		if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	7818      	ldrb	r0, [r3, #0]
 8000678:	7e3b      	ldrb	r3, [r7, #24]
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	463b      	mov	r3, r7
 800067e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000680:	f7ff ff60 	bl	8000544 <ssd1306_WriteChar>
 8000684:	4603      	mov	r3, r0
 8000686:	461a      	mov	r2, r3
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	429a      	cmp	r2, r3
 800068e:	d002      	beq.n	8000696 <ssd1306_WriteString+0x32>
			// Char could not be written
			return *str;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	e008      	b.n	80006a8 <ssd1306_WriteString+0x44>
		}
		str++;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	3301      	adds	r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1e7      	bne.n	8000674 <ssd1306_WriteString+0x10>
	}

	// Everything ok
	return *str;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	781b      	ldrb	r3, [r3, #0]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	460a      	mov	r2, r1
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	4613      	mov	r3, r2
 80006be:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	4b05      	ldr	r3, [pc, #20]	@ (80006dc <ssd1306_SetCursor+0x2c>)
 80006c6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80006c8:	79bb      	ldrb	r3, [r7, #6]
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	4b03      	ldr	r3, [pc, #12]	@ (80006dc <ssd1306_SetCursor+0x2c>)
 80006ce:	805a      	strh	r2, [r3, #2]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	20000478 	.word	0x20000478

080006e0 <ssd1306_SetContrast>:
		}
	}
	return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
	const uint8_t kSetContrastControlRegister = 0x81;
 80006ea:	2381      	movs	r3, #129	@ 0x81
 80006ec:	73fb      	strb	r3, [r7, #15]
	ssd1306_WriteCommand(kSetContrastControlRegister);
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fdf9 	bl	80002e8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(value);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff fdf5 	bl	80002e8 <ssd1306_WriteCommand>
}
 80006fe:	bf00      	nop
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	if (on) {
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d005      	beq.n	8000724 <ssd1306_SetDisplayOn+0x1c>
		value = 0xAF;   // Display on
 8000718:	23af      	movs	r3, #175	@ 0xaf
 800071a:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 1;
 800071c:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <ssd1306_SetDisplayOn+0x38>)
 800071e:	2201      	movs	r2, #1
 8000720:	715a      	strb	r2, [r3, #5]
 8000722:	e004      	b.n	800072e <ssd1306_SetDisplayOn+0x26>
	} else {
		value = 0xAE;   // Display off
 8000724:	23ae      	movs	r3, #174	@ 0xae
 8000726:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 0;
 8000728:	4b05      	ldr	r3, [pc, #20]	@ (8000740 <ssd1306_SetDisplayOn+0x38>)
 800072a:	2200      	movs	r2, #0
 800072c:	715a      	strb	r2, [r3, #5]
	}
	ssd1306_WriteCommand(value);
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fdd9 	bl	80002e8 <ssd1306_WriteCommand>
}
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000478 	.word	0x20000478

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000748:	f000 fc5c 	bl	8001004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074c:	f000 f88e 	bl	800086c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000750:	f000 fa26 	bl	8000ba0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000754:	f000 f8e8 	bl	8000928 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000758:	f000 f930 	bl	80009bc <MX_TIM1_Init>
  MX_TIM2_Init();
 800075c:	f000 f986 	bl	8000a6c <MX_TIM2_Init>
  MX_RTC_Init();
 8000760:	f000 f910 	bl	8000984 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  oled_init();
 8000764:	f7ff fd64 	bl	8000230 <oled_init>
  HC_SR04_Init();
 8000768:	f7ff fcf0 	bl	800014c <HC_SR04_Init>


  distance_update_flag = 0;
 800076c:	4b36      	ldr	r3, [pc, #216]	@ (8000848 <main+0x104>)
 800076e:	2200      	movs	r2, #0
 8000770:	701a      	strb	r2, [r3, #0]
    {
      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
  	  //trigger signal
  	  HC_SR04_Trigger(); // trigger the HC_SR04 chip
 8000772:	f7ff fcf1 	bl	8000158 <HC_SR04_Trigger>

  	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // activate the interrupt for the falling edge of the echo wave
 8000776:	2100      	movs	r1, #0
 8000778:	4834      	ldr	r0, [pc, #208]	@ (800084c <main+0x108>)
 800077a:	f002 fff5 	bl	8003768 <HAL_TIM_IC_Start_IT>

  	  while(!distance_update_flag); // wait the measure to be done
 800077e:	bf00      	nop
 8000780:	4b31      	ldr	r3, [pc, #196]	@ (8000848 <main+0x104>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d0fb      	beq.n	8000780 <main+0x3c>
  	  distance_update_flag = 0; // reset the flag for next run
 8000788:	4b2f      	ldr	r3, [pc, #188]	@ (8000848 <main+0x104>)
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]

  	  HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 800078e:	2100      	movs	r1, #0
 8000790:	482e      	ldr	r0, [pc, #184]	@ (800084c <main+0x108>)
 8000792:	f003 f8f5 	bl	8003980 <HAL_TIM_IC_Stop_IT>

  	  distance = HC_SR04_Distance_Calculate(pulse_us); //distance calculated in cm 325cm & 280cm
 8000796:	4b2e      	ldr	r3, [pc, #184]	@ (8000850 <main+0x10c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fcf2 	bl	8000184 <HC_SR04_Distance_Calculate>
 80007a0:	4603      	mov	r3, r0
 80007a2:	461a      	mov	r2, r3
 80007a4:	4b2b      	ldr	r3, [pc, #172]	@ (8000854 <main+0x110>)
 80007a6:	801a      	strh	r2, [r3, #0]

  	  HAL_RTC_GetTime(&hrtc,&this_type,RTC_FORMAT_BIN);
 80007a8:	2200      	movs	r2, #0
 80007aa:	492b      	ldr	r1, [pc, #172]	@ (8000858 <main+0x114>)
 80007ac:	482b      	ldr	r0, [pc, #172]	@ (800085c <main+0x118>)
 80007ae:	f002 fa6f 	bl	8002c90 <HAL_RTC_GetTime>
  	  oled_display_wavelength_distance_rtc(pulse_us, distance, this_type.Seconds); // update oled
 80007b2:	4b27      	ldr	r3, [pc, #156]	@ (8000850 <main+0x10c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	4b26      	ldr	r3, [pc, #152]	@ (8000854 <main+0x110>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	4b26      	ldr	r3, [pc, #152]	@ (8000858 <main+0x114>)
 80007c0:	789b      	ldrb	r3, [r3, #2]
 80007c2:	461a      	mov	r2, r3
 80007c4:	f7ff fd3a 	bl	800023c <oled_display_wavelength_distance_rtc>

  	  // entering the sleep mode
  	  // 1.prepare to stop

  	  HAL_RTC_GetTime(&hrtc,&this_rtc_alarm.AlarmTime ,RTC_FORMAT_BIN);
 80007c8:	2200      	movs	r2, #0
 80007ca:	4925      	ldr	r1, [pc, #148]	@ (8000860 <main+0x11c>)
 80007cc:	4823      	ldr	r0, [pc, #140]	@ (800085c <main+0x118>)
 80007ce:	f002 fa5f 	bl	8002c90 <HAL_RTC_GetTime>
  	  if (this_rtc_alarm.AlarmTime.Seconds >= 58) {
 80007d2:	4b23      	ldr	r3, [pc, #140]	@ (8000860 <main+0x11c>)
 80007d4:	789b      	ldrb	r3, [r3, #2]
 80007d6:	2b39      	cmp	r3, #57	@ 0x39
 80007d8:	d915      	bls.n	8000806 <main+0xc2>
  		  this_rtc_alarm.AlarmTime.Seconds = 0;
 80007da:	4b21      	ldr	r3, [pc, #132]	@ (8000860 <main+0x11c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	709a      	strb	r2, [r3, #2]
  	      this_rtc_alarm.AlarmTime.Minutes = (this_rtc_alarm.AlarmTime.Minutes + 1) % 60;
 80007e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000860 <main+0x11c>)
 80007e2:	785b      	ldrb	r3, [r3, #1]
 80007e4:	1c5a      	adds	r2, r3, #1
 80007e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000864 <main+0x120>)
 80007e8:	fb83 1302 	smull	r1, r3, r3, r2
 80007ec:	4413      	add	r3, r2
 80007ee:	1159      	asrs	r1, r3, #5
 80007f0:	17d3      	asrs	r3, r2, #31
 80007f2:	1ac9      	subs	r1, r1, r3
 80007f4:	460b      	mov	r3, r1
 80007f6:	011b      	lsls	r3, r3, #4
 80007f8:	1a5b      	subs	r3, r3, r1
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	1ad1      	subs	r1, r2, r3
 80007fe:	b2ca      	uxtb	r2, r1
 8000800:	4b17      	ldr	r3, [pc, #92]	@ (8000860 <main+0x11c>)
 8000802:	705a      	strb	r2, [r3, #1]
 8000804:	e005      	b.n	8000812 <main+0xce>
  	  } else {
  		  this_rtc_alarm.AlarmTime.Seconds += 2;
 8000806:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <main+0x11c>)
 8000808:	789b      	ldrb	r3, [r3, #2]
 800080a:	3302      	adds	r3, #2
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <main+0x11c>)
 8000810:	709a      	strb	r2, [r3, #2]
  	  }

  	  HAL_RTC_SetAlarm_IT(&hrtc,&this_rtc_alarm,RTC_FORMAT_BIN);
 8000812:	2200      	movs	r2, #0
 8000814:	4912      	ldr	r1, [pc, #72]	@ (8000860 <main+0x11c>)
 8000816:	4811      	ldr	r0, [pc, #68]	@ (800085c <main+0x118>)
 8000818:	f002 fb12 	bl	8002e40 <HAL_RTC_SetAlarm_IT>

  	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800081c:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <main+0x124>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a11      	ldr	r2, [pc, #68]	@ (8000868 <main+0x124>)
 8000822:	f043 0304 	orr.w	r3, r3, #4
 8000826:	6013      	str	r3, [r2, #0]
  	  HAL_SuspendTick();
 8000828:	f000 fc72 	bl	8001110 <HAL_SuspendTick>
  	  // 2. Enter STOP mode (system is off here until interrupt)
  	  HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
 800082c:	2101      	movs	r1, #1
 800082e:	2000      	movs	r0, #0
 8000830:	f001 fbf4 	bl	800201c <HAL_PWR_EnterSTOPMode>
  	  // 3.wake up the system and do the work
  	  SystemClock_Config();
 8000834:	f000 f81a 	bl	800086c <SystemClock_Config>
  	  HAL_ResumeTick();
 8000838:	f000 fc78 	bl	800112c <HAL_ResumeTick>
  	  HAL_RTC_DeactivateAlarm(&hrtc,RTC_ALARM_A);
 800083c:	2100      	movs	r1, #0
 800083e:	4807      	ldr	r0, [pc, #28]	@ (800085c <main+0x118>)
 8000840:	f002 fbb6 	bl	8002fb0 <HAL_RTC_DeactivateAlarm>
  	  HC_SR04_Trigger(); // trigger the HC_SR04 chip
 8000844:	e795      	b.n	8000772 <main+0x2e>
 8000846:	bf00      	nop
 8000848:	2000057c 	.word	0x2000057c
 800084c:	20000530 	.word	0x20000530
 8000850:	20000578 	.word	0x20000578
 8000854:	2000057e 	.word	0x2000057e
 8000858:	20000580 	.word	0x20000580
 800085c:	200004d4 	.word	0x200004d4
 8000860:	20000584 	.word	0x20000584
 8000864:	88888889 	.word	0x88888889
 8000868:	40007000 	.word	0x40007000

0800086c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b094      	sub	sp, #80	@ 0x50
 8000870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000872:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000876:	2228      	movs	r2, #40	@ 0x28
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f003 ffdc 	bl	8004838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800089c:	2305      	movs	r3, #5
 800089e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008aa:	2301      	movs	r3, #1
 80008ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ae:	2301      	movs	r3, #1
 80008b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b2:	2302      	movs	r3, #2
 80008b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008bc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80008c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 fbda 	bl	8002080 <HAL_RCC_OscConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80008d2:	f000 f9c9 	bl	8000c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d6:	230f      	movs	r3, #15
 80008d8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008da:	2302      	movs	r3, #2
 80008dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	2102      	movs	r1, #2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 fe46 	bl	8002584 <HAL_RCC_ClockConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008fe:	f000 f9b3 	bl	8000c68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000902:	2301      	movs	r3, #1
 8000904:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000906:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800090a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	4618      	mov	r0, r3
 8000910:	f001 ffc6 	bl	80028a0 <HAL_RCCEx_PeriphCLKConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800091a:	f000 f9a5 	bl	8000c68 <Error_Handler>
  }
}
 800091e:	bf00      	nop
 8000920:	3750      	adds	r7, #80	@ 0x50
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800092c:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <MX_I2C1_Init+0x50>)
 800092e:	4a13      	ldr	r2, [pc, #76]	@ (800097c <MX_I2C1_Init+0x54>)
 8000930:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_I2C1_Init+0x50>)
 8000934:	4a12      	ldr	r2, [pc, #72]	@ (8000980 <MX_I2C1_Init+0x58>)
 8000936:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000938:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_I2C1_Init+0x50>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <MX_I2C1_Init+0x50>)
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000944:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <MX_I2C1_Init+0x50>)
 8000946:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800094a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800094c:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <MX_I2C1_Init+0x50>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_I2C1_Init+0x50>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000958:	4b07      	ldr	r3, [pc, #28]	@ (8000978 <MX_I2C1_Init+0x50>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <MX_I2C1_Init+0x50>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	@ (8000978 <MX_I2C1_Init+0x50>)
 8000966:	f000 fe99 	bl	800169c <HAL_I2C_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000970:	f000 f97a 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000480 	.word	0x20000480
 800097c:	40005400 	.word	0x40005400
 8000980:	000186a0 	.word	0x000186a0

08000984 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000988:	4b0a      	ldr	r3, [pc, #40]	@ (80009b4 <MX_RTC_Init+0x30>)
 800098a:	4a0b      	ldr	r2, [pc, #44]	@ (80009b8 <MX_RTC_Init+0x34>)
 800098c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800098e:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <MX_RTC_Init+0x30>)
 8000990:	f04f 32ff 	mov.w	r2, #4294967295
 8000994:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000996:	4b07      	ldr	r3, [pc, #28]	@ (80009b4 <MX_RTC_Init+0x30>)
 8000998:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800099c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	@ (80009b4 <MX_RTC_Init+0x30>)
 80009a0:	f002 f8ea 	bl	8002b78 <HAL_RTC_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 80009aa:	f000 f95d 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200004d4 	.word	0x200004d4
 80009b8:	40002800 	.word	0x40002800

080009bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c2:	f107 0308 	add.w	r3, r7, #8
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d0:	463b      	mov	r3, r7
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009d8:	4b22      	ldr	r3, [pc, #136]	@ (8000a64 <MX_TIM1_Init+0xa8>)
 80009da:	4a23      	ldr	r2, [pc, #140]	@ (8000a68 <MX_TIM1_Init+0xac>)
 80009dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80009de:	4b21      	ldr	r3, [pc, #132]	@ (8000a64 <MX_TIM1_Init+0xa8>)
 80009e0:	2247      	movs	r2, #71	@ 0x47
 80009e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a64 <MX_TIM1_Init+0xa8>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10;
 80009ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000a64 <MX_TIM1_Init+0xa8>)
 80009ec:	220a      	movs	r2, #10
 80009ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a64 <MX_TIM1_Init+0xa8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a64 <MX_TIM1_Init+0xa8>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fc:	4b19      	ldr	r3, [pc, #100]	@ (8000a64 <MX_TIM1_Init+0xa8>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a02:	4818      	ldr	r0, [pc, #96]	@ (8000a64 <MX_TIM1_Init+0xa8>)
 8000a04:	f002 fe08 	bl	8003618 <HAL_TIM_Base_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000a0e:	f000 f92b 	bl	8000c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4811      	ldr	r0, [pc, #68]	@ (8000a64 <MX_TIM1_Init+0xa8>)
 8000a20:	f003 fa41 	bl	8003ea6 <HAL_TIM_ConfigClockSource>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000a2a:	f000 f91d 	bl	8000c68 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000a2e:	2108      	movs	r1, #8
 8000a30:	480c      	ldr	r0, [pc, #48]	@ (8000a64 <MX_TIM1_Init+0xa8>)
 8000a32:	f003 f853 	bl	8003adc <HAL_TIM_OnePulse_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000a3c:	f000 f914 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a40:	2300      	movs	r3, #0
 8000a42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a48:	463b      	mov	r3, r7
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <MX_TIM1_Init+0xa8>)
 8000a4e:	f003 fe63 	bl	8004718 <HAL_TIMEx_MasterConfigSynchronization>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000a58:	f000 f906 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	3718      	adds	r7, #24
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	200004e8 	.word	0x200004e8
 8000a68:	40012c00 	.word	0x40012c00

08000a6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b090      	sub	sp, #64	@ 0x40
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a72:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aa6:	4b3d      	ldr	r3, [pc, #244]	@ (8000b9c <MX_TIM2_Init+0x130>)
 8000aa8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000aae:	4b3b      	ldr	r3, [pc, #236]	@ (8000b9c <MX_TIM2_Init+0x130>)
 8000ab0:	2247      	movs	r2, #71	@ 0x47
 8000ab2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab4:	4b39      	ldr	r3, [pc, #228]	@ (8000b9c <MX_TIM2_Init+0x130>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000aba:	4b38      	ldr	r3, [pc, #224]	@ (8000b9c <MX_TIM2_Init+0x130>)
 8000abc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ac0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac2:	4b36      	ldr	r3, [pc, #216]	@ (8000b9c <MX_TIM2_Init+0x130>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac8:	4b34      	ldr	r3, [pc, #208]	@ (8000b9c <MX_TIM2_Init+0x130>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ace:	4833      	ldr	r0, [pc, #204]	@ (8000b9c <MX_TIM2_Init+0x130>)
 8000ad0:	f002 fda2 	bl	8003618 <HAL_TIM_Base_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ada:	f000 f8c5 	bl	8000c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ade:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ae2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ae4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ae8:	4619      	mov	r1, r3
 8000aea:	482c      	ldr	r0, [pc, #176]	@ (8000b9c <MX_TIM2_Init+0x130>)
 8000aec:	f003 f9db 	bl	8003ea6 <HAL_TIM_ConfigClockSource>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000af6:	f000 f8b7 	bl	8000c68 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000afa:	4828      	ldr	r0, [pc, #160]	@ (8000b9c <MX_TIM2_Init+0x130>)
 8000afc:	f002 fddb 	bl	80036b6 <HAL_TIM_IC_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000b06:	f000 f8af 	bl	8000c68 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8000b0e:	2360      	movs	r3, #96	@ 0x60
 8000b10:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	481e      	ldr	r0, [pc, #120]	@ (8000b9c <MX_TIM2_Init+0x130>)
 8000b22:	f003 fa87 	bl	8004034 <HAL_TIM_SlaveConfigSynchro>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8000b2c:	f000 f89c 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4817      	ldr	r0, [pc, #92]	@ (8000b9c <MX_TIM2_Init+0x130>)
 8000b40:	f003 fdea 	bl	8004718 <HAL_TIMEx_MasterConfigSynchronization>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000b4a:	f000 f88d 	bl	8000c68 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000b52:	2302      	movs	r3, #2
 8000b54:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	2200      	movs	r2, #0
 8000b62:	4619      	mov	r1, r3
 8000b64:	480d      	ldr	r0, [pc, #52]	@ (8000b9c <MX_TIM2_Init+0x130>)
 8000b66:	f003 f902 	bl	8003d6e <HAL_TIM_IC_ConfigChannel>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000b70:	f000 f87a 	bl	8000c68 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2204      	movs	r2, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	4806      	ldr	r0, [pc, #24]	@ (8000b9c <MX_TIM2_Init+0x130>)
 8000b84:	f003 f8f3 	bl	8003d6e <HAL_TIM_IC_ConfigChannel>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM2_Init+0x126>
  {
    Error_Handler();
 8000b8e:	f000 f86b 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	3740      	adds	r7, #64	@ 0x40
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000530 	.word	0x20000530

08000ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b088      	sub	sp, #32
 8000ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	f107 0310 	add.w	r3, r7, #16
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8000c60 <MX_GPIO_Init+0xc0>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a29      	ldr	r2, [pc, #164]	@ (8000c60 <MX_GPIO_Init+0xc0>)
 8000bba:	f043 0310 	orr.w	r3, r3, #16
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b27      	ldr	r3, [pc, #156]	@ (8000c60 <MX_GPIO_Init+0xc0>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0310 	and.w	r3, r3, #16
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bcc:	4b24      	ldr	r3, [pc, #144]	@ (8000c60 <MX_GPIO_Init+0xc0>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a23      	ldr	r2, [pc, #140]	@ (8000c60 <MX_GPIO_Init+0xc0>)
 8000bd2:	f043 0320 	orr.w	r3, r3, #32
 8000bd6:	6193      	str	r3, [r2, #24]
 8000bd8:	4b21      	ldr	r3, [pc, #132]	@ (8000c60 <MX_GPIO_Init+0xc0>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	f003 0320 	and.w	r3, r3, #32
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c60 <MX_GPIO_Init+0xc0>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c60 <MX_GPIO_Init+0xc0>)
 8000bea:	f043 0304 	orr.w	r3, r3, #4
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c60 <MX_GPIO_Init+0xc0>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfc:	4b18      	ldr	r3, [pc, #96]	@ (8000c60 <MX_GPIO_Init+0xc0>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	4a17      	ldr	r2, [pc, #92]	@ (8000c60 <MX_GPIO_Init+0xc0>)
 8000c02:	f043 0308 	orr.w	r3, r3, #8
 8000c06:	6193      	str	r3, [r2, #24]
 8000c08:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <MX_GPIO_Init+0xc0>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f003 0308 	and.w	r3, r3, #8
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c1a:	4812      	ldr	r0, [pc, #72]	@ (8000c64 <MX_GPIO_Init+0xc4>)
 8000c1c:	f000 fd26 	bl	800166c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 0310 	add.w	r3, r7, #16
 8000c36:	4619      	mov	r1, r3
 8000c38:	480a      	ldr	r0, [pc, #40]	@ (8000c64 <MX_GPIO_Init+0xc4>)
 8000c3a:	f000 fb93 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	4619      	mov	r1, r3
 8000c52:	4804      	ldr	r0, [pc, #16]	@ (8000c64 <MX_GPIO_Init+0xc4>)
 8000c54:	f000 fb86 	bl	8001364 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c58:	bf00      	nop
 8000c5a:	3720      	adds	r7, #32
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40010800 	.word	0x40010800

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <Error_Handler+0x8>

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c7a:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <HAL_MspInit+0x5c>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	4a14      	ldr	r2, [pc, #80]	@ (8000cd0 <HAL_MspInit+0x5c>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6193      	str	r3, [r2, #24]
 8000c86:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <HAL_MspInit+0x5c>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <HAL_MspInit+0x5c>)
 8000c94:	69db      	ldr	r3, [r3, #28]
 8000c96:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd0 <HAL_MspInit+0x5c>)
 8000c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c9c:	61d3      	str	r3, [r2, #28]
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <HAL_MspInit+0x5c>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000caa:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd4 <HAL_MspInit+0x60>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	4a04      	ldr	r2, [pc, #16]	@ (8000cd4 <HAL_MspInit+0x60>)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	40010000 	.word	0x40010000

08000cd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a15      	ldr	r2, [pc, #84]	@ (8000d48 <HAL_I2C_MspInit+0x70>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d123      	bne.n	8000d40 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf8:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <HAL_I2C_MspInit+0x74>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	4a13      	ldr	r2, [pc, #76]	@ (8000d4c <HAL_I2C_MspInit+0x74>)
 8000cfe:	f043 0308 	orr.w	r3, r3, #8
 8000d02:	6193      	str	r3, [r2, #24]
 8000d04:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <HAL_I2C_MspInit+0x74>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f003 0308 	and.w	r3, r3, #8
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d10:	23c0      	movs	r3, #192	@ 0xc0
 8000d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d14:	2312      	movs	r3, #18
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	4619      	mov	r1, r3
 8000d22:	480b      	ldr	r0, [pc, #44]	@ (8000d50 <HAL_I2C_MspInit+0x78>)
 8000d24:	f000 fb1e 	bl	8001364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d28:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <HAL_I2C_MspInit+0x74>)
 8000d2a:	69db      	ldr	r3, [r3, #28]
 8000d2c:	4a07      	ldr	r2, [pc, #28]	@ (8000d4c <HAL_I2C_MspInit+0x74>)
 8000d2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d32:	61d3      	str	r3, [r2, #28]
 8000d34:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <HAL_I2C_MspInit+0x74>)
 8000d36:	69db      	ldr	r3, [r3, #28]
 8000d38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d40:	bf00      	nop
 8000d42:	3720      	adds	r7, #32
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40005400 	.word	0x40005400
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40010c00 	.word	0x40010c00

08000d54 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0f      	ldr	r2, [pc, #60]	@ (8000da0 <HAL_RTC_MspInit+0x4c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d118      	bne.n	8000d98 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000d66:	f001 f94d 	bl	8002004 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <HAL_RTC_MspInit+0x50>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	4a0d      	ldr	r2, [pc, #52]	@ (8000da4 <HAL_RTC_MspInit+0x50>)
 8000d70:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000d74:	61d3      	str	r3, [r2, #28]
 8000d76:	4b0b      	ldr	r3, [pc, #44]	@ (8000da4 <HAL_RTC_MspInit+0x50>)
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d82:	4b09      	ldr	r3, [pc, #36]	@ (8000da8 <HAL_RTC_MspInit+0x54>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2029      	movs	r0, #41	@ 0x29
 8000d8e:	f000 fab2 	bl	80012f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000d92:	2029      	movs	r0, #41	@ 0x29
 8000d94:	f000 facb 	bl	800132e <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40002800 	.word	0x40002800
 8000da4:	40021000 	.word	0x40021000
 8000da8:	4242043c 	.word	0x4242043c

08000dac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	@ 0x28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 0318 	add.w	r3, r7, #24
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a26      	ldr	r2, [pc, #152]	@ (8000e60 <HAL_TIM_Base_MspInit+0xb4>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d114      	bne.n	8000df6 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dcc:	4b25      	ldr	r3, [pc, #148]	@ (8000e64 <HAL_TIM_Base_MspInit+0xb8>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a24      	ldr	r2, [pc, #144]	@ (8000e64 <HAL_TIM_Base_MspInit+0xb8>)
 8000dd2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b22      	ldr	r3, [pc, #136]	@ (8000e64 <HAL_TIM_Base_MspInit+0xb8>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2100      	movs	r1, #0
 8000de8:	2019      	movs	r0, #25
 8000dea:	f000 fa84 	bl	80012f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000dee:	2019      	movs	r0, #25
 8000df0:	f000 fa9d 	bl	800132e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000df4:	e030      	b.n	8000e58 <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM2)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dfe:	d12b      	bne.n	8000e58 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e00:	4b18      	ldr	r3, [pc, #96]	@ (8000e64 <HAL_TIM_Base_MspInit+0xb8>)
 8000e02:	69db      	ldr	r3, [r3, #28]
 8000e04:	4a17      	ldr	r2, [pc, #92]	@ (8000e64 <HAL_TIM_Base_MspInit+0xb8>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	61d3      	str	r3, [r2, #28]
 8000e0c:	4b15      	ldr	r3, [pc, #84]	@ (8000e64 <HAL_TIM_Base_MspInit+0xb8>)
 8000e0e:	69db      	ldr	r3, [r3, #28]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	4b12      	ldr	r3, [pc, #72]	@ (8000e64 <HAL_TIM_Base_MspInit+0xb8>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a11      	ldr	r2, [pc, #68]	@ (8000e64 <HAL_TIM_Base_MspInit+0xb8>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b0f      	ldr	r3, [pc, #60]	@ (8000e64 <HAL_TIM_Base_MspInit+0xb8>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e30:	2302      	movs	r3, #2
 8000e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 0318 	add.w	r3, r7, #24
 8000e40:	4619      	mov	r1, r3
 8000e42:	4809      	ldr	r0, [pc, #36]	@ (8000e68 <HAL_TIM_Base_MspInit+0xbc>)
 8000e44:	f000 fa8e 	bl	8001364 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	201c      	movs	r0, #28
 8000e4e:	f000 fa52 	bl	80012f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e52:	201c      	movs	r0, #28
 8000e54:	f000 fa6b 	bl	800132e <HAL_NVIC_EnableIRQ>
}
 8000e58:	bf00      	nop
 8000e5a:	3728      	adds	r7, #40	@ 0x28
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40012c00 	.word	0x40012c00
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40010800 	.word	0x40010800

08000e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <NMI_Handler+0x4>

08000e74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <HardFault_Handler+0x4>

08000e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <MemManage_Handler+0x4>

08000e84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebc:	f000 f8e8 	bl	8001090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ec8:	4802      	ldr	r0, [pc, #8]	@ (8000ed4 <TIM1_UP_IRQHandler+0x10>)
 8000eca:	f002 fe60 	bl	8003b8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200004e8 	.word	0x200004e8

08000ed8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000edc:	4802      	ldr	r0, [pc, #8]	@ (8000ee8 <TIM2_IRQHandler+0x10>)
 8000ede:	f002 fe56 	bl	8003b8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000530 	.word	0x20000530

08000eec <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000ef0:	4802      	ldr	r0, [pc, #8]	@ (8000efc <RTC_Alarm_IRQHandler+0x10>)
 8000ef2:	f002 f8bd 	bl	8003070 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200004d4 	.word	0x200004d4

08000f00 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
    if(htim->Instance==TIM2 && htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1){
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f10:	d10d      	bne.n	8000f2e <HAL_TIM_IC_CaptureCallback+0x2e>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	7f1b      	ldrb	r3, [r3, #28]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d109      	bne.n	8000f2e <HAL_TIM_IC_CaptureCallback+0x2e>
        pulse_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f003 f8cb 	bl	80040b8 <HAL_TIM_ReadCapturedValue>
 8000f22:	4603      	mov	r3, r0
 8000f24:	4a04      	ldr	r2, [pc, #16]	@ (8000f38 <HAL_TIM_IC_CaptureCallback+0x38>)
 8000f26:	6013      	str	r3, [r2, #0]
        distance_update_flag = 1;
 8000f28:	4b04      	ldr	r3, [pc, #16]	@ (8000f3c <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]

    }
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000578 	.word	0x20000578
 8000f3c:	2000057c 	.word	0x2000057c

08000f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f48:	4a14      	ldr	r2, [pc, #80]	@ (8000f9c <_sbrk+0x5c>)
 8000f4a:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <_sbrk+0x60>)
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f54:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <_sbrk+0x64>)
 8000f5e:	4a12      	ldr	r2, [pc, #72]	@ (8000fa8 <_sbrk+0x68>)
 8000f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <_sbrk+0x64>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d207      	bcs.n	8000f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f70:	f003 fc6a 	bl	8004848 <__errno>
 8000f74:	4603      	mov	r3, r0
 8000f76:	220c      	movs	r2, #12
 8000f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	e009      	b.n	8000f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f80:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f86:	4b07      	ldr	r3, [pc, #28]	@ (8000fa4 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4a05      	ldr	r2, [pc, #20]	@ (8000fa4 <_sbrk+0x64>)
 8000f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f92:	68fb      	ldr	r3, [r7, #12]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20005000 	.word	0x20005000
 8000fa0:	00000400 	.word	0x00000400
 8000fa4:	2000058c 	.word	0x2000058c
 8000fa8:	200006e0 	.word	0x200006e0

08000fac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr

08000fb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fb8:	f7ff fff8 	bl	8000fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fbc:	480b      	ldr	r0, [pc, #44]	@ (8000fec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fbe:	490c      	ldr	r1, [pc, #48]	@ (8000ff0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fc0:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a09      	ldr	r2, [pc, #36]	@ (8000ff8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fd4:	4c09      	ldr	r4, [pc, #36]	@ (8000ffc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f003 fc37 	bl	8004854 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fe6:	f7ff fbad 	bl	8000744 <main>
  bx lr
 8000fea:	4770      	bx	lr
  ldr r0, =_sdata
 8000fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ff4:	08005820 	.word	0x08005820
  ldr r2, =_sbss
 8000ff8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ffc:	200006dc 	.word	0x200006dc

08001000 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC1_2_IRQHandler>
	...

08001004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001008:	4b08      	ldr	r3, [pc, #32]	@ (800102c <HAL_Init+0x28>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a07      	ldr	r2, [pc, #28]	@ (800102c <HAL_Init+0x28>)
 800100e:	f043 0310 	orr.w	r3, r3, #16
 8001012:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001014:	2003      	movs	r0, #3
 8001016:	f000 f963 	bl	80012e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800101a:	200f      	movs	r0, #15
 800101c:	f000 f808 	bl	8001030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001020:	f7ff fe28 	bl	8000c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40022000 	.word	0x40022000

08001030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001038:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <HAL_InitTick+0x54>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <HAL_InitTick+0x58>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4619      	mov	r1, r3
 8001042:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001046:	fbb3 f3f1 	udiv	r3, r3, r1
 800104a:	fbb2 f3f3 	udiv	r3, r2, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f97b 	bl	800134a <HAL_SYSTICK_Config>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e00e      	b.n	800107c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b0f      	cmp	r3, #15
 8001062:	d80a      	bhi.n	800107a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001064:	2200      	movs	r2, #0
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	f000 f943 	bl	80012f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001070:	4a06      	ldr	r2, [pc, #24]	@ (800108c <HAL_InitTick+0x5c>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	e000      	b.n	800107c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000000 	.word	0x20000000
 8001088:	20000008 	.word	0x20000008
 800108c:	20000004 	.word	0x20000004

08001090 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001094:	4b05      	ldr	r3, [pc, #20]	@ (80010ac <HAL_IncTick+0x1c>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <HAL_IncTick+0x20>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4413      	add	r3, r2
 80010a0:	4a03      	ldr	r2, [pc, #12]	@ (80010b0 <HAL_IncTick+0x20>)
 80010a2:	6013      	str	r3, [r2, #0]
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr
 80010ac:	20000008 	.word	0x20000008
 80010b0:	20000590 	.word	0x20000590

080010b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;
 80010b8:	4b02      	ldr	r3, [pc, #8]	@ (80010c4 <HAL_GetTick+0x10>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr
 80010c4:	20000590 	.word	0x20000590

080010c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d0:	f7ff fff0 	bl	80010b4 <HAL_GetTick>
 80010d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e0:	d005      	beq.n	80010ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010e2:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <HAL_Delay+0x44>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4413      	add	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ee:	bf00      	nop
 80010f0:	f7ff ffe0 	bl	80010b4 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d8f7      	bhi.n	80010f0 <HAL_Delay+0x28>
  {
  }
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000008 	.word	0x20000008

08001110 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001114:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <HAL_SuspendTick+0x18>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a03      	ldr	r2, [pc, #12]	@ (8001128 <HAL_SuspendTick+0x18>)
 800111a:	f023 0302 	bic.w	r3, r3, #2
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	e000e010 	.word	0xe000e010

0800112c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001130:	4b04      	ldr	r3, [pc, #16]	@ (8001144 <HAL_ResumeTick+0x18>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a03      	ldr	r2, [pc, #12]	@ (8001144 <HAL_ResumeTick+0x18>)
 8001136:	f043 0302 	orr.w	r3, r3, #2
 800113a:	6013      	str	r3, [r2, #0]
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	e000e010 	.word	0xe000e010

08001148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001158:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001170:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	@ (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001194:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	f003 0307 	and.w	r3, r3, #7
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db0b      	blt.n	80011d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f003 021f 	and.w	r2, r3, #31
 80011c4:	4906      	ldr	r1, [pc, #24]	@ (80011e0 <__NVIC_EnableIRQ+0x34>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	2001      	movs	r0, #1
 80011ce:	fa00 f202 	lsl.w	r2, r0, r2
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	@ (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	@ (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	@ 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	@ 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012ac:	d301      	bcc.n	80012b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00f      	b.n	80012d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b2:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <SysTick_Config+0x40>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ba:	210f      	movs	r1, #15
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295
 80012c0:	f7ff ff90 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c4:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <SysTick_Config+0x40>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ca:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <SysTick_Config+0x40>)
 80012cc:	2207      	movs	r2, #7
 80012ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	e000e010 	.word	0xe000e010

080012e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff2d 	bl	8001148 <__NVIC_SetPriorityGrouping>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001308:	f7ff ff42 	bl	8001190 <__NVIC_GetPriorityGrouping>
 800130c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68b9      	ldr	r1, [r7, #8]
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f7ff ff90 	bl	8001238 <NVIC_EncodePriority>
 8001318:	4602      	mov	r2, r0
 800131a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff5f 	bl	80011e4 <__NVIC_SetPriority>
}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff35 	bl	80011ac <__NVIC_EnableIRQ>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffa2 	bl	800129c <SysTick_Config>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001364:	b480      	push	{r7}
 8001366:	b08b      	sub	sp, #44	@ 0x2c
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001372:	2300      	movs	r3, #0
 8001374:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001376:	e169      	b.n	800164c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001378:	2201      	movs	r2, #1
 800137a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	69fa      	ldr	r2, [r7, #28]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	429a      	cmp	r2, r3
 8001392:	f040 8158 	bne.w	8001646 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	4a9a      	ldr	r2, [pc, #616]	@ (8001604 <HAL_GPIO_Init+0x2a0>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d05e      	beq.n	800145e <HAL_GPIO_Init+0xfa>
 80013a0:	4a98      	ldr	r2, [pc, #608]	@ (8001604 <HAL_GPIO_Init+0x2a0>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d875      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013a6:	4a98      	ldr	r2, [pc, #608]	@ (8001608 <HAL_GPIO_Init+0x2a4>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d058      	beq.n	800145e <HAL_GPIO_Init+0xfa>
 80013ac:	4a96      	ldr	r2, [pc, #600]	@ (8001608 <HAL_GPIO_Init+0x2a4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d86f      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013b2:	4a96      	ldr	r2, [pc, #600]	@ (800160c <HAL_GPIO_Init+0x2a8>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d052      	beq.n	800145e <HAL_GPIO_Init+0xfa>
 80013b8:	4a94      	ldr	r2, [pc, #592]	@ (800160c <HAL_GPIO_Init+0x2a8>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d869      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013be:	4a94      	ldr	r2, [pc, #592]	@ (8001610 <HAL_GPIO_Init+0x2ac>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d04c      	beq.n	800145e <HAL_GPIO_Init+0xfa>
 80013c4:	4a92      	ldr	r2, [pc, #584]	@ (8001610 <HAL_GPIO_Init+0x2ac>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d863      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013ca:	4a92      	ldr	r2, [pc, #584]	@ (8001614 <HAL_GPIO_Init+0x2b0>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d046      	beq.n	800145e <HAL_GPIO_Init+0xfa>
 80013d0:	4a90      	ldr	r2, [pc, #576]	@ (8001614 <HAL_GPIO_Init+0x2b0>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d85d      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013d6:	2b12      	cmp	r3, #18
 80013d8:	d82a      	bhi.n	8001430 <HAL_GPIO_Init+0xcc>
 80013da:	2b12      	cmp	r3, #18
 80013dc:	d859      	bhi.n	8001492 <HAL_GPIO_Init+0x12e>
 80013de:	a201      	add	r2, pc, #4	@ (adr r2, 80013e4 <HAL_GPIO_Init+0x80>)
 80013e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e4:	0800145f 	.word	0x0800145f
 80013e8:	08001439 	.word	0x08001439
 80013ec:	0800144b 	.word	0x0800144b
 80013f0:	0800148d 	.word	0x0800148d
 80013f4:	08001493 	.word	0x08001493
 80013f8:	08001493 	.word	0x08001493
 80013fc:	08001493 	.word	0x08001493
 8001400:	08001493 	.word	0x08001493
 8001404:	08001493 	.word	0x08001493
 8001408:	08001493 	.word	0x08001493
 800140c:	08001493 	.word	0x08001493
 8001410:	08001493 	.word	0x08001493
 8001414:	08001493 	.word	0x08001493
 8001418:	08001493 	.word	0x08001493
 800141c:	08001493 	.word	0x08001493
 8001420:	08001493 	.word	0x08001493
 8001424:	08001493 	.word	0x08001493
 8001428:	08001441 	.word	0x08001441
 800142c:	08001455 	.word	0x08001455
 8001430:	4a79      	ldr	r2, [pc, #484]	@ (8001618 <HAL_GPIO_Init+0x2b4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d013      	beq.n	800145e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001436:	e02c      	b.n	8001492 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	623b      	str	r3, [r7, #32]
          break;
 800143e:	e029      	b.n	8001494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	3304      	adds	r3, #4
 8001446:	623b      	str	r3, [r7, #32]
          break;
 8001448:	e024      	b.n	8001494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	3308      	adds	r3, #8
 8001450:	623b      	str	r3, [r7, #32]
          break;
 8001452:	e01f      	b.n	8001494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	330c      	adds	r3, #12
 800145a:	623b      	str	r3, [r7, #32]
          break;
 800145c:	e01a      	b.n	8001494 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d102      	bne.n	800146c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001466:	2304      	movs	r3, #4
 8001468:	623b      	str	r3, [r7, #32]
          break;
 800146a:	e013      	b.n	8001494 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d105      	bne.n	8001480 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001474:	2308      	movs	r3, #8
 8001476:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69fa      	ldr	r2, [r7, #28]
 800147c:	611a      	str	r2, [r3, #16]
          break;
 800147e:	e009      	b.n	8001494 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001480:	2308      	movs	r3, #8
 8001482:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	615a      	str	r2, [r3, #20]
          break;
 800148a:	e003      	b.n	8001494 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
          break;
 8001490:	e000      	b.n	8001494 <HAL_GPIO_Init+0x130>
          break;
 8001492:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2bff      	cmp	r3, #255	@ 0xff
 8001498:	d801      	bhi.n	800149e <HAL_GPIO_Init+0x13a>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	e001      	b.n	80014a2 <HAL_GPIO_Init+0x13e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3304      	adds	r3, #4
 80014a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	2bff      	cmp	r3, #255	@ 0xff
 80014a8:	d802      	bhi.n	80014b0 <HAL_GPIO_Init+0x14c>
 80014aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	e002      	b.n	80014b6 <HAL_GPIO_Init+0x152>
 80014b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b2:	3b08      	subs	r3, #8
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	210f      	movs	r1, #15
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	fa01 f303 	lsl.w	r3, r1, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	401a      	ands	r2, r3
 80014c8:	6a39      	ldr	r1, [r7, #32]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	fa01 f303 	lsl.w	r3, r1, r3
 80014d0:	431a      	orrs	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 80b1 	beq.w	8001646 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014e4:	4b4d      	ldr	r3, [pc, #308]	@ (800161c <HAL_GPIO_Init+0x2b8>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	4a4c      	ldr	r2, [pc, #304]	@ (800161c <HAL_GPIO_Init+0x2b8>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6193      	str	r3, [r2, #24]
 80014f0:	4b4a      	ldr	r3, [pc, #296]	@ (800161c <HAL_GPIO_Init+0x2b8>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014fc:	4a48      	ldr	r2, [pc, #288]	@ (8001620 <HAL_GPIO_Init+0x2bc>)
 80014fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001500:	089b      	lsrs	r3, r3, #2
 8001502:	3302      	adds	r3, #2
 8001504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001508:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800150a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	220f      	movs	r2, #15
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	4013      	ands	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a40      	ldr	r2, [pc, #256]	@ (8001624 <HAL_GPIO_Init+0x2c0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d013      	beq.n	8001550 <HAL_GPIO_Init+0x1ec>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a3f      	ldr	r2, [pc, #252]	@ (8001628 <HAL_GPIO_Init+0x2c4>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d00d      	beq.n	800154c <HAL_GPIO_Init+0x1e8>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a3e      	ldr	r2, [pc, #248]	@ (800162c <HAL_GPIO_Init+0x2c8>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d007      	beq.n	8001548 <HAL_GPIO_Init+0x1e4>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a3d      	ldr	r2, [pc, #244]	@ (8001630 <HAL_GPIO_Init+0x2cc>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d101      	bne.n	8001544 <HAL_GPIO_Init+0x1e0>
 8001540:	2303      	movs	r3, #3
 8001542:	e006      	b.n	8001552 <HAL_GPIO_Init+0x1ee>
 8001544:	2304      	movs	r3, #4
 8001546:	e004      	b.n	8001552 <HAL_GPIO_Init+0x1ee>
 8001548:	2302      	movs	r3, #2
 800154a:	e002      	b.n	8001552 <HAL_GPIO_Init+0x1ee>
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <HAL_GPIO_Init+0x1ee>
 8001550:	2300      	movs	r3, #0
 8001552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001554:	f002 0203 	and.w	r2, r2, #3
 8001558:	0092      	lsls	r2, r2, #2
 800155a:	4093      	lsls	r3, r2
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	4313      	orrs	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001562:	492f      	ldr	r1, [pc, #188]	@ (8001620 <HAL_GPIO_Init+0x2bc>)
 8001564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001566:	089b      	lsrs	r3, r3, #2
 8001568:	3302      	adds	r3, #2
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d006      	beq.n	800158a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800157c:	4b2d      	ldr	r3, [pc, #180]	@ (8001634 <HAL_GPIO_Init+0x2d0>)
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	492c      	ldr	r1, [pc, #176]	@ (8001634 <HAL_GPIO_Init+0x2d0>)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	4313      	orrs	r3, r2
 8001586:	608b      	str	r3, [r1, #8]
 8001588:	e006      	b.n	8001598 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800158a:	4b2a      	ldr	r3, [pc, #168]	@ (8001634 <HAL_GPIO_Init+0x2d0>)
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	43db      	mvns	r3, r3
 8001592:	4928      	ldr	r1, [pc, #160]	@ (8001634 <HAL_GPIO_Init+0x2d0>)
 8001594:	4013      	ands	r3, r2
 8001596:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d006      	beq.n	80015b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015a4:	4b23      	ldr	r3, [pc, #140]	@ (8001634 <HAL_GPIO_Init+0x2d0>)
 80015a6:	68da      	ldr	r2, [r3, #12]
 80015a8:	4922      	ldr	r1, [pc, #136]	@ (8001634 <HAL_GPIO_Init+0x2d0>)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	60cb      	str	r3, [r1, #12]
 80015b0:	e006      	b.n	80015c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015b2:	4b20      	ldr	r3, [pc, #128]	@ (8001634 <HAL_GPIO_Init+0x2d0>)
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	491e      	ldr	r1, [pc, #120]	@ (8001634 <HAL_GPIO_Init+0x2d0>)
 80015bc:	4013      	ands	r3, r2
 80015be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d006      	beq.n	80015da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015cc:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <HAL_GPIO_Init+0x2d0>)
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	4918      	ldr	r1, [pc, #96]	@ (8001634 <HAL_GPIO_Init+0x2d0>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]
 80015d8:	e006      	b.n	80015e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015da:	4b16      	ldr	r3, [pc, #88]	@ (8001634 <HAL_GPIO_Init+0x2d0>)
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	4914      	ldr	r1, [pc, #80]	@ (8001634 <HAL_GPIO_Init+0x2d0>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d021      	beq.n	8001638 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <HAL_GPIO_Init+0x2d0>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	490e      	ldr	r1, [pc, #56]	@ (8001634 <HAL_GPIO_Init+0x2d0>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	600b      	str	r3, [r1, #0]
 8001600:	e021      	b.n	8001646 <HAL_GPIO_Init+0x2e2>
 8001602:	bf00      	nop
 8001604:	10320000 	.word	0x10320000
 8001608:	10310000 	.word	0x10310000
 800160c:	10220000 	.word	0x10220000
 8001610:	10210000 	.word	0x10210000
 8001614:	10120000 	.word	0x10120000
 8001618:	10110000 	.word	0x10110000
 800161c:	40021000 	.word	0x40021000
 8001620:	40010000 	.word	0x40010000
 8001624:	40010800 	.word	0x40010800
 8001628:	40010c00 	.word	0x40010c00
 800162c:	40011000 	.word	0x40011000
 8001630:	40011400 	.word	0x40011400
 8001634:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001638:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <HAL_GPIO_Init+0x304>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	43db      	mvns	r3, r3
 8001640:	4909      	ldr	r1, [pc, #36]	@ (8001668 <HAL_GPIO_Init+0x304>)
 8001642:	4013      	ands	r3, r2
 8001644:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001648:	3301      	adds	r3, #1
 800164a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001652:	fa22 f303 	lsr.w	r3, r2, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	f47f ae8e 	bne.w	8001378 <HAL_GPIO_Init+0x14>
  }
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	372c      	adds	r7, #44	@ 0x2c
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	40010400 	.word	0x40010400

0800166c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	807b      	strh	r3, [r7, #2]
 8001678:	4613      	mov	r3, r2
 800167a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800167c:	787b      	ldrb	r3, [r7, #1]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001682:	887a      	ldrh	r2, [r7, #2]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001688:	e003      	b.n	8001692 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800168a:	887b      	ldrh	r3, [r7, #2]
 800168c:	041a      	lsls	r2, r3, #16
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	611a      	str	r2, [r3, #16]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e12b      	b.n	8001906 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d106      	bne.n	80016c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff fb08 	bl	8000cd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2224      	movs	r2, #36	@ 0x24
 80016cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0201 	bic.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001700:	f001 f888 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 8001704:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4a81      	ldr	r2, [pc, #516]	@ (8001910 <HAL_I2C_Init+0x274>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d807      	bhi.n	8001720 <HAL_I2C_Init+0x84>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4a80      	ldr	r2, [pc, #512]	@ (8001914 <HAL_I2C_Init+0x278>)
 8001714:	4293      	cmp	r3, r2
 8001716:	bf94      	ite	ls
 8001718:	2301      	movls	r3, #1
 800171a:	2300      	movhi	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	e006      	b.n	800172e <HAL_I2C_Init+0x92>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4a7d      	ldr	r2, [pc, #500]	@ (8001918 <HAL_I2C_Init+0x27c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	bf94      	ite	ls
 8001728:	2301      	movls	r3, #1
 800172a:	2300      	movhi	r3, #0
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e0e7      	b.n	8001906 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4a78      	ldr	r2, [pc, #480]	@ (800191c <HAL_I2C_Init+0x280>)
 800173a:	fba2 2303 	umull	r2, r3, r2, r3
 800173e:	0c9b      	lsrs	r3, r3, #18
 8001740:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	430a      	orrs	r2, r1
 8001754:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	4a6a      	ldr	r2, [pc, #424]	@ (8001910 <HAL_I2C_Init+0x274>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d802      	bhi.n	8001770 <HAL_I2C_Init+0xd4>
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	3301      	adds	r3, #1
 800176e:	e009      	b.n	8001784 <HAL_I2C_Init+0xe8>
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001776:	fb02 f303 	mul.w	r3, r2, r3
 800177a:	4a69      	ldr	r2, [pc, #420]	@ (8001920 <HAL_I2C_Init+0x284>)
 800177c:	fba2 2303 	umull	r2, r3, r2, r3
 8001780:	099b      	lsrs	r3, r3, #6
 8001782:	3301      	adds	r3, #1
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6812      	ldr	r2, [r2, #0]
 8001788:	430b      	orrs	r3, r1
 800178a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001796:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	495c      	ldr	r1, [pc, #368]	@ (8001910 <HAL_I2C_Init+0x274>)
 80017a0:	428b      	cmp	r3, r1
 80017a2:	d819      	bhi.n	80017d8 <HAL_I2C_Init+0x13c>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	1e59      	subs	r1, r3, #1
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80017b2:	1c59      	adds	r1, r3, #1
 80017b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80017b8:	400b      	ands	r3, r1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00a      	beq.n	80017d4 <HAL_I2C_Init+0x138>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1e59      	subs	r1, r3, #1
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80017cc:	3301      	adds	r3, #1
 80017ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d2:	e051      	b.n	8001878 <HAL_I2C_Init+0x1dc>
 80017d4:	2304      	movs	r3, #4
 80017d6:	e04f      	b.n	8001878 <HAL_I2C_Init+0x1dc>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d111      	bne.n	8001804 <HAL_I2C_Init+0x168>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	1e58      	subs	r0, r3, #1
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6859      	ldr	r1, [r3, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	440b      	add	r3, r1
 80017ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80017f2:	3301      	adds	r3, #1
 80017f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf0c      	ite	eq
 80017fc:	2301      	moveq	r3, #1
 80017fe:	2300      	movne	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	e012      	b.n	800182a <HAL_I2C_Init+0x18e>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	1e58      	subs	r0, r3, #1
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6859      	ldr	r1, [r3, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	0099      	lsls	r1, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	fbb0 f3f3 	udiv	r3, r0, r3
 800181a:	3301      	adds	r3, #1
 800181c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001820:	2b00      	cmp	r3, #0
 8001822:	bf0c      	ite	eq
 8001824:	2301      	moveq	r3, #1
 8001826:	2300      	movne	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_I2C_Init+0x196>
 800182e:	2301      	movs	r3, #1
 8001830:	e022      	b.n	8001878 <HAL_I2C_Init+0x1dc>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10e      	bne.n	8001858 <HAL_I2C_Init+0x1bc>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1e58      	subs	r0, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6859      	ldr	r1, [r3, #4]
 8001842:	460b      	mov	r3, r1
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	440b      	add	r3, r1
 8001848:	fbb0 f3f3 	udiv	r3, r0, r3
 800184c:	3301      	adds	r3, #1
 800184e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001852:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001856:	e00f      	b.n	8001878 <HAL_I2C_Init+0x1dc>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	1e58      	subs	r0, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6859      	ldr	r1, [r3, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	0099      	lsls	r1, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	fbb0 f3f3 	udiv	r3, r0, r3
 800186e:	3301      	adds	r3, #1
 8001870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001874:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	6809      	ldr	r1, [r1, #0]
 800187c:	4313      	orrs	r3, r2
 800187e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69da      	ldr	r2, [r3, #28]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80018a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6911      	ldr	r1, [r2, #16]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	68d2      	ldr	r2, [r2, #12]
 80018b2:	4311      	orrs	r1, r2
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	430b      	orrs	r3, r1
 80018ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695a      	ldr	r2, [r3, #20]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f042 0201 	orr.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2220      	movs	r2, #32
 80018f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	000186a0 	.word	0x000186a0
 8001914:	001e847f 	.word	0x001e847f
 8001918:	003d08ff 	.word	0x003d08ff
 800191c:	431bde83 	.word	0x431bde83
 8001920:	10624dd3 	.word	0x10624dd3

08001924 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af02      	add	r7, sp, #8
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	4608      	mov	r0, r1
 800192e:	4611      	mov	r1, r2
 8001930:	461a      	mov	r2, r3
 8001932:	4603      	mov	r3, r0
 8001934:	817b      	strh	r3, [r7, #10]
 8001936:	460b      	mov	r3, r1
 8001938:	813b      	strh	r3, [r7, #8]
 800193a:	4613      	mov	r3, r2
 800193c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800193e:	f7ff fbb9 	bl	80010b4 <HAL_GetTick>
 8001942:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b20      	cmp	r3, #32
 800194e:	f040 80d9 	bne.w	8001b04 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2319      	movs	r3, #25
 8001958:	2201      	movs	r2, #1
 800195a:	496d      	ldr	r1, [pc, #436]	@ (8001b10 <HAL_I2C_Mem_Write+0x1ec>)
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f000 f971 	bl	8001c44 <I2C_WaitOnFlagUntilTimeout>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001968:	2302      	movs	r3, #2
 800196a:	e0cc      	b.n	8001b06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001972:	2b01      	cmp	r3, #1
 8001974:	d101      	bne.n	800197a <HAL_I2C_Mem_Write+0x56>
 8001976:	2302      	movs	r3, #2
 8001978:	e0c5      	b.n	8001b06 <HAL_I2C_Mem_Write+0x1e2>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b01      	cmp	r3, #1
 800198e:	d007      	beq.n	80019a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0201 	orr.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2221      	movs	r2, #33	@ 0x21
 80019b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2240      	movs	r2, #64	@ 0x40
 80019bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a3a      	ldr	r2, [r7, #32]
 80019ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80019d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4a4d      	ldr	r2, [pc, #308]	@ (8001b14 <HAL_I2C_Mem_Write+0x1f0>)
 80019e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019e2:	88f8      	ldrh	r0, [r7, #6]
 80019e4:	893a      	ldrh	r2, [r7, #8]
 80019e6:	8979      	ldrh	r1, [r7, #10]
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	4603      	mov	r3, r0
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 f890 	bl	8001b18 <I2C_RequestMemoryWrite>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d052      	beq.n	8001aa4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e081      	b.n	8001b06 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 fa36 	bl	8001e78 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00d      	beq.n	8001a2e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d107      	bne.n	8001a2a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e06b      	b.n	8001b06 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a32:	781a      	ldrb	r2, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	3b01      	subs	r3, #1
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d11b      	bne.n	8001aa4 <HAL_I2C_Mem_Write+0x180>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d017      	beq.n	8001aa4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a78:	781a      	ldrb	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1aa      	bne.n	8001a02 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f000 fa29 	bl	8001f08 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00d      	beq.n	8001ad8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d107      	bne.n	8001ad4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ad2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e016      	b.n	8001b06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ae6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2220      	movs	r2, #32
 8001aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	e000      	b.n	8001b06 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001b04:	2302      	movs	r3, #2
  }
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	00100002 	.word	0x00100002
 8001b14:	ffff0000 	.word	0xffff0000

08001b18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af02      	add	r7, sp, #8
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	4608      	mov	r0, r1
 8001b22:	4611      	mov	r1, r2
 8001b24:	461a      	mov	r2, r3
 8001b26:	4603      	mov	r3, r0
 8001b28:	817b      	strh	r3, [r7, #10]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	813b      	strh	r3, [r7, #8]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 f878 	bl	8001c44 <I2C_WaitOnFlagUntilTimeout>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00d      	beq.n	8001b76 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b68:	d103      	bne.n	8001b72 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b70:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e05f      	b.n	8001c36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b76:	897b      	ldrh	r3, [r7, #10]
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001b84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b88:	6a3a      	ldr	r2, [r7, #32]
 8001b8a:	492d      	ldr	r1, [pc, #180]	@ (8001c40 <I2C_RequestMemoryWrite+0x128>)
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 f8d3 	bl	8001d38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e04c      	b.n	8001c36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bb4:	6a39      	ldr	r1, [r7, #32]
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f000 f95e 	bl	8001e78 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00d      	beq.n	8001bde <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d107      	bne.n	8001bda <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bd8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e02b      	b.n	8001c36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d105      	bne.n	8001bf0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001be4:	893b      	ldrh	r3, [r7, #8]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	611a      	str	r2, [r3, #16]
 8001bee:	e021      	b.n	8001c34 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001bf0:	893b      	ldrh	r3, [r7, #8]
 8001bf2:	0a1b      	lsrs	r3, r3, #8
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c00:	6a39      	ldr	r1, [r7, #32]
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f938 	bl	8001e78 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00d      	beq.n	8001c2a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d107      	bne.n	8001c26 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e005      	b.n	8001c36 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c2a:	893b      	ldrh	r3, [r7, #8]
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	00010002 	.word	0x00010002

08001c44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	4613      	mov	r3, r2
 8001c52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c54:	e048      	b.n	8001ce8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5c:	d044      	beq.n	8001ce8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c5e:	f7ff fa29 	bl	80010b4 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d302      	bcc.n	8001c74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d139      	bne.n	8001ce8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	0c1b      	lsrs	r3, r3, #16
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d10d      	bne.n	8001c9a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	43da      	mvns	r2, r3
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	bf0c      	ite	eq
 8001c90:	2301      	moveq	r3, #1
 8001c92:	2300      	movne	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	461a      	mov	r2, r3
 8001c98:	e00c      	b.n	8001cb4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	43da      	mvns	r2, r3
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	bf0c      	ite	eq
 8001cac:	2301      	moveq	r3, #1
 8001cae:	2300      	movne	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d116      	bne.n	8001ce8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd4:	f043 0220 	orr.w	r2, r3, #32
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e023      	b.n	8001d30 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	0c1b      	lsrs	r3, r3, #16
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d10d      	bne.n	8001d0e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	43da      	mvns	r2, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	bf0c      	ite	eq
 8001d04:	2301      	moveq	r3, #1
 8001d06:	2300      	movne	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	e00c      	b.n	8001d28 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	43da      	mvns	r2, r3
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	bf0c      	ite	eq
 8001d20:	2301      	moveq	r3, #1
 8001d22:	2300      	movne	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d093      	beq.n	8001c56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d46:	e071      	b.n	8001e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d56:	d123      	bne.n	8001da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d66:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8c:	f043 0204 	orr.w	r2, r3, #4
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e067      	b.n	8001e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da6:	d041      	beq.n	8001e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001da8:	f7ff f984 	bl	80010b4 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d302      	bcc.n	8001dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d136      	bne.n	8001e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	0c1b      	lsrs	r3, r3, #16
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d10c      	bne.n	8001de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	bf14      	ite	ne
 8001dda:	2301      	movne	r3, #1
 8001ddc:	2300      	moveq	r3, #0
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	e00b      	b.n	8001dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	43da      	mvns	r2, r3
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	4013      	ands	r3, r2
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bf14      	ite	ne
 8001df4:	2301      	movne	r3, #1
 8001df6:	2300      	moveq	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d016      	beq.n	8001e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2220      	movs	r2, #32
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e18:	f043 0220 	orr.w	r2, r3, #32
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e021      	b.n	8001e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	0c1b      	lsrs	r3, r3, #16
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d10c      	bne.n	8001e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	43da      	mvns	r2, r3
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	4013      	ands	r3, r2
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bf14      	ite	ne
 8001e48:	2301      	movne	r3, #1
 8001e4a:	2300      	moveq	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	e00b      	b.n	8001e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	43da      	mvns	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	bf14      	ite	ne
 8001e62:	2301      	movne	r3, #1
 8001e64:	2300      	moveq	r3, #0
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f47f af6d 	bne.w	8001d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e84:	e034      	b.n	8001ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 f886 	bl	8001f98 <I2C_IsAcknowledgeFailed>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e034      	b.n	8001f00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9c:	d028      	beq.n	8001ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e9e:	f7ff f909 	bl	80010b4 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	68ba      	ldr	r2, [r7, #8]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d302      	bcc.n	8001eb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d11d      	bne.n	8001ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ebe:	2b80      	cmp	r3, #128	@ 0x80
 8001ec0:	d016      	beq.n	8001ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001edc:	f043 0220 	orr.w	r2, r3, #32
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e007      	b.n	8001f00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001efa:	2b80      	cmp	r3, #128	@ 0x80
 8001efc:	d1c3      	bne.n	8001e86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f14:	e034      	b.n	8001f80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 f83e 	bl	8001f98 <I2C_IsAcknowledgeFailed>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e034      	b.n	8001f90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2c:	d028      	beq.n	8001f80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f2e:	f7ff f8c1 	bl	80010b4 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d302      	bcc.n	8001f44 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d11d      	bne.n	8001f80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d016      	beq.n	8001f80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6c:	f043 0220 	orr.w	r2, r3, #32
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e007      	b.n	8001f90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d1c3      	bne.n	8001f16 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fae:	d11b      	bne.n	8001fe8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001fb8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd4:	f043 0204 	orr.w	r2, r3, #4
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e000      	b.n	8001fea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr

08001ff4 <PWR_OverloadWfe>:
static void PWR_OverloadWfe(void);

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  __asm volatile( "wfe" );
 8001ff8:	bf20      	wfe
  __asm volatile( "nop" );
 8001ffa:	bf00      	nop
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr

08002004 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002008:	4b03      	ldr	r3, [pc, #12]	@ (8002018 <HAL_PWR_EnableBkUpAccess+0x14>)
 800200a:	2201      	movs	r2, #1
 800200c:	601a      	str	r2, [r3, #0]
}
 800200e:	bf00      	nop
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	420e0020 	.word	0x420e0020

0800201c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 8002028:	4b13      	ldr	r3, [pc, #76]	@ (8002078 <HAL_PWR_EnterSTOPMode+0x5c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a12      	ldr	r2, [pc, #72]	@ (8002078 <HAL_PWR_EnterSTOPMode+0x5c>)
 800202e:	f023 0302 	bic.w	r3, r3, #2
 8002032:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 8002034:	4b10      	ldr	r3, [pc, #64]	@ (8002078 <HAL_PWR_EnterSTOPMode+0x5c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f023 0201 	bic.w	r2, r3, #1
 800203c:	490e      	ldr	r1, [pc, #56]	@ (8002078 <HAL_PWR_EnterSTOPMode+0x5c>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4313      	orrs	r3, r2
 8002042:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002044:	4b0d      	ldr	r3, [pc, #52]	@ (800207c <HAL_PWR_EnterSTOPMode+0x60>)
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	4a0c      	ldr	r2, [pc, #48]	@ (800207c <HAL_PWR_EnterSTOPMode+0x60>)
 800204a:	f043 0304 	orr.w	r3, r3, #4
 800204e:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d101      	bne.n	800205a <HAL_PWR_EnterSTOPMode+0x3e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002056:	bf30      	wfi
 8002058:	e004      	b.n	8002064 <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800205a:	bf40      	sev
    PWR_OverloadWfe(); /* WFE redefine locally */
 800205c:	f7ff ffca 	bl	8001ff4 <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 8002060:	f7ff ffc8 	bl	8001ff4 <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002064:	4b05      	ldr	r3, [pc, #20]	@ (800207c <HAL_PWR_EnterSTOPMode+0x60>)
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	4a04      	ldr	r2, [pc, #16]	@ (800207c <HAL_PWR_EnterSTOPMode+0x60>)
 800206a:	f023 0304 	bic.w	r3, r3, #4
 800206e:	6113      	str	r3, [r2, #16]
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40007000 	.word	0x40007000
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e272      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 8087 	beq.w	80021ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020a0:	4b92      	ldr	r3, [pc, #584]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 030c 	and.w	r3, r3, #12
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d00c      	beq.n	80020c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020ac:	4b8f      	ldr	r3, [pc, #572]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 030c 	and.w	r3, r3, #12
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d112      	bne.n	80020de <HAL_RCC_OscConfig+0x5e>
 80020b8:	4b8c      	ldr	r3, [pc, #560]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020c4:	d10b      	bne.n	80020de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c6:	4b89      	ldr	r3, [pc, #548]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d06c      	beq.n	80021ac <HAL_RCC_OscConfig+0x12c>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d168      	bne.n	80021ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e24c      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020e6:	d106      	bne.n	80020f6 <HAL_RCC_OscConfig+0x76>
 80020e8:	4b80      	ldr	r3, [pc, #512]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a7f      	ldr	r2, [pc, #508]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 80020ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	e02e      	b.n	8002154 <HAL_RCC_OscConfig+0xd4>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10c      	bne.n	8002118 <HAL_RCC_OscConfig+0x98>
 80020fe:	4b7b      	ldr	r3, [pc, #492]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a7a      	ldr	r2, [pc, #488]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002104:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	4b78      	ldr	r3, [pc, #480]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a77      	ldr	r2, [pc, #476]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002110:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	e01d      	b.n	8002154 <HAL_RCC_OscConfig+0xd4>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002120:	d10c      	bne.n	800213c <HAL_RCC_OscConfig+0xbc>
 8002122:	4b72      	ldr	r3, [pc, #456]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a71      	ldr	r2, [pc, #452]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002128:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	4b6f      	ldr	r3, [pc, #444]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a6e      	ldr	r2, [pc, #440]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	e00b      	b.n	8002154 <HAL_RCC_OscConfig+0xd4>
 800213c:	4b6b      	ldr	r3, [pc, #428]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a6a      	ldr	r2, [pc, #424]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	4b68      	ldr	r3, [pc, #416]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a67      	ldr	r2, [pc, #412]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 800214e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002152:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d013      	beq.n	8002184 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7fe ffaa 	bl	80010b4 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002164:	f7fe ffa6 	bl	80010b4 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b64      	cmp	r3, #100	@ 0x64
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e200      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	4b5d      	ldr	r3, [pc, #372]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f0      	beq.n	8002164 <HAL_RCC_OscConfig+0xe4>
 8002182:	e014      	b.n	80021ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7fe ff96 	bl	80010b4 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800218c:	f7fe ff92 	bl	80010b4 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	@ 0x64
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e1ec      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219e:	4b53      	ldr	r3, [pc, #332]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x10c>
 80021aa:	e000      	b.n	80021ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d063      	beq.n	8002282 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ba:	4b4c      	ldr	r3, [pc, #304]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00b      	beq.n	80021de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021c6:	4b49      	ldr	r3, [pc, #292]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d11c      	bne.n	800220c <HAL_RCC_OscConfig+0x18c>
 80021d2:	4b46      	ldr	r3, [pc, #280]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d116      	bne.n	800220c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021de:	4b43      	ldr	r3, [pc, #268]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <HAL_RCC_OscConfig+0x176>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d001      	beq.n	80021f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e1c0      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f6:	4b3d      	ldr	r3, [pc, #244]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4939      	ldr	r1, [pc, #228]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002206:	4313      	orrs	r3, r2
 8002208:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800220a:	e03a      	b.n	8002282 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d020      	beq.n	8002256 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002214:	4b36      	ldr	r3, [pc, #216]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221a:	f7fe ff4b 	bl	80010b4 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002222:	f7fe ff47 	bl	80010b4 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e1a1      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002234:	4b2d      	ldr	r3, [pc, #180]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002240:	4b2a      	ldr	r3, [pc, #168]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4927      	ldr	r1, [pc, #156]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002250:	4313      	orrs	r3, r2
 8002252:	600b      	str	r3, [r1, #0]
 8002254:	e015      	b.n	8002282 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002256:	4b26      	ldr	r3, [pc, #152]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225c:	f7fe ff2a 	bl	80010b4 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002264:	f7fe ff26 	bl	80010b4 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e180      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002276:	4b1d      	ldr	r3, [pc, #116]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d03a      	beq.n	8002304 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d019      	beq.n	80022ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002296:	4b17      	ldr	r3, [pc, #92]	@ (80022f4 <HAL_RCC_OscConfig+0x274>)
 8002298:	2201      	movs	r2, #1
 800229a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229c:	f7fe ff0a 	bl	80010b4 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a4:	f7fe ff06 	bl	80010b4 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e160      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b6:	4b0d      	ldr	r3, [pc, #52]	@ (80022ec <HAL_RCC_OscConfig+0x26c>)
 80022b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022c2:	2001      	movs	r0, #1
 80022c4:	f000 face 	bl	8002864 <RCC_Delay>
 80022c8:	e01c      	b.n	8002304 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ca:	4b0a      	ldr	r3, [pc, #40]	@ (80022f4 <HAL_RCC_OscConfig+0x274>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d0:	f7fe fef0 	bl	80010b4 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d6:	e00f      	b.n	80022f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d8:	f7fe feec 	bl	80010b4 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d908      	bls.n	80022f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e146      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
 80022ea:	bf00      	nop
 80022ec:	40021000 	.word	0x40021000
 80022f0:	42420000 	.word	0x42420000
 80022f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f8:	4b92      	ldr	r3, [pc, #584]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80022fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1e9      	bne.n	80022d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80a6 	beq.w	800245e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002316:	4b8b      	ldr	r3, [pc, #556]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10d      	bne.n	800233e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002322:	4b88      	ldr	r3, [pc, #544]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	4a87      	ldr	r2, [pc, #540]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800232c:	61d3      	str	r3, [r2, #28]
 800232e:	4b85      	ldr	r3, [pc, #532]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800233a:	2301      	movs	r3, #1
 800233c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233e:	4b82      	ldr	r3, [pc, #520]	@ (8002548 <HAL_RCC_OscConfig+0x4c8>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002346:	2b00      	cmp	r3, #0
 8002348:	d118      	bne.n	800237c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800234a:	4b7f      	ldr	r3, [pc, #508]	@ (8002548 <HAL_RCC_OscConfig+0x4c8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a7e      	ldr	r2, [pc, #504]	@ (8002548 <HAL_RCC_OscConfig+0x4c8>)
 8002350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002356:	f7fe fead 	bl	80010b4 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235e:	f7fe fea9 	bl	80010b4 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b64      	cmp	r3, #100	@ 0x64
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e103      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002370:	4b75      	ldr	r3, [pc, #468]	@ (8002548 <HAL_RCC_OscConfig+0x4c8>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d106      	bne.n	8002392 <HAL_RCC_OscConfig+0x312>
 8002384:	4b6f      	ldr	r3, [pc, #444]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	4a6e      	ldr	r2, [pc, #440]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6213      	str	r3, [r2, #32]
 8002390:	e02d      	b.n	80023ee <HAL_RCC_OscConfig+0x36e>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10c      	bne.n	80023b4 <HAL_RCC_OscConfig+0x334>
 800239a:	4b6a      	ldr	r3, [pc, #424]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	4a69      	ldr	r2, [pc, #420]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	f023 0301 	bic.w	r3, r3, #1
 80023a4:	6213      	str	r3, [r2, #32]
 80023a6:	4b67      	ldr	r3, [pc, #412]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	4a66      	ldr	r2, [pc, #408]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	f023 0304 	bic.w	r3, r3, #4
 80023b0:	6213      	str	r3, [r2, #32]
 80023b2:	e01c      	b.n	80023ee <HAL_RCC_OscConfig+0x36e>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	2b05      	cmp	r3, #5
 80023ba:	d10c      	bne.n	80023d6 <HAL_RCC_OscConfig+0x356>
 80023bc:	4b61      	ldr	r3, [pc, #388]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	4a60      	ldr	r2, [pc, #384]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023c2:	f043 0304 	orr.w	r3, r3, #4
 80023c6:	6213      	str	r3, [r2, #32]
 80023c8:	4b5e      	ldr	r3, [pc, #376]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	4a5d      	ldr	r2, [pc, #372]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	6213      	str	r3, [r2, #32]
 80023d4:	e00b      	b.n	80023ee <HAL_RCC_OscConfig+0x36e>
 80023d6:	4b5b      	ldr	r3, [pc, #364]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	4a5a      	ldr	r2, [pc, #360]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	f023 0301 	bic.w	r3, r3, #1
 80023e0:	6213      	str	r3, [r2, #32]
 80023e2:	4b58      	ldr	r3, [pc, #352]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4a57      	ldr	r2, [pc, #348]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	f023 0304 	bic.w	r3, r3, #4
 80023ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d015      	beq.n	8002422 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f6:	f7fe fe5d 	bl	80010b4 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fc:	e00a      	b.n	8002414 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fe:	f7fe fe59 	bl	80010b4 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800240c:	4293      	cmp	r3, r2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e0b1      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002414:	4b4b      	ldr	r3, [pc, #300]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0ee      	beq.n	80023fe <HAL_RCC_OscConfig+0x37e>
 8002420:	e014      	b.n	800244c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002422:	f7fe fe47 	bl	80010b4 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002428:	e00a      	b.n	8002440 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7fe fe43 	bl	80010b4 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002438:	4293      	cmp	r3, r2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e09b      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002440:	4b40      	ldr	r3, [pc, #256]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1ee      	bne.n	800242a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800244c:	7dfb      	ldrb	r3, [r7, #23]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d105      	bne.n	800245e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002452:	4b3c      	ldr	r3, [pc, #240]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	4a3b      	ldr	r2, [pc, #236]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800245c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 8087 	beq.w	8002576 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002468:	4b36      	ldr	r3, [pc, #216]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 030c 	and.w	r3, r3, #12
 8002470:	2b08      	cmp	r3, #8
 8002472:	d061      	beq.n	8002538 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d146      	bne.n	800250a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247c:	4b33      	ldr	r3, [pc, #204]	@ (800254c <HAL_RCC_OscConfig+0x4cc>)
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002482:	f7fe fe17 	bl	80010b4 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248a:	f7fe fe13 	bl	80010b4 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e06d      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249c:	4b29      	ldr	r3, [pc, #164]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f0      	bne.n	800248a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024b0:	d108      	bne.n	80024c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024b2:	4b24      	ldr	r3, [pc, #144]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	4921      	ldr	r1, [pc, #132]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a19      	ldr	r1, [r3, #32]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d4:	430b      	orrs	r3, r1
 80024d6:	491b      	ldr	r1, [pc, #108]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024dc:	4b1b      	ldr	r3, [pc, #108]	@ (800254c <HAL_RCC_OscConfig+0x4cc>)
 80024de:	2201      	movs	r2, #1
 80024e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e2:	f7fe fde7 	bl	80010b4 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ea:	f7fe fde3 	bl	80010b4 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e03d      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024fc:	4b11      	ldr	r3, [pc, #68]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0x46a>
 8002508:	e035      	b.n	8002576 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800250a:	4b10      	ldr	r3, [pc, #64]	@ (800254c <HAL_RCC_OscConfig+0x4cc>)
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7fe fdd0 	bl	80010b4 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002518:	f7fe fdcc 	bl	80010b4 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e026      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800252a:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x498>
 8002536:	e01e      	b.n	8002576 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d107      	bne.n	8002550 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e019      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
 8002544:	40021000 	.word	0x40021000
 8002548:	40007000 	.word	0x40007000
 800254c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002550:	4b0b      	ldr	r3, [pc, #44]	@ (8002580 <HAL_RCC_OscConfig+0x500>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	429a      	cmp	r2, r3
 8002562:	d106      	bne.n	8002572 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256e:	429a      	cmp	r2, r3
 8002570:	d001      	beq.n	8002576 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000

08002584 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0d0      	b.n	800273a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002598:	4b6a      	ldr	r3, [pc, #424]	@ (8002744 <HAL_RCC_ClockConfig+0x1c0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d910      	bls.n	80025c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a6:	4b67      	ldr	r3, [pc, #412]	@ (8002744 <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 0207 	bic.w	r2, r3, #7
 80025ae:	4965      	ldr	r1, [pc, #404]	@ (8002744 <HAL_RCC_ClockConfig+0x1c0>)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	4b63      	ldr	r3, [pc, #396]	@ (8002744 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0b8      	b.n	800273a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d020      	beq.n	8002616 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e0:	4b59      	ldr	r3, [pc, #356]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4a58      	ldr	r2, [pc, #352]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025f8:	4b53      	ldr	r3, [pc, #332]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	4a52      	ldr	r2, [pc, #328]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002602:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002604:	4b50      	ldr	r3, [pc, #320]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	494d      	ldr	r1, [pc, #308]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	4313      	orrs	r3, r2
 8002614:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d040      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262a:	4b47      	ldr	r3, [pc, #284]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d115      	bne.n	8002662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e07f      	b.n	800273a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d107      	bne.n	8002652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002642:	4b41      	ldr	r3, [pc, #260]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d109      	bne.n	8002662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e073      	b.n	800273a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002652:	4b3d      	ldr	r3, [pc, #244]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e06b      	b.n	800273a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002662:	4b39      	ldr	r3, [pc, #228]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f023 0203 	bic.w	r2, r3, #3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	4936      	ldr	r1, [pc, #216]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 8002670:	4313      	orrs	r3, r2
 8002672:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002674:	f7fe fd1e 	bl	80010b4 <HAL_GetTick>
 8002678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267a:	e00a      	b.n	8002692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800267c:	f7fe fd1a 	bl	80010b4 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800268a:	4293      	cmp	r3, r2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e053      	b.n	800273a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002692:	4b2d      	ldr	r3, [pc, #180]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 020c 	and.w	r2, r3, #12
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d1eb      	bne.n	800267c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026a4:	4b27      	ldr	r3, [pc, #156]	@ (8002744 <HAL_RCC_ClockConfig+0x1c0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d210      	bcs.n	80026d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b2:	4b24      	ldr	r3, [pc, #144]	@ (8002744 <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 0207 	bic.w	r2, r3, #7
 80026ba:	4922      	ldr	r1, [pc, #136]	@ (8002744 <HAL_RCC_ClockConfig+0x1c0>)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c2:	4b20      	ldr	r3, [pc, #128]	@ (8002744 <HAL_RCC_ClockConfig+0x1c0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e032      	b.n	800273a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e0:	4b19      	ldr	r3, [pc, #100]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4916      	ldr	r1, [pc, #88]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d009      	beq.n	8002712 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026fe:	4b12      	ldr	r3, [pc, #72]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	490e      	ldr	r1, [pc, #56]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	4313      	orrs	r3, r2
 8002710:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002712:	f000 f821 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8002716:	4602      	mov	r2, r0
 8002718:	4b0b      	ldr	r3, [pc, #44]	@ (8002748 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	490a      	ldr	r1, [pc, #40]	@ (800274c <HAL_RCC_ClockConfig+0x1c8>)
 8002724:	5ccb      	ldrb	r3, [r1, r3]
 8002726:	fa22 f303 	lsr.w	r3, r2, r3
 800272a:	4a09      	ldr	r2, [pc, #36]	@ (8002750 <HAL_RCC_ClockConfig+0x1cc>)
 800272c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800272e:	4b09      	ldr	r3, [pc, #36]	@ (8002754 <HAL_RCC_ClockConfig+0x1d0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7fe fc7c 	bl	8001030 <HAL_InitTick>

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40022000 	.word	0x40022000
 8002748:	40021000 	.word	0x40021000
 800274c:	080057a4 	.word	0x080057a4
 8002750:	20000000 	.word	0x20000000
 8002754:	20000004 	.word	0x20000004

08002758 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	2300      	movs	r3, #0
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	2300      	movs	r3, #0
 800276c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002772:	4b1e      	ldr	r3, [pc, #120]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x94>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 030c 	and.w	r3, r3, #12
 800277e:	2b04      	cmp	r3, #4
 8002780:	d002      	beq.n	8002788 <HAL_RCC_GetSysClockFreq+0x30>
 8002782:	2b08      	cmp	r3, #8
 8002784:	d003      	beq.n	800278e <HAL_RCC_GetSysClockFreq+0x36>
 8002786:	e027      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002788:	4b19      	ldr	r3, [pc, #100]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800278a:	613b      	str	r3, [r7, #16]
      break;
 800278c:	e027      	b.n	80027de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	0c9b      	lsrs	r3, r3, #18
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	4a17      	ldr	r2, [pc, #92]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002798:	5cd3      	ldrb	r3, [r2, r3]
 800279a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d010      	beq.n	80027c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027a6:	4b11      	ldr	r3, [pc, #68]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x94>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	0c5b      	lsrs	r3, r3, #17
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	4a11      	ldr	r2, [pc, #68]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027b2:	5cd3      	ldrb	r3, [r2, r3]
 80027b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a0d      	ldr	r2, [pc, #52]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ba:	fb03 f202 	mul.w	r2, r3, r2
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	e004      	b.n	80027d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a0c      	ldr	r2, [pc, #48]	@ (80027fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80027cc:	fb02 f303 	mul.w	r3, r2, r3
 80027d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	613b      	str	r3, [r7, #16]
      break;
 80027d6:	e002      	b.n	80027de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027d8:	4b05      	ldr	r3, [pc, #20]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80027da:	613b      	str	r3, [r7, #16]
      break;
 80027dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027de:	693b      	ldr	r3, [r7, #16]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	371c      	adds	r7, #28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000
 80027f0:	007a1200 	.word	0x007a1200
 80027f4:	080057bc 	.word	0x080057bc
 80027f8:	080057cc 	.word	0x080057cc
 80027fc:	003d0900 	.word	0x003d0900

08002800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002804:	4b02      	ldr	r3, [pc, #8]	@ (8002810 <HAL_RCC_GetHCLKFreq+0x10>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	20000000 	.word	0x20000000

08002814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002818:	f7ff fff2 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 800281c:	4602      	mov	r2, r0
 800281e:	4b05      	ldr	r3, [pc, #20]	@ (8002834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	0a1b      	lsrs	r3, r3, #8
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	4903      	ldr	r1, [pc, #12]	@ (8002838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800282a:	5ccb      	ldrb	r3, [r1, r3]
 800282c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002830:	4618      	mov	r0, r3
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021000 	.word	0x40021000
 8002838:	080057b4 	.word	0x080057b4

0800283c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002840:	f7ff ffde 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 8002844:	4602      	mov	r2, r0
 8002846:	4b05      	ldr	r3, [pc, #20]	@ (800285c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	0adb      	lsrs	r3, r3, #11
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	4903      	ldr	r1, [pc, #12]	@ (8002860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002852:	5ccb      	ldrb	r3, [r1, r3]
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000
 8002860:	080057b4 	.word	0x080057b4

08002864 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800286c:	4b0a      	ldr	r3, [pc, #40]	@ (8002898 <RCC_Delay+0x34>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0a      	ldr	r2, [pc, #40]	@ (800289c <RCC_Delay+0x38>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	0a5b      	lsrs	r3, r3, #9
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	fb02 f303 	mul.w	r3, r2, r3
 800287e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002880:	bf00      	nop
  }
  while (Delay --);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	1e5a      	subs	r2, r3, #1
 8002886:	60fa      	str	r2, [r7, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f9      	bne.n	8002880 <RCC_Delay+0x1c>
}
 800288c:	bf00      	nop
 800288e:	bf00      	nop
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr
 8002898:	20000000 	.word	0x20000000
 800289c:	10624dd3 	.word	0x10624dd3

080028a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	2300      	movs	r3, #0
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d07d      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80028bc:	2300      	movs	r3, #0
 80028be:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c0:	4b4f      	ldr	r3, [pc, #316]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10d      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028cc:	4b4c      	ldr	r3, [pc, #304]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028d6:	61d3      	str	r3, [r2, #28]
 80028d8:	4b49      	ldr	r3, [pc, #292]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e4:	2301      	movs	r3, #1
 80028e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e8:	4b46      	ldr	r3, [pc, #280]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d118      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028f4:	4b43      	ldr	r3, [pc, #268]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a42      	ldr	r2, [pc, #264]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002900:	f7fe fbd8 	bl	80010b4 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002906:	e008      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002908:	f7fe fbd4 	bl	80010b4 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	@ 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e06d      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291a:	4b3a      	ldr	r3, [pc, #232]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002926:	4b36      	ldr	r3, [pc, #216]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800292e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d02e      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	429a      	cmp	r2, r3
 8002942:	d027      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002944:	4b2e      	ldr	r3, [pc, #184]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800294c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800294e:	4b2e      	ldr	r3, [pc, #184]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002950:	2201      	movs	r2, #1
 8002952:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002954:	4b2c      	ldr	r3, [pc, #176]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800295a:	4a29      	ldr	r2, [pc, #164]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d014      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296a:	f7fe fba3 	bl	80010b4 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002970:	e00a      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002972:	f7fe fb9f 	bl	80010b4 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002980:	4293      	cmp	r3, r2
 8002982:	d901      	bls.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e036      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002988:	4b1d      	ldr	r3, [pc, #116]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0ee      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002994:	4b1a      	ldr	r3, [pc, #104]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4917      	ldr	r1, [pc, #92]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029a6:	7dfb      	ldrb	r3, [r7, #23]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d105      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ac:	4b14      	ldr	r3, [pc, #80]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	4a13      	ldr	r2, [pc, #76]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	490b      	ldr	r1, [pc, #44]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d008      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029e2:	4b07      	ldr	r3, [pc, #28]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	4904      	ldr	r1, [pc, #16]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40007000 	.word	0x40007000
 8002a08:	42420440 	.word	0x42420440

08002a0c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61fb      	str	r3, [r7, #28]
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	2300      	movs	r3, #0
 8002a26:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b10      	cmp	r3, #16
 8002a2c:	d00a      	beq.n	8002a44 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b10      	cmp	r3, #16
 8002a32:	f200 808a 	bhi.w	8002b4a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d045      	beq.n	8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d075      	beq.n	8002b2e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002a42:	e082      	b.n	8002b4a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002a44:	4b46      	ldr	r3, [pc, #280]	@ (8002b60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002a4a:	4b45      	ldr	r3, [pc, #276]	@ (8002b60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d07b      	beq.n	8002b4e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	0c9b      	lsrs	r3, r3, #18
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	4a41      	ldr	r2, [pc, #260]	@ (8002b64 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002a60:	5cd3      	ldrb	r3, [r2, r3]
 8002a62:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d015      	beq.n	8002a9a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a6e:	4b3c      	ldr	r3, [pc, #240]	@ (8002b60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	0c5b      	lsrs	r3, r3, #17
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	4a3b      	ldr	r2, [pc, #236]	@ (8002b68 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002a7a:	5cd3      	ldrb	r3, [r2, r3]
 8002a7c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00d      	beq.n	8002aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002a88:	4a38      	ldr	r2, [pc, #224]	@ (8002b6c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	fb02 f303 	mul.w	r3, r2, r3
 8002a96:	61fb      	str	r3, [r7, #28]
 8002a98:	e004      	b.n	8002aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4a34      	ldr	r2, [pc, #208]	@ (8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002a9e:	fb02 f303 	mul.w	r3, r2, r3
 8002aa2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002aa4:	4b2e      	ldr	r3, [pc, #184]	@ (8002b60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ab0:	d102      	bne.n	8002ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	61bb      	str	r3, [r7, #24]
      break;
 8002ab6:	e04a      	b.n	8002b4e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	4a2d      	ldr	r2, [pc, #180]	@ (8002b74 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002abe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac2:	085b      	lsrs	r3, r3, #1
 8002ac4:	61bb      	str	r3, [r7, #24]
      break;
 8002ac6:	e042      	b.n	8002b4e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002ac8:	4b25      	ldr	r3, [pc, #148]	@ (8002b60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ad4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ad8:	d108      	bne.n	8002aec <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002ae4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ae8:	61bb      	str	r3, [r7, #24]
 8002aea:	e01f      	b.n	8002b2c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002af2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002af6:	d109      	bne.n	8002b0c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002af8:	4b19      	ldr	r3, [pc, #100]	@ (8002b60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002b04:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002b08:	61bb      	str	r3, [r7, #24]
 8002b0a:	e00f      	b.n	8002b2c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b16:	d11c      	bne.n	8002b52 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002b18:	4b11      	ldr	r3, [pc, #68]	@ (8002b60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d016      	beq.n	8002b52 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002b24:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002b28:	61bb      	str	r3, [r7, #24]
      break;
 8002b2a:	e012      	b.n	8002b52 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002b2c:	e011      	b.n	8002b52 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002b2e:	f7ff fe85 	bl	800283c <HAL_RCC_GetPCLK2Freq>
 8002b32:	4602      	mov	r2, r0
 8002b34:	4b0a      	ldr	r3, [pc, #40]	@ (8002b60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	0b9b      	lsrs	r3, r3, #14
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	3301      	adds	r3, #1
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b46:	61bb      	str	r3, [r7, #24]
      break;
 8002b48:	e004      	b.n	8002b54 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002b4a:	bf00      	nop
 8002b4c:	e002      	b.n	8002b54 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002b4e:	bf00      	nop
 8002b50:	e000      	b.n	8002b54 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002b52:	bf00      	nop
    }
  }
  return (frequency);
 8002b54:	69bb      	ldr	r3, [r7, #24]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40021000 	.word	0x40021000
 8002b64:	080057d0 	.word	0x080057d0
 8002b68:	080057e0 	.word	0x080057e0
 8002b6c:	007a1200 	.word	0x007a1200
 8002b70:	003d0900 	.word	0x003d0900
 8002b74:	aaaaaaab 	.word	0xaaaaaaab

08002b78 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e07a      	b.n	8002c84 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	7c5b      	ldrb	r3, [r3, #17]
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d105      	bne.n	8002ba4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7fe f8d8 	bl	8000d54 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 fa93 	bl	80030d6 <HAL_RTC_WaitForSynchro>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d004      	beq.n	8002bc0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2204      	movs	r2, #4
 8002bba:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e061      	b.n	8002c84 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 fb4c 	bl	800325e <RTC_EnterInitMode>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d004      	beq.n	8002bd6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2204      	movs	r2, #4
 8002bd0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e056      	b.n	8002c84 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0207 	bic.w	r2, r2, #7
 8002be4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d005      	beq.n	8002bfa <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002bee:	4b27      	ldr	r3, [pc, #156]	@ (8002c8c <HAL_RTC_Init+0x114>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf2:	4a26      	ldr	r2, [pc, #152]	@ (8002c8c <HAL_RTC_Init+0x114>)
 8002bf4:	f023 0301 	bic.w	r3, r3, #1
 8002bf8:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002bfa:	4b24      	ldr	r3, [pc, #144]	@ (8002c8c <HAL_RTC_Init+0x114>)
 8002bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfe:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	4921      	ldr	r1, [pc, #132]	@ (8002c8c <HAL_RTC_Init+0x114>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c14:	d003      	beq.n	8002c1e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	e00e      	b.n	8002c3c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002c1e:	2001      	movs	r0, #1
 8002c20:	f7ff fef4 	bl	8002a0c <HAL_RCCEx_GetPeriphCLKFreq>
 8002c24:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d104      	bne.n	8002c36 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2204      	movs	r2, #4
 8002c30:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e026      	b.n	8002c84 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	0c1a      	lsrs	r2, r3, #16
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f002 020f 	and.w	r2, r2, #15
 8002c48:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	b292      	uxth	r2, r2
 8002c52:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fb2a 	bl	80032ae <RTC_ExitInitMode>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d004      	beq.n	8002c6a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2204      	movs	r2, #4
 8002c64:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e00c      	b.n	8002c84 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002c82:	2300      	movs	r3, #0
  }
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40006c00 	.word	0x40006c00

08002c90 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61bb      	str	r3, [r7, #24]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61fb      	str	r3, [r7, #28]
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	2300      	movs	r3, #0
 8002caa:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d002      	beq.n	8002cb8 <HAL_RTC_GetTime+0x28>
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e0b5      	b.n	8002e28 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e0ac      	b.n	8002e28 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 fa2e 	bl	8003130 <RTC_ReadTimeCounter>
 8002cd4:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	4a55      	ldr	r2, [pc, #340]	@ (8002e30 <HAL_RTC_GetTime+0x1a0>)
 8002cda:	fba2 2303 	umull	r2, r3, r2, r3
 8002cde:	0adb      	lsrs	r3, r3, #11
 8002ce0:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4b52      	ldr	r3, [pc, #328]	@ (8002e30 <HAL_RTC_GetTime+0x1a0>)
 8002ce6:	fba3 1302 	umull	r1, r3, r3, r2
 8002cea:	0adb      	lsrs	r3, r3, #11
 8002cec:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	4a4f      	ldr	r2, [pc, #316]	@ (8002e34 <HAL_RTC_GetTime+0x1a4>)
 8002cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfc:	095b      	lsrs	r3, r3, #5
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	4a4a      	ldr	r2, [pc, #296]	@ (8002e30 <HAL_RTC_GetTime+0x1a0>)
 8002d08:	fba2 1203 	umull	r1, r2, r2, r3
 8002d0c:	0ad2      	lsrs	r2, r2, #11
 8002d0e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8002d12:	fb01 f202 	mul.w	r2, r1, r2
 8002d16:	1a9a      	subs	r2, r3, r2
 8002d18:	4b46      	ldr	r3, [pc, #280]	@ (8002e34 <HAL_RTC_GetTime+0x1a4>)
 8002d1a:	fba3 1302 	umull	r1, r3, r3, r2
 8002d1e:	0959      	lsrs	r1, r3, #5
 8002d20:	460b      	mov	r3, r1
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	1a5b      	subs	r3, r3, r1
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	1ad1      	subs	r1, r2, r3
 8002d2a:	b2ca      	uxtb	r2, r1
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	2b17      	cmp	r3, #23
 8002d34:	d955      	bls.n	8002de2 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4a3f      	ldr	r2, [pc, #252]	@ (8002e38 <HAL_RTC_GetTime+0x1a8>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	091b      	lsrs	r3, r3, #4
 8002d40:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8002d42:	6939      	ldr	r1, [r7, #16]
 8002d44:	4b3c      	ldr	r3, [pc, #240]	@ (8002e38 <HAL_RTC_GetTime+0x1a8>)
 8002d46:	fba3 2301 	umull	r2, r3, r3, r1
 8002d4a:	091a      	lsrs	r2, r3, #4
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	1aca      	subs	r2, r1, r3
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 fa3e 	bl	80031de <RTC_ReadAlarmCounter>
 8002d62:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d008      	beq.n	8002d7e <HAL_RTC_GetTime+0xee>
 8002d6c:	69fa      	ldr	r2, [r7, #28]
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d904      	bls.n	8002d7e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	61fb      	str	r3, [r7, #28]
 8002d7c:	e002      	b.n	8002d84 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d82:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	4a2d      	ldr	r2, [pc, #180]	@ (8002e3c <HAL_RTC_GetTime+0x1ac>)
 8002d88:	fb02 f303 	mul.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002d92:	69b9      	ldr	r1, [r7, #24]
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f9fb 	bl	8003190 <RTC_WriteTimeCounter>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e041      	b.n	8002e28 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002daa:	d00c      	beq.n	8002dc6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8002dac:	69fa      	ldr	r2, [r7, #28]
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	4413      	add	r3, r2
 8002db2:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002db4:	69f9      	ldr	r1, [r7, #28]
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 fa2a 	bl	8003210 <RTC_WriteAlarmCounter>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e030      	b.n	8002e28 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002dc6:	69f9      	ldr	r1, [r7, #28]
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 fa21 	bl	8003210 <RTC_WriteAlarmCounter>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e027      	b.n	8002e28 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8002dd8:	6979      	ldr	r1, [r7, #20]
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 fac9 	bl	8003372 <RTC_DateUpdate>
 8002de0:	e003      	b.n	8002dea <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01a      	beq.n	8002e26 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 fa82 	bl	80032fe <RTC_ByteToBcd2>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	785b      	ldrb	r3, [r3, #1]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fa79 	bl	80032fe <RTC_ByteToBcd2>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	789b      	ldrb	r3, [r3, #2]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 fa70 	bl	80032fe <RTC_ByteToBcd2>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	461a      	mov	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3720      	adds	r7, #32
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	91a2b3c5 	.word	0x91a2b3c5
 8002e34:	88888889 	.word	0x88888889
 8002e38:	aaaaaaab 	.word	0xaaaaaaab
 8002e3c:	00015180 	.word	0x00015180

08002e40 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002e40:	b590      	push	{r4, r7, lr}
 8002e42:	b089      	sub	sp, #36	@ 0x24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8002e50:	f107 0314 	add.w	r3, r7, #20
 8002e54:	2100      	movs	r1, #0
 8002e56:	460a      	mov	r2, r1
 8002e58:	801a      	strh	r2, [r3, #0]
 8002e5a:	460a      	mov	r2, r1
 8002e5c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <HAL_RTC_SetAlarm_IT+0x2a>
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e099      	b.n	8002fa2 <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	7c1b      	ldrb	r3, [r3, #16]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_RTC_SetAlarm_IT+0x3a>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e093      	b.n	8002fa2 <HAL_RTC_SetAlarm_IT+0x162>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2202      	movs	r2, #2
 8002e84:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002e86:	f107 0314 	add.w	r3, r7, #20
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f7ff fefe 	bl	8002c90 <HAL_RTC_GetTime>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e081      	b.n	8002fa2 <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002e9e:	7d3b      	ldrb	r3, [r7, #20]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002ea6:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8002eaa:	7d7b      	ldrb	r3, [r7, #21]
 8002eac:	4619      	mov	r1, r3
 8002eae:	460b      	mov	r3, r1
 8002eb0:	011b      	lsls	r3, r3, #4
 8002eb2:	1a5b      	subs	r3, r3, r1
 8002eb4:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002eb6:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8002eb8:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002eba:	4413      	add	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d113      	bne.n	8002eec <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002ece:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	785b      	ldrb	r3, [r3, #1]
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	460b      	mov	r3, r1
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	1a5b      	subs	r3, r3, r1
 8002ede:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002ee0:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002ee6:	4413      	add	r3, r2
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	e01e      	b.n	8002f2a <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 fa21 	bl	8003338 <RTC_Bcd2ToByte>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	461a      	mov	r2, r3
 8002efa:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002efe:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	785b      	ldrb	r3, [r3, #1]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 fa16 	bl	8003338 <RTC_Bcd2ToByte>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	461a      	mov	r2, r3
 8002f10:	4613      	mov	r3, r2
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	1a9b      	subs	r3, r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002f18:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	789b      	ldrb	r3, [r3, #2]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fa0a 	bl	8003338 <RTC_Bcd2ToByte>
 8002f24:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002f26:	4423      	add	r3, r4
 8002f28:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d205      	bcs.n	8002f3e <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8002f38:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002f3c:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002f3e:	69f9      	ldr	r1, [r7, #28]
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 f965 	bl	8003210 <RTC_WriteAlarmCounter>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d007      	beq.n	8002f5c <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2204      	movs	r2, #4
 8002f50:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e022      	b.n	8002fa2 <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0202 	bic.w	r2, r2, #2
 8002f6a:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0202 	orr.w	r2, r2, #2
 8002f7a:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fac <HAL_RTC_SetAlarm_IT+0x16c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a0a      	ldr	r2, [pc, #40]	@ (8002fac <HAL_RTC_SetAlarm_IT+0x16c>)
 8002f82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f86:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002f88:	4b08      	ldr	r3, [pc, #32]	@ (8002fac <HAL_RTC_SetAlarm_IT+0x16c>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	4a07      	ldr	r2, [pc, #28]	@ (8002fac <HAL_RTC_SetAlarm_IT+0x16c>)
 8002f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f92:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
  }
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3724      	adds	r7, #36	@ 0x24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd90      	pop	{r4, r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40010400 	.word	0x40010400

08002fb0 <HAL_RTC_DeactivateAlarm>:
  *          This parameter can be one of the following values:
  *            @arg RTC_ALARM_A:  AlarmA
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Check input parameters */
  if (hrtc == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RTC_DeactivateAlarm+0x14>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e04e      	b.n	8003062 <HAL_RTC_DeactivateAlarm+0xb2>
  }

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	7c1b      	ldrb	r3, [r3, #16]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_RTC_DeactivateAlarm+0x20>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e048      	b.n	8003062 <HAL_RTC_DeactivateAlarm+0xb2>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	745a      	strb	r2, [r3, #17]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0202 	bic.w	r2, r2, #2
 8002fea:	601a      	str	r2, [r3, #0]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f936 	bl	800325e <RTC_EnterInitMode>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d007      	beq.n	8003008 <HAL_RTC_DeactivateAlarm+0x58>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e02c      	b.n	8003062 <HAL_RTC_DeactivateAlarm+0xb2>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0202 	bic.w	r2, r2, #2
 8003016:	605a      	str	r2, [r3, #4]

    /* Set to default values ALRH & ALRL registers */
    WRITE_REG(hrtc->Instance->ALRH, RTC_ALARM_RESETVALUE_REGISTER);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003020:	621a      	str	r2, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, RTC_ALARM_RESETVALUE_REGISTER);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800302a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* RTC Alarm Interrupt Configuration: Disable EXTI configuration */
    __HAL_RTC_ALARM_EXTI_DISABLE_IT();
 800302c:	4b0f      	ldr	r3, [pc, #60]	@ (800306c <HAL_RTC_DeactivateAlarm+0xbc>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a0e      	ldr	r2, [pc, #56]	@ (800306c <HAL_RTC_DeactivateAlarm+0xbc>)
 8003032:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003036:	6013      	str	r3, [r2, #0]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f938 	bl	80032ae <RTC_ExitInitMode>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d007      	beq.n	8003054 <HAL_RTC_DeactivateAlarm+0xa4>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2204      	movs	r2, #4
 8003048:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e006      	b.n	8003062 <HAL_RTC_DeactivateAlarm+0xb2>
    }
  }
  hrtc->State = HAL_RTC_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40010400 	.word	0x40010400

08003070 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d011      	beq.n	80030aa <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f815 	bl	80030c4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0202 	bic.w	r2, r2, #2
 80030a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80030aa:	4b05      	ldr	r3, [pc, #20]	@ (80030c0 <HAL_RTC_AlarmIRQHandler+0x50>)
 80030ac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80030b0:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	745a      	strb	r2, [r3, #17]
}
 80030b8:	bf00      	nop
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40010400 	.word	0x40010400

080030c4 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr

080030d6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e01d      	b.n	8003128 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0208 	bic.w	r2, r2, #8
 80030fa:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80030fc:	f7fd ffda 	bl	80010b4 <HAL_GetTick>
 8003100:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003102:	e009      	b.n	8003118 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003104:	f7fd ffd6 	bl	80010b4 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003112:	d901      	bls.n	8003118 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e007      	b.n	8003128 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0ee      	beq.n	8003104 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003130:	b480      	push	{r7}
 8003132:	b087      	sub	sp, #28
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	827b      	strh	r3, [r7, #18]
 800313c:	2300      	movs	r3, #0
 800313e:	823b      	strh	r3, [r7, #16]
 8003140:	2300      	movs	r3, #0
 8003142:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003160:	8a7a      	ldrh	r2, [r7, #18]
 8003162:	8a3b      	ldrh	r3, [r7, #16]
 8003164:	429a      	cmp	r2, r3
 8003166:	d008      	beq.n	800317a <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003168:	8a3b      	ldrh	r3, [r7, #16]
 800316a:	041a      	lsls	r2, r3, #16
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	b29b      	uxth	r3, r3
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	e004      	b.n	8003184 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800317a:	8a7b      	ldrh	r3, [r7, #18]
 800317c:	041a      	lsls	r2, r3, #16
 800317e:	89fb      	ldrh	r3, [r7, #14]
 8003180:	4313      	orrs	r3, r2
 8003182:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003184:	697b      	ldr	r3, [r7, #20]
}
 8003186:	4618      	mov	r0, r3
 8003188:	371c      	adds	r7, #28
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f85d 	bl	800325e <RTC_EnterInitMode>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	73fb      	strb	r3, [r7, #15]
 80031ae:	e011      	b.n	80031d4 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	0c12      	lsrs	r2, r2, #16
 80031b8:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	b292      	uxth	r2, r2
 80031c2:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f872 	bl	80032ae <RTC_ExitInitMode>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80031de:	b480      	push	{r7}
 80031e0:	b085      	sub	sp, #20
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	81fb      	strh	r3, [r7, #14]
 80031ea:	2300      	movs	r3, #0
 80031ec:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fc:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80031fe:	89fb      	ldrh	r3, [r7, #14]
 8003200:	041a      	lsls	r2, r3, #16
 8003202:	89bb      	ldrh	r3, [r7, #12]
 8003204:	4313      	orrs	r3, r2
}
 8003206:	4618      	mov	r0, r3
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f81d 	bl	800325e <RTC_EnterInitMode>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	73fb      	strb	r3, [r7, #15]
 800322e:	e011      	b.n	8003254 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	0c12      	lsrs	r2, r2, #16
 8003238:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	b292      	uxth	r2, r2
 8003242:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f832 	bl	80032ae <RTC_ExitInitMode>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003254:	7bfb      	ldrb	r3, [r7, #15]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b084      	sub	sp, #16
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800326a:	f7fd ff23 	bl	80010b4 <HAL_GetTick>
 800326e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003270:	e009      	b.n	8003286 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003272:	f7fd ff1f 	bl	80010b4 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003280:	d901      	bls.n	8003286 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e00f      	b.n	80032a6 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 0320 	and.w	r3, r3, #32
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0ee      	beq.n	8003272 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0210 	orr.w	r2, r2, #16
 80032a2:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b084      	sub	sp, #16
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0210 	bic.w	r2, r2, #16
 80032c8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80032ca:	f7fd fef3 	bl	80010b4 <HAL_GetTick>
 80032ce:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80032d0:	e009      	b.n	80032e6 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80032d2:	f7fd feef 	bl	80010b4 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032e0:	d901      	bls.n	80032e6 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e007      	b.n	80032f6 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0ee      	beq.n	80032d2 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80032fe:	b480      	push	{r7}
 8003300:	b085      	sub	sp, #20
 8003302:	af00      	add	r7, sp, #0
 8003304:	4603      	mov	r3, r0
 8003306:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800330c:	e005      	b.n	800331a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	3301      	adds	r3, #1
 8003312:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	3b0a      	subs	r3, #10
 8003318:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	2b09      	cmp	r3, #9
 800331e:	d8f6      	bhi.n	800330e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	b2da      	uxtb	r2, r3
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	4313      	orrs	r3, r2
 800332c:	b2db      	uxtb	r3, r3
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr

08003338 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	091b      	lsrs	r3, r3, #4
 800334a:	b2db      	uxtb	r3, r3
 800334c:	461a      	mov	r2, r3
 800334e:	4613      	mov	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003358:	79fb      	ldrb	r3, [r7, #7]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	b2da      	uxtb	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	4413      	add	r3, r2
 8003366:	b2db      	uxtb	r3, r3
}
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr

08003372 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b086      	sub	sp, #24
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	2300      	movs	r3, #0
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	7bdb      	ldrb	r3, [r3, #15]
 8003390:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	7b5b      	ldrb	r3, [r3, #13]
 8003396:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	7b9b      	ldrb	r3, [r3, #14]
 800339c:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800339e:	2300      	movs	r3, #0
 80033a0:	60bb      	str	r3, [r7, #8]
 80033a2:	e06f      	b.n	8003484 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d011      	beq.n	80033ce <RTC_DateUpdate+0x5c>
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d00e      	beq.n	80033ce <RTC_DateUpdate+0x5c>
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	2b05      	cmp	r3, #5
 80033b4:	d00b      	beq.n	80033ce <RTC_DateUpdate+0x5c>
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	2b07      	cmp	r3, #7
 80033ba:	d008      	beq.n	80033ce <RTC_DateUpdate+0x5c>
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d005      	beq.n	80033ce <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	2b0a      	cmp	r3, #10
 80033c6:	d002      	beq.n	80033ce <RTC_DateUpdate+0x5c>
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	2b0c      	cmp	r3, #12
 80033cc:	d117      	bne.n	80033fe <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2b1e      	cmp	r3, #30
 80033d2:	d803      	bhi.n	80033dc <RTC_DateUpdate+0x6a>
      {
        day++;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	3301      	adds	r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80033da:	e050      	b.n	800347e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	2b0c      	cmp	r3, #12
 80033e0:	d005      	beq.n	80033ee <RTC_DateUpdate+0x7c>
        {
          month++;
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	3301      	adds	r3, #1
 80033e6:	613b      	str	r3, [r7, #16]
          day = 1U;
 80033e8:	2301      	movs	r3, #1
 80033ea:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80033ec:	e047      	b.n	800347e <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80033ee:	2301      	movs	r3, #1
 80033f0:	613b      	str	r3, [r7, #16]
          day = 1U;
 80033f2:	2301      	movs	r3, #1
 80033f4:	60fb      	str	r3, [r7, #12]
          year++;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	3301      	adds	r3, #1
 80033fa:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80033fc:	e03f      	b.n	800347e <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	2b04      	cmp	r3, #4
 8003402:	d008      	beq.n	8003416 <RTC_DateUpdate+0xa4>
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	2b06      	cmp	r3, #6
 8003408:	d005      	beq.n	8003416 <RTC_DateUpdate+0xa4>
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	2b09      	cmp	r3, #9
 800340e:	d002      	beq.n	8003416 <RTC_DateUpdate+0xa4>
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	2b0b      	cmp	r3, #11
 8003414:	d10c      	bne.n	8003430 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2b1d      	cmp	r3, #29
 800341a:	d803      	bhi.n	8003424 <RTC_DateUpdate+0xb2>
      {
        day++;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	3301      	adds	r3, #1
 8003420:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003422:	e02c      	b.n	800347e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	3301      	adds	r3, #1
 8003428:	613b      	str	r3, [r7, #16]
        day = 1U;
 800342a:	2301      	movs	r3, #1
 800342c:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800342e:	e026      	b.n	800347e <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d123      	bne.n	800347e <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b1b      	cmp	r3, #27
 800343a:	d803      	bhi.n	8003444 <RTC_DateUpdate+0xd2>
      {
        day++;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	3301      	adds	r3, #1
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	e01c      	b.n	800347e <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b1c      	cmp	r3, #28
 8003448:	d111      	bne.n	800346e <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	b29b      	uxth	r3, r3
 800344e:	4618      	mov	r0, r3
 8003450:	f000 f838 	bl	80034c4 <RTC_IsLeapYear>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <RTC_DateUpdate+0xf0>
        {
          day++;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	3301      	adds	r3, #1
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	e00d      	b.n	800347e <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	3301      	adds	r3, #1
 8003466:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003468:	2301      	movs	r3, #1
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	e007      	b.n	800347e <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2b1d      	cmp	r3, #29
 8003472:	d104      	bne.n	800347e <RTC_DateUpdate+0x10c>
      {
        month++;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	3301      	adds	r3, #1
 8003478:	613b      	str	r3, [r7, #16]
        day = 1U;
 800347a:	2301      	movs	r3, #1
 800347c:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	3301      	adds	r3, #1
 8003482:	60bb      	str	r3, [r7, #8]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d38b      	bcc.n	80033a4 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	b2da      	uxtb	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	b2da      	uxtb	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	4619      	mov	r1, r3
 80034ae:	6978      	ldr	r0, [r7, #20]
 80034b0:	f000 f83a 	bl	8003528 <RTC_WeekDayNum>
 80034b4:	4603      	mov	r3, r0
 80034b6:	461a      	mov	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	731a      	strb	r2, [r3, #12]
}
 80034bc:	bf00      	nop
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80034ce:	88fb      	ldrh	r3, [r7, #6]
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	e01d      	b.n	800351a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	4a10      	ldr	r2, [pc, #64]	@ (8003524 <RTC_IsLeapYear+0x60>)
 80034e2:	fba2 1203 	umull	r1, r2, r2, r3
 80034e6:	0952      	lsrs	r2, r2, #5
 80034e8:	2164      	movs	r1, #100	@ 0x64
 80034ea:	fb01 f202 	mul.w	r2, r1, r2
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e00f      	b.n	800351a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	4a09      	ldr	r2, [pc, #36]	@ (8003524 <RTC_IsLeapYear+0x60>)
 80034fe:	fba2 1203 	umull	r1, r2, r2, r3
 8003502:	09d2      	lsrs	r2, r2, #7
 8003504:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003508:	fb01 f202 	mul.w	r2, r1, r2
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003514:	2301      	movs	r3, #1
 8003516:	e000      	b.n	800351a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003518:	2300      	movs	r3, #0
  }
}
 800351a:	4618      	mov	r0, r3
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr
 8003524:	51eb851f 	.word	0x51eb851f

08003528 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	70fb      	strb	r3, [r7, #3]
 8003534:	4613      	mov	r3, r2
 8003536:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	2300      	movs	r3, #0
 800353e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003546:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	2b02      	cmp	r3, #2
 800354c:	d82d      	bhi.n	80035aa <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800354e:	78fa      	ldrb	r2, [r7, #3]
 8003550:	4613      	mov	r3, r2
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	4413      	add	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	4a2c      	ldr	r2, [pc, #176]	@ (800360c <RTC_WeekDayNum+0xe4>)
 800355c:	fba2 2303 	umull	r2, r3, r2, r3
 8003560:	085a      	lsrs	r2, r3, #1
 8003562:	78bb      	ldrb	r3, [r7, #2]
 8003564:	441a      	add	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	441a      	add	r2, r3
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	3b01      	subs	r3, #1
 800356e:	089b      	lsrs	r3, r3, #2
 8003570:	441a      	add	r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	3b01      	subs	r3, #1
 8003576:	4926      	ldr	r1, [pc, #152]	@ (8003610 <RTC_WeekDayNum+0xe8>)
 8003578:	fba1 1303 	umull	r1, r3, r1, r3
 800357c:	095b      	lsrs	r3, r3, #5
 800357e:	1ad2      	subs	r2, r2, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	3b01      	subs	r3, #1
 8003584:	4922      	ldr	r1, [pc, #136]	@ (8003610 <RTC_WeekDayNum+0xe8>)
 8003586:	fba1 1303 	umull	r1, r3, r1, r3
 800358a:	09db      	lsrs	r3, r3, #7
 800358c:	4413      	add	r3, r2
 800358e:	1d1a      	adds	r2, r3, #4
 8003590:	4b20      	ldr	r3, [pc, #128]	@ (8003614 <RTC_WeekDayNum+0xec>)
 8003592:	fba3 1302 	umull	r1, r3, r3, r2
 8003596:	1ad1      	subs	r1, r2, r3
 8003598:	0849      	lsrs	r1, r1, #1
 800359a:	440b      	add	r3, r1
 800359c:	0899      	lsrs	r1, r3, #2
 800359e:	460b      	mov	r3, r1
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	1a5b      	subs	r3, r3, r1
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	e029      	b.n	80035fe <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80035aa:	78fa      	ldrb	r2, [r7, #3]
 80035ac:	4613      	mov	r3, r2
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	4413      	add	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	4a15      	ldr	r2, [pc, #84]	@ (800360c <RTC_WeekDayNum+0xe4>)
 80035b8:	fba2 2303 	umull	r2, r3, r2, r3
 80035bc:	085a      	lsrs	r2, r3, #1
 80035be:	78bb      	ldrb	r3, [r7, #2]
 80035c0:	441a      	add	r2, r3
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	441a      	add	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	089b      	lsrs	r3, r3, #2
 80035ca:	441a      	add	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4910      	ldr	r1, [pc, #64]	@ (8003610 <RTC_WeekDayNum+0xe8>)
 80035d0:	fba1 1303 	umull	r1, r3, r1, r3
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	1ad2      	subs	r2, r2, r3
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	490d      	ldr	r1, [pc, #52]	@ (8003610 <RTC_WeekDayNum+0xe8>)
 80035dc:	fba1 1303 	umull	r1, r3, r1, r3
 80035e0:	09db      	lsrs	r3, r3, #7
 80035e2:	4413      	add	r3, r2
 80035e4:	1c9a      	adds	r2, r3, #2
 80035e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003614 <RTC_WeekDayNum+0xec>)
 80035e8:	fba3 1302 	umull	r1, r3, r3, r2
 80035ec:	1ad1      	subs	r1, r2, r3
 80035ee:	0849      	lsrs	r1, r1, #1
 80035f0:	440b      	add	r3, r1
 80035f2:	0899      	lsrs	r1, r3, #2
 80035f4:	460b      	mov	r3, r1
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	1a5b      	subs	r3, r3, r1
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	b2db      	uxtb	r3, r3
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr
 800360c:	38e38e39 	.word	0x38e38e39
 8003610:	51eb851f 	.word	0x51eb851f
 8003614:	24924925 	.word	0x24924925

08003618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e041      	b.n	80036ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fd fbb4 	bl	8000dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3304      	adds	r3, #4
 8003654:	4619      	mov	r1, r3
 8003656:	4610      	mov	r0, r2
 8003658:	f000 fd96 	bl	8004188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e041      	b.n	800374c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d106      	bne.n	80036e2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f839 	bl	8003754 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2202      	movs	r2, #2
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3304      	adds	r3, #4
 80036f2:	4619      	mov	r1, r3
 80036f4:	4610      	mov	r0, r2
 80036f6:	f000 fd47 	bl	8004188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr
	...

08003768 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d104      	bne.n	8003786 <HAL_TIM_IC_Start_IT+0x1e>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003782:	b2db      	uxtb	r3, r3
 8003784:	e013      	b.n	80037ae <HAL_TIM_IC_Start_IT+0x46>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b04      	cmp	r3, #4
 800378a:	d104      	bne.n	8003796 <HAL_TIM_IC_Start_IT+0x2e>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003792:	b2db      	uxtb	r3, r3
 8003794:	e00b      	b.n	80037ae <HAL_TIM_IC_Start_IT+0x46>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2b08      	cmp	r3, #8
 800379a:	d104      	bne.n	80037a6 <HAL_TIM_IC_Start_IT+0x3e>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	e003      	b.n	80037ae <HAL_TIM_IC_Start_IT+0x46>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d104      	bne.n	80037c0 <HAL_TIM_IC_Start_IT+0x58>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	e013      	b.n	80037e8 <HAL_TIM_IC_Start_IT+0x80>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d104      	bne.n	80037d0 <HAL_TIM_IC_Start_IT+0x68>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	e00b      	b.n	80037e8 <HAL_TIM_IC_Start_IT+0x80>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d104      	bne.n	80037e0 <HAL_TIM_IC_Start_IT+0x78>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	e003      	b.n	80037e8 <HAL_TIM_IC_Start_IT+0x80>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80037ea:	7bbb      	ldrb	r3, [r7, #14]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d102      	bne.n	80037f6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80037f0:	7b7b      	ldrb	r3, [r7, #13]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d001      	beq.n	80037fa <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e0b8      	b.n	800396c <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d104      	bne.n	800380a <HAL_TIM_IC_Start_IT+0xa2>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003808:	e013      	b.n	8003832 <HAL_TIM_IC_Start_IT+0xca>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b04      	cmp	r3, #4
 800380e:	d104      	bne.n	800381a <HAL_TIM_IC_Start_IT+0xb2>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003818:	e00b      	b.n	8003832 <HAL_TIM_IC_Start_IT+0xca>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b08      	cmp	r3, #8
 800381e:	d104      	bne.n	800382a <HAL_TIM_IC_Start_IT+0xc2>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003828:	e003      	b.n	8003832 <HAL_TIM_IC_Start_IT+0xca>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2202      	movs	r2, #2
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d104      	bne.n	8003842 <HAL_TIM_IC_Start_IT+0xda>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003840:	e013      	b.n	800386a <HAL_TIM_IC_Start_IT+0x102>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b04      	cmp	r3, #4
 8003846:	d104      	bne.n	8003852 <HAL_TIM_IC_Start_IT+0xea>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003850:	e00b      	b.n	800386a <HAL_TIM_IC_Start_IT+0x102>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b08      	cmp	r3, #8
 8003856:	d104      	bne.n	8003862 <HAL_TIM_IC_Start_IT+0xfa>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003860:	e003      	b.n	800386a <HAL_TIM_IC_Start_IT+0x102>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2202      	movs	r2, #2
 8003866:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b0c      	cmp	r3, #12
 800386e:	d841      	bhi.n	80038f4 <HAL_TIM_IC_Start_IT+0x18c>
 8003870:	a201      	add	r2, pc, #4	@ (adr r2, 8003878 <HAL_TIM_IC_Start_IT+0x110>)
 8003872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003876:	bf00      	nop
 8003878:	080038ad 	.word	0x080038ad
 800387c:	080038f5 	.word	0x080038f5
 8003880:	080038f5 	.word	0x080038f5
 8003884:	080038f5 	.word	0x080038f5
 8003888:	080038bf 	.word	0x080038bf
 800388c:	080038f5 	.word	0x080038f5
 8003890:	080038f5 	.word	0x080038f5
 8003894:	080038f5 	.word	0x080038f5
 8003898:	080038d1 	.word	0x080038d1
 800389c:	080038f5 	.word	0x080038f5
 80038a0:	080038f5 	.word	0x080038f5
 80038a4:	080038f5 	.word	0x080038f5
 80038a8:	080038e3 	.word	0x080038e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0202 	orr.w	r2, r2, #2
 80038ba:	60da      	str	r2, [r3, #12]
      break;
 80038bc:	e01d      	b.n	80038fa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68da      	ldr	r2, [r3, #12]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 0204 	orr.w	r2, r2, #4
 80038cc:	60da      	str	r2, [r3, #12]
      break;
 80038ce:	e014      	b.n	80038fa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0208 	orr.w	r2, r2, #8
 80038de:	60da      	str	r2, [r3, #12]
      break;
 80038e0:	e00b      	b.n	80038fa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f042 0210 	orr.w	r2, r2, #16
 80038f0:	60da      	str	r2, [r3, #12]
      break;
 80038f2:	e002      	b.n	80038fa <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
      break;
 80038f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d134      	bne.n	800396a <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2201      	movs	r2, #1
 8003906:	6839      	ldr	r1, [r7, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fee0 	bl	80046ce <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a18      	ldr	r2, [pc, #96]	@ (8003974 <HAL_TIM_IC_Start_IT+0x20c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d00e      	beq.n	8003936 <HAL_TIM_IC_Start_IT+0x1ce>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003920:	d009      	beq.n	8003936 <HAL_TIM_IC_Start_IT+0x1ce>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a14      	ldr	r2, [pc, #80]	@ (8003978 <HAL_TIM_IC_Start_IT+0x210>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d004      	beq.n	8003936 <HAL_TIM_IC_Start_IT+0x1ce>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a12      	ldr	r2, [pc, #72]	@ (800397c <HAL_TIM_IC_Start_IT+0x214>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d111      	bne.n	800395a <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b06      	cmp	r3, #6
 8003946:	d010      	beq.n	800396a <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003958:	e007      	b.n	800396a <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f042 0201 	orr.w	r2, r2, #1
 8003968:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800396a:	7bfb      	ldrb	r3, [r7, #15]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40012c00 	.word	0x40012c00
 8003978:	40000400 	.word	0x40000400
 800397c:	40000800 	.word	0x40000800

08003980 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b0c      	cmp	r3, #12
 8003992:	d841      	bhi.n	8003a18 <HAL_TIM_IC_Stop_IT+0x98>
 8003994:	a201      	add	r2, pc, #4	@ (adr r2, 800399c <HAL_TIM_IC_Stop_IT+0x1c>)
 8003996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399a:	bf00      	nop
 800399c:	080039d1 	.word	0x080039d1
 80039a0:	08003a19 	.word	0x08003a19
 80039a4:	08003a19 	.word	0x08003a19
 80039a8:	08003a19 	.word	0x08003a19
 80039ac:	080039e3 	.word	0x080039e3
 80039b0:	08003a19 	.word	0x08003a19
 80039b4:	08003a19 	.word	0x08003a19
 80039b8:	08003a19 	.word	0x08003a19
 80039bc:	080039f5 	.word	0x080039f5
 80039c0:	08003a19 	.word	0x08003a19
 80039c4:	08003a19 	.word	0x08003a19
 80039c8:	08003a19 	.word	0x08003a19
 80039cc:	08003a07 	.word	0x08003a07
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0202 	bic.w	r2, r2, #2
 80039de:	60da      	str	r2, [r3, #12]
      break;
 80039e0:	e01d      	b.n	8003a1e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0204 	bic.w	r2, r2, #4
 80039f0:	60da      	str	r2, [r3, #12]
      break;
 80039f2:	e014      	b.n	8003a1e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0208 	bic.w	r2, r2, #8
 8003a02:	60da      	str	r2, [r3, #12]
      break;
 8003a04:	e00b      	b.n	8003a1e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0210 	bic.w	r2, r2, #16
 8003a14:	60da      	str	r2, [r3, #12]
      break;
 8003a16:	e002      	b.n	8003a1e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d156      	bne.n	8003ad2 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	6839      	ldr	r1, [r7, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 fe4e 	bl	80046ce <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6a1a      	ldr	r2, [r3, #32]
 8003a38:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10f      	bne.n	8003a62 <HAL_TIM_IC_Stop_IT+0xe2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6a1a      	ldr	r2, [r3, #32]
 8003a48:	f240 4344 	movw	r3, #1092	@ 0x444
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d107      	bne.n	8003a62 <HAL_TIM_IC_Stop_IT+0xe2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0201 	bic.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d104      	bne.n	8003a72 <HAL_TIM_IC_Stop_IT+0xf2>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a70:	e013      	b.n	8003a9a <HAL_TIM_IC_Stop_IT+0x11a>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d104      	bne.n	8003a82 <HAL_TIM_IC_Stop_IT+0x102>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a80:	e00b      	b.n	8003a9a <HAL_TIM_IC_Stop_IT+0x11a>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d104      	bne.n	8003a92 <HAL_TIM_IC_Stop_IT+0x112>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a90:	e003      	b.n	8003a9a <HAL_TIM_IC_Stop_IT+0x11a>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d104      	bne.n	8003aaa <HAL_TIM_IC_Stop_IT+0x12a>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003aa8:	e013      	b.n	8003ad2 <HAL_TIM_IC_Stop_IT+0x152>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d104      	bne.n	8003aba <HAL_TIM_IC_Stop_IT+0x13a>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ab8:	e00b      	b.n	8003ad2 <HAL_TIM_IC_Stop_IT+0x152>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d104      	bne.n	8003aca <HAL_TIM_IC_Stop_IT+0x14a>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ac8:	e003      	b.n	8003ad2 <HAL_TIM_IC_Stop_IT+0x152>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e041      	b.n	8003b74 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d106      	bne.n	8003b0a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f839 	bl	8003b7c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	3304      	adds	r3, #4
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	f000 fb33 	bl	8004188 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0208 	bic.w	r2, r2, #8
 8003b30:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6819      	ldr	r1, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr

08003b8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d020      	beq.n	8003bf2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d01b      	beq.n	8003bf2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f06f 0202 	mvn.w	r2, #2
 8003bc2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7fd f991 	bl	8000f00 <HAL_TIM_IC_CaptureCallback>
 8003bde:	e005      	b.n	8003bec <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fab6 	bl	8004152 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 fabc 	bl	8004164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d020      	beq.n	8003c3e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d01b      	beq.n	8003c3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f06f 0204 	mvn.w	r2, #4
 8003c0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7fd f96b 	bl	8000f00 <HAL_TIM_IC_CaptureCallback>
 8003c2a:	e005      	b.n	8003c38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 fa90 	bl	8004152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 fa96 	bl	8004164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d020      	beq.n	8003c8a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d01b      	beq.n	8003c8a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f06f 0208 	mvn.w	r2, #8
 8003c5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2204      	movs	r2, #4
 8003c60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	f003 0303 	and.w	r3, r3, #3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7fd f945 	bl	8000f00 <HAL_TIM_IC_CaptureCallback>
 8003c76:	e005      	b.n	8003c84 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 fa6a 	bl	8004152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fa70 	bl	8004164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f003 0310 	and.w	r3, r3, #16
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d020      	beq.n	8003cd6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 0310 	and.w	r3, r3, #16
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d01b      	beq.n	8003cd6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f06f 0210 	mvn.w	r2, #16
 8003ca6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2208      	movs	r2, #8
 8003cac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7fd f91f 	bl	8000f00 <HAL_TIM_IC_CaptureCallback>
 8003cc2:	e005      	b.n	8003cd0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fa44 	bl	8004152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fa4a 	bl	8004164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00c      	beq.n	8003cfa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d007      	beq.n	8003cfa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f06f 0201 	mvn.w	r2, #1
 8003cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fa23 	bl	8004140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00c      	beq.n	8003d1e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d007      	beq.n	8003d1e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 fd64 	bl	80047e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00c      	beq.n	8003d42 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d007      	beq.n	8003d42 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 fa1a 	bl	8004176 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00c      	beq.n	8003d66 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d007      	beq.n	8003d66 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f06f 0220 	mvn.w	r2, #32
 8003d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 fd37 	bl	80047d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d66:	bf00      	nop
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b086      	sub	sp, #24
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_TIM_IC_ConfigChannel+0x1e>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e088      	b.n	8003e9e <HAL_TIM_IC_ConfigChannel+0x130>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d11b      	bne.n	8003dd2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003daa:	f000 faed 	bl	8004388 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	699a      	ldr	r2, [r3, #24]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 020c 	bic.w	r2, r2, #12
 8003dbc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6999      	ldr	r1, [r3, #24]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	619a      	str	r2, [r3, #24]
 8003dd0:	e060      	b.n	8003e94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d11c      	bne.n	8003e12 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003de8:	f000 fb56 	bl	8004498 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699a      	ldr	r2, [r3, #24]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003dfa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6999      	ldr	r1, [r3, #24]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	021a      	lsls	r2, r3, #8
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	619a      	str	r2, [r3, #24]
 8003e10:	e040      	b.n	8003e94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d11b      	bne.n	8003e50 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003e28:	f000 fba1 	bl	800456e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	69da      	ldr	r2, [r3, #28]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 020c 	bic.w	r2, r2, #12
 8003e3a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	69d9      	ldr	r1, [r3, #28]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	61da      	str	r2, [r3, #28]
 8003e4e:	e021      	b.n	8003e94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b0c      	cmp	r3, #12
 8003e54:	d11c      	bne.n	8003e90 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003e66:	f000 fbbd 	bl	80045e4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003e78:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69d9      	ldr	r1, [r3, #28]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	021a      	lsls	r2, r3, #8
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	61da      	str	r2, [r3, #28]
 8003e8e:	e001      	b.n	8003e94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b084      	sub	sp, #16
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d101      	bne.n	8003ec2 <HAL_TIM_ConfigClockSource+0x1c>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e0b4      	b.n	800402c <HAL_TIM_ConfigClockSource+0x186>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2202      	movs	r2, #2
 8003ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ee0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ee8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003efa:	d03e      	beq.n	8003f7a <HAL_TIM_ConfigClockSource+0xd4>
 8003efc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f00:	f200 8087 	bhi.w	8004012 <HAL_TIM_ConfigClockSource+0x16c>
 8003f04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f08:	f000 8086 	beq.w	8004018 <HAL_TIM_ConfigClockSource+0x172>
 8003f0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f10:	d87f      	bhi.n	8004012 <HAL_TIM_ConfigClockSource+0x16c>
 8003f12:	2b70      	cmp	r3, #112	@ 0x70
 8003f14:	d01a      	beq.n	8003f4c <HAL_TIM_ConfigClockSource+0xa6>
 8003f16:	2b70      	cmp	r3, #112	@ 0x70
 8003f18:	d87b      	bhi.n	8004012 <HAL_TIM_ConfigClockSource+0x16c>
 8003f1a:	2b60      	cmp	r3, #96	@ 0x60
 8003f1c:	d050      	beq.n	8003fc0 <HAL_TIM_ConfigClockSource+0x11a>
 8003f1e:	2b60      	cmp	r3, #96	@ 0x60
 8003f20:	d877      	bhi.n	8004012 <HAL_TIM_ConfigClockSource+0x16c>
 8003f22:	2b50      	cmp	r3, #80	@ 0x50
 8003f24:	d03c      	beq.n	8003fa0 <HAL_TIM_ConfigClockSource+0xfa>
 8003f26:	2b50      	cmp	r3, #80	@ 0x50
 8003f28:	d873      	bhi.n	8004012 <HAL_TIM_ConfigClockSource+0x16c>
 8003f2a:	2b40      	cmp	r3, #64	@ 0x40
 8003f2c:	d058      	beq.n	8003fe0 <HAL_TIM_ConfigClockSource+0x13a>
 8003f2e:	2b40      	cmp	r3, #64	@ 0x40
 8003f30:	d86f      	bhi.n	8004012 <HAL_TIM_ConfigClockSource+0x16c>
 8003f32:	2b30      	cmp	r3, #48	@ 0x30
 8003f34:	d064      	beq.n	8004000 <HAL_TIM_ConfigClockSource+0x15a>
 8003f36:	2b30      	cmp	r3, #48	@ 0x30
 8003f38:	d86b      	bhi.n	8004012 <HAL_TIM_ConfigClockSource+0x16c>
 8003f3a:	2b20      	cmp	r3, #32
 8003f3c:	d060      	beq.n	8004000 <HAL_TIM_ConfigClockSource+0x15a>
 8003f3e:	2b20      	cmp	r3, #32
 8003f40:	d867      	bhi.n	8004012 <HAL_TIM_ConfigClockSource+0x16c>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d05c      	beq.n	8004000 <HAL_TIM_ConfigClockSource+0x15a>
 8003f46:	2b10      	cmp	r3, #16
 8003f48:	d05a      	beq.n	8004000 <HAL_TIM_ConfigClockSource+0x15a>
 8003f4a:	e062      	b.n	8004012 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f5c:	f000 fb98 	bl	8004690 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f6e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	609a      	str	r2, [r3, #8]
      break;
 8003f78:	e04f      	b.n	800401a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f8a:	f000 fb81 	bl	8004690 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f9c:	609a      	str	r2, [r3, #8]
      break;
 8003f9e:	e03c      	b.n	800401a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fac:	461a      	mov	r2, r3
 8003fae:	f000 fa45 	bl	800443c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2150      	movs	r1, #80	@ 0x50
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 fb4f 	bl	800465c <TIM_ITRx_SetConfig>
      break;
 8003fbe:	e02c      	b.n	800401a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fcc:	461a      	mov	r2, r3
 8003fce:	f000 fa9f 	bl	8004510 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2160      	movs	r1, #96	@ 0x60
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 fb3f 	bl	800465c <TIM_ITRx_SetConfig>
      break;
 8003fde:	e01c      	b.n	800401a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fec:	461a      	mov	r2, r3
 8003fee:	f000 fa25 	bl	800443c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2140      	movs	r1, #64	@ 0x40
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 fb2f 	bl	800465c <TIM_ITRx_SetConfig>
      break;
 8003ffe:	e00c      	b.n	800401a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4619      	mov	r1, r3
 800400a:	4610      	mov	r0, r2
 800400c:	f000 fb26 	bl	800465c <TIM_ITRx_SetConfig>
      break;
 8004010:	e003      	b.n	800401a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	73fb      	strb	r3, [r7, #15]
      break;
 8004016:	e000      	b.n	800401a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004018:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800402a:	7bfb      	ldrb	r3, [r7, #15]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_TIM_SlaveConfigSynchro+0x18>
 8004048:	2302      	movs	r3, #2
 800404a:	e031      	b.n	80040b0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800405c:	6839      	ldr	r1, [r7, #0]
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f900 	bl	8004264 <TIM_SlaveTimer_SetConfig>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d009      	beq.n	800407e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e018      	b.n	80040b0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800408c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800409c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b0c      	cmp	r3, #12
 80040ca:	d831      	bhi.n	8004130 <HAL_TIM_ReadCapturedValue+0x78>
 80040cc:	a201      	add	r2, pc, #4	@ (adr r2, 80040d4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80040ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d2:	bf00      	nop
 80040d4:	08004109 	.word	0x08004109
 80040d8:	08004131 	.word	0x08004131
 80040dc:	08004131 	.word	0x08004131
 80040e0:	08004131 	.word	0x08004131
 80040e4:	08004113 	.word	0x08004113
 80040e8:	08004131 	.word	0x08004131
 80040ec:	08004131 	.word	0x08004131
 80040f0:	08004131 	.word	0x08004131
 80040f4:	0800411d 	.word	0x0800411d
 80040f8:	08004131 	.word	0x08004131
 80040fc:	08004131 	.word	0x08004131
 8004100:	08004131 	.word	0x08004131
 8004104:	08004127 	.word	0x08004127
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800410e:	60fb      	str	r3, [r7, #12]

      break;
 8004110:	e00f      	b.n	8004132 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004118:	60fb      	str	r3, [r7, #12]

      break;
 800411a:	e00a      	b.n	8004132 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004122:	60fb      	str	r3, [r7, #12]

      break;
 8004124:	e005      	b.n	8004132 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412c:	60fb      	str	r3, [r7, #12]

      break;
 800412e:	e000      	b.n	8004132 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004130:	bf00      	nop
  }

  return tmpreg;
 8004132:	68fb      	ldr	r3, [r7, #12]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop

08004140 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	bc80      	pop	{r7}
 8004150:	4770      	bx	lr

08004152 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr

08004164 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr

08004176 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr

08004188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a2f      	ldr	r2, [pc, #188]	@ (8004258 <TIM_Base_SetConfig+0xd0>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d00b      	beq.n	80041b8 <TIM_Base_SetConfig+0x30>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041a6:	d007      	beq.n	80041b8 <TIM_Base_SetConfig+0x30>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a2c      	ldr	r2, [pc, #176]	@ (800425c <TIM_Base_SetConfig+0xd4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d003      	beq.n	80041b8 <TIM_Base_SetConfig+0x30>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a2b      	ldr	r2, [pc, #172]	@ (8004260 <TIM_Base_SetConfig+0xd8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d108      	bne.n	80041ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a22      	ldr	r2, [pc, #136]	@ (8004258 <TIM_Base_SetConfig+0xd0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00b      	beq.n	80041ea <TIM_Base_SetConfig+0x62>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041d8:	d007      	beq.n	80041ea <TIM_Base_SetConfig+0x62>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a1f      	ldr	r2, [pc, #124]	@ (800425c <TIM_Base_SetConfig+0xd4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d003      	beq.n	80041ea <TIM_Base_SetConfig+0x62>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004260 <TIM_Base_SetConfig+0xd8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d108      	bne.n	80041fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a0d      	ldr	r2, [pc, #52]	@ (8004258 <TIM_Base_SetConfig+0xd0>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d103      	bne.n	8004230 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f023 0201 	bic.w	r2, r3, #1
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	611a      	str	r2, [r3, #16]
  }
}
 800424e:	bf00      	nop
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	bc80      	pop	{r7}
 8004256:	4770      	bx	lr
 8004258:	40012c00 	.word	0x40012c00
 800425c:	40000400 	.word	0x40000400
 8004260:	40000800 	.word	0x40000800

08004264 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800426e:	2300      	movs	r3, #0
 8004270:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004280:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f023 0307 	bic.w	r3, r3, #7
 8004292:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	4313      	orrs	r3, r2
 800429c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b70      	cmp	r3, #112	@ 0x70
 80042ac:	d01a      	beq.n	80042e4 <TIM_SlaveTimer_SetConfig+0x80>
 80042ae:	2b70      	cmp	r3, #112	@ 0x70
 80042b0:	d860      	bhi.n	8004374 <TIM_SlaveTimer_SetConfig+0x110>
 80042b2:	2b60      	cmp	r3, #96	@ 0x60
 80042b4:	d054      	beq.n	8004360 <TIM_SlaveTimer_SetConfig+0xfc>
 80042b6:	2b60      	cmp	r3, #96	@ 0x60
 80042b8:	d85c      	bhi.n	8004374 <TIM_SlaveTimer_SetConfig+0x110>
 80042ba:	2b50      	cmp	r3, #80	@ 0x50
 80042bc:	d046      	beq.n	800434c <TIM_SlaveTimer_SetConfig+0xe8>
 80042be:	2b50      	cmp	r3, #80	@ 0x50
 80042c0:	d858      	bhi.n	8004374 <TIM_SlaveTimer_SetConfig+0x110>
 80042c2:	2b40      	cmp	r3, #64	@ 0x40
 80042c4:	d019      	beq.n	80042fa <TIM_SlaveTimer_SetConfig+0x96>
 80042c6:	2b40      	cmp	r3, #64	@ 0x40
 80042c8:	d854      	bhi.n	8004374 <TIM_SlaveTimer_SetConfig+0x110>
 80042ca:	2b30      	cmp	r3, #48	@ 0x30
 80042cc:	d055      	beq.n	800437a <TIM_SlaveTimer_SetConfig+0x116>
 80042ce:	2b30      	cmp	r3, #48	@ 0x30
 80042d0:	d850      	bhi.n	8004374 <TIM_SlaveTimer_SetConfig+0x110>
 80042d2:	2b20      	cmp	r3, #32
 80042d4:	d051      	beq.n	800437a <TIM_SlaveTimer_SetConfig+0x116>
 80042d6:	2b20      	cmp	r3, #32
 80042d8:	d84c      	bhi.n	8004374 <TIM_SlaveTimer_SetConfig+0x110>
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d04d      	beq.n	800437a <TIM_SlaveTimer_SetConfig+0x116>
 80042de:	2b10      	cmp	r3, #16
 80042e0:	d04b      	beq.n	800437a <TIM_SlaveTimer_SetConfig+0x116>
 80042e2:	e047      	b.n	8004374 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80042f4:	f000 f9cc 	bl	8004690 <TIM_ETR_SetConfig>
      break;
 80042f8:	e040      	b.n	800437c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b05      	cmp	r3, #5
 8004300:	d101      	bne.n	8004306 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e03b      	b.n	800437e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6a1a      	ldr	r2, [r3, #32]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0201 	bic.w	r2, r2, #1
 800431c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800432c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	4313      	orrs	r3, r2
 8004338:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	621a      	str	r2, [r3, #32]
      break;
 800434a:	e017      	b.n	800437c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004358:	461a      	mov	r2, r3
 800435a:	f000 f86f 	bl	800443c <TIM_TI1_ConfigInputStage>
      break;
 800435e:	e00d      	b.n	800437c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800436c:	461a      	mov	r2, r3
 800436e:	f000 f8cf 	bl	8004510 <TIM_TI2_ConfigInputStage>
      break;
 8004372:	e003      	b.n	800437c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	75fb      	strb	r3, [r7, #23]
      break;
 8004378:	e000      	b.n	800437c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800437a:	bf00      	nop
  }

  return status;
 800437c:	7dfb      	ldrb	r3, [r7, #23]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	f023 0201 	bic.w	r2, r3, #1
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004430 <TIM_TI1_SetConfig+0xa8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d00b      	beq.n	80043ce <TIM_TI1_SetConfig+0x46>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043bc:	d007      	beq.n	80043ce <TIM_TI1_SetConfig+0x46>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004434 <TIM_TI1_SetConfig+0xac>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d003      	beq.n	80043ce <TIM_TI1_SetConfig+0x46>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	4a1b      	ldr	r2, [pc, #108]	@ (8004438 <TIM_TI1_SetConfig+0xb0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d101      	bne.n	80043d2 <TIM_TI1_SetConfig+0x4a>
 80043ce:	2301      	movs	r3, #1
 80043d0:	e000      	b.n	80043d4 <TIM_TI1_SetConfig+0x4c>
 80043d2:	2300      	movs	r3, #0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f023 0303 	bic.w	r3, r3, #3
 80043de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	e003      	b.n	80043f2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f043 0301 	orr.w	r3, r3, #1
 80043f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	4313      	orrs	r3, r2
 8004404:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f023 030a 	bic.w	r3, r3, #10
 800440c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	f003 030a 	and.w	r3, r3, #10
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	4313      	orrs	r3, r2
 8004418:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	621a      	str	r2, [r3, #32]
}
 8004426:	bf00      	nop
 8004428:	371c      	adds	r7, #28
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr
 8004430:	40012c00 	.word	0x40012c00
 8004434:	40000400 	.word	0x40000400
 8004438:	40000800 	.word	0x40000800

0800443c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	f023 0201 	bic.w	r2, r3, #1
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	4313      	orrs	r3, r2
 8004470:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f023 030a 	bic.w	r3, r3, #10
 8004478:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4313      	orrs	r3, r2
 8004480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	621a      	str	r2, [r3, #32]
}
 800448e:	bf00      	nop
 8004490:	371c      	adds	r7, #28
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr

08004498 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	f023 0210 	bic.w	r2, r3, #16
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	021b      	lsls	r3, r3, #8
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	031b      	lsls	r3, r3, #12
 80044dc:	b29b      	uxth	r3, r3
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044ea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	621a      	str	r2, [r3, #32]
}
 8004506:	bf00      	nop
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr

08004510 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	f023 0210 	bic.w	r2, r3, #16
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800453a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	031b      	lsls	r3, r3, #12
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4313      	orrs	r3, r2
 8004544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800454c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	4313      	orrs	r3, r2
 8004556:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	621a      	str	r2, [r3, #32]
}
 8004564:	bf00      	nop
 8004566:	371c      	adds	r7, #28
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr

0800456e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800456e:	b480      	push	{r7}
 8004570:	b087      	sub	sp, #28
 8004572:	af00      	add	r7, sp, #0
 8004574:	60f8      	str	r0, [r7, #12]
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	607a      	str	r2, [r7, #4]
 800457a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f023 0303 	bic.w	r3, r3, #3
 800459a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045aa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045be:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	021b      	lsls	r3, r3, #8
 80045c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	621a      	str	r2, [r3, #32]
}
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr

080045e4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b087      	sub	sp, #28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004610:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	021b      	lsls	r3, r3, #8
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4313      	orrs	r3, r2
 800461a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004622:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	031b      	lsls	r3, r3, #12
 8004628:	b29b      	uxth	r3, r3
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	4313      	orrs	r3, r2
 800462e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004636:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	031b      	lsls	r3, r3, #12
 800463c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	621a      	str	r2, [r3, #32]
}
 8004652:	bf00      	nop
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr

0800465c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004672:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	f043 0307 	orr.w	r3, r3, #7
 800467e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	609a      	str	r2, [r3, #8]
}
 8004686:	bf00      	nop
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr

08004690 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	021a      	lsls	r2, r3, #8
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	431a      	orrs	r2, r3
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	609a      	str	r2, [r3, #8]
}
 80046c4:	bf00      	nop
 80046c6:	371c      	adds	r7, #28
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bc80      	pop	{r7}
 80046cc:	4770      	bx	lr

080046ce <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b087      	sub	sp, #28
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f003 031f 	and.w	r3, r3, #31
 80046e0:	2201      	movs	r2, #1
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a1a      	ldr	r2, [r3, #32]
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	43db      	mvns	r3, r3
 80046f0:	401a      	ands	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a1a      	ldr	r2, [r3, #32]
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	f003 031f 	and.w	r3, r3, #31
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	fa01 f303 	lsl.w	r3, r1, r3
 8004706:	431a      	orrs	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	621a      	str	r2, [r3, #32]
}
 800470c:	bf00      	nop
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr
	...

08004718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800472c:	2302      	movs	r3, #2
 800472e:	e046      	b.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004756:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a16      	ldr	r2, [pc, #88]	@ (80047c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d00e      	beq.n	8004792 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800477c:	d009      	beq.n	8004792 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a12      	ldr	r2, [pc, #72]	@ (80047cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d004      	beq.n	8004792 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a10      	ldr	r2, [pc, #64]	@ (80047d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d10c      	bne.n	80047ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004798:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr
 80047c8:	40012c00 	.word	0x40012c00
 80047cc:	40000400 	.word	0x40000400
 80047d0:	40000800 	.word	0x40000800

080047d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bc80      	pop	{r7}
 80047e4:	4770      	bx	lr

080047e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr

080047f8 <siprintf>:
 80047f8:	b40e      	push	{r1, r2, r3}
 80047fa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80047fe:	b500      	push	{lr}
 8004800:	b09c      	sub	sp, #112	@ 0x70
 8004802:	ab1d      	add	r3, sp, #116	@ 0x74
 8004804:	9002      	str	r0, [sp, #8]
 8004806:	9006      	str	r0, [sp, #24]
 8004808:	9107      	str	r1, [sp, #28]
 800480a:	9104      	str	r1, [sp, #16]
 800480c:	4808      	ldr	r0, [pc, #32]	@ (8004830 <siprintf+0x38>)
 800480e:	4909      	ldr	r1, [pc, #36]	@ (8004834 <siprintf+0x3c>)
 8004810:	f853 2b04 	ldr.w	r2, [r3], #4
 8004814:	9105      	str	r1, [sp, #20]
 8004816:	6800      	ldr	r0, [r0, #0]
 8004818:	a902      	add	r1, sp, #8
 800481a:	9301      	str	r3, [sp, #4]
 800481c:	f000 f9a0 	bl	8004b60 <_svfiprintf_r>
 8004820:	2200      	movs	r2, #0
 8004822:	9b02      	ldr	r3, [sp, #8]
 8004824:	701a      	strb	r2, [r3, #0]
 8004826:	b01c      	add	sp, #112	@ 0x70
 8004828:	f85d eb04 	ldr.w	lr, [sp], #4
 800482c:	b003      	add	sp, #12
 800482e:	4770      	bx	lr
 8004830:	2000000c 	.word	0x2000000c
 8004834:	ffff0208 	.word	0xffff0208

08004838 <memset>:
 8004838:	4603      	mov	r3, r0
 800483a:	4402      	add	r2, r0
 800483c:	4293      	cmp	r3, r2
 800483e:	d100      	bne.n	8004842 <memset+0xa>
 8004840:	4770      	bx	lr
 8004842:	f803 1b01 	strb.w	r1, [r3], #1
 8004846:	e7f9      	b.n	800483c <memset+0x4>

08004848 <__errno>:
 8004848:	4b01      	ldr	r3, [pc, #4]	@ (8004850 <__errno+0x8>)
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	2000000c 	.word	0x2000000c

08004854 <__libc_init_array>:
 8004854:	b570      	push	{r4, r5, r6, lr}
 8004856:	2600      	movs	r6, #0
 8004858:	4d0c      	ldr	r5, [pc, #48]	@ (800488c <__libc_init_array+0x38>)
 800485a:	4c0d      	ldr	r4, [pc, #52]	@ (8004890 <__libc_init_array+0x3c>)
 800485c:	1b64      	subs	r4, r4, r5
 800485e:	10a4      	asrs	r4, r4, #2
 8004860:	42a6      	cmp	r6, r4
 8004862:	d109      	bne.n	8004878 <__libc_init_array+0x24>
 8004864:	f000 fc78 	bl	8005158 <_init>
 8004868:	2600      	movs	r6, #0
 800486a:	4d0a      	ldr	r5, [pc, #40]	@ (8004894 <__libc_init_array+0x40>)
 800486c:	4c0a      	ldr	r4, [pc, #40]	@ (8004898 <__libc_init_array+0x44>)
 800486e:	1b64      	subs	r4, r4, r5
 8004870:	10a4      	asrs	r4, r4, #2
 8004872:	42a6      	cmp	r6, r4
 8004874:	d105      	bne.n	8004882 <__libc_init_array+0x2e>
 8004876:	bd70      	pop	{r4, r5, r6, pc}
 8004878:	f855 3b04 	ldr.w	r3, [r5], #4
 800487c:	4798      	blx	r3
 800487e:	3601      	adds	r6, #1
 8004880:	e7ee      	b.n	8004860 <__libc_init_array+0xc>
 8004882:	f855 3b04 	ldr.w	r3, [r5], #4
 8004886:	4798      	blx	r3
 8004888:	3601      	adds	r6, #1
 800488a:	e7f2      	b.n	8004872 <__libc_init_array+0x1e>
 800488c:	08005818 	.word	0x08005818
 8004890:	08005818 	.word	0x08005818
 8004894:	08005818 	.word	0x08005818
 8004898:	0800581c 	.word	0x0800581c

0800489c <__retarget_lock_acquire_recursive>:
 800489c:	4770      	bx	lr

0800489e <__retarget_lock_release_recursive>:
 800489e:	4770      	bx	lr

080048a0 <memcpy>:
 80048a0:	440a      	add	r2, r1
 80048a2:	4291      	cmp	r1, r2
 80048a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80048a8:	d100      	bne.n	80048ac <memcpy+0xc>
 80048aa:	4770      	bx	lr
 80048ac:	b510      	push	{r4, lr}
 80048ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048b2:	4291      	cmp	r1, r2
 80048b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048b8:	d1f9      	bne.n	80048ae <memcpy+0xe>
 80048ba:	bd10      	pop	{r4, pc}

080048bc <_free_r>:
 80048bc:	b538      	push	{r3, r4, r5, lr}
 80048be:	4605      	mov	r5, r0
 80048c0:	2900      	cmp	r1, #0
 80048c2:	d040      	beq.n	8004946 <_free_r+0x8a>
 80048c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048c8:	1f0c      	subs	r4, r1, #4
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	bfb8      	it	lt
 80048ce:	18e4      	addlt	r4, r4, r3
 80048d0:	f000 f8de 	bl	8004a90 <__malloc_lock>
 80048d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004948 <_free_r+0x8c>)
 80048d6:	6813      	ldr	r3, [r2, #0]
 80048d8:	b933      	cbnz	r3, 80048e8 <_free_r+0x2c>
 80048da:	6063      	str	r3, [r4, #4]
 80048dc:	6014      	str	r4, [r2, #0]
 80048de:	4628      	mov	r0, r5
 80048e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048e4:	f000 b8da 	b.w	8004a9c <__malloc_unlock>
 80048e8:	42a3      	cmp	r3, r4
 80048ea:	d908      	bls.n	80048fe <_free_r+0x42>
 80048ec:	6820      	ldr	r0, [r4, #0]
 80048ee:	1821      	adds	r1, r4, r0
 80048f0:	428b      	cmp	r3, r1
 80048f2:	bf01      	itttt	eq
 80048f4:	6819      	ldreq	r1, [r3, #0]
 80048f6:	685b      	ldreq	r3, [r3, #4]
 80048f8:	1809      	addeq	r1, r1, r0
 80048fa:	6021      	streq	r1, [r4, #0]
 80048fc:	e7ed      	b.n	80048da <_free_r+0x1e>
 80048fe:	461a      	mov	r2, r3
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	b10b      	cbz	r3, 8004908 <_free_r+0x4c>
 8004904:	42a3      	cmp	r3, r4
 8004906:	d9fa      	bls.n	80048fe <_free_r+0x42>
 8004908:	6811      	ldr	r1, [r2, #0]
 800490a:	1850      	adds	r0, r2, r1
 800490c:	42a0      	cmp	r0, r4
 800490e:	d10b      	bne.n	8004928 <_free_r+0x6c>
 8004910:	6820      	ldr	r0, [r4, #0]
 8004912:	4401      	add	r1, r0
 8004914:	1850      	adds	r0, r2, r1
 8004916:	4283      	cmp	r3, r0
 8004918:	6011      	str	r1, [r2, #0]
 800491a:	d1e0      	bne.n	80048de <_free_r+0x22>
 800491c:	6818      	ldr	r0, [r3, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	4408      	add	r0, r1
 8004922:	6010      	str	r0, [r2, #0]
 8004924:	6053      	str	r3, [r2, #4]
 8004926:	e7da      	b.n	80048de <_free_r+0x22>
 8004928:	d902      	bls.n	8004930 <_free_r+0x74>
 800492a:	230c      	movs	r3, #12
 800492c:	602b      	str	r3, [r5, #0]
 800492e:	e7d6      	b.n	80048de <_free_r+0x22>
 8004930:	6820      	ldr	r0, [r4, #0]
 8004932:	1821      	adds	r1, r4, r0
 8004934:	428b      	cmp	r3, r1
 8004936:	bf01      	itttt	eq
 8004938:	6819      	ldreq	r1, [r3, #0]
 800493a:	685b      	ldreq	r3, [r3, #4]
 800493c:	1809      	addeq	r1, r1, r0
 800493e:	6021      	streq	r1, [r4, #0]
 8004940:	6063      	str	r3, [r4, #4]
 8004942:	6054      	str	r4, [r2, #4]
 8004944:	e7cb      	b.n	80048de <_free_r+0x22>
 8004946:	bd38      	pop	{r3, r4, r5, pc}
 8004948:	200006d8 	.word	0x200006d8

0800494c <sbrk_aligned>:
 800494c:	b570      	push	{r4, r5, r6, lr}
 800494e:	4e0f      	ldr	r6, [pc, #60]	@ (800498c <sbrk_aligned+0x40>)
 8004950:	460c      	mov	r4, r1
 8004952:	6831      	ldr	r1, [r6, #0]
 8004954:	4605      	mov	r5, r0
 8004956:	b911      	cbnz	r1, 800495e <sbrk_aligned+0x12>
 8004958:	f000 fbaa 	bl	80050b0 <_sbrk_r>
 800495c:	6030      	str	r0, [r6, #0]
 800495e:	4621      	mov	r1, r4
 8004960:	4628      	mov	r0, r5
 8004962:	f000 fba5 	bl	80050b0 <_sbrk_r>
 8004966:	1c43      	adds	r3, r0, #1
 8004968:	d103      	bne.n	8004972 <sbrk_aligned+0x26>
 800496a:	f04f 34ff 	mov.w	r4, #4294967295
 800496e:	4620      	mov	r0, r4
 8004970:	bd70      	pop	{r4, r5, r6, pc}
 8004972:	1cc4      	adds	r4, r0, #3
 8004974:	f024 0403 	bic.w	r4, r4, #3
 8004978:	42a0      	cmp	r0, r4
 800497a:	d0f8      	beq.n	800496e <sbrk_aligned+0x22>
 800497c:	1a21      	subs	r1, r4, r0
 800497e:	4628      	mov	r0, r5
 8004980:	f000 fb96 	bl	80050b0 <_sbrk_r>
 8004984:	3001      	adds	r0, #1
 8004986:	d1f2      	bne.n	800496e <sbrk_aligned+0x22>
 8004988:	e7ef      	b.n	800496a <sbrk_aligned+0x1e>
 800498a:	bf00      	nop
 800498c:	200006d4 	.word	0x200006d4

08004990 <_malloc_r>:
 8004990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004994:	1ccd      	adds	r5, r1, #3
 8004996:	f025 0503 	bic.w	r5, r5, #3
 800499a:	3508      	adds	r5, #8
 800499c:	2d0c      	cmp	r5, #12
 800499e:	bf38      	it	cc
 80049a0:	250c      	movcc	r5, #12
 80049a2:	2d00      	cmp	r5, #0
 80049a4:	4606      	mov	r6, r0
 80049a6:	db01      	blt.n	80049ac <_malloc_r+0x1c>
 80049a8:	42a9      	cmp	r1, r5
 80049aa:	d904      	bls.n	80049b6 <_malloc_r+0x26>
 80049ac:	230c      	movs	r3, #12
 80049ae:	6033      	str	r3, [r6, #0]
 80049b0:	2000      	movs	r0, #0
 80049b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a8c <_malloc_r+0xfc>
 80049ba:	f000 f869 	bl	8004a90 <__malloc_lock>
 80049be:	f8d8 3000 	ldr.w	r3, [r8]
 80049c2:	461c      	mov	r4, r3
 80049c4:	bb44      	cbnz	r4, 8004a18 <_malloc_r+0x88>
 80049c6:	4629      	mov	r1, r5
 80049c8:	4630      	mov	r0, r6
 80049ca:	f7ff ffbf 	bl	800494c <sbrk_aligned>
 80049ce:	1c43      	adds	r3, r0, #1
 80049d0:	4604      	mov	r4, r0
 80049d2:	d158      	bne.n	8004a86 <_malloc_r+0xf6>
 80049d4:	f8d8 4000 	ldr.w	r4, [r8]
 80049d8:	4627      	mov	r7, r4
 80049da:	2f00      	cmp	r7, #0
 80049dc:	d143      	bne.n	8004a66 <_malloc_r+0xd6>
 80049de:	2c00      	cmp	r4, #0
 80049e0:	d04b      	beq.n	8004a7a <_malloc_r+0xea>
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	4639      	mov	r1, r7
 80049e6:	4630      	mov	r0, r6
 80049e8:	eb04 0903 	add.w	r9, r4, r3
 80049ec:	f000 fb60 	bl	80050b0 <_sbrk_r>
 80049f0:	4581      	cmp	r9, r0
 80049f2:	d142      	bne.n	8004a7a <_malloc_r+0xea>
 80049f4:	6821      	ldr	r1, [r4, #0]
 80049f6:	4630      	mov	r0, r6
 80049f8:	1a6d      	subs	r5, r5, r1
 80049fa:	4629      	mov	r1, r5
 80049fc:	f7ff ffa6 	bl	800494c <sbrk_aligned>
 8004a00:	3001      	adds	r0, #1
 8004a02:	d03a      	beq.n	8004a7a <_malloc_r+0xea>
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	442b      	add	r3, r5
 8004a08:	6023      	str	r3, [r4, #0]
 8004a0a:	f8d8 3000 	ldr.w	r3, [r8]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	bb62      	cbnz	r2, 8004a6c <_malloc_r+0xdc>
 8004a12:	f8c8 7000 	str.w	r7, [r8]
 8004a16:	e00f      	b.n	8004a38 <_malloc_r+0xa8>
 8004a18:	6822      	ldr	r2, [r4, #0]
 8004a1a:	1b52      	subs	r2, r2, r5
 8004a1c:	d420      	bmi.n	8004a60 <_malloc_r+0xd0>
 8004a1e:	2a0b      	cmp	r2, #11
 8004a20:	d917      	bls.n	8004a52 <_malloc_r+0xc2>
 8004a22:	1961      	adds	r1, r4, r5
 8004a24:	42a3      	cmp	r3, r4
 8004a26:	6025      	str	r5, [r4, #0]
 8004a28:	bf18      	it	ne
 8004a2a:	6059      	strne	r1, [r3, #4]
 8004a2c:	6863      	ldr	r3, [r4, #4]
 8004a2e:	bf08      	it	eq
 8004a30:	f8c8 1000 	streq.w	r1, [r8]
 8004a34:	5162      	str	r2, [r4, r5]
 8004a36:	604b      	str	r3, [r1, #4]
 8004a38:	4630      	mov	r0, r6
 8004a3a:	f000 f82f 	bl	8004a9c <__malloc_unlock>
 8004a3e:	f104 000b 	add.w	r0, r4, #11
 8004a42:	1d23      	adds	r3, r4, #4
 8004a44:	f020 0007 	bic.w	r0, r0, #7
 8004a48:	1ac2      	subs	r2, r0, r3
 8004a4a:	bf1c      	itt	ne
 8004a4c:	1a1b      	subne	r3, r3, r0
 8004a4e:	50a3      	strne	r3, [r4, r2]
 8004a50:	e7af      	b.n	80049b2 <_malloc_r+0x22>
 8004a52:	6862      	ldr	r2, [r4, #4]
 8004a54:	42a3      	cmp	r3, r4
 8004a56:	bf0c      	ite	eq
 8004a58:	f8c8 2000 	streq.w	r2, [r8]
 8004a5c:	605a      	strne	r2, [r3, #4]
 8004a5e:	e7eb      	b.n	8004a38 <_malloc_r+0xa8>
 8004a60:	4623      	mov	r3, r4
 8004a62:	6864      	ldr	r4, [r4, #4]
 8004a64:	e7ae      	b.n	80049c4 <_malloc_r+0x34>
 8004a66:	463c      	mov	r4, r7
 8004a68:	687f      	ldr	r7, [r7, #4]
 8004a6a:	e7b6      	b.n	80049da <_malloc_r+0x4a>
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	42a3      	cmp	r3, r4
 8004a72:	d1fb      	bne.n	8004a6c <_malloc_r+0xdc>
 8004a74:	2300      	movs	r3, #0
 8004a76:	6053      	str	r3, [r2, #4]
 8004a78:	e7de      	b.n	8004a38 <_malloc_r+0xa8>
 8004a7a:	230c      	movs	r3, #12
 8004a7c:	4630      	mov	r0, r6
 8004a7e:	6033      	str	r3, [r6, #0]
 8004a80:	f000 f80c 	bl	8004a9c <__malloc_unlock>
 8004a84:	e794      	b.n	80049b0 <_malloc_r+0x20>
 8004a86:	6005      	str	r5, [r0, #0]
 8004a88:	e7d6      	b.n	8004a38 <_malloc_r+0xa8>
 8004a8a:	bf00      	nop
 8004a8c:	200006d8 	.word	0x200006d8

08004a90 <__malloc_lock>:
 8004a90:	4801      	ldr	r0, [pc, #4]	@ (8004a98 <__malloc_lock+0x8>)
 8004a92:	f7ff bf03 	b.w	800489c <__retarget_lock_acquire_recursive>
 8004a96:	bf00      	nop
 8004a98:	200006d0 	.word	0x200006d0

08004a9c <__malloc_unlock>:
 8004a9c:	4801      	ldr	r0, [pc, #4]	@ (8004aa4 <__malloc_unlock+0x8>)
 8004a9e:	f7ff befe 	b.w	800489e <__retarget_lock_release_recursive>
 8004aa2:	bf00      	nop
 8004aa4:	200006d0 	.word	0x200006d0

08004aa8 <__ssputs_r>:
 8004aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aac:	461f      	mov	r7, r3
 8004aae:	688e      	ldr	r6, [r1, #8]
 8004ab0:	4682      	mov	sl, r0
 8004ab2:	42be      	cmp	r6, r7
 8004ab4:	460c      	mov	r4, r1
 8004ab6:	4690      	mov	r8, r2
 8004ab8:	680b      	ldr	r3, [r1, #0]
 8004aba:	d82d      	bhi.n	8004b18 <__ssputs_r+0x70>
 8004abc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ac0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004ac4:	d026      	beq.n	8004b14 <__ssputs_r+0x6c>
 8004ac6:	6965      	ldr	r5, [r4, #20]
 8004ac8:	6909      	ldr	r1, [r1, #16]
 8004aca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ace:	eba3 0901 	sub.w	r9, r3, r1
 8004ad2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ad6:	1c7b      	adds	r3, r7, #1
 8004ad8:	444b      	add	r3, r9
 8004ada:	106d      	asrs	r5, r5, #1
 8004adc:	429d      	cmp	r5, r3
 8004ade:	bf38      	it	cc
 8004ae0:	461d      	movcc	r5, r3
 8004ae2:	0553      	lsls	r3, r2, #21
 8004ae4:	d527      	bpl.n	8004b36 <__ssputs_r+0x8e>
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	f7ff ff52 	bl	8004990 <_malloc_r>
 8004aec:	4606      	mov	r6, r0
 8004aee:	b360      	cbz	r0, 8004b4a <__ssputs_r+0xa2>
 8004af0:	464a      	mov	r2, r9
 8004af2:	6921      	ldr	r1, [r4, #16]
 8004af4:	f7ff fed4 	bl	80048a0 <memcpy>
 8004af8:	89a3      	ldrh	r3, [r4, #12]
 8004afa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b02:	81a3      	strh	r3, [r4, #12]
 8004b04:	6126      	str	r6, [r4, #16]
 8004b06:	444e      	add	r6, r9
 8004b08:	6026      	str	r6, [r4, #0]
 8004b0a:	463e      	mov	r6, r7
 8004b0c:	6165      	str	r5, [r4, #20]
 8004b0e:	eba5 0509 	sub.w	r5, r5, r9
 8004b12:	60a5      	str	r5, [r4, #8]
 8004b14:	42be      	cmp	r6, r7
 8004b16:	d900      	bls.n	8004b1a <__ssputs_r+0x72>
 8004b18:	463e      	mov	r6, r7
 8004b1a:	4632      	mov	r2, r6
 8004b1c:	4641      	mov	r1, r8
 8004b1e:	6820      	ldr	r0, [r4, #0]
 8004b20:	f000 faac 	bl	800507c <memmove>
 8004b24:	2000      	movs	r0, #0
 8004b26:	68a3      	ldr	r3, [r4, #8]
 8004b28:	1b9b      	subs	r3, r3, r6
 8004b2a:	60a3      	str	r3, [r4, #8]
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	4433      	add	r3, r6
 8004b30:	6023      	str	r3, [r4, #0]
 8004b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b36:	462a      	mov	r2, r5
 8004b38:	f000 fad8 	bl	80050ec <_realloc_r>
 8004b3c:	4606      	mov	r6, r0
 8004b3e:	2800      	cmp	r0, #0
 8004b40:	d1e0      	bne.n	8004b04 <__ssputs_r+0x5c>
 8004b42:	4650      	mov	r0, sl
 8004b44:	6921      	ldr	r1, [r4, #16]
 8004b46:	f7ff feb9 	bl	80048bc <_free_r>
 8004b4a:	230c      	movs	r3, #12
 8004b4c:	f8ca 3000 	str.w	r3, [sl]
 8004b50:	89a3      	ldrh	r3, [r4, #12]
 8004b52:	f04f 30ff 	mov.w	r0, #4294967295
 8004b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b5a:	81a3      	strh	r3, [r4, #12]
 8004b5c:	e7e9      	b.n	8004b32 <__ssputs_r+0x8a>
	...

08004b60 <_svfiprintf_r>:
 8004b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b64:	4698      	mov	r8, r3
 8004b66:	898b      	ldrh	r3, [r1, #12]
 8004b68:	4607      	mov	r7, r0
 8004b6a:	061b      	lsls	r3, r3, #24
 8004b6c:	460d      	mov	r5, r1
 8004b6e:	4614      	mov	r4, r2
 8004b70:	b09d      	sub	sp, #116	@ 0x74
 8004b72:	d510      	bpl.n	8004b96 <_svfiprintf_r+0x36>
 8004b74:	690b      	ldr	r3, [r1, #16]
 8004b76:	b973      	cbnz	r3, 8004b96 <_svfiprintf_r+0x36>
 8004b78:	2140      	movs	r1, #64	@ 0x40
 8004b7a:	f7ff ff09 	bl	8004990 <_malloc_r>
 8004b7e:	6028      	str	r0, [r5, #0]
 8004b80:	6128      	str	r0, [r5, #16]
 8004b82:	b930      	cbnz	r0, 8004b92 <_svfiprintf_r+0x32>
 8004b84:	230c      	movs	r3, #12
 8004b86:	603b      	str	r3, [r7, #0]
 8004b88:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8c:	b01d      	add	sp, #116	@ 0x74
 8004b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b92:	2340      	movs	r3, #64	@ 0x40
 8004b94:	616b      	str	r3, [r5, #20]
 8004b96:	2300      	movs	r3, #0
 8004b98:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b9a:	2320      	movs	r3, #32
 8004b9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ba0:	2330      	movs	r3, #48	@ 0x30
 8004ba2:	f04f 0901 	mov.w	r9, #1
 8004ba6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004baa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004d44 <_svfiprintf_r+0x1e4>
 8004bae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004bb2:	4623      	mov	r3, r4
 8004bb4:	469a      	mov	sl, r3
 8004bb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bba:	b10a      	cbz	r2, 8004bc0 <_svfiprintf_r+0x60>
 8004bbc:	2a25      	cmp	r2, #37	@ 0x25
 8004bbe:	d1f9      	bne.n	8004bb4 <_svfiprintf_r+0x54>
 8004bc0:	ebba 0b04 	subs.w	fp, sl, r4
 8004bc4:	d00b      	beq.n	8004bde <_svfiprintf_r+0x7e>
 8004bc6:	465b      	mov	r3, fp
 8004bc8:	4622      	mov	r2, r4
 8004bca:	4629      	mov	r1, r5
 8004bcc:	4638      	mov	r0, r7
 8004bce:	f7ff ff6b 	bl	8004aa8 <__ssputs_r>
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	f000 80a7 	beq.w	8004d26 <_svfiprintf_r+0x1c6>
 8004bd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bda:	445a      	add	r2, fp
 8004bdc:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bde:	f89a 3000 	ldrb.w	r3, [sl]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 809f 	beq.w	8004d26 <_svfiprintf_r+0x1c6>
 8004be8:	2300      	movs	r3, #0
 8004bea:	f04f 32ff 	mov.w	r2, #4294967295
 8004bee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bf2:	f10a 0a01 	add.w	sl, sl, #1
 8004bf6:	9304      	str	r3, [sp, #16]
 8004bf8:	9307      	str	r3, [sp, #28]
 8004bfa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004bfe:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c00:	4654      	mov	r4, sl
 8004c02:	2205      	movs	r2, #5
 8004c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c08:	484e      	ldr	r0, [pc, #312]	@ (8004d44 <_svfiprintf_r+0x1e4>)
 8004c0a:	f000 fa61 	bl	80050d0 <memchr>
 8004c0e:	9a04      	ldr	r2, [sp, #16]
 8004c10:	b9d8      	cbnz	r0, 8004c4a <_svfiprintf_r+0xea>
 8004c12:	06d0      	lsls	r0, r2, #27
 8004c14:	bf44      	itt	mi
 8004c16:	2320      	movmi	r3, #32
 8004c18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c1c:	0711      	lsls	r1, r2, #28
 8004c1e:	bf44      	itt	mi
 8004c20:	232b      	movmi	r3, #43	@ 0x2b
 8004c22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c26:	f89a 3000 	ldrb.w	r3, [sl]
 8004c2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c2c:	d015      	beq.n	8004c5a <_svfiprintf_r+0xfa>
 8004c2e:	4654      	mov	r4, sl
 8004c30:	2000      	movs	r0, #0
 8004c32:	f04f 0c0a 	mov.w	ip, #10
 8004c36:	9a07      	ldr	r2, [sp, #28]
 8004c38:	4621      	mov	r1, r4
 8004c3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c3e:	3b30      	subs	r3, #48	@ 0x30
 8004c40:	2b09      	cmp	r3, #9
 8004c42:	d94b      	bls.n	8004cdc <_svfiprintf_r+0x17c>
 8004c44:	b1b0      	cbz	r0, 8004c74 <_svfiprintf_r+0x114>
 8004c46:	9207      	str	r2, [sp, #28]
 8004c48:	e014      	b.n	8004c74 <_svfiprintf_r+0x114>
 8004c4a:	eba0 0308 	sub.w	r3, r0, r8
 8004c4e:	fa09 f303 	lsl.w	r3, r9, r3
 8004c52:	4313      	orrs	r3, r2
 8004c54:	46a2      	mov	sl, r4
 8004c56:	9304      	str	r3, [sp, #16]
 8004c58:	e7d2      	b.n	8004c00 <_svfiprintf_r+0xa0>
 8004c5a:	9b03      	ldr	r3, [sp, #12]
 8004c5c:	1d19      	adds	r1, r3, #4
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	9103      	str	r1, [sp, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	bfbb      	ittet	lt
 8004c66:	425b      	neglt	r3, r3
 8004c68:	f042 0202 	orrlt.w	r2, r2, #2
 8004c6c:	9307      	strge	r3, [sp, #28]
 8004c6e:	9307      	strlt	r3, [sp, #28]
 8004c70:	bfb8      	it	lt
 8004c72:	9204      	strlt	r2, [sp, #16]
 8004c74:	7823      	ldrb	r3, [r4, #0]
 8004c76:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c78:	d10a      	bne.n	8004c90 <_svfiprintf_r+0x130>
 8004c7a:	7863      	ldrb	r3, [r4, #1]
 8004c7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c7e:	d132      	bne.n	8004ce6 <_svfiprintf_r+0x186>
 8004c80:	9b03      	ldr	r3, [sp, #12]
 8004c82:	3402      	adds	r4, #2
 8004c84:	1d1a      	adds	r2, r3, #4
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	9203      	str	r2, [sp, #12]
 8004c8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c8e:	9305      	str	r3, [sp, #20]
 8004c90:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004d48 <_svfiprintf_r+0x1e8>
 8004c94:	2203      	movs	r2, #3
 8004c96:	4650      	mov	r0, sl
 8004c98:	7821      	ldrb	r1, [r4, #0]
 8004c9a:	f000 fa19 	bl	80050d0 <memchr>
 8004c9e:	b138      	cbz	r0, 8004cb0 <_svfiprintf_r+0x150>
 8004ca0:	2240      	movs	r2, #64	@ 0x40
 8004ca2:	9b04      	ldr	r3, [sp, #16]
 8004ca4:	eba0 000a 	sub.w	r0, r0, sl
 8004ca8:	4082      	lsls	r2, r0
 8004caa:	4313      	orrs	r3, r2
 8004cac:	3401      	adds	r4, #1
 8004cae:	9304      	str	r3, [sp, #16]
 8004cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cb4:	2206      	movs	r2, #6
 8004cb6:	4825      	ldr	r0, [pc, #148]	@ (8004d4c <_svfiprintf_r+0x1ec>)
 8004cb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004cbc:	f000 fa08 	bl	80050d0 <memchr>
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	d036      	beq.n	8004d32 <_svfiprintf_r+0x1d2>
 8004cc4:	4b22      	ldr	r3, [pc, #136]	@ (8004d50 <_svfiprintf_r+0x1f0>)
 8004cc6:	bb1b      	cbnz	r3, 8004d10 <_svfiprintf_r+0x1b0>
 8004cc8:	9b03      	ldr	r3, [sp, #12]
 8004cca:	3307      	adds	r3, #7
 8004ccc:	f023 0307 	bic.w	r3, r3, #7
 8004cd0:	3308      	adds	r3, #8
 8004cd2:	9303      	str	r3, [sp, #12]
 8004cd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cd6:	4433      	add	r3, r6
 8004cd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cda:	e76a      	b.n	8004bb2 <_svfiprintf_r+0x52>
 8004cdc:	460c      	mov	r4, r1
 8004cde:	2001      	movs	r0, #1
 8004ce0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ce4:	e7a8      	b.n	8004c38 <_svfiprintf_r+0xd8>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f04f 0c0a 	mov.w	ip, #10
 8004cec:	4619      	mov	r1, r3
 8004cee:	3401      	adds	r4, #1
 8004cf0:	9305      	str	r3, [sp, #20]
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cf8:	3a30      	subs	r2, #48	@ 0x30
 8004cfa:	2a09      	cmp	r2, #9
 8004cfc:	d903      	bls.n	8004d06 <_svfiprintf_r+0x1a6>
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0c6      	beq.n	8004c90 <_svfiprintf_r+0x130>
 8004d02:	9105      	str	r1, [sp, #20]
 8004d04:	e7c4      	b.n	8004c90 <_svfiprintf_r+0x130>
 8004d06:	4604      	mov	r4, r0
 8004d08:	2301      	movs	r3, #1
 8004d0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d0e:	e7f0      	b.n	8004cf2 <_svfiprintf_r+0x192>
 8004d10:	ab03      	add	r3, sp, #12
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	462a      	mov	r2, r5
 8004d16:	4638      	mov	r0, r7
 8004d18:	4b0e      	ldr	r3, [pc, #56]	@ (8004d54 <_svfiprintf_r+0x1f4>)
 8004d1a:	a904      	add	r1, sp, #16
 8004d1c:	f3af 8000 	nop.w
 8004d20:	1c42      	adds	r2, r0, #1
 8004d22:	4606      	mov	r6, r0
 8004d24:	d1d6      	bne.n	8004cd4 <_svfiprintf_r+0x174>
 8004d26:	89ab      	ldrh	r3, [r5, #12]
 8004d28:	065b      	lsls	r3, r3, #25
 8004d2a:	f53f af2d 	bmi.w	8004b88 <_svfiprintf_r+0x28>
 8004d2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d30:	e72c      	b.n	8004b8c <_svfiprintf_r+0x2c>
 8004d32:	ab03      	add	r3, sp, #12
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	462a      	mov	r2, r5
 8004d38:	4638      	mov	r0, r7
 8004d3a:	4b06      	ldr	r3, [pc, #24]	@ (8004d54 <_svfiprintf_r+0x1f4>)
 8004d3c:	a904      	add	r1, sp, #16
 8004d3e:	f000 f87d 	bl	8004e3c <_printf_i>
 8004d42:	e7ed      	b.n	8004d20 <_svfiprintf_r+0x1c0>
 8004d44:	080057e2 	.word	0x080057e2
 8004d48:	080057e8 	.word	0x080057e8
 8004d4c:	080057ec 	.word	0x080057ec
 8004d50:	00000000 	.word	0x00000000
 8004d54:	08004aa9 	.word	0x08004aa9

08004d58 <_printf_common>:
 8004d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d5c:	4616      	mov	r6, r2
 8004d5e:	4698      	mov	r8, r3
 8004d60:	688a      	ldr	r2, [r1, #8]
 8004d62:	690b      	ldr	r3, [r1, #16]
 8004d64:	4607      	mov	r7, r0
 8004d66:	4293      	cmp	r3, r2
 8004d68:	bfb8      	it	lt
 8004d6a:	4613      	movlt	r3, r2
 8004d6c:	6033      	str	r3, [r6, #0]
 8004d6e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d72:	460c      	mov	r4, r1
 8004d74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d78:	b10a      	cbz	r2, 8004d7e <_printf_common+0x26>
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	6033      	str	r3, [r6, #0]
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	0699      	lsls	r1, r3, #26
 8004d82:	bf42      	ittt	mi
 8004d84:	6833      	ldrmi	r3, [r6, #0]
 8004d86:	3302      	addmi	r3, #2
 8004d88:	6033      	strmi	r3, [r6, #0]
 8004d8a:	6825      	ldr	r5, [r4, #0]
 8004d8c:	f015 0506 	ands.w	r5, r5, #6
 8004d90:	d106      	bne.n	8004da0 <_printf_common+0x48>
 8004d92:	f104 0a19 	add.w	sl, r4, #25
 8004d96:	68e3      	ldr	r3, [r4, #12]
 8004d98:	6832      	ldr	r2, [r6, #0]
 8004d9a:	1a9b      	subs	r3, r3, r2
 8004d9c:	42ab      	cmp	r3, r5
 8004d9e:	dc2b      	bgt.n	8004df8 <_printf_common+0xa0>
 8004da0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004da4:	6822      	ldr	r2, [r4, #0]
 8004da6:	3b00      	subs	r3, #0
 8004da8:	bf18      	it	ne
 8004daa:	2301      	movne	r3, #1
 8004dac:	0692      	lsls	r2, r2, #26
 8004dae:	d430      	bmi.n	8004e12 <_printf_common+0xba>
 8004db0:	4641      	mov	r1, r8
 8004db2:	4638      	mov	r0, r7
 8004db4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004db8:	47c8      	blx	r9
 8004dba:	3001      	adds	r0, #1
 8004dbc:	d023      	beq.n	8004e06 <_printf_common+0xae>
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	6922      	ldr	r2, [r4, #16]
 8004dc2:	f003 0306 	and.w	r3, r3, #6
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	bf14      	ite	ne
 8004dca:	2500      	movne	r5, #0
 8004dcc:	6833      	ldreq	r3, [r6, #0]
 8004dce:	f04f 0600 	mov.w	r6, #0
 8004dd2:	bf08      	it	eq
 8004dd4:	68e5      	ldreq	r5, [r4, #12]
 8004dd6:	f104 041a 	add.w	r4, r4, #26
 8004dda:	bf08      	it	eq
 8004ddc:	1aed      	subeq	r5, r5, r3
 8004dde:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004de2:	bf08      	it	eq
 8004de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004de8:	4293      	cmp	r3, r2
 8004dea:	bfc4      	itt	gt
 8004dec:	1a9b      	subgt	r3, r3, r2
 8004dee:	18ed      	addgt	r5, r5, r3
 8004df0:	42b5      	cmp	r5, r6
 8004df2:	d11a      	bne.n	8004e2a <_printf_common+0xd2>
 8004df4:	2000      	movs	r0, #0
 8004df6:	e008      	b.n	8004e0a <_printf_common+0xb2>
 8004df8:	2301      	movs	r3, #1
 8004dfa:	4652      	mov	r2, sl
 8004dfc:	4641      	mov	r1, r8
 8004dfe:	4638      	mov	r0, r7
 8004e00:	47c8      	blx	r9
 8004e02:	3001      	adds	r0, #1
 8004e04:	d103      	bne.n	8004e0e <_printf_common+0xb6>
 8004e06:	f04f 30ff 	mov.w	r0, #4294967295
 8004e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e0e:	3501      	adds	r5, #1
 8004e10:	e7c1      	b.n	8004d96 <_printf_common+0x3e>
 8004e12:	2030      	movs	r0, #48	@ 0x30
 8004e14:	18e1      	adds	r1, r4, r3
 8004e16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e1a:	1c5a      	adds	r2, r3, #1
 8004e1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e20:	4422      	add	r2, r4
 8004e22:	3302      	adds	r3, #2
 8004e24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e28:	e7c2      	b.n	8004db0 <_printf_common+0x58>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	4622      	mov	r2, r4
 8004e2e:	4641      	mov	r1, r8
 8004e30:	4638      	mov	r0, r7
 8004e32:	47c8      	blx	r9
 8004e34:	3001      	adds	r0, #1
 8004e36:	d0e6      	beq.n	8004e06 <_printf_common+0xae>
 8004e38:	3601      	adds	r6, #1
 8004e3a:	e7d9      	b.n	8004df0 <_printf_common+0x98>

08004e3c <_printf_i>:
 8004e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e40:	7e0f      	ldrb	r7, [r1, #24]
 8004e42:	4691      	mov	r9, r2
 8004e44:	2f78      	cmp	r7, #120	@ 0x78
 8004e46:	4680      	mov	r8, r0
 8004e48:	460c      	mov	r4, r1
 8004e4a:	469a      	mov	sl, r3
 8004e4c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e52:	d807      	bhi.n	8004e64 <_printf_i+0x28>
 8004e54:	2f62      	cmp	r7, #98	@ 0x62
 8004e56:	d80a      	bhi.n	8004e6e <_printf_i+0x32>
 8004e58:	2f00      	cmp	r7, #0
 8004e5a:	f000 80d3 	beq.w	8005004 <_printf_i+0x1c8>
 8004e5e:	2f58      	cmp	r7, #88	@ 0x58
 8004e60:	f000 80ba 	beq.w	8004fd8 <_printf_i+0x19c>
 8004e64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e6c:	e03a      	b.n	8004ee4 <_printf_i+0xa8>
 8004e6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e72:	2b15      	cmp	r3, #21
 8004e74:	d8f6      	bhi.n	8004e64 <_printf_i+0x28>
 8004e76:	a101      	add	r1, pc, #4	@ (adr r1, 8004e7c <_printf_i+0x40>)
 8004e78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e7c:	08004ed5 	.word	0x08004ed5
 8004e80:	08004ee9 	.word	0x08004ee9
 8004e84:	08004e65 	.word	0x08004e65
 8004e88:	08004e65 	.word	0x08004e65
 8004e8c:	08004e65 	.word	0x08004e65
 8004e90:	08004e65 	.word	0x08004e65
 8004e94:	08004ee9 	.word	0x08004ee9
 8004e98:	08004e65 	.word	0x08004e65
 8004e9c:	08004e65 	.word	0x08004e65
 8004ea0:	08004e65 	.word	0x08004e65
 8004ea4:	08004e65 	.word	0x08004e65
 8004ea8:	08004feb 	.word	0x08004feb
 8004eac:	08004f13 	.word	0x08004f13
 8004eb0:	08004fa5 	.word	0x08004fa5
 8004eb4:	08004e65 	.word	0x08004e65
 8004eb8:	08004e65 	.word	0x08004e65
 8004ebc:	0800500d 	.word	0x0800500d
 8004ec0:	08004e65 	.word	0x08004e65
 8004ec4:	08004f13 	.word	0x08004f13
 8004ec8:	08004e65 	.word	0x08004e65
 8004ecc:	08004e65 	.word	0x08004e65
 8004ed0:	08004fad 	.word	0x08004fad
 8004ed4:	6833      	ldr	r3, [r6, #0]
 8004ed6:	1d1a      	adds	r2, r3, #4
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6032      	str	r2, [r6, #0]
 8004edc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ee0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e09e      	b.n	8005026 <_printf_i+0x1ea>
 8004ee8:	6833      	ldr	r3, [r6, #0]
 8004eea:	6820      	ldr	r0, [r4, #0]
 8004eec:	1d19      	adds	r1, r3, #4
 8004eee:	6031      	str	r1, [r6, #0]
 8004ef0:	0606      	lsls	r6, r0, #24
 8004ef2:	d501      	bpl.n	8004ef8 <_printf_i+0xbc>
 8004ef4:	681d      	ldr	r5, [r3, #0]
 8004ef6:	e003      	b.n	8004f00 <_printf_i+0xc4>
 8004ef8:	0645      	lsls	r5, r0, #25
 8004efa:	d5fb      	bpl.n	8004ef4 <_printf_i+0xb8>
 8004efc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f00:	2d00      	cmp	r5, #0
 8004f02:	da03      	bge.n	8004f0c <_printf_i+0xd0>
 8004f04:	232d      	movs	r3, #45	@ 0x2d
 8004f06:	426d      	negs	r5, r5
 8004f08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f0c:	230a      	movs	r3, #10
 8004f0e:	4859      	ldr	r0, [pc, #356]	@ (8005074 <_printf_i+0x238>)
 8004f10:	e011      	b.n	8004f36 <_printf_i+0xfa>
 8004f12:	6821      	ldr	r1, [r4, #0]
 8004f14:	6833      	ldr	r3, [r6, #0]
 8004f16:	0608      	lsls	r0, r1, #24
 8004f18:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f1c:	d402      	bmi.n	8004f24 <_printf_i+0xe8>
 8004f1e:	0649      	lsls	r1, r1, #25
 8004f20:	bf48      	it	mi
 8004f22:	b2ad      	uxthmi	r5, r5
 8004f24:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f26:	6033      	str	r3, [r6, #0]
 8004f28:	bf14      	ite	ne
 8004f2a:	230a      	movne	r3, #10
 8004f2c:	2308      	moveq	r3, #8
 8004f2e:	4851      	ldr	r0, [pc, #324]	@ (8005074 <_printf_i+0x238>)
 8004f30:	2100      	movs	r1, #0
 8004f32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f36:	6866      	ldr	r6, [r4, #4]
 8004f38:	2e00      	cmp	r6, #0
 8004f3a:	bfa8      	it	ge
 8004f3c:	6821      	ldrge	r1, [r4, #0]
 8004f3e:	60a6      	str	r6, [r4, #8]
 8004f40:	bfa4      	itt	ge
 8004f42:	f021 0104 	bicge.w	r1, r1, #4
 8004f46:	6021      	strge	r1, [r4, #0]
 8004f48:	b90d      	cbnz	r5, 8004f4e <_printf_i+0x112>
 8004f4a:	2e00      	cmp	r6, #0
 8004f4c:	d04b      	beq.n	8004fe6 <_printf_i+0x1aa>
 8004f4e:	4616      	mov	r6, r2
 8004f50:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f54:	fb03 5711 	mls	r7, r3, r1, r5
 8004f58:	5dc7      	ldrb	r7, [r0, r7]
 8004f5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f5e:	462f      	mov	r7, r5
 8004f60:	42bb      	cmp	r3, r7
 8004f62:	460d      	mov	r5, r1
 8004f64:	d9f4      	bls.n	8004f50 <_printf_i+0x114>
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d10b      	bne.n	8004f82 <_printf_i+0x146>
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	07df      	lsls	r7, r3, #31
 8004f6e:	d508      	bpl.n	8004f82 <_printf_i+0x146>
 8004f70:	6923      	ldr	r3, [r4, #16]
 8004f72:	6861      	ldr	r1, [r4, #4]
 8004f74:	4299      	cmp	r1, r3
 8004f76:	bfde      	ittt	le
 8004f78:	2330      	movle	r3, #48	@ 0x30
 8004f7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f82:	1b92      	subs	r2, r2, r6
 8004f84:	6122      	str	r2, [r4, #16]
 8004f86:	464b      	mov	r3, r9
 8004f88:	4621      	mov	r1, r4
 8004f8a:	4640      	mov	r0, r8
 8004f8c:	f8cd a000 	str.w	sl, [sp]
 8004f90:	aa03      	add	r2, sp, #12
 8004f92:	f7ff fee1 	bl	8004d58 <_printf_common>
 8004f96:	3001      	adds	r0, #1
 8004f98:	d14a      	bne.n	8005030 <_printf_i+0x1f4>
 8004f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f9e:	b004      	add	sp, #16
 8004fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	f043 0320 	orr.w	r3, r3, #32
 8004faa:	6023      	str	r3, [r4, #0]
 8004fac:	2778      	movs	r7, #120	@ 0x78
 8004fae:	4832      	ldr	r0, [pc, #200]	@ (8005078 <_printf_i+0x23c>)
 8004fb0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fb4:	6823      	ldr	r3, [r4, #0]
 8004fb6:	6831      	ldr	r1, [r6, #0]
 8004fb8:	061f      	lsls	r7, r3, #24
 8004fba:	f851 5b04 	ldr.w	r5, [r1], #4
 8004fbe:	d402      	bmi.n	8004fc6 <_printf_i+0x18a>
 8004fc0:	065f      	lsls	r7, r3, #25
 8004fc2:	bf48      	it	mi
 8004fc4:	b2ad      	uxthmi	r5, r5
 8004fc6:	6031      	str	r1, [r6, #0]
 8004fc8:	07d9      	lsls	r1, r3, #31
 8004fca:	bf44      	itt	mi
 8004fcc:	f043 0320 	orrmi.w	r3, r3, #32
 8004fd0:	6023      	strmi	r3, [r4, #0]
 8004fd2:	b11d      	cbz	r5, 8004fdc <_printf_i+0x1a0>
 8004fd4:	2310      	movs	r3, #16
 8004fd6:	e7ab      	b.n	8004f30 <_printf_i+0xf4>
 8004fd8:	4826      	ldr	r0, [pc, #152]	@ (8005074 <_printf_i+0x238>)
 8004fda:	e7e9      	b.n	8004fb0 <_printf_i+0x174>
 8004fdc:	6823      	ldr	r3, [r4, #0]
 8004fde:	f023 0320 	bic.w	r3, r3, #32
 8004fe2:	6023      	str	r3, [r4, #0]
 8004fe4:	e7f6      	b.n	8004fd4 <_printf_i+0x198>
 8004fe6:	4616      	mov	r6, r2
 8004fe8:	e7bd      	b.n	8004f66 <_printf_i+0x12a>
 8004fea:	6833      	ldr	r3, [r6, #0]
 8004fec:	6825      	ldr	r5, [r4, #0]
 8004fee:	1d18      	adds	r0, r3, #4
 8004ff0:	6961      	ldr	r1, [r4, #20]
 8004ff2:	6030      	str	r0, [r6, #0]
 8004ff4:	062e      	lsls	r6, r5, #24
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	d501      	bpl.n	8004ffe <_printf_i+0x1c2>
 8004ffa:	6019      	str	r1, [r3, #0]
 8004ffc:	e002      	b.n	8005004 <_printf_i+0x1c8>
 8004ffe:	0668      	lsls	r0, r5, #25
 8005000:	d5fb      	bpl.n	8004ffa <_printf_i+0x1be>
 8005002:	8019      	strh	r1, [r3, #0]
 8005004:	2300      	movs	r3, #0
 8005006:	4616      	mov	r6, r2
 8005008:	6123      	str	r3, [r4, #16]
 800500a:	e7bc      	b.n	8004f86 <_printf_i+0x14a>
 800500c:	6833      	ldr	r3, [r6, #0]
 800500e:	2100      	movs	r1, #0
 8005010:	1d1a      	adds	r2, r3, #4
 8005012:	6032      	str	r2, [r6, #0]
 8005014:	681e      	ldr	r6, [r3, #0]
 8005016:	6862      	ldr	r2, [r4, #4]
 8005018:	4630      	mov	r0, r6
 800501a:	f000 f859 	bl	80050d0 <memchr>
 800501e:	b108      	cbz	r0, 8005024 <_printf_i+0x1e8>
 8005020:	1b80      	subs	r0, r0, r6
 8005022:	6060      	str	r0, [r4, #4]
 8005024:	6863      	ldr	r3, [r4, #4]
 8005026:	6123      	str	r3, [r4, #16]
 8005028:	2300      	movs	r3, #0
 800502a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800502e:	e7aa      	b.n	8004f86 <_printf_i+0x14a>
 8005030:	4632      	mov	r2, r6
 8005032:	4649      	mov	r1, r9
 8005034:	4640      	mov	r0, r8
 8005036:	6923      	ldr	r3, [r4, #16]
 8005038:	47d0      	blx	sl
 800503a:	3001      	adds	r0, #1
 800503c:	d0ad      	beq.n	8004f9a <_printf_i+0x15e>
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	079b      	lsls	r3, r3, #30
 8005042:	d413      	bmi.n	800506c <_printf_i+0x230>
 8005044:	68e0      	ldr	r0, [r4, #12]
 8005046:	9b03      	ldr	r3, [sp, #12]
 8005048:	4298      	cmp	r0, r3
 800504a:	bfb8      	it	lt
 800504c:	4618      	movlt	r0, r3
 800504e:	e7a6      	b.n	8004f9e <_printf_i+0x162>
 8005050:	2301      	movs	r3, #1
 8005052:	4632      	mov	r2, r6
 8005054:	4649      	mov	r1, r9
 8005056:	4640      	mov	r0, r8
 8005058:	47d0      	blx	sl
 800505a:	3001      	adds	r0, #1
 800505c:	d09d      	beq.n	8004f9a <_printf_i+0x15e>
 800505e:	3501      	adds	r5, #1
 8005060:	68e3      	ldr	r3, [r4, #12]
 8005062:	9903      	ldr	r1, [sp, #12]
 8005064:	1a5b      	subs	r3, r3, r1
 8005066:	42ab      	cmp	r3, r5
 8005068:	dcf2      	bgt.n	8005050 <_printf_i+0x214>
 800506a:	e7eb      	b.n	8005044 <_printf_i+0x208>
 800506c:	2500      	movs	r5, #0
 800506e:	f104 0619 	add.w	r6, r4, #25
 8005072:	e7f5      	b.n	8005060 <_printf_i+0x224>
 8005074:	080057f3 	.word	0x080057f3
 8005078:	08005804 	.word	0x08005804

0800507c <memmove>:
 800507c:	4288      	cmp	r0, r1
 800507e:	b510      	push	{r4, lr}
 8005080:	eb01 0402 	add.w	r4, r1, r2
 8005084:	d902      	bls.n	800508c <memmove+0x10>
 8005086:	4284      	cmp	r4, r0
 8005088:	4623      	mov	r3, r4
 800508a:	d807      	bhi.n	800509c <memmove+0x20>
 800508c:	1e43      	subs	r3, r0, #1
 800508e:	42a1      	cmp	r1, r4
 8005090:	d008      	beq.n	80050a4 <memmove+0x28>
 8005092:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005096:	f803 2f01 	strb.w	r2, [r3, #1]!
 800509a:	e7f8      	b.n	800508e <memmove+0x12>
 800509c:	4601      	mov	r1, r0
 800509e:	4402      	add	r2, r0
 80050a0:	428a      	cmp	r2, r1
 80050a2:	d100      	bne.n	80050a6 <memmove+0x2a>
 80050a4:	bd10      	pop	{r4, pc}
 80050a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050ae:	e7f7      	b.n	80050a0 <memmove+0x24>

080050b0 <_sbrk_r>:
 80050b0:	b538      	push	{r3, r4, r5, lr}
 80050b2:	2300      	movs	r3, #0
 80050b4:	4d05      	ldr	r5, [pc, #20]	@ (80050cc <_sbrk_r+0x1c>)
 80050b6:	4604      	mov	r4, r0
 80050b8:	4608      	mov	r0, r1
 80050ba:	602b      	str	r3, [r5, #0]
 80050bc:	f7fb ff40 	bl	8000f40 <_sbrk>
 80050c0:	1c43      	adds	r3, r0, #1
 80050c2:	d102      	bne.n	80050ca <_sbrk_r+0x1a>
 80050c4:	682b      	ldr	r3, [r5, #0]
 80050c6:	b103      	cbz	r3, 80050ca <_sbrk_r+0x1a>
 80050c8:	6023      	str	r3, [r4, #0]
 80050ca:	bd38      	pop	{r3, r4, r5, pc}
 80050cc:	200006cc 	.word	0x200006cc

080050d0 <memchr>:
 80050d0:	4603      	mov	r3, r0
 80050d2:	b510      	push	{r4, lr}
 80050d4:	b2c9      	uxtb	r1, r1
 80050d6:	4402      	add	r2, r0
 80050d8:	4293      	cmp	r3, r2
 80050da:	4618      	mov	r0, r3
 80050dc:	d101      	bne.n	80050e2 <memchr+0x12>
 80050de:	2000      	movs	r0, #0
 80050e0:	e003      	b.n	80050ea <memchr+0x1a>
 80050e2:	7804      	ldrb	r4, [r0, #0]
 80050e4:	3301      	adds	r3, #1
 80050e6:	428c      	cmp	r4, r1
 80050e8:	d1f6      	bne.n	80050d8 <memchr+0x8>
 80050ea:	bd10      	pop	{r4, pc}

080050ec <_realloc_r>:
 80050ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050f0:	4680      	mov	r8, r0
 80050f2:	4615      	mov	r5, r2
 80050f4:	460c      	mov	r4, r1
 80050f6:	b921      	cbnz	r1, 8005102 <_realloc_r+0x16>
 80050f8:	4611      	mov	r1, r2
 80050fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050fe:	f7ff bc47 	b.w	8004990 <_malloc_r>
 8005102:	b92a      	cbnz	r2, 8005110 <_realloc_r+0x24>
 8005104:	f7ff fbda 	bl	80048bc <_free_r>
 8005108:	2400      	movs	r4, #0
 800510a:	4620      	mov	r0, r4
 800510c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005110:	f000 f81a 	bl	8005148 <_malloc_usable_size_r>
 8005114:	4285      	cmp	r5, r0
 8005116:	4606      	mov	r6, r0
 8005118:	d802      	bhi.n	8005120 <_realloc_r+0x34>
 800511a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800511e:	d8f4      	bhi.n	800510a <_realloc_r+0x1e>
 8005120:	4629      	mov	r1, r5
 8005122:	4640      	mov	r0, r8
 8005124:	f7ff fc34 	bl	8004990 <_malloc_r>
 8005128:	4607      	mov	r7, r0
 800512a:	2800      	cmp	r0, #0
 800512c:	d0ec      	beq.n	8005108 <_realloc_r+0x1c>
 800512e:	42b5      	cmp	r5, r6
 8005130:	462a      	mov	r2, r5
 8005132:	4621      	mov	r1, r4
 8005134:	bf28      	it	cs
 8005136:	4632      	movcs	r2, r6
 8005138:	f7ff fbb2 	bl	80048a0 <memcpy>
 800513c:	4621      	mov	r1, r4
 800513e:	4640      	mov	r0, r8
 8005140:	f7ff fbbc 	bl	80048bc <_free_r>
 8005144:	463c      	mov	r4, r7
 8005146:	e7e0      	b.n	800510a <_realloc_r+0x1e>

08005148 <_malloc_usable_size_r>:
 8005148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800514c:	1f18      	subs	r0, r3, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	bfbc      	itt	lt
 8005152:	580b      	ldrlt	r3, [r1, r0]
 8005154:	18c0      	addlt	r0, r0, r3
 8005156:	4770      	bx	lr

08005158 <_init>:
 8005158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515a:	bf00      	nop
 800515c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800515e:	bc08      	pop	{r3}
 8005160:	469e      	mov	lr, r3
 8005162:	4770      	bx	lr

08005164 <_fini>:
 8005164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005166:	bf00      	nop
 8005168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800516a:	bc08      	pop	{r3}
 800516c:	469e      	mov	lr, r3
 800516e:	4770      	bx	lr
