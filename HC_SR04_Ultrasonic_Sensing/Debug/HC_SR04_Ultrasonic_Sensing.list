
HC_SR04_Ultrasonic_Sensing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004600  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  0800470c  0800470c  0000570c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004da8  08004da8  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  08004da8  08004da8  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004da8  08004da8  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004da8  08004da8  00005da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004dac  08004dac  00005dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004db0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  2000005c  08004e0c  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000688  08004e0c  00006688  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2c8  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026b7  00000000  00000000  0001434d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00016a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be6  00000000  00000000  00017970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d1d  00000000  00000000  00018556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001305f  00000000  00000000  00031273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008db6a  00000000  00000000  000442d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1e3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044d0  00000000  00000000  000d1e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000d6350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080046f4 	.word	0x080046f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080046f4 	.word	0x080046f4

0800014c <HC_SR04_Init>:

static inline void DWT_Delay_Init(void);
static inline void delay_us(uint32_t us);

void HC_SR04_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000150:	f000 f82e 	bl	80001b0 <DWT_Delay_Init>
}
 8000154:	bf00      	nop
 8000156:	bd80      	pop	{r7, pc}

08000158 <HC_SR04_Trigger>:

void HC_SR04_Trigger(void)
{
 8000158:	b580      	push	{r7, lr}
 800015a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);
 800015c:	2201      	movs	r2, #1
 800015e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000162:	4807      	ldr	r0, [pc, #28]	@ (8000180 <HC_SR04_Trigger+0x28>)
 8000164:	f001 f9bc 	bl	80014e0 <HAL_GPIO_WritePin>
	  delay_us(10);
 8000168:	200a      	movs	r0, #10
 800016a:	f000 f83b 	bl	80001e4 <delay_us>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
 800016e:	2200      	movs	r2, #0
 8000170:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000174:	4802      	ldr	r0, [pc, #8]	@ (8000180 <HC_SR04_Trigger+0x28>)
 8000176:	f001 f9b3 	bl	80014e0 <HAL_GPIO_WritePin>
}
 800017a:	bf00      	nop
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	40010800 	.word	0x40010800

08000184 <HC_SR04_Distance_Calculate>:

uint16_t HC_SR04_Distance_Calculate(uint32_t pulse_us)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
	return (pulse_us+1) * 340/20000U;
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	3301      	adds	r3, #1
 8000190:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8000194:	fb02 f303 	mul.w	r3, r2, r3
 8000198:	4a04      	ldr	r2, [pc, #16]	@ (80001ac <HC_SR04_Distance_Calculate+0x28>)
 800019a:	fba2 2303 	umull	r2, r3, r2, r3
 800019e:	0b9b      	lsrs	r3, r3, #14
 80001a0:	b29b      	uxth	r3, r3
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	d1b71759 	.word	0xd1b71759

080001b0 <DWT_Delay_Init>:

static inline void DWT_Delay_Init(void){
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80001b4:	4b09      	ldr	r3, [pc, #36]	@ (80001dc <DWT_Delay_Init+0x2c>)
 80001b6:	68db      	ldr	r3, [r3, #12]
 80001b8:	4a08      	ldr	r2, [pc, #32]	@ (80001dc <DWT_Delay_Init+0x2c>)
 80001ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80001be:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 80001c0:	4b07      	ldr	r3, [pc, #28]	@ (80001e0 <DWT_Delay_Init+0x30>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80001c6:	4b06      	ldr	r3, [pc, #24]	@ (80001e0 <DWT_Delay_Init+0x30>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	4a05      	ldr	r2, [pc, #20]	@ (80001e0 <DWT_Delay_Init+0x30>)
 80001cc:	f043 0301 	orr.w	r3, r3, #1
 80001d0:	6013      	str	r3, [r2, #0]
}
 80001d2:	bf00      	nop
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	e000edf0 	.word	0xe000edf0
 80001e0:	e0001000 	.word	0xe0001000

080001e4 <delay_us>:

static inline void delay_us(uint32_t us){
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 80001ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000224 <delay_us+0x40>)
 80001ee:	685b      	ldr	r3, [r3, #4]
 80001f0:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * (SystemCoreClock/1000000U);
 80001f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000228 <delay_us+0x44>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a0d      	ldr	r2, [pc, #52]	@ (800022c <delay_us+0x48>)
 80001f8:	fba2 2303 	umull	r2, r3, r2, r3
 80001fc:	0c9a      	lsrs	r2, r3, #18
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	fb02 f303 	mul.w	r3, r2, r3
 8000204:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks);
 8000206:	bf00      	nop
 8000208:	4b06      	ldr	r3, [pc, #24]	@ (8000224 <delay_us+0x40>)
 800020a:	685a      	ldr	r2, [r3, #4]
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	1ad3      	subs	r3, r2, r3
 8000210:	68ba      	ldr	r2, [r7, #8]
 8000212:	429a      	cmp	r2, r3
 8000214:	d8f8      	bhi.n	8000208 <delay_us+0x24>
}
 8000216:	bf00      	nop
 8000218:	bf00      	nop
 800021a:	3714      	adds	r7, #20
 800021c:	46bd      	mov	sp, r7
 800021e:	bc80      	pop	{r7}
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	e0001000 	.word	0xe0001000
 8000228:	20000000 	.word	0x20000000
 800022c:	431bde83 	.word	0x431bde83

08000230 <oled_init>:
#include "stdio.h"
#include "main.h"


// OLED Initialization Function
void oled_init(void) {
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8000234:	f000 f874 	bl	8000320 <ssd1306_Init>
}
 8000238:	bf00      	nop
 800023a:	bd80      	pop	{r7, pc}

0800023c <oled_display_wavelength_and_distance>:


void oled_display_wavelength_and_distance(int wavelength, int distance)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b08c      	sub	sp, #48	@ 0x30
 8000240:	af02      	add	r7, sp, #8
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
    char buffer[30];
    ssd1306_Fill(Black);
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f8d4 	bl	80003f4 <ssd1306_Fill>

    ssd1306_SetCursor(2, 2);
 800024c:	2102      	movs	r1, #2
 800024e:	2002      	movs	r0, #2
 8000250:	f000 fa18 	bl	8000684 <ssd1306_SetCursor>
    sprintf(buffer, "wavelength: %d microseconds", wavelength);  // use %d for int
 8000254:	f107 0308 	add.w	r3, r7, #8
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	4912      	ldr	r1, [pc, #72]	@ (80002a4 <oled_display_wavelength_and_distance+0x68>)
 800025c:	4618      	mov	r0, r3
 800025e:	f003 fd99 	bl	8003d94 <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 8000262:	4b11      	ldr	r3, [pc, #68]	@ (80002a8 <oled_display_wavelength_and_distance+0x6c>)
 8000264:	f107 0008 	add.w	r0, r7, #8
 8000268:	2201      	movs	r2, #1
 800026a:	9200      	str	r2, [sp, #0]
 800026c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800026e:	f000 f9e3 	bl	8000638 <ssd1306_WriteString>

    ssd1306_SetCursor(2, 12);
 8000272:	210c      	movs	r1, #12
 8000274:	2002      	movs	r0, #2
 8000276:	f000 fa05 	bl	8000684 <ssd1306_SetCursor>
    sprintf(buffer, "distance: %d cm", distance);      // use %% to print literal '%'
 800027a:	f107 0308 	add.w	r3, r7, #8
 800027e:	683a      	ldr	r2, [r7, #0]
 8000280:	490a      	ldr	r1, [pc, #40]	@ (80002ac <oled_display_wavelength_and_distance+0x70>)
 8000282:	4618      	mov	r0, r3
 8000284:	f003 fd86 	bl	8003d94 <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 8000288:	4b07      	ldr	r3, [pc, #28]	@ (80002a8 <oled_display_wavelength_and_distance+0x6c>)
 800028a:	f107 0008 	add.w	r0, r7, #8
 800028e:	2201      	movs	r2, #1
 8000290:	9200      	str	r2, [sp, #0]
 8000292:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000294:	f000 f9d0 	bl	8000638 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8000298:	f000 f8c4 	bl	8000424 <ssd1306_UpdateScreen>
}
 800029c:	bf00      	nop
 800029e:	3728      	adds	r7, #40	@ 0x28
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	0800470c 	.word	0x0800470c
 80002a8:	08004d28 	.word	0x08004d28
 80002ac:	08004728 	.word	0x08004728

080002b0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr

080002bc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	b086      	sub	sp, #24
 80002c0:	af04      	add	r7, sp, #16
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1,
 80002c6:	f04f 33ff 	mov.w	r3, #4294967295
 80002ca:	9302      	str	r3, [sp, #8]
 80002cc:	2301      	movs	r3, #1
 80002ce:	9301      	str	r3, [sp, #4]
 80002d0:	1dfb      	adds	r3, r7, #7
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	2301      	movs	r3, #1
 80002d6:	2200      	movs	r2, #0
 80002d8:	2178      	movs	r1, #120	@ 0x78
 80002da:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <ssd1306_WriteCommand+0x2c>)
 80002dc:	f001 fa5c 	bl	8001798 <HAL_I2C_Mem_Write>
			HAL_MAX_DELAY);
}
 80002e0:	bf00      	nop
 80002e2:	3708      	adds	r7, #8
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20000480 	.word	0x20000480

080002ec <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t *buffer, size_t buff_size) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b086      	sub	sp, #24
 80002f0:	af04      	add	r7, sp, #16
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer,
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	b29b      	uxth	r3, r3
 80002fa:	f04f 32ff 	mov.w	r2, #4294967295
 80002fe:	9202      	str	r2, [sp, #8]
 8000300:	9301      	str	r3, [sp, #4]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	9300      	str	r3, [sp, #0]
 8000306:	2301      	movs	r3, #1
 8000308:	2240      	movs	r2, #64	@ 0x40
 800030a:	2178      	movs	r1, #120	@ 0x78
 800030c:	4803      	ldr	r0, [pc, #12]	@ (800031c <ssd1306_WriteData+0x30>)
 800030e:	f001 fa43 	bl	8001798 <HAL_I2C_Mem_Write>
			buff_size, HAL_MAX_DELAY);
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000480 	.word	0x20000480

08000320 <ssd1306_Init>:
	}
	return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8000324:	f7ff ffc4 	bl	80002b0 <ssd1306_Reset>

	// Wait for the screen to boot
	HAL_Delay(100);
 8000328:	2064      	movs	r0, #100	@ 0x64
 800032a:	f000 fe07 	bl	8000f3c <HAL_Delay>

	// Init OLED
	ssd1306_SetDisplayOn(0); //display off
 800032e:	2000      	movs	r0, #0
 8000330:	f000 f9d4 	bl	80006dc <ssd1306_SetDisplayOn>

	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000334:	2020      	movs	r0, #32
 8000336:	f7ff ffc1 	bl	80002bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800033a:	2000      	movs	r0, #0
 800033c:	f7ff ffbe 	bl	80002bc <ssd1306_WriteCommand>
								// 10b,Page Addressing Mode (RESET); 11b,Invalid

	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000340:	20b0      	movs	r0, #176	@ 0xb0
 8000342:	f7ff ffbb 	bl	80002bc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000346:	20c8      	movs	r0, #200	@ 0xc8
 8000348:	f7ff ffb8 	bl	80002bc <ssd1306_WriteCommand>
#endif

	ssd1306_WriteCommand(0x00); //---set low column address
 800034c:	2000      	movs	r0, #0
 800034e:	f7ff ffb5 	bl	80002bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8000352:	2010      	movs	r0, #16
 8000354:	f7ff ffb2 	bl	80002bc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000358:	2040      	movs	r0, #64	@ 0x40
 800035a:	f7ff ffaf 	bl	80002bc <ssd1306_WriteCommand>

	ssd1306_SetContrast(0xFF);
 800035e:	20ff      	movs	r0, #255	@ 0xff
 8000360:	f000 f9a8 	bl	80006b4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000364:	20a1      	movs	r0, #161	@ 0xa1
 8000366:	f7ff ffa9 	bl	80002bc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
	ssd1306_WriteCommand(0xA6); //--set normal color
 800036a:	20a6      	movs	r0, #166	@ 0xa6
 800036c:	f7ff ffa6 	bl	80002bc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000370:	20a8      	movs	r0, #168	@ 0xa8
 8000372:	f7ff ffa3 	bl	80002bc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x3F); //
 8000376:	203f      	movs	r0, #63	@ 0x3f
 8000378:	f7ff ffa0 	bl	80002bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800037c:	20a4      	movs	r0, #164	@ 0xa4
 800037e:	f7ff ff9d 	bl	80002bc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000382:	20d3      	movs	r0, #211	@ 0xd3
 8000384:	f7ff ff9a 	bl	80002bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8000388:	2000      	movs	r0, #0
 800038a:	f7ff ff97 	bl	80002bc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800038e:	20d5      	movs	r0, #213	@ 0xd5
 8000390:	f7ff ff94 	bl	80002bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000394:	20f0      	movs	r0, #240	@ 0xf0
 8000396:	f7ff ff91 	bl	80002bc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800039a:	20d9      	movs	r0, #217	@ 0xd9
 800039c:	f7ff ff8e 	bl	80002bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80003a0:	2022      	movs	r0, #34	@ 0x22
 80003a2:	f7ff ff8b 	bl	80002bc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80003a6:	20da      	movs	r0, #218	@ 0xda
 80003a8:	f7ff ff88 	bl	80002bc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x12);
 80003ac:	2012      	movs	r0, #18
 80003ae:	f7ff ff85 	bl	80002bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xDB); //--set vcomh
 80003b2:	20db      	movs	r0, #219	@ 0xdb
 80003b4:	f7ff ff82 	bl	80002bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80003b8:	2020      	movs	r0, #32
 80003ba:	f7ff ff7f 	bl	80002bc <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80003be:	208d      	movs	r0, #141	@ 0x8d
 80003c0:	f7ff ff7c 	bl	80002bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 80003c4:	2014      	movs	r0, #20
 80003c6:	f7ff ff79 	bl	80002bc <ssd1306_WriteCommand>
	ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80003ca:	2001      	movs	r0, #1
 80003cc:	f000 f986 	bl	80006dc <ssd1306_SetDisplayOn>

	// Clear screen
	ssd1306_Fill(Black);
 80003d0:	2000      	movs	r0, #0
 80003d2:	f000 f80f 	bl	80003f4 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 80003d6:	f000 f825 	bl	8000424 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 80003da:	4b05      	ldr	r3, [pc, #20]	@ (80003f0 <ssd1306_Init+0xd0>)
 80003dc:	2200      	movs	r2, #0
 80003de:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80003e0:	4b03      	ldr	r3, [pc, #12]	@ (80003f0 <ssd1306_Init+0xd0>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 80003e6:	4b02      	ldr	r3, [pc, #8]	@ (80003f0 <ssd1306_Init+0xd0>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	711a      	strb	r2, [r3, #4]
}
 80003ec:	bf00      	nop
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000478 	.word	0x20000478

080003f4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF,
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d101      	bne.n	8000408 <ssd1306_Fill+0x14>
 8000404:	2300      	movs	r3, #0
 8000406:	e000      	b.n	800040a <ssd1306_Fill+0x16>
 8000408:	23ff      	movs	r3, #255	@ 0xff
 800040a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800040e:	4619      	mov	r1, r3
 8000410:	4803      	ldr	r0, [pc, #12]	@ (8000420 <ssd1306_Fill+0x2c>)
 8000412:	f003 fcdf 	bl	8003dd4 <memset>
			sizeof(SSD1306_Buffer));
}
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	20000078 	.word	0x20000078

08000424 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
	// depends on the screen height:
	//
	//  * 32px   ==  4 pages
	//  * 64px   ==  8 pages
	//  * 128px  ==  16 pages
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 800042a:	2300      	movs	r3, #0
 800042c:	71fb      	strb	r3, [r7, #7]
 800042e:	e016      	b.n	800045e <ssd1306_UpdateScreen+0x3a>
		ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000430:	79fb      	ldrb	r3, [r7, #7]
 8000432:	3b50      	subs	r3, #80	@ 0x50
 8000434:	b2db      	uxtb	r3, r3
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff ff40 	bl	80002bc <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800043c:	2000      	movs	r0, #0
 800043e:	f7ff ff3d 	bl	80002bc <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000442:	2010      	movs	r0, #16
 8000444:	f7ff ff3a 	bl	80002bc <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	01db      	lsls	r3, r3, #7
 800044c:	4a08      	ldr	r2, [pc, #32]	@ (8000470 <ssd1306_UpdateScreen+0x4c>)
 800044e:	4413      	add	r3, r2
 8000450:	2180      	movs	r1, #128	@ 0x80
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff ff4a 	bl	80002ec <ssd1306_WriteData>
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++) {
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	3301      	adds	r3, #1
 800045c:	71fb      	strb	r3, [r7, #7]
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	2b07      	cmp	r3, #7
 8000462:	d9e5      	bls.n	8000430 <ssd1306_UpdateScreen+0xc>
	}
}
 8000464:	bf00      	nop
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000078 	.word	0x20000078

08000474 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
 800047e:	460b      	mov	r3, r1
 8000480:	71bb      	strb	r3, [r7, #6]
 8000482:	4613      	mov	r3, r2
 8000484:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800048a:	2b00      	cmp	r3, #0
 800048c:	db3d      	blt.n	800050a <ssd1306_DrawPixel+0x96>
 800048e:	79bb      	ldrb	r3, [r7, #6]
 8000490:	2b3f      	cmp	r3, #63	@ 0x3f
 8000492:	d83a      	bhi.n	800050a <ssd1306_DrawPixel+0x96>
		// Don't write outside the buffer
		return;
	}

	// Draw in the right color
	if (color == White) {
 8000494:	797b      	ldrb	r3, [r7, #5]
 8000496:	2b01      	cmp	r3, #1
 8000498:	d11a      	bne.n	80004d0 <ssd1306_DrawPixel+0x5c>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800049a:	79fa      	ldrb	r2, [r7, #7]
 800049c:	79bb      	ldrb	r3, [r7, #6]
 800049e:	08db      	lsrs	r3, r3, #3
 80004a0:	b2d8      	uxtb	r0, r3
 80004a2:	4603      	mov	r3, r0
 80004a4:	01db      	lsls	r3, r3, #7
 80004a6:	4413      	add	r3, r2
 80004a8:	4a1a      	ldr	r2, [pc, #104]	@ (8000514 <ssd1306_DrawPixel+0xa0>)
 80004aa:	5cd3      	ldrb	r3, [r2, r3]
 80004ac:	b25a      	sxtb	r2, r3
 80004ae:	79bb      	ldrb	r3, [r7, #6]
 80004b0:	f003 0307 	and.w	r3, r3, #7
 80004b4:	2101      	movs	r1, #1
 80004b6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ba:	b25b      	sxtb	r3, r3
 80004bc:	4313      	orrs	r3, r2
 80004be:	b259      	sxtb	r1, r3
 80004c0:	79fa      	ldrb	r2, [r7, #7]
 80004c2:	4603      	mov	r3, r0
 80004c4:	01db      	lsls	r3, r3, #7
 80004c6:	4413      	add	r3, r2
 80004c8:	b2c9      	uxtb	r1, r1
 80004ca:	4a12      	ldr	r2, [pc, #72]	@ (8000514 <ssd1306_DrawPixel+0xa0>)
 80004cc:	54d1      	strb	r1, [r2, r3]
 80004ce:	e01d      	b.n	800050c <ssd1306_DrawPixel+0x98>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80004d0:	79fa      	ldrb	r2, [r7, #7]
 80004d2:	79bb      	ldrb	r3, [r7, #6]
 80004d4:	08db      	lsrs	r3, r3, #3
 80004d6:	b2d8      	uxtb	r0, r3
 80004d8:	4603      	mov	r3, r0
 80004da:	01db      	lsls	r3, r3, #7
 80004dc:	4413      	add	r3, r2
 80004de:	4a0d      	ldr	r2, [pc, #52]	@ (8000514 <ssd1306_DrawPixel+0xa0>)
 80004e0:	5cd3      	ldrb	r3, [r2, r3]
 80004e2:	b25a      	sxtb	r2, r3
 80004e4:	79bb      	ldrb	r3, [r7, #6]
 80004e6:	f003 0307 	and.w	r3, r3, #7
 80004ea:	2101      	movs	r1, #1
 80004ec:	fa01 f303 	lsl.w	r3, r1, r3
 80004f0:	b25b      	sxtb	r3, r3
 80004f2:	43db      	mvns	r3, r3
 80004f4:	b25b      	sxtb	r3, r3
 80004f6:	4013      	ands	r3, r2
 80004f8:	b259      	sxtb	r1, r3
 80004fa:	79fa      	ldrb	r2, [r7, #7]
 80004fc:	4603      	mov	r3, r0
 80004fe:	01db      	lsls	r3, r3, #7
 8000500:	4413      	add	r3, r2
 8000502:	b2c9      	uxtb	r1, r1
 8000504:	4a03      	ldr	r2, [pc, #12]	@ (8000514 <ssd1306_DrawPixel+0xa0>)
 8000506:	54d1      	strb	r1, [r2, r3]
 8000508:	e000      	b.n	800050c <ssd1306_DrawPixel+0x98>
		return;
 800050a:	bf00      	nop
	}
}
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	20000078 	.word	0x20000078

08000518 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b089      	sub	sp, #36	@ 0x24
 800051c:	af00      	add	r7, sp, #0
 800051e:	4604      	mov	r4, r0
 8000520:	4638      	mov	r0, r7
 8000522:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000526:	4623      	mov	r3, r4
 8000528:	73fb      	strb	r3, [r7, #15]
	uint32_t i, b, j;

	// Check if character is valid
	if (ch < 32 || ch > 126)
 800052a:	7bfb      	ldrb	r3, [r7, #15]
 800052c:	2b1f      	cmp	r3, #31
 800052e:	d902      	bls.n	8000536 <ssd1306_WriteChar+0x1e>
 8000530:	7bfb      	ldrb	r3, [r7, #15]
 8000532:	2b7e      	cmp	r3, #126	@ 0x7e
 8000534:	d901      	bls.n	800053a <ssd1306_WriteChar+0x22>
		return 0;
 8000536:	2300      	movs	r3, #0
 8000538:	e077      	b.n	800062a <ssd1306_WriteChar+0x112>

	// Check remaining space on current line
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800053a:	4b3e      	ldr	r3, [pc, #248]	@ (8000634 <ssd1306_WriteChar+0x11c>)
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	461a      	mov	r2, r3
 8000540:	783b      	ldrb	r3, [r7, #0]
 8000542:	4413      	add	r3, r2
 8000544:	2b80      	cmp	r3, #128	@ 0x80
 8000546:	dc06      	bgt.n	8000556 <ssd1306_WriteChar+0x3e>
	SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height)) {
 8000548:	4b3a      	ldr	r3, [pc, #232]	@ (8000634 <ssd1306_WriteChar+0x11c>)
 800054a:	885b      	ldrh	r3, [r3, #2]
 800054c:	461a      	mov	r2, r3
 800054e:	787b      	ldrb	r3, [r7, #1]
 8000550:	4413      	add	r3, r2
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000552:	2b40      	cmp	r3, #64	@ 0x40
 8000554:	dd01      	ble.n	800055a <ssd1306_WriteChar+0x42>
		// Not enough space on current line
		return 0;
 8000556:	2300      	movs	r3, #0
 8000558:	e067      	b.n	800062a <ssd1306_WriteChar+0x112>
	}

	// Use the font to write
	for (i = 0; i < Font.height; i++) {
 800055a:	2300      	movs	r3, #0
 800055c:	61fb      	str	r3, [r7, #28]
 800055e:	e04e      	b.n	80005fe <ssd1306_WriteChar+0xe6>
		b = Font.data[(ch - 32) * Font.height + i];
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	3b20      	subs	r3, #32
 8000566:	7879      	ldrb	r1, [r7, #1]
 8000568:	fb01 f303 	mul.w	r3, r1, r3
 800056c:	4619      	mov	r1, r3
 800056e:	69fb      	ldr	r3, [r7, #28]
 8000570:	440b      	add	r3, r1
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	4413      	add	r3, r2
 8000576:	881b      	ldrh	r3, [r3, #0]
 8000578:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.width; j++) {
 800057a:	2300      	movs	r3, #0
 800057c:	61bb      	str	r3, [r7, #24]
 800057e:	e036      	b.n	80005ee <ssd1306_WriteChar+0xd6>
			if ((b << j) & 0x8000) {
 8000580:	697a      	ldr	r2, [r7, #20]
 8000582:	69bb      	ldr	r3, [r7, #24]
 8000584:	fa02 f303 	lsl.w	r3, r2, r3
 8000588:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800058c:	2b00      	cmp	r3, #0
 800058e:	d013      	beq.n	80005b8 <ssd1306_WriteChar+0xa0>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 8000590:	4b28      	ldr	r3, [pc, #160]	@ (8000634 <ssd1306_WriteChar+0x11c>)
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	b2da      	uxtb	r2, r3
 8000596:	69bb      	ldr	r3, [r7, #24]
 8000598:	b2db      	uxtb	r3, r3
 800059a:	4413      	add	r3, r2
 800059c:	b2d8      	uxtb	r0, r3
 800059e:	4b25      	ldr	r3, [pc, #148]	@ (8000634 <ssd1306_WriteChar+0x11c>)
 80005a0:	885b      	ldrh	r3, [r3, #2]
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	69fb      	ldr	r3, [r7, #28]
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	4413      	add	r3, r2
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80005b0:	4619      	mov	r1, r3
 80005b2:	f7ff ff5f 	bl	8000474 <ssd1306_DrawPixel>
 80005b6:	e017      	b.n	80005e8 <ssd1306_WriteChar+0xd0>
						(SSD1306_COLOR) color);
			} else {
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 80005b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000634 <ssd1306_WriteChar+0x11c>)
 80005ba:	881b      	ldrh	r3, [r3, #0]
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	69bb      	ldr	r3, [r7, #24]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	4413      	add	r3, r2
 80005c4:	b2d8      	uxtb	r0, r3
 80005c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <ssd1306_WriteChar+0x11c>)
 80005c8:	885b      	ldrh	r3, [r3, #2]
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	69fb      	ldr	r3, [r7, #28]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	4413      	add	r3, r2
 80005d2:	b2d9      	uxtb	r1, r3
 80005d4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80005d8:	2b00      	cmp	r3, #0
 80005da:	bf0c      	ite	eq
 80005dc:	2301      	moveq	r3, #1
 80005de:	2300      	movne	r3, #0
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	461a      	mov	r2, r3
 80005e4:	f7ff ff46 	bl	8000474 <ssd1306_DrawPixel>
		for (j = 0; j < Font.width; j++) {
 80005e8:	69bb      	ldr	r3, [r7, #24]
 80005ea:	3301      	adds	r3, #1
 80005ec:	61bb      	str	r3, [r7, #24]
 80005ee:	783b      	ldrb	r3, [r7, #0]
 80005f0:	461a      	mov	r2, r3
 80005f2:	69bb      	ldr	r3, [r7, #24]
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d3c3      	bcc.n	8000580 <ssd1306_WriteChar+0x68>
	for (i = 0; i < Font.height; i++) {
 80005f8:	69fb      	ldr	r3, [r7, #28]
 80005fa:	3301      	adds	r3, #1
 80005fc:	61fb      	str	r3, [r7, #28]
 80005fe:	787b      	ldrb	r3, [r7, #1]
 8000600:	461a      	mov	r2, r3
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	4293      	cmp	r3, r2
 8000606:	d3ab      	bcc.n	8000560 <ssd1306_WriteChar+0x48>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8000608:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <ssd1306_WriteChar+0x11c>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	68ba      	ldr	r2, [r7, #8]
 800060e:	2a00      	cmp	r2, #0
 8000610:	d005      	beq.n	800061e <ssd1306_WriteChar+0x106>
 8000612:	68b9      	ldr	r1, [r7, #8]
 8000614:	7bfa      	ldrb	r2, [r7, #15]
 8000616:	3a20      	subs	r2, #32
 8000618:	440a      	add	r2, r1
 800061a:	7812      	ldrb	r2, [r2, #0]
 800061c:	e000      	b.n	8000620 <ssd1306_WriteChar+0x108>
 800061e:	783a      	ldrb	r2, [r7, #0]
 8000620:	4413      	add	r3, r2
 8000622:	b29a      	uxth	r2, r3
 8000624:	4b03      	ldr	r3, [pc, #12]	@ (8000634 <ssd1306_WriteChar+0x11c>)
 8000626:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8000628:	7bfb      	ldrb	r3, [r7, #15]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3724      	adds	r7, #36	@ 0x24
 800062e:	46bd      	mov	sp, r7
 8000630:	bd90      	pop	{r4, r7, pc}
 8000632:	bf00      	nop
 8000634:	20000478 	.word	0x20000478

08000638 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char *str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af02      	add	r7, sp, #8
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	4638      	mov	r0, r7
 8000642:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	while (*str) {
 8000646:	e013      	b.n	8000670 <ssd1306_WriteString+0x38>
		if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	7818      	ldrb	r0, [r3, #0]
 800064c:	7e3b      	ldrb	r3, [r7, #24]
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	463b      	mov	r3, r7
 8000652:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000654:	f7ff ff60 	bl	8000518 <ssd1306_WriteChar>
 8000658:	4603      	mov	r3, r0
 800065a:	461a      	mov	r2, r3
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	429a      	cmp	r2, r3
 8000662:	d002      	beq.n	800066a <ssd1306_WriteString+0x32>
			// Char could not be written
			return *str;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	e008      	b.n	800067c <ssd1306_WriteString+0x44>
		}
		str++;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	3301      	adds	r3, #1
 800066e:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d1e7      	bne.n	8000648 <ssd1306_WriteString+0x10>
	}

	// Everything ok
	return *str;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	781b      	ldrb	r3, [r3, #0]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	460a      	mov	r2, r1
 800068e:	71fb      	strb	r3, [r7, #7]
 8000690:	4613      	mov	r3, r2
 8000692:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	b29a      	uxth	r2, r3
 8000698:	4b05      	ldr	r3, [pc, #20]	@ (80006b0 <ssd1306_SetCursor+0x2c>)
 800069a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 800069c:	79bb      	ldrb	r3, [r7, #6]
 800069e:	b29a      	uxth	r2, r3
 80006a0:	4b03      	ldr	r3, [pc, #12]	@ (80006b0 <ssd1306_SetCursor+0x2c>)
 80006a2:	805a      	strh	r2, [r3, #2]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	20000478 	.word	0x20000478

080006b4 <ssd1306_SetContrast>:
		}
	}
	return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	const uint8_t kSetContrastControlRegister = 0x81;
 80006be:	2381      	movs	r3, #129	@ 0x81
 80006c0:	73fb      	strb	r3, [r7, #15]
	ssd1306_WriteCommand(kSetContrastControlRegister);
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff fdf9 	bl	80002bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(value);
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff fdf5 	bl	80002bc <ssd1306_WriteCommand>
}
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	if (on) {
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d005      	beq.n	80006f8 <ssd1306_SetDisplayOn+0x1c>
		value = 0xAF;   // Display on
 80006ec:	23af      	movs	r3, #175	@ 0xaf
 80006ee:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 1;
 80006f0:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <ssd1306_SetDisplayOn+0x38>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	715a      	strb	r2, [r3, #5]
 80006f6:	e004      	b.n	8000702 <ssd1306_SetDisplayOn+0x26>
	} else {
		value = 0xAE;   // Display off
 80006f8:	23ae      	movs	r3, #174	@ 0xae
 80006fa:	73fb      	strb	r3, [r7, #15]
		SSD1306.DisplayOn = 0;
 80006fc:	4b05      	ldr	r3, [pc, #20]	@ (8000714 <ssd1306_SetDisplayOn+0x38>)
 80006fe:	2200      	movs	r2, #0
 8000700:	715a      	strb	r2, [r3, #5]
	}
	ssd1306_WriteCommand(value);
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff fdd9 	bl	80002bc <ssd1306_WriteCommand>
}
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000478 	.word	0x20000478

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071c:	f000 fbac 	bl	8000e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000720:	f000 f84a 	bl	80007b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000724:	f000 f988 	bl	8000a38 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000728:	f000 f8a4 	bl	8000874 <MX_I2C1_Init>
  MX_TIM2_Init();
 800072c:	f000 f8ea 	bl	8000904 <MX_TIM2_Init>
  MX_RTC_Init();
 8000730:	f000 f8ce 	bl	80008d0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  oled_init();
 8000734:	f7ff fd7c 	bl	8000230 <oled_init>
  HC_SR04_Init();
 8000738:	f7ff fd08 	bl	800014c <HC_SR04_Init>


  distance_update_flag = 0;
 800073c:	4b19      	ldr	r3, [pc, #100]	@ (80007a4 <main+0x8c>)
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //trigger signal
	  HC_SR04_Trigger(); // trigger the HC_SR04 chip
 8000742:	f7ff fd09 	bl	8000158 <HC_SR04_Trigger>

	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // activate the interrupt for the falling edge of the echo wave
 8000746:	2100      	movs	r1, #0
 8000748:	4817      	ldr	r0, [pc, #92]	@ (80007a8 <main+0x90>)
 800074a:	f002 fb33 	bl	8002db4 <HAL_TIM_IC_Start_IT>

	  //while(!distance_update_flag); // wait the measure to be done
	  distance_update_flag = 0; // reset the flag for next run
 800074e:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <main+0x8c>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]

	  HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8000754:	2100      	movs	r1, #0
 8000756:	4814      	ldr	r0, [pc, #80]	@ (80007a8 <main+0x90>)
 8000758:	f002 fc38 	bl	8002fcc <HAL_TIM_IC_Stop_IT>

	  distance = HC_SR04_Distance_Calculate(pulse_us); //distance calculated in cm 325cm & 280cm
 800075c:	4b13      	ldr	r3, [pc, #76]	@ (80007ac <main+0x94>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fd0f 	bl	8000184 <HC_SR04_Distance_Calculate>
 8000766:	4603      	mov	r3, r0
 8000768:	461a      	mov	r2, r3
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <main+0x98>)
 800076c:	801a      	strh	r2, [r3, #0]
	  oled_display_wavelength_and_distance(pulse_us, distance); // update oled
 800076e:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <main+0x94>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	461a      	mov	r2, r3
 8000774:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <main+0x98>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	4619      	mov	r1, r3
 800077a:	4610      	mov	r0, r2
 800077c:	f7ff fd5e 	bl	800023c <oled_display_wavelength_and_distance>

	  // 1.prepare to stop


	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000780:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <main+0x9c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a0b      	ldr	r2, [pc, #44]	@ (80007b4 <main+0x9c>)
 8000786:	f043 0304 	orr.w	r3, r3, #4
 800078a:	6013      	str	r3, [r2, #0]
	  HAL_SuspendTick();
 800078c:	f000 fbfa 	bl	8000f84 <HAL_SuspendTick>
	  // 2. Enter STOP mode (system is off here until interrupt)
	  HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000790:	2101      	movs	r1, #1
 8000792:	2000      	movs	r0, #0
 8000794:	f001 fb7c 	bl	8001e90 <HAL_PWR_EnterSTOPMode>
	  // 3.wake up the system and do the work
	  SystemClock_Config();
 8000798:	f000 f80e 	bl	80007b8 <SystemClock_Config>
	  HAL_ResumeTick();
 800079c:	f000 fc00 	bl	8000fa0 <HAL_ResumeTick>
	  HC_SR04_Trigger(); // trigger the HC_SR04 chip
 80007a0:	bf00      	nop
 80007a2:	e7ce      	b.n	8000742 <main+0x2a>
 80007a4:	20000534 	.word	0x20000534
 80007a8:	200004e8 	.word	0x200004e8
 80007ac:	20000530 	.word	0x20000530
 80007b0:	20000536 	.word	0x20000536
 80007b4:	40007000 	.word	0x40007000

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b094      	sub	sp, #80	@ 0x50
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007c2:	2228      	movs	r2, #40	@ 0x28
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f003 fb04 	bl	8003dd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80007e8:	2305      	movs	r3, #5
 80007ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007f6:	2301      	movs	r3, #1
 80007f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fa:	2301      	movs	r3, #1
 80007fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fe:	2302      	movs	r3, #2
 8000800:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000802:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000806:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000808:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800080c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000812:	4618      	mov	r0, r3
 8000814:	f001 fb6e 	bl	8001ef4 <HAL_RCC_OscConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800081e:	f000 f96f 	bl	8000b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000822:	230f      	movs	r3, #15
 8000824:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000826:	2302      	movs	r3, #2
 8000828:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800082e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000832:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	2102      	movs	r1, #2
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fdda 	bl	80023f8 <HAL_RCC_ClockConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800084a:	f000 f959 	bl	8000b00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800084e:	2301      	movs	r3, #1
 8000850:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000852:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000856:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	4618      	mov	r0, r3
 800085c:	f001 ff5a 	bl	8002714 <HAL_RCCEx_PeriphCLKConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000866:	f000 f94b 	bl	8000b00 <Error_Handler>
  }
}
 800086a:	bf00      	nop
 800086c:	3750      	adds	r7, #80	@ 0x50
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000878:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <MX_I2C1_Init+0x50>)
 800087a:	4a13      	ldr	r2, [pc, #76]	@ (80008c8 <MX_I2C1_Init+0x54>)
 800087c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800087e:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <MX_I2C1_Init+0x50>)
 8000880:	4a12      	ldr	r2, [pc, #72]	@ (80008cc <MX_I2C1_Init+0x58>)
 8000882:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000884:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <MX_I2C1_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800088a:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <MX_I2C1_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000890:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <MX_I2C1_Init+0x50>)
 8000892:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000896:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000898:	4b0a      	ldr	r3, [pc, #40]	@ (80008c4 <MX_I2C1_Init+0x50>)
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <MX_I2C1_Init+0x50>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a4:	4b07      	ldr	r3, [pc, #28]	@ (80008c4 <MX_I2C1_Init+0x50>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008aa:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <MX_I2C1_Init+0x50>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008b0:	4804      	ldr	r0, [pc, #16]	@ (80008c4 <MX_I2C1_Init+0x50>)
 80008b2:	f000 fe2d 	bl	8001510 <HAL_I2C_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008bc:	f000 f920 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000480 	.word	0x20000480
 80008c8:	40005400 	.word	0x40005400
 80008cc:	000186a0 	.word	0x000186a0

080008d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <MX_RTC_Init+0x2c>)
 80008d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000900 <MX_RTC_Init+0x30>)
 80008d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <MX_RTC_Init+0x2c>)
 80008dc:	f04f 32ff 	mov.w	r2, #4294967295
 80008e0:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80008e2:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_RTC_Init+0x2c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	@ (80008fc <MX_RTC_Init+0x2c>)
 80008ea:	f002 f87f 	bl	80029ec <HAL_RTC_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_RTC_Init+0x28>
  {
    Error_Handler();
 80008f4:	f000 f904 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200004d4 	.word	0x200004d4
 8000900:	40002800 	.word	0x40002800

08000904 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b090      	sub	sp, #64	@ 0x40
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800093e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a34 <MX_TIM2_Init+0x130>)
 8000940:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000944:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000946:	4b3b      	ldr	r3, [pc, #236]	@ (8000a34 <MX_TIM2_Init+0x130>)
 8000948:	2247      	movs	r2, #71	@ 0x47
 800094a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094c:	4b39      	ldr	r3, [pc, #228]	@ (8000a34 <MX_TIM2_Init+0x130>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000952:	4b38      	ldr	r3, [pc, #224]	@ (8000a34 <MX_TIM2_Init+0x130>)
 8000954:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000958:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095a:	4b36      	ldr	r3, [pc, #216]	@ (8000a34 <MX_TIM2_Init+0x130>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000960:	4b34      	ldr	r3, [pc, #208]	@ (8000a34 <MX_TIM2_Init+0x130>)
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000966:	4833      	ldr	r0, [pc, #204]	@ (8000a34 <MX_TIM2_Init+0x130>)
 8000968:	f002 f97c 	bl	8002c64 <HAL_TIM_Base_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000972:	f000 f8c5 	bl	8000b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000976:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800097a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800097c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000980:	4619      	mov	r1, r3
 8000982:	482c      	ldr	r0, [pc, #176]	@ (8000a34 <MX_TIM2_Init+0x130>)
 8000984:	f002 fd5c 	bl	8003440 <HAL_TIM_ConfigClockSource>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800098e:	f000 f8b7 	bl	8000b00 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000992:	4828      	ldr	r0, [pc, #160]	@ (8000a34 <MX_TIM2_Init+0x130>)
 8000994:	f002 f9b5 	bl	8002d02 <HAL_TIM_IC_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800099e:	f000 f8af 	bl	8000b00 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80009a2:	2304      	movs	r3, #4
 80009a4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80009a6:	2360      	movs	r3, #96	@ 0x60
 80009a8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	481e      	ldr	r0, [pc, #120]	@ (8000a34 <MX_TIM2_Init+0x130>)
 80009ba:	f002 fe08 	bl	80035ce <HAL_TIM_SlaveConfigSynchro>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 80009c4:	f000 f89c 	bl	8000b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	4817      	ldr	r0, [pc, #92]	@ (8000a34 <MX_TIM2_Init+0x130>)
 80009d8:	f003 f96c 	bl	8003cb4 <HAL_TIMEx_MasterConfigSynchronization>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 80009e2:	f000 f88d 	bl	8000b00 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80009e6:	2302      	movs	r3, #2
 80009e8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80009ea:	2302      	movs	r3, #2
 80009ec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2200      	movs	r2, #0
 80009fa:	4619      	mov	r1, r3
 80009fc:	480d      	ldr	r0, [pc, #52]	@ (8000a34 <MX_TIM2_Init+0x130>)
 80009fe:	f002 fc83 	bl	8003308 <HAL_TIM_IC_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000a08:	f000 f87a 	bl	8000b00 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a10:	2301      	movs	r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	2204      	movs	r2, #4
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4806      	ldr	r0, [pc, #24]	@ (8000a34 <MX_TIM2_Init+0x130>)
 8000a1c:	f002 fc74 	bl	8003308 <HAL_TIM_IC_ConfigChannel>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM2_Init+0x126>
  {
    Error_Handler();
 8000a26:	f000 f86b 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	3740      	adds	r7, #64	@ 0x40
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200004e8 	.word	0x200004e8

08000a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3e:	f107 0310 	add.w	r3, r7, #16
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000af8 <MX_GPIO_Init+0xc0>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a29      	ldr	r2, [pc, #164]	@ (8000af8 <MX_GPIO_Init+0xc0>)
 8000a52:	f043 0310 	orr.w	r3, r3, #16
 8000a56:	6193      	str	r3, [r2, #24]
 8000a58:	4b27      	ldr	r3, [pc, #156]	@ (8000af8 <MX_GPIO_Init+0xc0>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f003 0310 	and.w	r3, r3, #16
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a64:	4b24      	ldr	r3, [pc, #144]	@ (8000af8 <MX_GPIO_Init+0xc0>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a23      	ldr	r2, [pc, #140]	@ (8000af8 <MX_GPIO_Init+0xc0>)
 8000a6a:	f043 0320 	orr.w	r3, r3, #32
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <MX_GPIO_Init+0xc0>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f003 0320 	and.w	r3, r3, #32
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000af8 <MX_GPIO_Init+0xc0>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a1d      	ldr	r2, [pc, #116]	@ (8000af8 <MX_GPIO_Init+0xc0>)
 8000a82:	f043 0304 	orr.w	r3, r3, #4
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <MX_GPIO_Init+0xc0>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0304 	and.w	r3, r3, #4
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a94:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <MX_GPIO_Init+0xc0>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a17      	ldr	r2, [pc, #92]	@ (8000af8 <MX_GPIO_Init+0xc0>)
 8000a9a:	f043 0308 	orr.w	r3, r3, #8
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <MX_GPIO_Init+0xc0>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f003 0308 	and.w	r3, r3, #8
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ab2:	4812      	ldr	r0, [pc, #72]	@ (8000afc <MX_GPIO_Init+0xc4>)
 8000ab4:	f000 fd14 	bl	80014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ab8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000abc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 0310 	add.w	r3, r7, #16
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480a      	ldr	r0, [pc, #40]	@ (8000afc <MX_GPIO_Init+0xc4>)
 8000ad2:	f000 fb81 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ad6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ada:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4804      	ldr	r0, [pc, #16]	@ (8000afc <MX_GPIO_Init+0xc4>)
 8000aec:	f000 fb74 	bl	80011d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000af0:	bf00      	nop
 8000af2:	3720      	adds	r7, #32
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40010800 	.word	0x40010800

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <Error_Handler+0x8>

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b12:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <HAL_MspInit+0x5c>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	4a14      	ldr	r2, [pc, #80]	@ (8000b68 <HAL_MspInit+0x5c>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6193      	str	r3, [r2, #24]
 8000b1e:	4b12      	ldr	r3, [pc, #72]	@ (8000b68 <HAL_MspInit+0x5c>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b68 <HAL_MspInit+0x5c>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b68 <HAL_MspInit+0x5c>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b34:	61d3      	str	r3, [r2, #28]
 8000b36:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <HAL_MspInit+0x5c>)
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b42:	4b0a      	ldr	r3, [pc, #40]	@ (8000b6c <HAL_MspInit+0x60>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	4a04      	ldr	r2, [pc, #16]	@ (8000b6c <HAL_MspInit+0x60>)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40010000 	.word	0x40010000

08000b70 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a15      	ldr	r2, [pc, #84]	@ (8000be0 <HAL_I2C_MspInit+0x70>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d123      	bne.n	8000bd8 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b90:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <HAL_I2C_MspInit+0x74>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a13      	ldr	r2, [pc, #76]	@ (8000be4 <HAL_I2C_MspInit+0x74>)
 8000b96:	f043 0308 	orr.w	r3, r3, #8
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <HAL_I2C_MspInit+0x74>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0308 	and.w	r3, r3, #8
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ba8:	23c0      	movs	r3, #192	@ 0xc0
 8000baa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bac:	2312      	movs	r3, #18
 8000bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480b      	ldr	r0, [pc, #44]	@ (8000be8 <HAL_I2C_MspInit+0x78>)
 8000bbc:	f000 fb0c 	bl	80011d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bc0:	4b08      	ldr	r3, [pc, #32]	@ (8000be4 <HAL_I2C_MspInit+0x74>)
 8000bc2:	69db      	ldr	r3, [r3, #28]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	@ (8000be4 <HAL_I2C_MspInit+0x74>)
 8000bc6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bca:	61d3      	str	r3, [r2, #28]
 8000bcc:	4b05      	ldr	r3, [pc, #20]	@ (8000be4 <HAL_I2C_MspInit+0x74>)
 8000bce:	69db      	ldr	r3, [r3, #28]
 8000bd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000bd8:	bf00      	nop
 8000bda:	3720      	adds	r7, #32
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40005400 	.word	0x40005400
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40010c00 	.word	0x40010c00

08000bec <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0f      	ldr	r2, [pc, #60]	@ (8000c38 <HAL_RTC_MspInit+0x4c>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d118      	bne.n	8000c30 <HAL_RTC_MspInit+0x44>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000bfe:	f001 f93b 	bl	8001e78 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000c02:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <HAL_RTC_MspInit+0x50>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	4a0d      	ldr	r2, [pc, #52]	@ (8000c3c <HAL_RTC_MspInit+0x50>)
 8000c08:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000c0c:	61d3      	str	r3, [r2, #28]
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c3c <HAL_RTC_MspInit+0x50>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c1a:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <HAL_RTC_MspInit+0x54>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2100      	movs	r1, #0
 8000c24:	2029      	movs	r0, #41	@ 0x29
 8000c26:	f000 faa0 	bl	800116a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000c2a:	2029      	movs	r0, #41	@ 0x29
 8000c2c:	f000 fab9 	bl	80011a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40002800 	.word	0x40002800
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	4242043c 	.word	0x4242043c

08000c44 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	@ 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c62:	d13d      	bne.n	8000ce0 <HAL_TIM_Base_MspInit+0x9c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c64:	4b20      	ldr	r3, [pc, #128]	@ (8000ce8 <HAL_TIM_Base_MspInit+0xa4>)
 8000c66:	69db      	ldr	r3, [r3, #28]
 8000c68:	4a1f      	ldr	r2, [pc, #124]	@ (8000ce8 <HAL_TIM_Base_MspInit+0xa4>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	61d3      	str	r3, [r2, #28]
 8000c70:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce8 <HAL_TIM_Base_MspInit+0xa4>)
 8000c72:	69db      	ldr	r3, [r3, #28]
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <HAL_TIM_Base_MspInit+0xa4>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	4a19      	ldr	r2, [pc, #100]	@ (8000ce8 <HAL_TIM_Base_MspInit+0xa4>)
 8000c82:	f043 0308 	orr.w	r3, r3, #8
 8000c86:	6193      	str	r3, [r2, #24]
 8000c88:	4b17      	ldr	r3, [pc, #92]	@ (8000ce8 <HAL_TIM_Base_MspInit+0xa4>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f003 0308 	and.w	r3, r3, #8
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c94:	2308      	movs	r3, #8
 8000c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4811      	ldr	r0, [pc, #68]	@ (8000cec <HAL_TIM_Base_MspInit+0xa8>)
 8000ca8:	f000 fa96 	bl	80011d8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000cac:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <HAL_TIM_Base_MspInit+0xac>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000cb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cbc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cca:	4a09      	ldr	r2, [pc, #36]	@ (8000cf0 <HAL_TIM_Base_MspInit+0xac>)
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cce:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	201c      	movs	r0, #28
 8000cd6:	f000 fa48 	bl	800116a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cda:	201c      	movs	r0, #28
 8000cdc:	f000 fa61 	bl	80011a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000ce0:	bf00      	nop
 8000ce2:	3728      	adds	r7, #40	@ 0x28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40010c00 	.word	0x40010c00
 8000cf0:	40010000 	.word	0x40010000

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <BusFault_Handler+0x4>

08000d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <UsageFault_Handler+0x4>

08000d1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr

08000d34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d44:	f000 f8de 	bl	8000f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d50:	4802      	ldr	r0, [pc, #8]	@ (8000d5c <TIM2_IRQHandler+0x10>)
 8000d52:	f002 f9e9 	bl	8003128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200004e8 	.word	0x200004e8

08000d60 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000d64:	4802      	ldr	r0, [pc, #8]	@ (8000d70 <RTC_Alarm_IRQHandler+0x10>)
 8000d66:	f001 fecd 	bl	8002b04 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200004d4 	.word	0x200004d4

08000d74 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
    if(htim->Instance==TIM2 && htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1){
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d84:	d10d      	bne.n	8000da2 <HAL_TIM_IC_CaptureCallback+0x2e>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	7f1b      	ldrb	r3, [r3, #28]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d109      	bne.n	8000da2 <HAL_TIM_IC_CaptureCallback+0x2e>
        pulse_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000d8e:	2100      	movs	r1, #0
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f002 fc5f 	bl	8003654 <HAL_TIM_ReadCapturedValue>
 8000d96:	4603      	mov	r3, r0
 8000d98:	4a04      	ldr	r2, [pc, #16]	@ (8000dac <HAL_TIM_IC_CaptureCallback+0x38>)
 8000d9a:	6013      	str	r3, [r2, #0]
        distance_update_flag = 1;
 8000d9c:	4b04      	ldr	r3, [pc, #16]	@ (8000db0 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	701a      	strb	r2, [r3, #0]

    }
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000530 	.word	0x20000530
 8000db0:	20000534 	.word	0x20000534

08000db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dbc:	4a14      	ldr	r2, [pc, #80]	@ (8000e10 <_sbrk+0x5c>)
 8000dbe:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <_sbrk+0x60>)
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc8:	4b13      	ldr	r3, [pc, #76]	@ (8000e18 <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d102      	bne.n	8000dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <_sbrk+0x64>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <_sbrk+0x68>)
 8000dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd6:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d207      	bcs.n	8000df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de4:	f002 fffe 	bl	8003de4 <__errno>
 8000de8:	4603      	mov	r3, r0
 8000dea:	220c      	movs	r2, #12
 8000dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
 8000df2:	e009      	b.n	8000e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df4:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfa:	4b07      	ldr	r3, [pc, #28]	@ (8000e18 <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	4a05      	ldr	r2, [pc, #20]	@ (8000e18 <_sbrk+0x64>)
 8000e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e06:	68fb      	ldr	r3, [r7, #12]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20005000 	.word	0x20005000
 8000e14:	00000400 	.word	0x00000400
 8000e18:	20000538 	.word	0x20000538
 8000e1c:	20000688 	.word	0x20000688

08000e20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr

08000e2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e2c:	f7ff fff8 	bl	8000e20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e30:	480b      	ldr	r0, [pc, #44]	@ (8000e60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e32:	490c      	ldr	r1, [pc, #48]	@ (8000e64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e34:	4a0c      	ldr	r2, [pc, #48]	@ (8000e68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a09      	ldr	r2, [pc, #36]	@ (8000e6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e48:	4c09      	ldr	r4, [pc, #36]	@ (8000e70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e56:	f002 ffcb 	bl	8003df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e5a:	f7ff fc5d 	bl	8000718 <main>
  bx lr
 8000e5e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e64:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e68:	08004db0 	.word	0x08004db0
  ldr r2, =_sbss
 8000e6c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e70:	20000688 	.word	0x20000688

08000e74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC1_2_IRQHandler>
	...

08000e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <HAL_Init+0x28>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a07      	ldr	r2, [pc, #28]	@ (8000ea0 <HAL_Init+0x28>)
 8000e82:	f043 0310 	orr.w	r3, r3, #16
 8000e86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f000 f963 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8e:	200f      	movs	r0, #15
 8000e90:	f000 f808 	bl	8000ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e94:	f7ff fe3a 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40022000 	.word	0x40022000

08000ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eac:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <HAL_InitTick+0x54>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <HAL_InitTick+0x58>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f97b 	bl	80011be <HAL_SYSTICK_Config>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00e      	b.n	8000ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	d80a      	bhi.n	8000eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f000 f943 	bl	800116a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee4:	4a06      	ldr	r2, [pc, #24]	@ (8000f00 <HAL_InitTick+0x5c>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e000      	b.n	8000ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000004 	.word	0x20000004

08000f04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <HAL_IncTick+0x1c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b05      	ldr	r3, [pc, #20]	@ (8000f24 <HAL_IncTick+0x20>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	4a03      	ldr	r2, [pc, #12]	@ (8000f24 <HAL_IncTick+0x20>)
 8000f16:	6013      	str	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	20000008 	.word	0x20000008
 8000f24:	2000053c 	.word	0x2000053c

08000f28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f2c:	4b02      	ldr	r3, [pc, #8]	@ (8000f38 <HAL_GetTick+0x10>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr
 8000f38:	2000053c 	.word	0x2000053c

08000f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f44:	f7ff fff0 	bl	8000f28 <HAL_GetTick>
 8000f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f54:	d005      	beq.n	8000f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f56:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <HAL_Delay+0x44>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4413      	add	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f62:	bf00      	nop
 8000f64:	f7ff ffe0 	bl	8000f28 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d8f7      	bhi.n	8000f64 <HAL_Delay+0x28>
  {
  }
}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008

08000f84 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000f88:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <HAL_SuspendTick+0x18>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a03      	ldr	r2, [pc, #12]	@ (8000f9c <HAL_SuspendTick+0x18>)
 8000f8e:	f023 0302 	bic.w	r3, r3, #2
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	e000e010 	.word	0xe000e010

08000fa0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000fa4:	4b04      	ldr	r3, [pc, #16]	@ (8000fb8 <HAL_ResumeTick+0x18>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a03      	ldr	r2, [pc, #12]	@ (8000fb8 <HAL_ResumeTick+0x18>)
 8000faa:	f043 0302 	orr.w	r3, r3, #2
 8000fae:	6013      	str	r3, [r2, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	e000e010 	.word	0xe000e010

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	@ (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	@ (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db0b      	blt.n	800104a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f003 021f 	and.w	r2, r3, #31
 8001038:	4906      	ldr	r1, [pc, #24]	@ (8001054 <__NVIC_EnableIRQ+0x34>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	2001      	movs	r0, #1
 8001042:	fa00 f202 	lsl.w	r2, r0, r2
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100

08001058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db0a      	blt.n	8001082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	490c      	ldr	r1, [pc, #48]	@ (80010a4 <__NVIC_SetPriority+0x4c>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	0112      	lsls	r2, r2, #4
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	440b      	add	r3, r1
 800107c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001080:	e00a      	b.n	8001098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4908      	ldr	r1, [pc, #32]	@ (80010a8 <__NVIC_SetPriority+0x50>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	3b04      	subs	r3, #4
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	440b      	add	r3, r1
 8001096:	761a      	strb	r2, [r3, #24]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000e100 	.word	0xe000e100
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	@ 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f1c3 0307 	rsb	r3, r3, #7
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	bf28      	it	cs
 80010ca:	2304      	movcs	r3, #4
 80010cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3304      	adds	r3, #4
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d902      	bls.n	80010dc <NVIC_EncodePriority+0x30>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3b03      	subs	r3, #3
 80010da:	e000      	b.n	80010de <NVIC_EncodePriority+0x32>
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43d9      	mvns	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	4313      	orrs	r3, r2
         );
}
 8001106:	4618      	mov	r0, r3
 8001108:	3724      	adds	r7, #36	@ 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001120:	d301      	bcc.n	8001126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001122:	2301      	movs	r3, #1
 8001124:	e00f      	b.n	8001146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	4a0a      	ldr	r2, [pc, #40]	@ (8001150 <SysTick_Config+0x40>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112e:	210f      	movs	r1, #15
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f7ff ff90 	bl	8001058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <SysTick_Config+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <SysTick_Config+0x40>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff2d 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff42 	bl	8001004 <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff90 	bl	80010ac <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5f 	bl	8001058 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff35 	bl	8001020 <__NVIC_EnableIRQ>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffa2 	bl	8001110 <SysTick_Config>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d8:	b480      	push	{r7}
 80011da:	b08b      	sub	sp, #44	@ 0x2c
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ea:	e169      	b.n	80014c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011ec:	2201      	movs	r2, #1
 80011ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	69fa      	ldr	r2, [r7, #28]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	429a      	cmp	r2, r3
 8001206:	f040 8158 	bne.w	80014ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	4a9a      	ldr	r2, [pc, #616]	@ (8001478 <HAL_GPIO_Init+0x2a0>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d05e      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 8001214:	4a98      	ldr	r2, [pc, #608]	@ (8001478 <HAL_GPIO_Init+0x2a0>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d875      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 800121a:	4a98      	ldr	r2, [pc, #608]	@ (800147c <HAL_GPIO_Init+0x2a4>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d058      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 8001220:	4a96      	ldr	r2, [pc, #600]	@ (800147c <HAL_GPIO_Init+0x2a4>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d86f      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 8001226:	4a96      	ldr	r2, [pc, #600]	@ (8001480 <HAL_GPIO_Init+0x2a8>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d052      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 800122c:	4a94      	ldr	r2, [pc, #592]	@ (8001480 <HAL_GPIO_Init+0x2a8>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d869      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 8001232:	4a94      	ldr	r2, [pc, #592]	@ (8001484 <HAL_GPIO_Init+0x2ac>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d04c      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 8001238:	4a92      	ldr	r2, [pc, #584]	@ (8001484 <HAL_GPIO_Init+0x2ac>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d863      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 800123e:	4a92      	ldr	r2, [pc, #584]	@ (8001488 <HAL_GPIO_Init+0x2b0>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d046      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 8001244:	4a90      	ldr	r2, [pc, #576]	@ (8001488 <HAL_GPIO_Init+0x2b0>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d85d      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 800124a:	2b12      	cmp	r3, #18
 800124c:	d82a      	bhi.n	80012a4 <HAL_GPIO_Init+0xcc>
 800124e:	2b12      	cmp	r3, #18
 8001250:	d859      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 8001252:	a201      	add	r2, pc, #4	@ (adr r2, 8001258 <HAL_GPIO_Init+0x80>)
 8001254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001258:	080012d3 	.word	0x080012d3
 800125c:	080012ad 	.word	0x080012ad
 8001260:	080012bf 	.word	0x080012bf
 8001264:	08001301 	.word	0x08001301
 8001268:	08001307 	.word	0x08001307
 800126c:	08001307 	.word	0x08001307
 8001270:	08001307 	.word	0x08001307
 8001274:	08001307 	.word	0x08001307
 8001278:	08001307 	.word	0x08001307
 800127c:	08001307 	.word	0x08001307
 8001280:	08001307 	.word	0x08001307
 8001284:	08001307 	.word	0x08001307
 8001288:	08001307 	.word	0x08001307
 800128c:	08001307 	.word	0x08001307
 8001290:	08001307 	.word	0x08001307
 8001294:	08001307 	.word	0x08001307
 8001298:	08001307 	.word	0x08001307
 800129c:	080012b5 	.word	0x080012b5
 80012a0:	080012c9 	.word	0x080012c9
 80012a4:	4a79      	ldr	r2, [pc, #484]	@ (800148c <HAL_GPIO_Init+0x2b4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d013      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012aa:	e02c      	b.n	8001306 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	623b      	str	r3, [r7, #32]
          break;
 80012b2:	e029      	b.n	8001308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	3304      	adds	r3, #4
 80012ba:	623b      	str	r3, [r7, #32]
          break;
 80012bc:	e024      	b.n	8001308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	3308      	adds	r3, #8
 80012c4:	623b      	str	r3, [r7, #32]
          break;
 80012c6:	e01f      	b.n	8001308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	330c      	adds	r3, #12
 80012ce:	623b      	str	r3, [r7, #32]
          break;
 80012d0:	e01a      	b.n	8001308 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d102      	bne.n	80012e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012da:	2304      	movs	r3, #4
 80012dc:	623b      	str	r3, [r7, #32]
          break;
 80012de:	e013      	b.n	8001308 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d105      	bne.n	80012f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012e8:	2308      	movs	r3, #8
 80012ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69fa      	ldr	r2, [r7, #28]
 80012f0:	611a      	str	r2, [r3, #16]
          break;
 80012f2:	e009      	b.n	8001308 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f4:	2308      	movs	r3, #8
 80012f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69fa      	ldr	r2, [r7, #28]
 80012fc:	615a      	str	r2, [r3, #20]
          break;
 80012fe:	e003      	b.n	8001308 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
          break;
 8001304:	e000      	b.n	8001308 <HAL_GPIO_Init+0x130>
          break;
 8001306:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	2bff      	cmp	r3, #255	@ 0xff
 800130c:	d801      	bhi.n	8001312 <HAL_GPIO_Init+0x13a>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	e001      	b.n	8001316 <HAL_GPIO_Init+0x13e>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3304      	adds	r3, #4
 8001316:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	2bff      	cmp	r3, #255	@ 0xff
 800131c:	d802      	bhi.n	8001324 <HAL_GPIO_Init+0x14c>
 800131e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	e002      	b.n	800132a <HAL_GPIO_Init+0x152>
 8001324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001326:	3b08      	subs	r3, #8
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	210f      	movs	r1, #15
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	fa01 f303 	lsl.w	r3, r1, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	401a      	ands	r2, r3
 800133c:	6a39      	ldr	r1, [r7, #32]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	fa01 f303 	lsl.w	r3, r1, r3
 8001344:	431a      	orrs	r2, r3
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 80b1 	beq.w	80014ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001358:	4b4d      	ldr	r3, [pc, #308]	@ (8001490 <HAL_GPIO_Init+0x2b8>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a4c      	ldr	r2, [pc, #304]	@ (8001490 <HAL_GPIO_Init+0x2b8>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b4a      	ldr	r3, [pc, #296]	@ (8001490 <HAL_GPIO_Init+0x2b8>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001370:	4a48      	ldr	r2, [pc, #288]	@ (8001494 <HAL_GPIO_Init+0x2bc>)
 8001372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	3302      	adds	r3, #2
 8001378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800137e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	220f      	movs	r2, #15
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	4013      	ands	r3, r2
 8001392:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a40      	ldr	r2, [pc, #256]	@ (8001498 <HAL_GPIO_Init+0x2c0>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d013      	beq.n	80013c4 <HAL_GPIO_Init+0x1ec>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a3f      	ldr	r2, [pc, #252]	@ (800149c <HAL_GPIO_Init+0x2c4>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d00d      	beq.n	80013c0 <HAL_GPIO_Init+0x1e8>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a3e      	ldr	r2, [pc, #248]	@ (80014a0 <HAL_GPIO_Init+0x2c8>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d007      	beq.n	80013bc <HAL_GPIO_Init+0x1e4>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a3d      	ldr	r2, [pc, #244]	@ (80014a4 <HAL_GPIO_Init+0x2cc>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d101      	bne.n	80013b8 <HAL_GPIO_Init+0x1e0>
 80013b4:	2303      	movs	r3, #3
 80013b6:	e006      	b.n	80013c6 <HAL_GPIO_Init+0x1ee>
 80013b8:	2304      	movs	r3, #4
 80013ba:	e004      	b.n	80013c6 <HAL_GPIO_Init+0x1ee>
 80013bc:	2302      	movs	r3, #2
 80013be:	e002      	b.n	80013c6 <HAL_GPIO_Init+0x1ee>
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <HAL_GPIO_Init+0x1ee>
 80013c4:	2300      	movs	r3, #0
 80013c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013c8:	f002 0203 	and.w	r2, r2, #3
 80013cc:	0092      	lsls	r2, r2, #2
 80013ce:	4093      	lsls	r3, r2
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013d6:	492f      	ldr	r1, [pc, #188]	@ (8001494 <HAL_GPIO_Init+0x2bc>)
 80013d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	3302      	adds	r3, #2
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d006      	beq.n	80013fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013f0:	4b2d      	ldr	r3, [pc, #180]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	492c      	ldr	r1, [pc, #176]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	608b      	str	r3, [r1, #8]
 80013fc:	e006      	b.n	800140c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013fe:	4b2a      	ldr	r3, [pc, #168]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	43db      	mvns	r3, r3
 8001406:	4928      	ldr	r1, [pc, #160]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001408:	4013      	ands	r3, r2
 800140a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d006      	beq.n	8001426 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001418:	4b23      	ldr	r3, [pc, #140]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	4922      	ldr	r1, [pc, #136]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	60cb      	str	r3, [r1, #12]
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001426:	4b20      	ldr	r3, [pc, #128]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001428:	68da      	ldr	r2, [r3, #12]
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	43db      	mvns	r3, r3
 800142e:	491e      	ldr	r1, [pc, #120]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001430:	4013      	ands	r3, r2
 8001432:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d006      	beq.n	800144e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001440:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	4918      	ldr	r1, [pc, #96]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	604b      	str	r3, [r1, #4]
 800144c:	e006      	b.n	800145c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800144e:	4b16      	ldr	r3, [pc, #88]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	43db      	mvns	r3, r3
 8001456:	4914      	ldr	r1, [pc, #80]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001458:	4013      	ands	r3, r2
 800145a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d021      	beq.n	80014ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001468:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	490e      	ldr	r1, [pc, #56]	@ (80014a8 <HAL_GPIO_Init+0x2d0>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]
 8001474:	e021      	b.n	80014ba <HAL_GPIO_Init+0x2e2>
 8001476:	bf00      	nop
 8001478:	10320000 	.word	0x10320000
 800147c:	10310000 	.word	0x10310000
 8001480:	10220000 	.word	0x10220000
 8001484:	10210000 	.word	0x10210000
 8001488:	10120000 	.word	0x10120000
 800148c:	10110000 	.word	0x10110000
 8001490:	40021000 	.word	0x40021000
 8001494:	40010000 	.word	0x40010000
 8001498:	40010800 	.word	0x40010800
 800149c:	40010c00 	.word	0x40010c00
 80014a0:	40011000 	.word	0x40011000
 80014a4:	40011400 	.word	0x40011400
 80014a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014ac:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <HAL_GPIO_Init+0x304>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	4909      	ldr	r1, [pc, #36]	@ (80014dc <HAL_GPIO_Init+0x304>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014bc:	3301      	adds	r3, #1
 80014be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f47f ae8e 	bne.w	80011ec <HAL_GPIO_Init+0x14>
  }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	372c      	adds	r7, #44	@ 0x2c
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	40010400 	.word	0x40010400

080014e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
 80014ec:	4613      	mov	r3, r2
 80014ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014f0:	787b      	ldrb	r3, [r7, #1]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f6:	887a      	ldrh	r2, [r7, #2]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014fc:	e003      	b.n	8001506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014fe:	887b      	ldrh	r3, [r7, #2]
 8001500:	041a      	lsls	r2, r3, #16
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	611a      	str	r2, [r3, #16]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e12b      	b.n	800177a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d106      	bne.n	800153c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff fb1a 	bl	8000b70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2224      	movs	r2, #36	@ 0x24
 8001540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0201 	bic.w	r2, r2, #1
 8001552:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001562:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001572:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001574:	f001 f888 	bl	8002688 <HAL_RCC_GetPCLK1Freq>
 8001578:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	4a81      	ldr	r2, [pc, #516]	@ (8001784 <HAL_I2C_Init+0x274>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d807      	bhi.n	8001594 <HAL_I2C_Init+0x84>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4a80      	ldr	r2, [pc, #512]	@ (8001788 <HAL_I2C_Init+0x278>)
 8001588:	4293      	cmp	r3, r2
 800158a:	bf94      	ite	ls
 800158c:	2301      	movls	r3, #1
 800158e:	2300      	movhi	r3, #0
 8001590:	b2db      	uxtb	r3, r3
 8001592:	e006      	b.n	80015a2 <HAL_I2C_Init+0x92>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4a7d      	ldr	r2, [pc, #500]	@ (800178c <HAL_I2C_Init+0x27c>)
 8001598:	4293      	cmp	r3, r2
 800159a:	bf94      	ite	ls
 800159c:	2301      	movls	r3, #1
 800159e:	2300      	movhi	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e0e7      	b.n	800177a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4a78      	ldr	r2, [pc, #480]	@ (8001790 <HAL_I2C_Init+0x280>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	0c9b      	lsrs	r3, r3, #18
 80015b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	4a6a      	ldr	r2, [pc, #424]	@ (8001784 <HAL_I2C_Init+0x274>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d802      	bhi.n	80015e4 <HAL_I2C_Init+0xd4>
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	3301      	adds	r3, #1
 80015e2:	e009      	b.n	80015f8 <HAL_I2C_Init+0xe8>
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015ea:	fb02 f303 	mul.w	r3, r2, r3
 80015ee:	4a69      	ldr	r2, [pc, #420]	@ (8001794 <HAL_I2C_Init+0x284>)
 80015f0:	fba2 2303 	umull	r2, r3, r2, r3
 80015f4:	099b      	lsrs	r3, r3, #6
 80015f6:	3301      	adds	r3, #1
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	430b      	orrs	r3, r1
 80015fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800160a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	495c      	ldr	r1, [pc, #368]	@ (8001784 <HAL_I2C_Init+0x274>)
 8001614:	428b      	cmp	r3, r1
 8001616:	d819      	bhi.n	800164c <HAL_I2C_Init+0x13c>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	1e59      	subs	r1, r3, #1
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	fbb1 f3f3 	udiv	r3, r1, r3
 8001626:	1c59      	adds	r1, r3, #1
 8001628:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800162c:	400b      	ands	r3, r1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00a      	beq.n	8001648 <HAL_I2C_Init+0x138>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1e59      	subs	r1, r3, #1
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001640:	3301      	adds	r3, #1
 8001642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001646:	e051      	b.n	80016ec <HAL_I2C_Init+0x1dc>
 8001648:	2304      	movs	r3, #4
 800164a:	e04f      	b.n	80016ec <HAL_I2C_Init+0x1dc>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d111      	bne.n	8001678 <HAL_I2C_Init+0x168>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	1e58      	subs	r0, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6859      	ldr	r1, [r3, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	440b      	add	r3, r1
 8001662:	fbb0 f3f3 	udiv	r3, r0, r3
 8001666:	3301      	adds	r3, #1
 8001668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800166c:	2b00      	cmp	r3, #0
 800166e:	bf0c      	ite	eq
 8001670:	2301      	moveq	r3, #1
 8001672:	2300      	movne	r3, #0
 8001674:	b2db      	uxtb	r3, r3
 8001676:	e012      	b.n	800169e <HAL_I2C_Init+0x18e>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	1e58      	subs	r0, r3, #1
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6859      	ldr	r1, [r3, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	0099      	lsls	r1, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	fbb0 f3f3 	udiv	r3, r0, r3
 800168e:	3301      	adds	r3, #1
 8001690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001694:	2b00      	cmp	r3, #0
 8001696:	bf0c      	ite	eq
 8001698:	2301      	moveq	r3, #1
 800169a:	2300      	movne	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_I2C_Init+0x196>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e022      	b.n	80016ec <HAL_I2C_Init+0x1dc>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10e      	bne.n	80016cc <HAL_I2C_Init+0x1bc>
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1e58      	subs	r0, r3, #1
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6859      	ldr	r1, [r3, #4]
 80016b6:	460b      	mov	r3, r1
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	440b      	add	r3, r1
 80016bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80016c0:	3301      	adds	r3, #1
 80016c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016ca:	e00f      	b.n	80016ec <HAL_I2C_Init+0x1dc>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	1e58      	subs	r0, r3, #1
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6859      	ldr	r1, [r3, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	0099      	lsls	r1, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	fbb0 f3f3 	udiv	r3, r0, r3
 80016e2:	3301      	adds	r3, #1
 80016e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	6809      	ldr	r1, [r1, #0]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69da      	ldr	r2, [r3, #28]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800171a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6911      	ldr	r1, [r2, #16]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	68d2      	ldr	r2, [r2, #12]
 8001726:	4311      	orrs	r1, r2
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	430b      	orrs	r3, r1
 800172e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695a      	ldr	r2, [r3, #20]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0201 	orr.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2220      	movs	r2, #32
 8001766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	000186a0 	.word	0x000186a0
 8001788:	001e847f 	.word	0x001e847f
 800178c:	003d08ff 	.word	0x003d08ff
 8001790:	431bde83 	.word	0x431bde83
 8001794:	10624dd3 	.word	0x10624dd3

08001798 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af02      	add	r7, sp, #8
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	4608      	mov	r0, r1
 80017a2:	4611      	mov	r1, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	4603      	mov	r3, r0
 80017a8:	817b      	strh	r3, [r7, #10]
 80017aa:	460b      	mov	r3, r1
 80017ac:	813b      	strh	r3, [r7, #8]
 80017ae:	4613      	mov	r3, r2
 80017b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017b2:	f7ff fbb9 	bl	8000f28 <HAL_GetTick>
 80017b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b20      	cmp	r3, #32
 80017c2:	f040 80d9 	bne.w	8001978 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2319      	movs	r3, #25
 80017cc:	2201      	movs	r2, #1
 80017ce:	496d      	ldr	r1, [pc, #436]	@ (8001984 <HAL_I2C_Mem_Write+0x1ec>)
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f000 f971 	bl	8001ab8 <I2C_WaitOnFlagUntilTimeout>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80017dc:	2302      	movs	r3, #2
 80017de:	e0cc      	b.n	800197a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d101      	bne.n	80017ee <HAL_I2C_Mem_Write+0x56>
 80017ea:	2302      	movs	r3, #2
 80017ec:	e0c5      	b.n	800197a <HAL_I2C_Mem_Write+0x1e2>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b01      	cmp	r3, #1
 8001802:	d007      	beq.n	8001814 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0201 	orr.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001822:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2221      	movs	r2, #33	@ 0x21
 8001828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2240      	movs	r2, #64	@ 0x40
 8001830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6a3a      	ldr	r2, [r7, #32]
 800183e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001844:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800184a:	b29a      	uxth	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4a4d      	ldr	r2, [pc, #308]	@ (8001988 <HAL_I2C_Mem_Write+0x1f0>)
 8001854:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001856:	88f8      	ldrh	r0, [r7, #6]
 8001858:	893a      	ldrh	r2, [r7, #8]
 800185a:	8979      	ldrh	r1, [r7, #10]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	9301      	str	r3, [sp, #4]
 8001860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	4603      	mov	r3, r0
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 f890 	bl	800198c <I2C_RequestMemoryWrite>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d052      	beq.n	8001918 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e081      	b.n	800197a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f000 fa36 	bl	8001cec <I2C_WaitOnTXEFlagUntilTimeout>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00d      	beq.n	80018a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	2b04      	cmp	r3, #4
 800188c:	d107      	bne.n	800189e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800189c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e06b      	b.n	800197a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a6:	781a      	ldrb	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b2:	1c5a      	adds	r2, r3, #1
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018bc:	3b01      	subs	r3, #1
 80018be:	b29a      	uxth	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	3b01      	subs	r3, #1
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d11b      	bne.n	8001918 <HAL_I2C_Mem_Write+0x180>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d017      	beq.n	8001918 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ec:	781a      	ldrb	r2, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001902:	3b01      	subs	r3, #1
 8001904:	b29a      	uxth	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800190e:	b29b      	uxth	r3, r3
 8001910:	3b01      	subs	r3, #1
 8001912:	b29a      	uxth	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1aa      	bne.n	8001876 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f000 fa29 	bl	8001d7c <I2C_WaitOnBTFFlagUntilTimeout>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d00d      	beq.n	800194c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001934:	2b04      	cmp	r3, #4
 8001936:	d107      	bne.n	8001948 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001946:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e016      	b.n	800197a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800195a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2220      	movs	r2, #32
 8001960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001974:	2300      	movs	r3, #0
 8001976:	e000      	b.n	800197a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001978:	2302      	movs	r3, #2
  }
}
 800197a:	4618      	mov	r0, r3
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	00100002 	.word	0x00100002
 8001988:	ffff0000 	.word	0xffff0000

0800198c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af02      	add	r7, sp, #8
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	4608      	mov	r0, r1
 8001996:	4611      	mov	r1, r2
 8001998:	461a      	mov	r2, r3
 800199a:	4603      	mov	r3, r0
 800199c:	817b      	strh	r3, [r7, #10]
 800199e:	460b      	mov	r3, r1
 80019a0:	813b      	strh	r3, [r7, #8]
 80019a2:	4613      	mov	r3, r2
 80019a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	6a3b      	ldr	r3, [r7, #32]
 80019bc:	2200      	movs	r2, #0
 80019be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 f878 	bl	8001ab8 <I2C_WaitOnFlagUntilTimeout>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00d      	beq.n	80019ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019dc:	d103      	bne.n	80019e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e05f      	b.n	8001aaa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019ea:	897b      	ldrh	r3, [r7, #10]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80019f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fc:	6a3a      	ldr	r2, [r7, #32]
 80019fe:	492d      	ldr	r1, [pc, #180]	@ (8001ab4 <I2C_RequestMemoryWrite+0x128>)
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f000 f8d3 	bl	8001bac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e04c      	b.n	8001aaa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a28:	6a39      	ldr	r1, [r7, #32]
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f000 f95e 	bl	8001cec <I2C_WaitOnTXEFlagUntilTimeout>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00d      	beq.n	8001a52 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d107      	bne.n	8001a4e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e02b      	b.n	8001aaa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d105      	bne.n	8001a64 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a58:	893b      	ldrh	r3, [r7, #8]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	611a      	str	r2, [r3, #16]
 8001a62:	e021      	b.n	8001aa8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001a64:	893b      	ldrh	r3, [r7, #8]
 8001a66:	0a1b      	lsrs	r3, r3, #8
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a74:	6a39      	ldr	r1, [r7, #32]
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 f938 	bl	8001cec <I2C_WaitOnTXEFlagUntilTimeout>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00d      	beq.n	8001a9e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d107      	bne.n	8001a9a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e005      	b.n	8001aaa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a9e:	893b      	ldrh	r3, [r7, #8]
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	00010002 	.word	0x00010002

08001ab8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ac8:	e048      	b.n	8001b5c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad0:	d044      	beq.n	8001b5c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ad2:	f7ff fa29 	bl	8000f28 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d302      	bcc.n	8001ae8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d139      	bne.n	8001b5c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	0c1b      	lsrs	r3, r3, #16
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d10d      	bne.n	8001b0e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	43da      	mvns	r2, r3
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	4013      	ands	r3, r2
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bf0c      	ite	eq
 8001b04:	2301      	moveq	r3, #1
 8001b06:	2300      	movne	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	e00c      	b.n	8001b28 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	43da      	mvns	r2, r3
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	bf0c      	ite	eq
 8001b20:	2301      	moveq	r3, #1
 8001b22:	2300      	movne	r3, #0
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	461a      	mov	r2, r3
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d116      	bne.n	8001b5c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b48:	f043 0220 	orr.w	r2, r3, #32
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e023      	b.n	8001ba4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	0c1b      	lsrs	r3, r3, #16
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d10d      	bne.n	8001b82 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	43da      	mvns	r2, r3
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	4013      	ands	r3, r2
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	bf0c      	ite	eq
 8001b78:	2301      	moveq	r3, #1
 8001b7a:	2300      	movne	r3, #0
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	461a      	mov	r2, r3
 8001b80:	e00c      	b.n	8001b9c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	43da      	mvns	r2, r3
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	bf0c      	ite	eq
 8001b94:	2301      	moveq	r3, #1
 8001b96:	2300      	movne	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d093      	beq.n	8001aca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bba:	e071      	b.n	8001ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bca:	d123      	bne.n	8001c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bda:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001be4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c00:	f043 0204 	orr.w	r2, r3, #4
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e067      	b.n	8001ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1a:	d041      	beq.n	8001ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c1c:	f7ff f984 	bl	8000f28 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d302      	bcc.n	8001c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d136      	bne.n	8001ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	0c1b      	lsrs	r3, r3, #16
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d10c      	bne.n	8001c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	43da      	mvns	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	4013      	ands	r3, r2
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	bf14      	ite	ne
 8001c4e:	2301      	movne	r3, #1
 8001c50:	2300      	moveq	r3, #0
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	e00b      	b.n	8001c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	43da      	mvns	r2, r3
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	4013      	ands	r3, r2
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	bf14      	ite	ne
 8001c68:	2301      	movne	r3, #1
 8001c6a:	2300      	moveq	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d016      	beq.n	8001ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8c:	f043 0220 	orr.w	r2, r3, #32
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e021      	b.n	8001ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	0c1b      	lsrs	r3, r3, #16
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d10c      	bne.n	8001cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	43da      	mvns	r2, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	bf14      	ite	ne
 8001cbc:	2301      	movne	r3, #1
 8001cbe:	2300      	moveq	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	e00b      	b.n	8001cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	bf14      	ite	ne
 8001cd6:	2301      	movne	r3, #1
 8001cd8:	2300      	moveq	r3, #0
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f47f af6d 	bne.w	8001bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cf8:	e034      	b.n	8001d64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 f886 	bl	8001e0c <I2C_IsAcknowledgeFailed>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e034      	b.n	8001d74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d10:	d028      	beq.n	8001d64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d12:	f7ff f909 	bl	8000f28 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d302      	bcc.n	8001d28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d11d      	bne.n	8001d64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d32:	2b80      	cmp	r3, #128	@ 0x80
 8001d34:	d016      	beq.n	8001d64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d50:	f043 0220 	orr.w	r2, r3, #32
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e007      	b.n	8001d74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d6e:	2b80      	cmp	r3, #128	@ 0x80
 8001d70:	d1c3      	bne.n	8001cfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d88:	e034      	b.n	8001df4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 f83e 	bl	8001e0c <I2C_IsAcknowledgeFailed>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e034      	b.n	8001e04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da0:	d028      	beq.n	8001df4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001da2:	f7ff f8c1 	bl	8000f28 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d302      	bcc.n	8001db8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d11d      	bne.n	8001df4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d016      	beq.n	8001df4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	f043 0220 	orr.w	r2, r3, #32
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e007      	b.n	8001e04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d1c3      	bne.n	8001d8a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e22:	d11b      	bne.n	8001e5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2220      	movs	r2, #32
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e48:	f043 0204 	orr.w	r2, r3, #4
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <PWR_OverloadWfe>:
static void PWR_OverloadWfe(void);

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  __asm volatile( "wfe" );
 8001e6c:	bf20      	wfe
  __asm volatile( "nop" );
 8001e6e:	bf00      	nop
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001e7c:	4b03      	ldr	r3, [pc, #12]	@ (8001e8c <HAL_PWR_EnableBkUpAccess+0x14>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	601a      	str	r2, [r3, #0]
}
 8001e82:	bf00      	nop
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	420e0020 	.word	0x420e0020

08001e90 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 8001e9c:	4b13      	ldr	r3, [pc, #76]	@ (8001eec <HAL_PWR_EnterSTOPMode+0x5c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a12      	ldr	r2, [pc, #72]	@ (8001eec <HAL_PWR_EnterSTOPMode+0x5c>)
 8001ea2:	f023 0302 	bic.w	r3, r3, #2
 8001ea6:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 8001ea8:	4b10      	ldr	r3, [pc, #64]	@ (8001eec <HAL_PWR_EnterSTOPMode+0x5c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f023 0201 	bic.w	r2, r3, #1
 8001eb0:	490e      	ldr	r1, [pc, #56]	@ (8001eec <HAL_PWR_EnterSTOPMode+0x5c>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef0 <HAL_PWR_EnterSTOPMode+0x60>)
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	4a0c      	ldr	r2, [pc, #48]	@ (8001ef0 <HAL_PWR_EnterSTOPMode+0x60>)
 8001ebe:	f043 0304 	orr.w	r3, r3, #4
 8001ec2:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_PWR_EnterSTOPMode+0x3e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001eca:	bf30      	wfi
 8001ecc:	e004      	b.n	8001ed8 <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001ece:	bf40      	sev
    PWR_OverloadWfe(); /* WFE redefine locally */
 8001ed0:	f7ff ffca 	bl	8001e68 <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 8001ed4:	f7ff ffc8 	bl	8001e68 <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001ed8:	4b05      	ldr	r3, [pc, #20]	@ (8001ef0 <HAL_PWR_EnterSTOPMode+0x60>)
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	4a04      	ldr	r2, [pc, #16]	@ (8001ef0 <HAL_PWR_EnterSTOPMode+0x60>)
 8001ede:	f023 0304 	bic.w	r3, r3, #4
 8001ee2:	6113      	str	r3, [r2, #16]
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40007000 	.word	0x40007000
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e272      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 8087 	beq.w	8002022 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f14:	4b92      	ldr	r3, [pc, #584]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d00c      	beq.n	8001f3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f20:	4b8f      	ldr	r3, [pc, #572]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 030c 	and.w	r3, r3, #12
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d112      	bne.n	8001f52 <HAL_RCC_OscConfig+0x5e>
 8001f2c:	4b8c      	ldr	r3, [pc, #560]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f38:	d10b      	bne.n	8001f52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3a:	4b89      	ldr	r3, [pc, #548]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d06c      	beq.n	8002020 <HAL_RCC_OscConfig+0x12c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d168      	bne.n	8002020 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e24c      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f5a:	d106      	bne.n	8001f6a <HAL_RCC_OscConfig+0x76>
 8001f5c:	4b80      	ldr	r3, [pc, #512]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a7f      	ldr	r2, [pc, #508]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	e02e      	b.n	8001fc8 <HAL_RCC_OscConfig+0xd4>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x98>
 8001f72:	4b7b      	ldr	r3, [pc, #492]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a7a      	ldr	r2, [pc, #488]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	4b78      	ldr	r3, [pc, #480]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a77      	ldr	r2, [pc, #476]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	e01d      	b.n	8001fc8 <HAL_RCC_OscConfig+0xd4>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0xbc>
 8001f96:	4b72      	ldr	r3, [pc, #456]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a71      	ldr	r2, [pc, #452]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	4b6f      	ldr	r3, [pc, #444]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a6e      	ldr	r2, [pc, #440]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	e00b      	b.n	8001fc8 <HAL_RCC_OscConfig+0xd4>
 8001fb0:	4b6b      	ldr	r3, [pc, #428]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a6a      	ldr	r2, [pc, #424]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	4b68      	ldr	r3, [pc, #416]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a67      	ldr	r2, [pc, #412]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d013      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7fe ffaa 	bl	8000f28 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd8:	f7fe ffa6 	bl	8000f28 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b64      	cmp	r3, #100	@ 0x64
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e200      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fea:	4b5d      	ldr	r3, [pc, #372]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0xe4>
 8001ff6:	e014      	b.n	8002022 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7fe ff96 	bl	8000f28 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002000:	f7fe ff92 	bl	8000f28 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b64      	cmp	r3, #100	@ 0x64
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e1ec      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002012:	4b53      	ldr	r3, [pc, #332]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x10c>
 800201e:	e000      	b.n	8002022 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d063      	beq.n	80020f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800202e:	4b4c      	ldr	r3, [pc, #304]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 030c 	and.w	r3, r3, #12
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00b      	beq.n	8002052 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800203a:	4b49      	ldr	r3, [pc, #292]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b08      	cmp	r3, #8
 8002044:	d11c      	bne.n	8002080 <HAL_RCC_OscConfig+0x18c>
 8002046:	4b46      	ldr	r3, [pc, #280]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d116      	bne.n	8002080 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002052:	4b43      	ldr	r3, [pc, #268]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d005      	beq.n	800206a <HAL_RCC_OscConfig+0x176>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d001      	beq.n	800206a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e1c0      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206a:	4b3d      	ldr	r3, [pc, #244]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4939      	ldr	r1, [pc, #228]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 800207a:	4313      	orrs	r3, r2
 800207c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207e:	e03a      	b.n	80020f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d020      	beq.n	80020ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002088:	4b36      	ldr	r3, [pc, #216]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 800208a:	2201      	movs	r2, #1
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7fe ff4b 	bl	8000f28 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002096:	f7fe ff47 	bl	8000f28 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e1a1      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4927      	ldr	r1, [pc, #156]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	600b      	str	r3, [r1, #0]
 80020c8:	e015      	b.n	80020f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ca:	4b26      	ldr	r3, [pc, #152]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7fe ff2a 	bl	8000f28 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d8:	f7fe ff26 	bl	8000f28 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e180      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d03a      	beq.n	8002178 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d019      	beq.n	800213e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800210a:	4b17      	ldr	r3, [pc, #92]	@ (8002168 <HAL_RCC_OscConfig+0x274>)
 800210c:	2201      	movs	r2, #1
 800210e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002110:	f7fe ff0a 	bl	8000f28 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002118:	f7fe ff06 	bl	8000f28 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e160      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212a:	4b0d      	ldr	r3, [pc, #52]	@ (8002160 <HAL_RCC_OscConfig+0x26c>)
 800212c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002136:	2001      	movs	r0, #1
 8002138:	f000 face 	bl	80026d8 <RCC_Delay>
 800213c:	e01c      	b.n	8002178 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800213e:	4b0a      	ldr	r3, [pc, #40]	@ (8002168 <HAL_RCC_OscConfig+0x274>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002144:	f7fe fef0 	bl	8000f28 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214a:	e00f      	b.n	800216c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800214c:	f7fe feec 	bl	8000f28 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d908      	bls.n	800216c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e146      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
 8002164:	42420000 	.word	0x42420000
 8002168:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800216c:	4b92      	ldr	r3, [pc, #584]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 800216e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1e9      	bne.n	800214c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80a6 	beq.w	80022d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002186:	2300      	movs	r3, #0
 8002188:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218a:	4b8b      	ldr	r3, [pc, #556]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10d      	bne.n	80021b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002196:	4b88      	ldr	r3, [pc, #544]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	4a87      	ldr	r2, [pc, #540]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021a0:	61d3      	str	r3, [r2, #28]
 80021a2:	4b85      	ldr	r3, [pc, #532]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ae:	2301      	movs	r3, #1
 80021b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b2:	4b82      	ldr	r3, [pc, #520]	@ (80023bc <HAL_RCC_OscConfig+0x4c8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d118      	bne.n	80021f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021be:	4b7f      	ldr	r3, [pc, #508]	@ (80023bc <HAL_RCC_OscConfig+0x4c8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a7e      	ldr	r2, [pc, #504]	@ (80023bc <HAL_RCC_OscConfig+0x4c8>)
 80021c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ca:	f7fe fead 	bl	8000f28 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d2:	f7fe fea9 	bl	8000f28 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b64      	cmp	r3, #100	@ 0x64
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e103      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e4:	4b75      	ldr	r3, [pc, #468]	@ (80023bc <HAL_RCC_OscConfig+0x4c8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x312>
 80021f8:	4b6f      	ldr	r3, [pc, #444]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4a6e      	ldr	r2, [pc, #440]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6213      	str	r3, [r2, #32]
 8002204:	e02d      	b.n	8002262 <HAL_RCC_OscConfig+0x36e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0x334>
 800220e:	4b6a      	ldr	r3, [pc, #424]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	4a69      	ldr	r2, [pc, #420]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	6213      	str	r3, [r2, #32]
 800221a:	4b67      	ldr	r3, [pc, #412]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	4a66      	ldr	r2, [pc, #408]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 8002220:	f023 0304 	bic.w	r3, r3, #4
 8002224:	6213      	str	r3, [r2, #32]
 8002226:	e01c      	b.n	8002262 <HAL_RCC_OscConfig+0x36e>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2b05      	cmp	r3, #5
 800222e:	d10c      	bne.n	800224a <HAL_RCC_OscConfig+0x356>
 8002230:	4b61      	ldr	r3, [pc, #388]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	4a60      	ldr	r2, [pc, #384]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 8002236:	f043 0304 	orr.w	r3, r3, #4
 800223a:	6213      	str	r3, [r2, #32]
 800223c:	4b5e      	ldr	r3, [pc, #376]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	4a5d      	ldr	r2, [pc, #372]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6213      	str	r3, [r2, #32]
 8002248:	e00b      	b.n	8002262 <HAL_RCC_OscConfig+0x36e>
 800224a:	4b5b      	ldr	r3, [pc, #364]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	4a5a      	ldr	r2, [pc, #360]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	6213      	str	r3, [r2, #32]
 8002256:	4b58      	ldr	r3, [pc, #352]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	4a57      	ldr	r2, [pc, #348]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 800225c:	f023 0304 	bic.w	r3, r3, #4
 8002260:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d015      	beq.n	8002296 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226a:	f7fe fe5d 	bl	8000f28 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002270:	e00a      	b.n	8002288 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7fe fe59 	bl	8000f28 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002280:	4293      	cmp	r3, r2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e0b1      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002288:	4b4b      	ldr	r3, [pc, #300]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0ee      	beq.n	8002272 <HAL_RCC_OscConfig+0x37e>
 8002294:	e014      	b.n	80022c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002296:	f7fe fe47 	bl	8000f28 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229c:	e00a      	b.n	80022b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7fe fe43 	bl	8000f28 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e09b      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b4:	4b40      	ldr	r3, [pc, #256]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1ee      	bne.n	800229e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022c0:	7dfb      	ldrb	r3, [r7, #23]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d105      	bne.n	80022d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c6:	4b3c      	ldr	r3, [pc, #240]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	4a3b      	ldr	r2, [pc, #236]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 8087 	beq.w	80023ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022dc:	4b36      	ldr	r3, [pc, #216]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d061      	beq.n	80023ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d146      	bne.n	800237e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f0:	4b33      	ldr	r3, [pc, #204]	@ (80023c0 <HAL_RCC_OscConfig+0x4cc>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f6:	f7fe fe17 	bl	8000f28 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fe:	f7fe fe13 	bl	8000f28 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e06d      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002310:	4b29      	ldr	r3, [pc, #164]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f0      	bne.n	80022fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002324:	d108      	bne.n	8002338 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002326:	4b24      	ldr	r3, [pc, #144]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	4921      	ldr	r1, [pc, #132]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002338:	4b1f      	ldr	r3, [pc, #124]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a19      	ldr	r1, [r3, #32]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002348:	430b      	orrs	r3, r1
 800234a:	491b      	ldr	r1, [pc, #108]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002350:	4b1b      	ldr	r3, [pc, #108]	@ (80023c0 <HAL_RCC_OscConfig+0x4cc>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7fe fde7 	bl	8000f28 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235e:	f7fe fde3 	bl	8000f28 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e03d      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002370:	4b11      	ldr	r3, [pc, #68]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x46a>
 800237c:	e035      	b.n	80023ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237e:	4b10      	ldr	r3, [pc, #64]	@ (80023c0 <HAL_RCC_OscConfig+0x4cc>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7fe fdd0 	bl	8000f28 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238c:	f7fe fdcc 	bl	8000f28 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e026      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239e:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x498>
 80023aa:	e01e      	b.n	80023ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d107      	bne.n	80023c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e019      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40007000 	.word	0x40007000
 80023c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023c4:	4b0b      	ldr	r3, [pc, #44]	@ (80023f4 <HAL_RCC_OscConfig+0x500>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d106      	bne.n	80023e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d001      	beq.n	80023ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40021000 	.word	0x40021000

080023f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0d0      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800240c:	4b6a      	ldr	r3, [pc, #424]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d910      	bls.n	800243c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	4b67      	ldr	r3, [pc, #412]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 0207 	bic.w	r2, r3, #7
 8002422:	4965      	ldr	r1, [pc, #404]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800242a:	4b63      	ldr	r3, [pc, #396]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d001      	beq.n	800243c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0b8      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d020      	beq.n	800248a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002454:	4b59      	ldr	r3, [pc, #356]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4a58      	ldr	r2, [pc, #352]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800245e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800246c:	4b53      	ldr	r3, [pc, #332]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	4a52      	ldr	r2, [pc, #328]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002472:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002476:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002478:	4b50      	ldr	r3, [pc, #320]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	494d      	ldr	r1, [pc, #308]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d040      	beq.n	8002518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d107      	bne.n	80024ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249e:	4b47      	ldr	r3, [pc, #284]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d115      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e07f      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b6:	4b41      	ldr	r3, [pc, #260]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e073      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c6:	4b3d      	ldr	r3, [pc, #244]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e06b      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024d6:	4b39      	ldr	r3, [pc, #228]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f023 0203 	bic.w	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4936      	ldr	r1, [pc, #216]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024e8:	f7fe fd1e 	bl	8000f28 <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f0:	f7fe fd1a 	bl	8000f28 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e053      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002506:	4b2d      	ldr	r3, [pc, #180]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 020c 	and.w	r2, r3, #12
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	429a      	cmp	r2, r3
 8002516:	d1eb      	bne.n	80024f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002518:	4b27      	ldr	r3, [pc, #156]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d210      	bcs.n	8002548 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002526:	4b24      	ldr	r3, [pc, #144]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 0207 	bic.w	r2, r3, #7
 800252e:	4922      	ldr	r1, [pc, #136]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	4313      	orrs	r3, r2
 8002534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002536:	4b20      	ldr	r3, [pc, #128]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e032      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002554:	4b19      	ldr	r3, [pc, #100]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4916      	ldr	r1, [pc, #88]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002562:	4313      	orrs	r3, r2
 8002564:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d009      	beq.n	8002586 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002572:	4b12      	ldr	r3, [pc, #72]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	490e      	ldr	r1, [pc, #56]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	4313      	orrs	r3, r2
 8002584:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002586:	f000 f821 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 800258a:	4602      	mov	r2, r0
 800258c:	4b0b      	ldr	r3, [pc, #44]	@ (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	490a      	ldr	r1, [pc, #40]	@ (80025c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002598:	5ccb      	ldrb	r3, [r1, r3]
 800259a:	fa22 f303 	lsr.w	r3, r2, r3
 800259e:	4a09      	ldr	r2, [pc, #36]	@ (80025c4 <HAL_RCC_ClockConfig+0x1cc>)
 80025a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025a2:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <HAL_RCC_ClockConfig+0x1d0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe fc7c 	bl	8000ea4 <HAL_InitTick>

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40022000 	.word	0x40022000
 80025bc:	40021000 	.word	0x40021000
 80025c0:	08004d34 	.word	0x08004d34
 80025c4:	20000000 	.word	0x20000000
 80025c8:	20000004 	.word	0x20000004

080025cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	2300      	movs	r3, #0
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	2300      	movs	r3, #0
 80025e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x94>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d002      	beq.n	80025fc <HAL_RCC_GetSysClockFreq+0x30>
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d003      	beq.n	8002602 <HAL_RCC_GetSysClockFreq+0x36>
 80025fa:	e027      	b.n	800264c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025fc:	4b19      	ldr	r3, [pc, #100]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x98>)
 80025fe:	613b      	str	r3, [r7, #16]
      break;
 8002600:	e027      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	0c9b      	lsrs	r3, r3, #18
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	4a17      	ldr	r2, [pc, #92]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x9c>)
 800260c:	5cd3      	ldrb	r3, [r2, r3]
 800260e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d010      	beq.n	800263c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800261a:	4b11      	ldr	r3, [pc, #68]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x94>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	0c5b      	lsrs	r3, r3, #17
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	4a11      	ldr	r2, [pc, #68]	@ (800266c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002626:	5cd3      	ldrb	r3, [r2, r3]
 8002628:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a0d      	ldr	r2, [pc, #52]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x98>)
 800262e:	fb03 f202 	mul.w	r2, r3, r2
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	fbb2 f3f3 	udiv	r3, r2, r3
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	e004      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a0c      	ldr	r2, [pc, #48]	@ (8002670 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002640:	fb02 f303 	mul.w	r3, r2, r3
 8002644:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	613b      	str	r3, [r7, #16]
      break;
 800264a:	e002      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800264c:	4b05      	ldr	r3, [pc, #20]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x98>)
 800264e:	613b      	str	r3, [r7, #16]
      break;
 8002650:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002652:	693b      	ldr	r3, [r7, #16]
}
 8002654:	4618      	mov	r0, r3
 8002656:	371c      	adds	r7, #28
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000
 8002664:	007a1200 	.word	0x007a1200
 8002668:	08004d4c 	.word	0x08004d4c
 800266c:	08004d5c 	.word	0x08004d5c
 8002670:	003d0900 	.word	0x003d0900

08002674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002678:	4b02      	ldr	r3, [pc, #8]	@ (8002684 <HAL_RCC_GetHCLKFreq+0x10>)
 800267a:	681b      	ldr	r3, [r3, #0]
}
 800267c:	4618      	mov	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr
 8002684:	20000000 	.word	0x20000000

08002688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800268c:	f7ff fff2 	bl	8002674 <HAL_RCC_GetHCLKFreq>
 8002690:	4602      	mov	r2, r0
 8002692:	4b05      	ldr	r3, [pc, #20]	@ (80026a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	0a1b      	lsrs	r3, r3, #8
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	4903      	ldr	r1, [pc, #12]	@ (80026ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800269e:	5ccb      	ldrb	r3, [r1, r3]
 80026a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40021000 	.word	0x40021000
 80026ac:	08004d44 	.word	0x08004d44

080026b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026b4:	f7ff ffde 	bl	8002674 <HAL_RCC_GetHCLKFreq>
 80026b8:	4602      	mov	r2, r0
 80026ba:	4b05      	ldr	r3, [pc, #20]	@ (80026d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	0adb      	lsrs	r3, r3, #11
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	4903      	ldr	r1, [pc, #12]	@ (80026d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026c6:	5ccb      	ldrb	r3, [r1, r3]
 80026c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40021000 	.word	0x40021000
 80026d4:	08004d44 	.word	0x08004d44

080026d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026e0:	4b0a      	ldr	r3, [pc, #40]	@ (800270c <RCC_Delay+0x34>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002710 <RCC_Delay+0x38>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	0a5b      	lsrs	r3, r3, #9
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	fb02 f303 	mul.w	r3, r2, r3
 80026f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026f4:	bf00      	nop
  }
  while (Delay --);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1e5a      	subs	r2, r3, #1
 80026fa:	60fa      	str	r2, [r7, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1f9      	bne.n	80026f4 <RCC_Delay+0x1c>
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr
 800270c:	20000000 	.word	0x20000000
 8002710:	10624dd3 	.word	0x10624dd3

08002714 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d07d      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002730:	2300      	movs	r3, #0
 8002732:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002734:	4b4f      	ldr	r3, [pc, #316]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10d      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002740:	4b4c      	ldr	r3, [pc, #304]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	4a4b      	ldr	r2, [pc, #300]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800274a:	61d3      	str	r3, [r2, #28]
 800274c:	4b49      	ldr	r3, [pc, #292]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002758:	2301      	movs	r3, #1
 800275a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275c:	4b46      	ldr	r3, [pc, #280]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002764:	2b00      	cmp	r3, #0
 8002766:	d118      	bne.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002768:	4b43      	ldr	r3, [pc, #268]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a42      	ldr	r2, [pc, #264]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800276e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002772:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002774:	f7fe fbd8 	bl	8000f28 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277a:	e008      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277c:	f7fe fbd4 	bl	8000f28 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b64      	cmp	r3, #100	@ 0x64
 8002788:	d901      	bls.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e06d      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278e:	4b3a      	ldr	r3, [pc, #232]	@ (8002878 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800279a:	4b36      	ldr	r3, [pc, #216]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027a2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d02e      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d027      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027c2:	4b2e      	ldr	r3, [pc, #184]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027c8:	4b2c      	ldr	r3, [pc, #176]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027ce:	4a29      	ldr	r2, [pc, #164]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d014      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027de:	f7fe fba3 	bl	8000f28 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e4:	e00a      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e6:	f7fe fb9f 	bl	8000f28 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d901      	bls.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e036      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0ee      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002808:	4b1a      	ldr	r3, [pc, #104]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	4917      	ldr	r1, [pc, #92]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002816:	4313      	orrs	r3, r2
 8002818:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800281a:	7dfb      	ldrb	r3, [r7, #23]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d105      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002820:	4b14      	ldr	r3, [pc, #80]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	4a13      	ldr	r2, [pc, #76]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002826:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800282a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002838:	4b0e      	ldr	r3, [pc, #56]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	490b      	ldr	r1, [pc, #44]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b00      	cmp	r3, #0
 8002854:	d008      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002856:	4b07      	ldr	r3, [pc, #28]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	4904      	ldr	r1, [pc, #16]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40021000 	.word	0x40021000
 8002878:	40007000 	.word	0x40007000
 800287c:	42420440 	.word	0x42420440

08002880 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	2300      	movs	r3, #0
 800288e:	61fb      	str	r3, [r7, #28]
 8002890:	2300      	movs	r3, #0
 8002892:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	2300      	movs	r3, #0
 800289a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b10      	cmp	r3, #16
 80028a0:	d00a      	beq.n	80028b8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b10      	cmp	r3, #16
 80028a6:	f200 808a 	bhi.w	80029be <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d045      	beq.n	800293c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d075      	beq.n	80029a2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80028b6:	e082      	b.n	80029be <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80028b8:	4b46      	ldr	r3, [pc, #280]	@ (80029d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80028be:	4b45      	ldr	r3, [pc, #276]	@ (80029d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d07b      	beq.n	80029c2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	0c9b      	lsrs	r3, r3, #18
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	4a41      	ldr	r2, [pc, #260]	@ (80029d8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80028d4:	5cd3      	ldrb	r3, [r2, r3]
 80028d6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d015      	beq.n	800290e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028e2:	4b3c      	ldr	r3, [pc, #240]	@ (80029d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	0c5b      	lsrs	r3, r3, #17
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	4a3b      	ldr	r2, [pc, #236]	@ (80029dc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80028ee:	5cd3      	ldrb	r3, [r2, r3]
 80028f0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00d      	beq.n	8002918 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80028fc:	4a38      	ldr	r2, [pc, #224]	@ (80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	fbb2 f2f3 	udiv	r2, r2, r3
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	fb02 f303 	mul.w	r3, r2, r3
 800290a:	61fb      	str	r3, [r7, #28]
 800290c:	e004      	b.n	8002918 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4a34      	ldr	r2, [pc, #208]	@ (80029e4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002912:	fb02 f303 	mul.w	r3, r2, r3
 8002916:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002918:	4b2e      	ldr	r3, [pc, #184]	@ (80029d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002920:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002924:	d102      	bne.n	800292c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	61bb      	str	r3, [r7, #24]
      break;
 800292a:	e04a      	b.n	80029c2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	4a2d      	ldr	r2, [pc, #180]	@ (80029e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	085b      	lsrs	r3, r3, #1
 8002938:	61bb      	str	r3, [r7, #24]
      break;
 800293a:	e042      	b.n	80029c2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800293c:	4b25      	ldr	r3, [pc, #148]	@ (80029d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002948:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800294c:	d108      	bne.n	8002960 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002958:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800295c:	61bb      	str	r3, [r7, #24]
 800295e:	e01f      	b.n	80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002966:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800296a:	d109      	bne.n	8002980 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800296c:	4b19      	ldr	r3, [pc, #100]	@ (80029d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800296e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002978:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800297c:	61bb      	str	r3, [r7, #24]
 800297e:	e00f      	b.n	80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002986:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800298a:	d11c      	bne.n	80029c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800298c:	4b11      	ldr	r3, [pc, #68]	@ (80029d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d016      	beq.n	80029c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002998:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800299c:	61bb      	str	r3, [r7, #24]
      break;
 800299e:	e012      	b.n	80029c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80029a0:	e011      	b.n	80029c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80029a2:	f7ff fe85 	bl	80026b0 <HAL_RCC_GetPCLK2Freq>
 80029a6:	4602      	mov	r2, r0
 80029a8:	4b0a      	ldr	r3, [pc, #40]	@ (80029d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	0b9b      	lsrs	r3, r3, #14
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	3301      	adds	r3, #1
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ba:	61bb      	str	r3, [r7, #24]
      break;
 80029bc:	e004      	b.n	80029c8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80029be:	bf00      	nop
 80029c0:	e002      	b.n	80029c8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80029c2:	bf00      	nop
 80029c4:	e000      	b.n	80029c8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80029c6:	bf00      	nop
    }
  }
  return (frequency);
 80029c8:	69bb      	ldr	r3, [r7, #24]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3720      	adds	r7, #32
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40021000 	.word	0x40021000
 80029d8:	08004d60 	.word	0x08004d60
 80029dc:	08004d70 	.word	0x08004d70
 80029e0:	007a1200 	.word	0x007a1200
 80029e4:	003d0900 	.word	0x003d0900
 80029e8:	aaaaaaab 	.word	0xaaaaaaab

080029ec <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e07a      	b.n	8002af8 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	7c5b      	ldrb	r3, [r3, #17]
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d105      	bne.n	8002a18 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7fe f8ea 	bl	8000bec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f8a3 	bl	8002b6a <HAL_RTC_WaitForSynchro>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d004      	beq.n	8002a34 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e061      	b.n	8002af8 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f8c5 	bl	8002bc4 <RTC_EnterInitMode>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d004      	beq.n	8002a4a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2204      	movs	r2, #4
 8002a44:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e056      	b.n	8002af8 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0207 	bic.w	r2, r2, #7
 8002a58:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002a62:	4b27      	ldr	r3, [pc, #156]	@ (8002b00 <HAL_RTC_Init+0x114>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a66:	4a26      	ldr	r2, [pc, #152]	@ (8002b00 <HAL_RTC_Init+0x114>)
 8002a68:	f023 0301 	bic.w	r3, r3, #1
 8002a6c:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002a6e:	4b24      	ldr	r3, [pc, #144]	@ (8002b00 <HAL_RTC_Init+0x114>)
 8002a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a72:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	4921      	ldr	r1, [pc, #132]	@ (8002b00 <HAL_RTC_Init+0x114>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a88:	d003      	beq.n	8002a92 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	e00e      	b.n	8002ab0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002a92:	2001      	movs	r0, #1
 8002a94:	f7ff fef4 	bl	8002880 <HAL_RCCEx_GetPeriphCLKFreq>
 8002a98:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d104      	bne.n	8002aaa <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e026      	b.n	8002af8 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	3b01      	subs	r3, #1
 8002aae:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	0c1a      	lsrs	r2, r3, #16
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f002 020f 	and.w	r2, r2, #15
 8002abc:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	b292      	uxth	r2, r2
 8002ac6:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f8a3 	bl	8002c14 <RTC_ExitInitMode>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d004      	beq.n	8002ade <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2204      	movs	r2, #4
 8002ad8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e00c      	b.n	8002af8 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002af6:	2300      	movs	r3, #0
  }
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40006c00 	.word	0x40006c00

08002b04 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d011      	beq.n	8002b3e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00a      	beq.n	8002b3e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f815 	bl	8002b58 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0202 	bic.w	r2, r2, #2
 8002b3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002b3e:	4b05      	ldr	r3, [pc, #20]	@ (8002b54 <HAL_RTC_AlarmIRQHandler+0x50>)
 8002b40:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b44:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	745a      	strb	r2, [r3, #17]
}
 8002b4c:	bf00      	nop
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40010400 	.word	0x40010400

08002b58 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr

08002b6a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b084      	sub	sp, #16
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e01d      	b.n	8002bbc <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0208 	bic.w	r2, r2, #8
 8002b8e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002b90:	f7fe f9ca 	bl	8000f28 <HAL_GetTick>
 8002b94:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002b96:	e009      	b.n	8002bac <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002b98:	f7fe f9c6 	bl	8000f28 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ba6:	d901      	bls.n	8002bac <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e007      	b.n	8002bbc <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0ee      	beq.n	8002b98 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002bd0:	f7fe f9aa 	bl	8000f28 <HAL_GetTick>
 8002bd4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002bd6:	e009      	b.n	8002bec <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002bd8:	f7fe f9a6 	bl	8000f28 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002be6:	d901      	bls.n	8002bec <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e00f      	b.n	8002c0c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0ee      	beq.n	8002bd8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f042 0210 	orr.w	r2, r2, #16
 8002c08:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0210 	bic.w	r2, r2, #16
 8002c2e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002c30:	f7fe f97a 	bl	8000f28 <HAL_GetTick>
 8002c34:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002c36:	e009      	b.n	8002c4c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002c38:	f7fe f976 	bl	8000f28 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c46:	d901      	bls.n	8002c4c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e007      	b.n	8002c5c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0ee      	beq.n	8002c38 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e041      	b.n	8002cfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7fd ffda 	bl	8000c44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	f000 fd3e 	bl	8003724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e041      	b.n	8002d98 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d106      	bne.n	8002d2e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f839 	bl	8002da0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2202      	movs	r2, #2
 8002d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4610      	mov	r0, r2
 8002d42:	f000 fcef 	bl	8003724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr
	...

08002db4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d104      	bne.n	8002dd2 <HAL_TIM_IC_Start_IT+0x1e>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	e013      	b.n	8002dfa <HAL_TIM_IC_Start_IT+0x46>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d104      	bne.n	8002de2 <HAL_TIM_IC_Start_IT+0x2e>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	e00b      	b.n	8002dfa <HAL_TIM_IC_Start_IT+0x46>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d104      	bne.n	8002df2 <HAL_TIM_IC_Start_IT+0x3e>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	e003      	b.n	8002dfa <HAL_TIM_IC_Start_IT+0x46>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d104      	bne.n	8002e0c <HAL_TIM_IC_Start_IT+0x58>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	e013      	b.n	8002e34 <HAL_TIM_IC_Start_IT+0x80>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d104      	bne.n	8002e1c <HAL_TIM_IC_Start_IT+0x68>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	e00b      	b.n	8002e34 <HAL_TIM_IC_Start_IT+0x80>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d104      	bne.n	8002e2c <HAL_TIM_IC_Start_IT+0x78>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	e003      	b.n	8002e34 <HAL_TIM_IC_Start_IT+0x80>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e36:	7bbb      	ldrb	r3, [r7, #14]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d102      	bne.n	8002e42 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e3c:	7b7b      	ldrb	r3, [r7, #13]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d001      	beq.n	8002e46 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e0b8      	b.n	8002fb8 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d104      	bne.n	8002e56 <HAL_TIM_IC_Start_IT+0xa2>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e54:	e013      	b.n	8002e7e <HAL_TIM_IC_Start_IT+0xca>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d104      	bne.n	8002e66 <HAL_TIM_IC_Start_IT+0xb2>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e64:	e00b      	b.n	8002e7e <HAL_TIM_IC_Start_IT+0xca>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d104      	bne.n	8002e76 <HAL_TIM_IC_Start_IT+0xc2>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e74:	e003      	b.n	8002e7e <HAL_TIM_IC_Start_IT+0xca>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2202      	movs	r2, #2
 8002e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d104      	bne.n	8002e8e <HAL_TIM_IC_Start_IT+0xda>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e8c:	e013      	b.n	8002eb6 <HAL_TIM_IC_Start_IT+0x102>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d104      	bne.n	8002e9e <HAL_TIM_IC_Start_IT+0xea>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e9c:	e00b      	b.n	8002eb6 <HAL_TIM_IC_Start_IT+0x102>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d104      	bne.n	8002eae <HAL_TIM_IC_Start_IT+0xfa>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002eac:	e003      	b.n	8002eb6 <HAL_TIM_IC_Start_IT+0x102>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b0c      	cmp	r3, #12
 8002eba:	d841      	bhi.n	8002f40 <HAL_TIM_IC_Start_IT+0x18c>
 8002ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8002ec4 <HAL_TIM_IC_Start_IT+0x110>)
 8002ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec2:	bf00      	nop
 8002ec4:	08002ef9 	.word	0x08002ef9
 8002ec8:	08002f41 	.word	0x08002f41
 8002ecc:	08002f41 	.word	0x08002f41
 8002ed0:	08002f41 	.word	0x08002f41
 8002ed4:	08002f0b 	.word	0x08002f0b
 8002ed8:	08002f41 	.word	0x08002f41
 8002edc:	08002f41 	.word	0x08002f41
 8002ee0:	08002f41 	.word	0x08002f41
 8002ee4:	08002f1d 	.word	0x08002f1d
 8002ee8:	08002f41 	.word	0x08002f41
 8002eec:	08002f41 	.word	0x08002f41
 8002ef0:	08002f41 	.word	0x08002f41
 8002ef4:	08002f2f 	.word	0x08002f2f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0202 	orr.w	r2, r2, #2
 8002f06:	60da      	str	r2, [r3, #12]
      break;
 8002f08:	e01d      	b.n	8002f46 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f042 0204 	orr.w	r2, r2, #4
 8002f18:	60da      	str	r2, [r3, #12]
      break;
 8002f1a:	e014      	b.n	8002f46 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0208 	orr.w	r2, r2, #8
 8002f2a:	60da      	str	r2, [r3, #12]
      break;
 8002f2c:	e00b      	b.n	8002f46 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f042 0210 	orr.w	r2, r2, #16
 8002f3c:	60da      	str	r2, [r3, #12]
      break;
 8002f3e:	e002      	b.n	8002f46 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
      break;
 8002f44:	bf00      	nop
  }

  if (status == HAL_OK)
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d134      	bne.n	8002fb6 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2201      	movs	r2, #1
 8002f52:	6839      	ldr	r1, [r7, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 fe88 	bl	8003c6a <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a18      	ldr	r2, [pc, #96]	@ (8002fc0 <HAL_TIM_IC_Start_IT+0x20c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d00e      	beq.n	8002f82 <HAL_TIM_IC_Start_IT+0x1ce>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f6c:	d009      	beq.n	8002f82 <HAL_TIM_IC_Start_IT+0x1ce>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a14      	ldr	r2, [pc, #80]	@ (8002fc4 <HAL_TIM_IC_Start_IT+0x210>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d004      	beq.n	8002f82 <HAL_TIM_IC_Start_IT+0x1ce>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a12      	ldr	r2, [pc, #72]	@ (8002fc8 <HAL_TIM_IC_Start_IT+0x214>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d111      	bne.n	8002fa6 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b06      	cmp	r3, #6
 8002f92:	d010      	beq.n	8002fb6 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0201 	orr.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa4:	e007      	b.n	8002fb6 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0201 	orr.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40012c00 	.word	0x40012c00
 8002fc4:	40000400 	.word	0x40000400
 8002fc8:	40000800 	.word	0x40000800

08002fcc <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b0c      	cmp	r3, #12
 8002fde:	d841      	bhi.n	8003064 <HAL_TIM_IC_Stop_IT+0x98>
 8002fe0:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe8 <HAL_TIM_IC_Stop_IT+0x1c>)
 8002fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe6:	bf00      	nop
 8002fe8:	0800301d 	.word	0x0800301d
 8002fec:	08003065 	.word	0x08003065
 8002ff0:	08003065 	.word	0x08003065
 8002ff4:	08003065 	.word	0x08003065
 8002ff8:	0800302f 	.word	0x0800302f
 8002ffc:	08003065 	.word	0x08003065
 8003000:	08003065 	.word	0x08003065
 8003004:	08003065 	.word	0x08003065
 8003008:	08003041 	.word	0x08003041
 800300c:	08003065 	.word	0x08003065
 8003010:	08003065 	.word	0x08003065
 8003014:	08003065 	.word	0x08003065
 8003018:	08003053 	.word	0x08003053
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0202 	bic.w	r2, r2, #2
 800302a:	60da      	str	r2, [r3, #12]
      break;
 800302c:	e01d      	b.n	800306a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0204 	bic.w	r2, r2, #4
 800303c:	60da      	str	r2, [r3, #12]
      break;
 800303e:	e014      	b.n	800306a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0208 	bic.w	r2, r2, #8
 800304e:	60da      	str	r2, [r3, #12]
      break;
 8003050:	e00b      	b.n	800306a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0210 	bic.w	r2, r2, #16
 8003060:	60da      	str	r2, [r3, #12]
      break;
 8003062:	e002      	b.n	800306a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
      break;
 8003068:	bf00      	nop
  }

  if (status == HAL_OK)
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d156      	bne.n	800311e <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2200      	movs	r2, #0
 8003076:	6839      	ldr	r1, [r7, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f000 fdf6 	bl	8003c6a <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6a1a      	ldr	r2, [r3, #32]
 8003084:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003088:	4013      	ands	r3, r2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10f      	bne.n	80030ae <HAL_TIM_IC_Stop_IT+0xe2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6a1a      	ldr	r2, [r3, #32]
 8003094:	f240 4344 	movw	r3, #1092	@ 0x444
 8003098:	4013      	ands	r3, r2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d107      	bne.n	80030ae <HAL_TIM_IC_Stop_IT+0xe2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0201 	bic.w	r2, r2, #1
 80030ac:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d104      	bne.n	80030be <HAL_TIM_IC_Stop_IT+0xf2>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030bc:	e013      	b.n	80030e6 <HAL_TIM_IC_Stop_IT+0x11a>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d104      	bne.n	80030ce <HAL_TIM_IC_Stop_IT+0x102>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030cc:	e00b      	b.n	80030e6 <HAL_TIM_IC_Stop_IT+0x11a>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d104      	bne.n	80030de <HAL_TIM_IC_Stop_IT+0x112>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030dc:	e003      	b.n	80030e6 <HAL_TIM_IC_Stop_IT+0x11a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d104      	bne.n	80030f6 <HAL_TIM_IC_Stop_IT+0x12a>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030f4:	e013      	b.n	800311e <HAL_TIM_IC_Stop_IT+0x152>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d104      	bne.n	8003106 <HAL_TIM_IC_Stop_IT+0x13a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003104:	e00b      	b.n	800311e <HAL_TIM_IC_Stop_IT+0x152>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2b08      	cmp	r3, #8
 800310a:	d104      	bne.n	8003116 <HAL_TIM_IC_Stop_IT+0x14a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003114:	e003      	b.n	800311e <HAL_TIM_IC_Stop_IT+0x152>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 800311e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d020      	beq.n	800318c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d01b      	beq.n	800318c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0202 	mvn.w	r2, #2
 800315c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7fd fdfe 	bl	8000d74 <HAL_TIM_IC_CaptureCallback>
 8003178:	e005      	b.n	8003186 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fab7 	bl	80036ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 fabd 	bl	8003700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b00      	cmp	r3, #0
 8003194:	d020      	beq.n	80031d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d01b      	beq.n	80031d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0204 	mvn.w	r2, #4
 80031a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2202      	movs	r2, #2
 80031ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fd fdd8 	bl	8000d74 <HAL_TIM_IC_CaptureCallback>
 80031c4:	e005      	b.n	80031d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fa91 	bl	80036ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 fa97 	bl	8003700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d020      	beq.n	8003224 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d01b      	beq.n	8003224 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f06f 0208 	mvn.w	r2, #8
 80031f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2204      	movs	r2, #4
 80031fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fd fdb2 	bl	8000d74 <HAL_TIM_IC_CaptureCallback>
 8003210:	e005      	b.n	800321e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 fa6b 	bl	80036ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 fa71 	bl	8003700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f003 0310 	and.w	r3, r3, #16
 800322a:	2b00      	cmp	r3, #0
 800322c:	d020      	beq.n	8003270 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f003 0310 	and.w	r3, r3, #16
 8003234:	2b00      	cmp	r3, #0
 8003236:	d01b      	beq.n	8003270 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f06f 0210 	mvn.w	r2, #16
 8003240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2208      	movs	r2, #8
 8003246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fd fd8c 	bl	8000d74 <HAL_TIM_IC_CaptureCallback>
 800325c:	e005      	b.n	800326a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 fa45 	bl	80036ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 fa4b 	bl	8003700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00c      	beq.n	8003294 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d007      	beq.n	8003294 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0201 	mvn.w	r2, #1
 800328c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fa24 	bl	80036dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00c      	beq.n	80032b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d007      	beq.n	80032b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80032b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 fd65 	bl	8003d82 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00c      	beq.n	80032dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d007      	beq.n	80032dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80032d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fa1b 	bl	8003712 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f003 0320 	and.w	r3, r3, #32
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00c      	beq.n	8003300 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f003 0320 	and.w	r3, r3, #32
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d007      	beq.n	8003300 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0220 	mvn.w	r2, #32
 80032f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 fd38 	bl	8003d70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003300:	bf00      	nop
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800331e:	2b01      	cmp	r3, #1
 8003320:	d101      	bne.n	8003326 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003322:	2302      	movs	r3, #2
 8003324:	e088      	b.n	8003438 <HAL_TIM_IC_ConfigChannel+0x130>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d11b      	bne.n	800336c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003344:	f000 faee 	bl	8003924 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699a      	ldr	r2, [r3, #24]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 020c 	bic.w	r2, r2, #12
 8003356:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6999      	ldr	r1, [r3, #24]
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	619a      	str	r2, [r3, #24]
 800336a:	e060      	b.n	800342e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b04      	cmp	r3, #4
 8003370:	d11c      	bne.n	80033ac <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003382:	f000 fb57 	bl	8003a34 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699a      	ldr	r2, [r3, #24]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003394:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6999      	ldr	r1, [r3, #24]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	021a      	lsls	r2, r3, #8
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	619a      	str	r2, [r3, #24]
 80033aa:	e040      	b.n	800342e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d11b      	bne.n	80033ea <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80033c2:	f000 fba2 	bl	8003b0a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 020c 	bic.w	r2, r2, #12
 80033d4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69d9      	ldr	r1, [r3, #28]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	61da      	str	r2, [r3, #28]
 80033e8:	e021      	b.n	800342e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b0c      	cmp	r3, #12
 80033ee:	d11c      	bne.n	800342a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003400:	f000 fbbe 	bl	8003b80 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	69da      	ldr	r2, [r3, #28]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003412:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	69d9      	ldr	r1, [r3, #28]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	021a      	lsls	r2, r3, #8
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	61da      	str	r2, [r3, #28]
 8003428:	e001      	b.n	800342e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003436:	7dfb      	ldrb	r3, [r7, #23]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_TIM_ConfigClockSource+0x1c>
 8003458:	2302      	movs	r3, #2
 800345a:	e0b4      	b.n	80035c6 <HAL_TIM_ConfigClockSource+0x186>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800347a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003482:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003494:	d03e      	beq.n	8003514 <HAL_TIM_ConfigClockSource+0xd4>
 8003496:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800349a:	f200 8087 	bhi.w	80035ac <HAL_TIM_ConfigClockSource+0x16c>
 800349e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034a2:	f000 8086 	beq.w	80035b2 <HAL_TIM_ConfigClockSource+0x172>
 80034a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034aa:	d87f      	bhi.n	80035ac <HAL_TIM_ConfigClockSource+0x16c>
 80034ac:	2b70      	cmp	r3, #112	@ 0x70
 80034ae:	d01a      	beq.n	80034e6 <HAL_TIM_ConfigClockSource+0xa6>
 80034b0:	2b70      	cmp	r3, #112	@ 0x70
 80034b2:	d87b      	bhi.n	80035ac <HAL_TIM_ConfigClockSource+0x16c>
 80034b4:	2b60      	cmp	r3, #96	@ 0x60
 80034b6:	d050      	beq.n	800355a <HAL_TIM_ConfigClockSource+0x11a>
 80034b8:	2b60      	cmp	r3, #96	@ 0x60
 80034ba:	d877      	bhi.n	80035ac <HAL_TIM_ConfigClockSource+0x16c>
 80034bc:	2b50      	cmp	r3, #80	@ 0x50
 80034be:	d03c      	beq.n	800353a <HAL_TIM_ConfigClockSource+0xfa>
 80034c0:	2b50      	cmp	r3, #80	@ 0x50
 80034c2:	d873      	bhi.n	80035ac <HAL_TIM_ConfigClockSource+0x16c>
 80034c4:	2b40      	cmp	r3, #64	@ 0x40
 80034c6:	d058      	beq.n	800357a <HAL_TIM_ConfigClockSource+0x13a>
 80034c8:	2b40      	cmp	r3, #64	@ 0x40
 80034ca:	d86f      	bhi.n	80035ac <HAL_TIM_ConfigClockSource+0x16c>
 80034cc:	2b30      	cmp	r3, #48	@ 0x30
 80034ce:	d064      	beq.n	800359a <HAL_TIM_ConfigClockSource+0x15a>
 80034d0:	2b30      	cmp	r3, #48	@ 0x30
 80034d2:	d86b      	bhi.n	80035ac <HAL_TIM_ConfigClockSource+0x16c>
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d060      	beq.n	800359a <HAL_TIM_ConfigClockSource+0x15a>
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d867      	bhi.n	80035ac <HAL_TIM_ConfigClockSource+0x16c>
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d05c      	beq.n	800359a <HAL_TIM_ConfigClockSource+0x15a>
 80034e0:	2b10      	cmp	r3, #16
 80034e2:	d05a      	beq.n	800359a <HAL_TIM_ConfigClockSource+0x15a>
 80034e4:	e062      	b.n	80035ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034f6:	f000 fb99 	bl	8003c2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003508:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	609a      	str	r2, [r3, #8]
      break;
 8003512:	e04f      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003524:	f000 fb82 	bl	8003c2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003536:	609a      	str	r2, [r3, #8]
      break;
 8003538:	e03c      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003546:	461a      	mov	r2, r3
 8003548:	f000 fa46 	bl	80039d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2150      	movs	r1, #80	@ 0x50
 8003552:	4618      	mov	r0, r3
 8003554:	f000 fb50 	bl	8003bf8 <TIM_ITRx_SetConfig>
      break;
 8003558:	e02c      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003566:	461a      	mov	r2, r3
 8003568:	f000 faa0 	bl	8003aac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2160      	movs	r1, #96	@ 0x60
 8003572:	4618      	mov	r0, r3
 8003574:	f000 fb40 	bl	8003bf8 <TIM_ITRx_SetConfig>
      break;
 8003578:	e01c      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003586:	461a      	mov	r2, r3
 8003588:	f000 fa26 	bl	80039d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2140      	movs	r1, #64	@ 0x40
 8003592:	4618      	mov	r0, r3
 8003594:	f000 fb30 	bl	8003bf8 <TIM_ITRx_SetConfig>
      break;
 8003598:	e00c      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4619      	mov	r1, r3
 80035a4:	4610      	mov	r0, r2
 80035a6:	f000 fb27 	bl	8003bf8 <TIM_ITRx_SetConfig>
      break;
 80035aa:	e003      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]
      break;
 80035b0:	e000      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
 80035d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e031      	b.n	800364a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2202      	movs	r2, #2
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80035f6:	6839      	ldr	r1, [r7, #0]
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f901 	bl	8003800 <TIM_SlaveTimer_SetConfig>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d009      	beq.n	8003618 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e018      	b.n	800364a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003626:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003636:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b0c      	cmp	r3, #12
 8003666:	d831      	bhi.n	80036cc <HAL_TIM_ReadCapturedValue+0x78>
 8003668:	a201      	add	r2, pc, #4	@ (adr r2, 8003670 <HAL_TIM_ReadCapturedValue+0x1c>)
 800366a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366e:	bf00      	nop
 8003670:	080036a5 	.word	0x080036a5
 8003674:	080036cd 	.word	0x080036cd
 8003678:	080036cd 	.word	0x080036cd
 800367c:	080036cd 	.word	0x080036cd
 8003680:	080036af 	.word	0x080036af
 8003684:	080036cd 	.word	0x080036cd
 8003688:	080036cd 	.word	0x080036cd
 800368c:	080036cd 	.word	0x080036cd
 8003690:	080036b9 	.word	0x080036b9
 8003694:	080036cd 	.word	0x080036cd
 8003698:	080036cd 	.word	0x080036cd
 800369c:	080036cd 	.word	0x080036cd
 80036a0:	080036c3 	.word	0x080036c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036aa:	60fb      	str	r3, [r7, #12]

      break;
 80036ac:	e00f      	b.n	80036ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b4:	60fb      	str	r3, [r7, #12]

      break;
 80036b6:	e00a      	b.n	80036ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036be:	60fb      	str	r3, [r7, #12]

      break;
 80036c0:	e005      	b.n	80036ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c8:	60fb      	str	r3, [r7, #12]

      break;
 80036ca:	e000      	b.n	80036ce <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80036cc:	bf00      	nop
  }

  return tmpreg;
 80036ce:	68fb      	ldr	r3, [r7, #12]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop

080036dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr

080036ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr

08003700 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	4770      	bx	lr

08003712 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr

08003724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a2f      	ldr	r2, [pc, #188]	@ (80037f4 <TIM_Base_SetConfig+0xd0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d00b      	beq.n	8003754 <TIM_Base_SetConfig+0x30>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003742:	d007      	beq.n	8003754 <TIM_Base_SetConfig+0x30>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a2c      	ldr	r2, [pc, #176]	@ (80037f8 <TIM_Base_SetConfig+0xd4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d003      	beq.n	8003754 <TIM_Base_SetConfig+0x30>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a2b      	ldr	r2, [pc, #172]	@ (80037fc <TIM_Base_SetConfig+0xd8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d108      	bne.n	8003766 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800375a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a22      	ldr	r2, [pc, #136]	@ (80037f4 <TIM_Base_SetConfig+0xd0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d00b      	beq.n	8003786 <TIM_Base_SetConfig+0x62>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003774:	d007      	beq.n	8003786 <TIM_Base_SetConfig+0x62>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a1f      	ldr	r2, [pc, #124]	@ (80037f8 <TIM_Base_SetConfig+0xd4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d003      	beq.n	8003786 <TIM_Base_SetConfig+0x62>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a1e      	ldr	r2, [pc, #120]	@ (80037fc <TIM_Base_SetConfig+0xd8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d108      	bne.n	8003798 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800378c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4313      	orrs	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a0d      	ldr	r2, [pc, #52]	@ (80037f4 <TIM_Base_SetConfig+0xd0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d103      	bne.n	80037cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d005      	beq.n	80037ea <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f023 0201 	bic.w	r2, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	611a      	str	r2, [r3, #16]
  }
}
 80037ea:	bf00      	nop
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr
 80037f4:	40012c00 	.word	0x40012c00
 80037f8:	40000400 	.word	0x40000400
 80037fc:	40000800 	.word	0x40000800

08003800 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800380a:	2300      	movs	r3, #0
 800380c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800381c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f023 0307 	bic.w	r3, r3, #7
 800382e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b70      	cmp	r3, #112	@ 0x70
 8003848:	d01a      	beq.n	8003880 <TIM_SlaveTimer_SetConfig+0x80>
 800384a:	2b70      	cmp	r3, #112	@ 0x70
 800384c:	d860      	bhi.n	8003910 <TIM_SlaveTimer_SetConfig+0x110>
 800384e:	2b60      	cmp	r3, #96	@ 0x60
 8003850:	d054      	beq.n	80038fc <TIM_SlaveTimer_SetConfig+0xfc>
 8003852:	2b60      	cmp	r3, #96	@ 0x60
 8003854:	d85c      	bhi.n	8003910 <TIM_SlaveTimer_SetConfig+0x110>
 8003856:	2b50      	cmp	r3, #80	@ 0x50
 8003858:	d046      	beq.n	80038e8 <TIM_SlaveTimer_SetConfig+0xe8>
 800385a:	2b50      	cmp	r3, #80	@ 0x50
 800385c:	d858      	bhi.n	8003910 <TIM_SlaveTimer_SetConfig+0x110>
 800385e:	2b40      	cmp	r3, #64	@ 0x40
 8003860:	d019      	beq.n	8003896 <TIM_SlaveTimer_SetConfig+0x96>
 8003862:	2b40      	cmp	r3, #64	@ 0x40
 8003864:	d854      	bhi.n	8003910 <TIM_SlaveTimer_SetConfig+0x110>
 8003866:	2b30      	cmp	r3, #48	@ 0x30
 8003868:	d055      	beq.n	8003916 <TIM_SlaveTimer_SetConfig+0x116>
 800386a:	2b30      	cmp	r3, #48	@ 0x30
 800386c:	d850      	bhi.n	8003910 <TIM_SlaveTimer_SetConfig+0x110>
 800386e:	2b20      	cmp	r3, #32
 8003870:	d051      	beq.n	8003916 <TIM_SlaveTimer_SetConfig+0x116>
 8003872:	2b20      	cmp	r3, #32
 8003874:	d84c      	bhi.n	8003910 <TIM_SlaveTimer_SetConfig+0x110>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d04d      	beq.n	8003916 <TIM_SlaveTimer_SetConfig+0x116>
 800387a:	2b10      	cmp	r3, #16
 800387c:	d04b      	beq.n	8003916 <TIM_SlaveTimer_SetConfig+0x116>
 800387e:	e047      	b.n	8003910 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003890:	f000 f9cc 	bl	8003c2c <TIM_ETR_SetConfig>
      break;
 8003894:	e040      	b.n	8003918 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b05      	cmp	r3, #5
 800389c:	d101      	bne.n	80038a2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e03b      	b.n	800391a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6a1a      	ldr	r2, [r3, #32]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0201 	bic.w	r2, r2, #1
 80038b8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038c8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	621a      	str	r2, [r3, #32]
      break;
 80038e6:	e017      	b.n	8003918 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038f4:	461a      	mov	r2, r3
 80038f6:	f000 f86f 	bl	80039d8 <TIM_TI1_ConfigInputStage>
      break;
 80038fa:	e00d      	b.n	8003918 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003908:	461a      	mov	r2, r3
 800390a:	f000 f8cf 	bl	8003aac <TIM_TI2_ConfigInputStage>
      break;
 800390e:	e003      	b.n	8003918 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	75fb      	strb	r3, [r7, #23]
      break;
 8003914:	e000      	b.n	8003918 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003916:	bf00      	nop
  }

  return status;
 8003918:	7dfb      	ldrb	r3, [r7, #23]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f023 0201 	bic.w	r2, r3, #1
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4a1f      	ldr	r2, [pc, #124]	@ (80039cc <TIM_TI1_SetConfig+0xa8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00b      	beq.n	800396a <TIM_TI1_SetConfig+0x46>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003958:	d007      	beq.n	800396a <TIM_TI1_SetConfig+0x46>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4a1c      	ldr	r2, [pc, #112]	@ (80039d0 <TIM_TI1_SetConfig+0xac>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d003      	beq.n	800396a <TIM_TI1_SetConfig+0x46>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4a1b      	ldr	r2, [pc, #108]	@ (80039d4 <TIM_TI1_SetConfig+0xb0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d101      	bne.n	800396e <TIM_TI1_SetConfig+0x4a>
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <TIM_TI1_SetConfig+0x4c>
 800396e:	2300      	movs	r3, #0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f023 0303 	bic.w	r3, r3, #3
 800397a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4313      	orrs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	e003      	b.n	800398e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003994:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	b2db      	uxtb	r3, r3
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	4313      	orrs	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f023 030a 	bic.w	r3, r3, #10
 80039a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	f003 030a 	and.w	r3, r3, #10
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	621a      	str	r2, [r3, #32]
}
 80039c2:	bf00      	nop
 80039c4:	371c      	adds	r7, #28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr
 80039cc:	40012c00 	.word	0x40012c00
 80039d0:	40000400 	.word	0x40000400
 80039d4:	40000800 	.word	0x40000800

080039d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	f023 0201 	bic.w	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f023 030a 	bic.w	r3, r3, #10
 8003a14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	621a      	str	r2, [r3, #32]
}
 8003a2a:	bf00      	nop
 8003a2c:	371c      	adds	r7, #28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr

08003a34 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	f023 0210 	bic.w	r2, r3, #16
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	021b      	lsls	r3, r3, #8
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	031b      	lsls	r3, r3, #12
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a86:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	621a      	str	r2, [r3, #32]
}
 8003aa2:	bf00      	nop
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b087      	sub	sp, #28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	f023 0210 	bic.w	r2, r3, #16
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ad6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	031b      	lsls	r3, r3, #12
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ae8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	621a      	str	r2, [r3, #32]
}
 8003b00:	bf00      	nop
 8003b02:	371c      	adds	r7, #28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr

08003b0a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b087      	sub	sp, #28
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	607a      	str	r2, [r7, #4]
 8003b16:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f023 0303 	bic.w	r3, r3, #3
 8003b36:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b46:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	011b      	lsls	r3, r3, #4
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b5a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	621a      	str	r2, [r3, #32]
}
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr

08003b80 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	021b      	lsls	r3, r3, #8
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bbe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	031b      	lsls	r3, r3, #12
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003bd2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	031b      	lsls	r3, r3, #12
 8003bd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	621a      	str	r2, [r3, #32]
}
 8003bee:	bf00      	nop
 8003bf0:	371c      	adds	r7, #28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr

08003bf8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f043 0307 	orr.w	r3, r3, #7
 8003c1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	609a      	str	r2, [r3, #8]
}
 8003c22:	bf00      	nop
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr

08003c2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
 8003c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	021a      	lsls	r2, r3, #8
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	609a      	str	r2, [r3, #8]
}
 8003c60:	bf00      	nop
 8003c62:	371c      	adds	r7, #28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bc80      	pop	{r7}
 8003c68:	4770      	bx	lr

08003c6a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b087      	sub	sp, #28
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f003 031f 	and.w	r3, r3, #31
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a1a      	ldr	r2, [r3, #32]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	401a      	ands	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a1a      	ldr	r2, [r3, #32]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f003 031f 	and.w	r3, r3, #31
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	621a      	str	r2, [r3, #32]
}
 8003ca8:	bf00      	nop
 8003caa:	371c      	adds	r7, #28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bc80      	pop	{r7}
 8003cb0:	4770      	bx	lr
	...

08003cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e046      	b.n	8003d5a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a16      	ldr	r2, [pc, #88]	@ (8003d64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d00e      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d18:	d009      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a12      	ldr	r2, [pc, #72]	@ (8003d68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d004      	beq.n	8003d2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a10      	ldr	r2, [pc, #64]	@ (8003d6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d10c      	bne.n	8003d48 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bc80      	pop	{r7}
 8003d62:	4770      	bx	lr
 8003d64:	40012c00 	.word	0x40012c00
 8003d68:	40000400 	.word	0x40000400
 8003d6c:	40000800 	.word	0x40000800

08003d70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr

08003d82 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bc80      	pop	{r7}
 8003d92:	4770      	bx	lr

08003d94 <siprintf>:
 8003d94:	b40e      	push	{r1, r2, r3}
 8003d96:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003d9a:	b500      	push	{lr}
 8003d9c:	b09c      	sub	sp, #112	@ 0x70
 8003d9e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003da0:	9002      	str	r0, [sp, #8]
 8003da2:	9006      	str	r0, [sp, #24]
 8003da4:	9107      	str	r1, [sp, #28]
 8003da6:	9104      	str	r1, [sp, #16]
 8003da8:	4808      	ldr	r0, [pc, #32]	@ (8003dcc <siprintf+0x38>)
 8003daa:	4909      	ldr	r1, [pc, #36]	@ (8003dd0 <siprintf+0x3c>)
 8003dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8003db0:	9105      	str	r1, [sp, #20]
 8003db2:	6800      	ldr	r0, [r0, #0]
 8003db4:	a902      	add	r1, sp, #8
 8003db6:	9301      	str	r3, [sp, #4]
 8003db8:	f000 f9a0 	bl	80040fc <_svfiprintf_r>
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	9b02      	ldr	r3, [sp, #8]
 8003dc0:	701a      	strb	r2, [r3, #0]
 8003dc2:	b01c      	add	sp, #112	@ 0x70
 8003dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dc8:	b003      	add	sp, #12
 8003dca:	4770      	bx	lr
 8003dcc:	2000000c 	.word	0x2000000c
 8003dd0:	ffff0208 	.word	0xffff0208

08003dd4 <memset>:
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	4402      	add	r2, r0
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d100      	bne.n	8003dde <memset+0xa>
 8003ddc:	4770      	bx	lr
 8003dde:	f803 1b01 	strb.w	r1, [r3], #1
 8003de2:	e7f9      	b.n	8003dd8 <memset+0x4>

08003de4 <__errno>:
 8003de4:	4b01      	ldr	r3, [pc, #4]	@ (8003dec <__errno+0x8>)
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	2000000c 	.word	0x2000000c

08003df0 <__libc_init_array>:
 8003df0:	b570      	push	{r4, r5, r6, lr}
 8003df2:	2600      	movs	r6, #0
 8003df4:	4d0c      	ldr	r5, [pc, #48]	@ (8003e28 <__libc_init_array+0x38>)
 8003df6:	4c0d      	ldr	r4, [pc, #52]	@ (8003e2c <__libc_init_array+0x3c>)
 8003df8:	1b64      	subs	r4, r4, r5
 8003dfa:	10a4      	asrs	r4, r4, #2
 8003dfc:	42a6      	cmp	r6, r4
 8003dfe:	d109      	bne.n	8003e14 <__libc_init_array+0x24>
 8003e00:	f000 fc78 	bl	80046f4 <_init>
 8003e04:	2600      	movs	r6, #0
 8003e06:	4d0a      	ldr	r5, [pc, #40]	@ (8003e30 <__libc_init_array+0x40>)
 8003e08:	4c0a      	ldr	r4, [pc, #40]	@ (8003e34 <__libc_init_array+0x44>)
 8003e0a:	1b64      	subs	r4, r4, r5
 8003e0c:	10a4      	asrs	r4, r4, #2
 8003e0e:	42a6      	cmp	r6, r4
 8003e10:	d105      	bne.n	8003e1e <__libc_init_array+0x2e>
 8003e12:	bd70      	pop	{r4, r5, r6, pc}
 8003e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e18:	4798      	blx	r3
 8003e1a:	3601      	adds	r6, #1
 8003e1c:	e7ee      	b.n	8003dfc <__libc_init_array+0xc>
 8003e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e22:	4798      	blx	r3
 8003e24:	3601      	adds	r6, #1
 8003e26:	e7f2      	b.n	8003e0e <__libc_init_array+0x1e>
 8003e28:	08004da8 	.word	0x08004da8
 8003e2c:	08004da8 	.word	0x08004da8
 8003e30:	08004da8 	.word	0x08004da8
 8003e34:	08004dac 	.word	0x08004dac

08003e38 <__retarget_lock_acquire_recursive>:
 8003e38:	4770      	bx	lr

08003e3a <__retarget_lock_release_recursive>:
 8003e3a:	4770      	bx	lr

08003e3c <memcpy>:
 8003e3c:	440a      	add	r2, r1
 8003e3e:	4291      	cmp	r1, r2
 8003e40:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e44:	d100      	bne.n	8003e48 <memcpy+0xc>
 8003e46:	4770      	bx	lr
 8003e48:	b510      	push	{r4, lr}
 8003e4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e4e:	4291      	cmp	r1, r2
 8003e50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e54:	d1f9      	bne.n	8003e4a <memcpy+0xe>
 8003e56:	bd10      	pop	{r4, pc}

08003e58 <_free_r>:
 8003e58:	b538      	push	{r3, r4, r5, lr}
 8003e5a:	4605      	mov	r5, r0
 8003e5c:	2900      	cmp	r1, #0
 8003e5e:	d040      	beq.n	8003ee2 <_free_r+0x8a>
 8003e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e64:	1f0c      	subs	r4, r1, #4
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	bfb8      	it	lt
 8003e6a:	18e4      	addlt	r4, r4, r3
 8003e6c:	f000 f8de 	bl	800402c <__malloc_lock>
 8003e70:	4a1c      	ldr	r2, [pc, #112]	@ (8003ee4 <_free_r+0x8c>)
 8003e72:	6813      	ldr	r3, [r2, #0]
 8003e74:	b933      	cbnz	r3, 8003e84 <_free_r+0x2c>
 8003e76:	6063      	str	r3, [r4, #4]
 8003e78:	6014      	str	r4, [r2, #0]
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e80:	f000 b8da 	b.w	8004038 <__malloc_unlock>
 8003e84:	42a3      	cmp	r3, r4
 8003e86:	d908      	bls.n	8003e9a <_free_r+0x42>
 8003e88:	6820      	ldr	r0, [r4, #0]
 8003e8a:	1821      	adds	r1, r4, r0
 8003e8c:	428b      	cmp	r3, r1
 8003e8e:	bf01      	itttt	eq
 8003e90:	6819      	ldreq	r1, [r3, #0]
 8003e92:	685b      	ldreq	r3, [r3, #4]
 8003e94:	1809      	addeq	r1, r1, r0
 8003e96:	6021      	streq	r1, [r4, #0]
 8003e98:	e7ed      	b.n	8003e76 <_free_r+0x1e>
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	b10b      	cbz	r3, 8003ea4 <_free_r+0x4c>
 8003ea0:	42a3      	cmp	r3, r4
 8003ea2:	d9fa      	bls.n	8003e9a <_free_r+0x42>
 8003ea4:	6811      	ldr	r1, [r2, #0]
 8003ea6:	1850      	adds	r0, r2, r1
 8003ea8:	42a0      	cmp	r0, r4
 8003eaa:	d10b      	bne.n	8003ec4 <_free_r+0x6c>
 8003eac:	6820      	ldr	r0, [r4, #0]
 8003eae:	4401      	add	r1, r0
 8003eb0:	1850      	adds	r0, r2, r1
 8003eb2:	4283      	cmp	r3, r0
 8003eb4:	6011      	str	r1, [r2, #0]
 8003eb6:	d1e0      	bne.n	8003e7a <_free_r+0x22>
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	4408      	add	r0, r1
 8003ebe:	6010      	str	r0, [r2, #0]
 8003ec0:	6053      	str	r3, [r2, #4]
 8003ec2:	e7da      	b.n	8003e7a <_free_r+0x22>
 8003ec4:	d902      	bls.n	8003ecc <_free_r+0x74>
 8003ec6:	230c      	movs	r3, #12
 8003ec8:	602b      	str	r3, [r5, #0]
 8003eca:	e7d6      	b.n	8003e7a <_free_r+0x22>
 8003ecc:	6820      	ldr	r0, [r4, #0]
 8003ece:	1821      	adds	r1, r4, r0
 8003ed0:	428b      	cmp	r3, r1
 8003ed2:	bf01      	itttt	eq
 8003ed4:	6819      	ldreq	r1, [r3, #0]
 8003ed6:	685b      	ldreq	r3, [r3, #4]
 8003ed8:	1809      	addeq	r1, r1, r0
 8003eda:	6021      	streq	r1, [r4, #0]
 8003edc:	6063      	str	r3, [r4, #4]
 8003ede:	6054      	str	r4, [r2, #4]
 8003ee0:	e7cb      	b.n	8003e7a <_free_r+0x22>
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}
 8003ee4:	20000684 	.word	0x20000684

08003ee8 <sbrk_aligned>:
 8003ee8:	b570      	push	{r4, r5, r6, lr}
 8003eea:	4e0f      	ldr	r6, [pc, #60]	@ (8003f28 <sbrk_aligned+0x40>)
 8003eec:	460c      	mov	r4, r1
 8003eee:	6831      	ldr	r1, [r6, #0]
 8003ef0:	4605      	mov	r5, r0
 8003ef2:	b911      	cbnz	r1, 8003efa <sbrk_aligned+0x12>
 8003ef4:	f000 fbaa 	bl	800464c <_sbrk_r>
 8003ef8:	6030      	str	r0, [r6, #0]
 8003efa:	4621      	mov	r1, r4
 8003efc:	4628      	mov	r0, r5
 8003efe:	f000 fba5 	bl	800464c <_sbrk_r>
 8003f02:	1c43      	adds	r3, r0, #1
 8003f04:	d103      	bne.n	8003f0e <sbrk_aligned+0x26>
 8003f06:	f04f 34ff 	mov.w	r4, #4294967295
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	bd70      	pop	{r4, r5, r6, pc}
 8003f0e:	1cc4      	adds	r4, r0, #3
 8003f10:	f024 0403 	bic.w	r4, r4, #3
 8003f14:	42a0      	cmp	r0, r4
 8003f16:	d0f8      	beq.n	8003f0a <sbrk_aligned+0x22>
 8003f18:	1a21      	subs	r1, r4, r0
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	f000 fb96 	bl	800464c <_sbrk_r>
 8003f20:	3001      	adds	r0, #1
 8003f22:	d1f2      	bne.n	8003f0a <sbrk_aligned+0x22>
 8003f24:	e7ef      	b.n	8003f06 <sbrk_aligned+0x1e>
 8003f26:	bf00      	nop
 8003f28:	20000680 	.word	0x20000680

08003f2c <_malloc_r>:
 8003f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f30:	1ccd      	adds	r5, r1, #3
 8003f32:	f025 0503 	bic.w	r5, r5, #3
 8003f36:	3508      	adds	r5, #8
 8003f38:	2d0c      	cmp	r5, #12
 8003f3a:	bf38      	it	cc
 8003f3c:	250c      	movcc	r5, #12
 8003f3e:	2d00      	cmp	r5, #0
 8003f40:	4606      	mov	r6, r0
 8003f42:	db01      	blt.n	8003f48 <_malloc_r+0x1c>
 8003f44:	42a9      	cmp	r1, r5
 8003f46:	d904      	bls.n	8003f52 <_malloc_r+0x26>
 8003f48:	230c      	movs	r3, #12
 8003f4a:	6033      	str	r3, [r6, #0]
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004028 <_malloc_r+0xfc>
 8003f56:	f000 f869 	bl	800402c <__malloc_lock>
 8003f5a:	f8d8 3000 	ldr.w	r3, [r8]
 8003f5e:	461c      	mov	r4, r3
 8003f60:	bb44      	cbnz	r4, 8003fb4 <_malloc_r+0x88>
 8003f62:	4629      	mov	r1, r5
 8003f64:	4630      	mov	r0, r6
 8003f66:	f7ff ffbf 	bl	8003ee8 <sbrk_aligned>
 8003f6a:	1c43      	adds	r3, r0, #1
 8003f6c:	4604      	mov	r4, r0
 8003f6e:	d158      	bne.n	8004022 <_malloc_r+0xf6>
 8003f70:	f8d8 4000 	ldr.w	r4, [r8]
 8003f74:	4627      	mov	r7, r4
 8003f76:	2f00      	cmp	r7, #0
 8003f78:	d143      	bne.n	8004002 <_malloc_r+0xd6>
 8003f7a:	2c00      	cmp	r4, #0
 8003f7c:	d04b      	beq.n	8004016 <_malloc_r+0xea>
 8003f7e:	6823      	ldr	r3, [r4, #0]
 8003f80:	4639      	mov	r1, r7
 8003f82:	4630      	mov	r0, r6
 8003f84:	eb04 0903 	add.w	r9, r4, r3
 8003f88:	f000 fb60 	bl	800464c <_sbrk_r>
 8003f8c:	4581      	cmp	r9, r0
 8003f8e:	d142      	bne.n	8004016 <_malloc_r+0xea>
 8003f90:	6821      	ldr	r1, [r4, #0]
 8003f92:	4630      	mov	r0, r6
 8003f94:	1a6d      	subs	r5, r5, r1
 8003f96:	4629      	mov	r1, r5
 8003f98:	f7ff ffa6 	bl	8003ee8 <sbrk_aligned>
 8003f9c:	3001      	adds	r0, #1
 8003f9e:	d03a      	beq.n	8004016 <_malloc_r+0xea>
 8003fa0:	6823      	ldr	r3, [r4, #0]
 8003fa2:	442b      	add	r3, r5
 8003fa4:	6023      	str	r3, [r4, #0]
 8003fa6:	f8d8 3000 	ldr.w	r3, [r8]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	bb62      	cbnz	r2, 8004008 <_malloc_r+0xdc>
 8003fae:	f8c8 7000 	str.w	r7, [r8]
 8003fb2:	e00f      	b.n	8003fd4 <_malloc_r+0xa8>
 8003fb4:	6822      	ldr	r2, [r4, #0]
 8003fb6:	1b52      	subs	r2, r2, r5
 8003fb8:	d420      	bmi.n	8003ffc <_malloc_r+0xd0>
 8003fba:	2a0b      	cmp	r2, #11
 8003fbc:	d917      	bls.n	8003fee <_malloc_r+0xc2>
 8003fbe:	1961      	adds	r1, r4, r5
 8003fc0:	42a3      	cmp	r3, r4
 8003fc2:	6025      	str	r5, [r4, #0]
 8003fc4:	bf18      	it	ne
 8003fc6:	6059      	strne	r1, [r3, #4]
 8003fc8:	6863      	ldr	r3, [r4, #4]
 8003fca:	bf08      	it	eq
 8003fcc:	f8c8 1000 	streq.w	r1, [r8]
 8003fd0:	5162      	str	r2, [r4, r5]
 8003fd2:	604b      	str	r3, [r1, #4]
 8003fd4:	4630      	mov	r0, r6
 8003fd6:	f000 f82f 	bl	8004038 <__malloc_unlock>
 8003fda:	f104 000b 	add.w	r0, r4, #11
 8003fde:	1d23      	adds	r3, r4, #4
 8003fe0:	f020 0007 	bic.w	r0, r0, #7
 8003fe4:	1ac2      	subs	r2, r0, r3
 8003fe6:	bf1c      	itt	ne
 8003fe8:	1a1b      	subne	r3, r3, r0
 8003fea:	50a3      	strne	r3, [r4, r2]
 8003fec:	e7af      	b.n	8003f4e <_malloc_r+0x22>
 8003fee:	6862      	ldr	r2, [r4, #4]
 8003ff0:	42a3      	cmp	r3, r4
 8003ff2:	bf0c      	ite	eq
 8003ff4:	f8c8 2000 	streq.w	r2, [r8]
 8003ff8:	605a      	strne	r2, [r3, #4]
 8003ffa:	e7eb      	b.n	8003fd4 <_malloc_r+0xa8>
 8003ffc:	4623      	mov	r3, r4
 8003ffe:	6864      	ldr	r4, [r4, #4]
 8004000:	e7ae      	b.n	8003f60 <_malloc_r+0x34>
 8004002:	463c      	mov	r4, r7
 8004004:	687f      	ldr	r7, [r7, #4]
 8004006:	e7b6      	b.n	8003f76 <_malloc_r+0x4a>
 8004008:	461a      	mov	r2, r3
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	42a3      	cmp	r3, r4
 800400e:	d1fb      	bne.n	8004008 <_malloc_r+0xdc>
 8004010:	2300      	movs	r3, #0
 8004012:	6053      	str	r3, [r2, #4]
 8004014:	e7de      	b.n	8003fd4 <_malloc_r+0xa8>
 8004016:	230c      	movs	r3, #12
 8004018:	4630      	mov	r0, r6
 800401a:	6033      	str	r3, [r6, #0]
 800401c:	f000 f80c 	bl	8004038 <__malloc_unlock>
 8004020:	e794      	b.n	8003f4c <_malloc_r+0x20>
 8004022:	6005      	str	r5, [r0, #0]
 8004024:	e7d6      	b.n	8003fd4 <_malloc_r+0xa8>
 8004026:	bf00      	nop
 8004028:	20000684 	.word	0x20000684

0800402c <__malloc_lock>:
 800402c:	4801      	ldr	r0, [pc, #4]	@ (8004034 <__malloc_lock+0x8>)
 800402e:	f7ff bf03 	b.w	8003e38 <__retarget_lock_acquire_recursive>
 8004032:	bf00      	nop
 8004034:	2000067c 	.word	0x2000067c

08004038 <__malloc_unlock>:
 8004038:	4801      	ldr	r0, [pc, #4]	@ (8004040 <__malloc_unlock+0x8>)
 800403a:	f7ff befe 	b.w	8003e3a <__retarget_lock_release_recursive>
 800403e:	bf00      	nop
 8004040:	2000067c 	.word	0x2000067c

08004044 <__ssputs_r>:
 8004044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004048:	461f      	mov	r7, r3
 800404a:	688e      	ldr	r6, [r1, #8]
 800404c:	4682      	mov	sl, r0
 800404e:	42be      	cmp	r6, r7
 8004050:	460c      	mov	r4, r1
 8004052:	4690      	mov	r8, r2
 8004054:	680b      	ldr	r3, [r1, #0]
 8004056:	d82d      	bhi.n	80040b4 <__ssputs_r+0x70>
 8004058:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800405c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004060:	d026      	beq.n	80040b0 <__ssputs_r+0x6c>
 8004062:	6965      	ldr	r5, [r4, #20]
 8004064:	6909      	ldr	r1, [r1, #16]
 8004066:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800406a:	eba3 0901 	sub.w	r9, r3, r1
 800406e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004072:	1c7b      	adds	r3, r7, #1
 8004074:	444b      	add	r3, r9
 8004076:	106d      	asrs	r5, r5, #1
 8004078:	429d      	cmp	r5, r3
 800407a:	bf38      	it	cc
 800407c:	461d      	movcc	r5, r3
 800407e:	0553      	lsls	r3, r2, #21
 8004080:	d527      	bpl.n	80040d2 <__ssputs_r+0x8e>
 8004082:	4629      	mov	r1, r5
 8004084:	f7ff ff52 	bl	8003f2c <_malloc_r>
 8004088:	4606      	mov	r6, r0
 800408a:	b360      	cbz	r0, 80040e6 <__ssputs_r+0xa2>
 800408c:	464a      	mov	r2, r9
 800408e:	6921      	ldr	r1, [r4, #16]
 8004090:	f7ff fed4 	bl	8003e3c <memcpy>
 8004094:	89a3      	ldrh	r3, [r4, #12]
 8004096:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800409a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800409e:	81a3      	strh	r3, [r4, #12]
 80040a0:	6126      	str	r6, [r4, #16]
 80040a2:	444e      	add	r6, r9
 80040a4:	6026      	str	r6, [r4, #0]
 80040a6:	463e      	mov	r6, r7
 80040a8:	6165      	str	r5, [r4, #20]
 80040aa:	eba5 0509 	sub.w	r5, r5, r9
 80040ae:	60a5      	str	r5, [r4, #8]
 80040b0:	42be      	cmp	r6, r7
 80040b2:	d900      	bls.n	80040b6 <__ssputs_r+0x72>
 80040b4:	463e      	mov	r6, r7
 80040b6:	4632      	mov	r2, r6
 80040b8:	4641      	mov	r1, r8
 80040ba:	6820      	ldr	r0, [r4, #0]
 80040bc:	f000 faac 	bl	8004618 <memmove>
 80040c0:	2000      	movs	r0, #0
 80040c2:	68a3      	ldr	r3, [r4, #8]
 80040c4:	1b9b      	subs	r3, r3, r6
 80040c6:	60a3      	str	r3, [r4, #8]
 80040c8:	6823      	ldr	r3, [r4, #0]
 80040ca:	4433      	add	r3, r6
 80040cc:	6023      	str	r3, [r4, #0]
 80040ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040d2:	462a      	mov	r2, r5
 80040d4:	f000 fad8 	bl	8004688 <_realloc_r>
 80040d8:	4606      	mov	r6, r0
 80040da:	2800      	cmp	r0, #0
 80040dc:	d1e0      	bne.n	80040a0 <__ssputs_r+0x5c>
 80040de:	4650      	mov	r0, sl
 80040e0:	6921      	ldr	r1, [r4, #16]
 80040e2:	f7ff feb9 	bl	8003e58 <_free_r>
 80040e6:	230c      	movs	r3, #12
 80040e8:	f8ca 3000 	str.w	r3, [sl]
 80040ec:	89a3      	ldrh	r3, [r4, #12]
 80040ee:	f04f 30ff 	mov.w	r0, #4294967295
 80040f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040f6:	81a3      	strh	r3, [r4, #12]
 80040f8:	e7e9      	b.n	80040ce <__ssputs_r+0x8a>
	...

080040fc <_svfiprintf_r>:
 80040fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004100:	4698      	mov	r8, r3
 8004102:	898b      	ldrh	r3, [r1, #12]
 8004104:	4607      	mov	r7, r0
 8004106:	061b      	lsls	r3, r3, #24
 8004108:	460d      	mov	r5, r1
 800410a:	4614      	mov	r4, r2
 800410c:	b09d      	sub	sp, #116	@ 0x74
 800410e:	d510      	bpl.n	8004132 <_svfiprintf_r+0x36>
 8004110:	690b      	ldr	r3, [r1, #16]
 8004112:	b973      	cbnz	r3, 8004132 <_svfiprintf_r+0x36>
 8004114:	2140      	movs	r1, #64	@ 0x40
 8004116:	f7ff ff09 	bl	8003f2c <_malloc_r>
 800411a:	6028      	str	r0, [r5, #0]
 800411c:	6128      	str	r0, [r5, #16]
 800411e:	b930      	cbnz	r0, 800412e <_svfiprintf_r+0x32>
 8004120:	230c      	movs	r3, #12
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	f04f 30ff 	mov.w	r0, #4294967295
 8004128:	b01d      	add	sp, #116	@ 0x74
 800412a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800412e:	2340      	movs	r3, #64	@ 0x40
 8004130:	616b      	str	r3, [r5, #20]
 8004132:	2300      	movs	r3, #0
 8004134:	9309      	str	r3, [sp, #36]	@ 0x24
 8004136:	2320      	movs	r3, #32
 8004138:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800413c:	2330      	movs	r3, #48	@ 0x30
 800413e:	f04f 0901 	mov.w	r9, #1
 8004142:	f8cd 800c 	str.w	r8, [sp, #12]
 8004146:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80042e0 <_svfiprintf_r+0x1e4>
 800414a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800414e:	4623      	mov	r3, r4
 8004150:	469a      	mov	sl, r3
 8004152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004156:	b10a      	cbz	r2, 800415c <_svfiprintf_r+0x60>
 8004158:	2a25      	cmp	r2, #37	@ 0x25
 800415a:	d1f9      	bne.n	8004150 <_svfiprintf_r+0x54>
 800415c:	ebba 0b04 	subs.w	fp, sl, r4
 8004160:	d00b      	beq.n	800417a <_svfiprintf_r+0x7e>
 8004162:	465b      	mov	r3, fp
 8004164:	4622      	mov	r2, r4
 8004166:	4629      	mov	r1, r5
 8004168:	4638      	mov	r0, r7
 800416a:	f7ff ff6b 	bl	8004044 <__ssputs_r>
 800416e:	3001      	adds	r0, #1
 8004170:	f000 80a7 	beq.w	80042c2 <_svfiprintf_r+0x1c6>
 8004174:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004176:	445a      	add	r2, fp
 8004178:	9209      	str	r2, [sp, #36]	@ 0x24
 800417a:	f89a 3000 	ldrb.w	r3, [sl]
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 809f 	beq.w	80042c2 <_svfiprintf_r+0x1c6>
 8004184:	2300      	movs	r3, #0
 8004186:	f04f 32ff 	mov.w	r2, #4294967295
 800418a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800418e:	f10a 0a01 	add.w	sl, sl, #1
 8004192:	9304      	str	r3, [sp, #16]
 8004194:	9307      	str	r3, [sp, #28]
 8004196:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800419a:	931a      	str	r3, [sp, #104]	@ 0x68
 800419c:	4654      	mov	r4, sl
 800419e:	2205      	movs	r2, #5
 80041a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041a4:	484e      	ldr	r0, [pc, #312]	@ (80042e0 <_svfiprintf_r+0x1e4>)
 80041a6:	f000 fa61 	bl	800466c <memchr>
 80041aa:	9a04      	ldr	r2, [sp, #16]
 80041ac:	b9d8      	cbnz	r0, 80041e6 <_svfiprintf_r+0xea>
 80041ae:	06d0      	lsls	r0, r2, #27
 80041b0:	bf44      	itt	mi
 80041b2:	2320      	movmi	r3, #32
 80041b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041b8:	0711      	lsls	r1, r2, #28
 80041ba:	bf44      	itt	mi
 80041bc:	232b      	movmi	r3, #43	@ 0x2b
 80041be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041c2:	f89a 3000 	ldrb.w	r3, [sl]
 80041c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80041c8:	d015      	beq.n	80041f6 <_svfiprintf_r+0xfa>
 80041ca:	4654      	mov	r4, sl
 80041cc:	2000      	movs	r0, #0
 80041ce:	f04f 0c0a 	mov.w	ip, #10
 80041d2:	9a07      	ldr	r2, [sp, #28]
 80041d4:	4621      	mov	r1, r4
 80041d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041da:	3b30      	subs	r3, #48	@ 0x30
 80041dc:	2b09      	cmp	r3, #9
 80041de:	d94b      	bls.n	8004278 <_svfiprintf_r+0x17c>
 80041e0:	b1b0      	cbz	r0, 8004210 <_svfiprintf_r+0x114>
 80041e2:	9207      	str	r2, [sp, #28]
 80041e4:	e014      	b.n	8004210 <_svfiprintf_r+0x114>
 80041e6:	eba0 0308 	sub.w	r3, r0, r8
 80041ea:	fa09 f303 	lsl.w	r3, r9, r3
 80041ee:	4313      	orrs	r3, r2
 80041f0:	46a2      	mov	sl, r4
 80041f2:	9304      	str	r3, [sp, #16]
 80041f4:	e7d2      	b.n	800419c <_svfiprintf_r+0xa0>
 80041f6:	9b03      	ldr	r3, [sp, #12]
 80041f8:	1d19      	adds	r1, r3, #4
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	9103      	str	r1, [sp, #12]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	bfbb      	ittet	lt
 8004202:	425b      	neglt	r3, r3
 8004204:	f042 0202 	orrlt.w	r2, r2, #2
 8004208:	9307      	strge	r3, [sp, #28]
 800420a:	9307      	strlt	r3, [sp, #28]
 800420c:	bfb8      	it	lt
 800420e:	9204      	strlt	r2, [sp, #16]
 8004210:	7823      	ldrb	r3, [r4, #0]
 8004212:	2b2e      	cmp	r3, #46	@ 0x2e
 8004214:	d10a      	bne.n	800422c <_svfiprintf_r+0x130>
 8004216:	7863      	ldrb	r3, [r4, #1]
 8004218:	2b2a      	cmp	r3, #42	@ 0x2a
 800421a:	d132      	bne.n	8004282 <_svfiprintf_r+0x186>
 800421c:	9b03      	ldr	r3, [sp, #12]
 800421e:	3402      	adds	r4, #2
 8004220:	1d1a      	adds	r2, r3, #4
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	9203      	str	r2, [sp, #12]
 8004226:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800422a:	9305      	str	r3, [sp, #20]
 800422c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80042e4 <_svfiprintf_r+0x1e8>
 8004230:	2203      	movs	r2, #3
 8004232:	4650      	mov	r0, sl
 8004234:	7821      	ldrb	r1, [r4, #0]
 8004236:	f000 fa19 	bl	800466c <memchr>
 800423a:	b138      	cbz	r0, 800424c <_svfiprintf_r+0x150>
 800423c:	2240      	movs	r2, #64	@ 0x40
 800423e:	9b04      	ldr	r3, [sp, #16]
 8004240:	eba0 000a 	sub.w	r0, r0, sl
 8004244:	4082      	lsls	r2, r0
 8004246:	4313      	orrs	r3, r2
 8004248:	3401      	adds	r4, #1
 800424a:	9304      	str	r3, [sp, #16]
 800424c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004250:	2206      	movs	r2, #6
 8004252:	4825      	ldr	r0, [pc, #148]	@ (80042e8 <_svfiprintf_r+0x1ec>)
 8004254:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004258:	f000 fa08 	bl	800466c <memchr>
 800425c:	2800      	cmp	r0, #0
 800425e:	d036      	beq.n	80042ce <_svfiprintf_r+0x1d2>
 8004260:	4b22      	ldr	r3, [pc, #136]	@ (80042ec <_svfiprintf_r+0x1f0>)
 8004262:	bb1b      	cbnz	r3, 80042ac <_svfiprintf_r+0x1b0>
 8004264:	9b03      	ldr	r3, [sp, #12]
 8004266:	3307      	adds	r3, #7
 8004268:	f023 0307 	bic.w	r3, r3, #7
 800426c:	3308      	adds	r3, #8
 800426e:	9303      	str	r3, [sp, #12]
 8004270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004272:	4433      	add	r3, r6
 8004274:	9309      	str	r3, [sp, #36]	@ 0x24
 8004276:	e76a      	b.n	800414e <_svfiprintf_r+0x52>
 8004278:	460c      	mov	r4, r1
 800427a:	2001      	movs	r0, #1
 800427c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004280:	e7a8      	b.n	80041d4 <_svfiprintf_r+0xd8>
 8004282:	2300      	movs	r3, #0
 8004284:	f04f 0c0a 	mov.w	ip, #10
 8004288:	4619      	mov	r1, r3
 800428a:	3401      	adds	r4, #1
 800428c:	9305      	str	r3, [sp, #20]
 800428e:	4620      	mov	r0, r4
 8004290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004294:	3a30      	subs	r2, #48	@ 0x30
 8004296:	2a09      	cmp	r2, #9
 8004298:	d903      	bls.n	80042a2 <_svfiprintf_r+0x1a6>
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0c6      	beq.n	800422c <_svfiprintf_r+0x130>
 800429e:	9105      	str	r1, [sp, #20]
 80042a0:	e7c4      	b.n	800422c <_svfiprintf_r+0x130>
 80042a2:	4604      	mov	r4, r0
 80042a4:	2301      	movs	r3, #1
 80042a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80042aa:	e7f0      	b.n	800428e <_svfiprintf_r+0x192>
 80042ac:	ab03      	add	r3, sp, #12
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	462a      	mov	r2, r5
 80042b2:	4638      	mov	r0, r7
 80042b4:	4b0e      	ldr	r3, [pc, #56]	@ (80042f0 <_svfiprintf_r+0x1f4>)
 80042b6:	a904      	add	r1, sp, #16
 80042b8:	f3af 8000 	nop.w
 80042bc:	1c42      	adds	r2, r0, #1
 80042be:	4606      	mov	r6, r0
 80042c0:	d1d6      	bne.n	8004270 <_svfiprintf_r+0x174>
 80042c2:	89ab      	ldrh	r3, [r5, #12]
 80042c4:	065b      	lsls	r3, r3, #25
 80042c6:	f53f af2d 	bmi.w	8004124 <_svfiprintf_r+0x28>
 80042ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80042cc:	e72c      	b.n	8004128 <_svfiprintf_r+0x2c>
 80042ce:	ab03      	add	r3, sp, #12
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	462a      	mov	r2, r5
 80042d4:	4638      	mov	r0, r7
 80042d6:	4b06      	ldr	r3, [pc, #24]	@ (80042f0 <_svfiprintf_r+0x1f4>)
 80042d8:	a904      	add	r1, sp, #16
 80042da:	f000 f87d 	bl	80043d8 <_printf_i>
 80042de:	e7ed      	b.n	80042bc <_svfiprintf_r+0x1c0>
 80042e0:	08004d72 	.word	0x08004d72
 80042e4:	08004d78 	.word	0x08004d78
 80042e8:	08004d7c 	.word	0x08004d7c
 80042ec:	00000000 	.word	0x00000000
 80042f0:	08004045 	.word	0x08004045

080042f4 <_printf_common>:
 80042f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042f8:	4616      	mov	r6, r2
 80042fa:	4698      	mov	r8, r3
 80042fc:	688a      	ldr	r2, [r1, #8]
 80042fe:	690b      	ldr	r3, [r1, #16]
 8004300:	4607      	mov	r7, r0
 8004302:	4293      	cmp	r3, r2
 8004304:	bfb8      	it	lt
 8004306:	4613      	movlt	r3, r2
 8004308:	6033      	str	r3, [r6, #0]
 800430a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800430e:	460c      	mov	r4, r1
 8004310:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004314:	b10a      	cbz	r2, 800431a <_printf_common+0x26>
 8004316:	3301      	adds	r3, #1
 8004318:	6033      	str	r3, [r6, #0]
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	0699      	lsls	r1, r3, #26
 800431e:	bf42      	ittt	mi
 8004320:	6833      	ldrmi	r3, [r6, #0]
 8004322:	3302      	addmi	r3, #2
 8004324:	6033      	strmi	r3, [r6, #0]
 8004326:	6825      	ldr	r5, [r4, #0]
 8004328:	f015 0506 	ands.w	r5, r5, #6
 800432c:	d106      	bne.n	800433c <_printf_common+0x48>
 800432e:	f104 0a19 	add.w	sl, r4, #25
 8004332:	68e3      	ldr	r3, [r4, #12]
 8004334:	6832      	ldr	r2, [r6, #0]
 8004336:	1a9b      	subs	r3, r3, r2
 8004338:	42ab      	cmp	r3, r5
 800433a:	dc2b      	bgt.n	8004394 <_printf_common+0xa0>
 800433c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004340:	6822      	ldr	r2, [r4, #0]
 8004342:	3b00      	subs	r3, #0
 8004344:	bf18      	it	ne
 8004346:	2301      	movne	r3, #1
 8004348:	0692      	lsls	r2, r2, #26
 800434a:	d430      	bmi.n	80043ae <_printf_common+0xba>
 800434c:	4641      	mov	r1, r8
 800434e:	4638      	mov	r0, r7
 8004350:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004354:	47c8      	blx	r9
 8004356:	3001      	adds	r0, #1
 8004358:	d023      	beq.n	80043a2 <_printf_common+0xae>
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	6922      	ldr	r2, [r4, #16]
 800435e:	f003 0306 	and.w	r3, r3, #6
 8004362:	2b04      	cmp	r3, #4
 8004364:	bf14      	ite	ne
 8004366:	2500      	movne	r5, #0
 8004368:	6833      	ldreq	r3, [r6, #0]
 800436a:	f04f 0600 	mov.w	r6, #0
 800436e:	bf08      	it	eq
 8004370:	68e5      	ldreq	r5, [r4, #12]
 8004372:	f104 041a 	add.w	r4, r4, #26
 8004376:	bf08      	it	eq
 8004378:	1aed      	subeq	r5, r5, r3
 800437a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800437e:	bf08      	it	eq
 8004380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004384:	4293      	cmp	r3, r2
 8004386:	bfc4      	itt	gt
 8004388:	1a9b      	subgt	r3, r3, r2
 800438a:	18ed      	addgt	r5, r5, r3
 800438c:	42b5      	cmp	r5, r6
 800438e:	d11a      	bne.n	80043c6 <_printf_common+0xd2>
 8004390:	2000      	movs	r0, #0
 8004392:	e008      	b.n	80043a6 <_printf_common+0xb2>
 8004394:	2301      	movs	r3, #1
 8004396:	4652      	mov	r2, sl
 8004398:	4641      	mov	r1, r8
 800439a:	4638      	mov	r0, r7
 800439c:	47c8      	blx	r9
 800439e:	3001      	adds	r0, #1
 80043a0:	d103      	bne.n	80043aa <_printf_common+0xb6>
 80043a2:	f04f 30ff 	mov.w	r0, #4294967295
 80043a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043aa:	3501      	adds	r5, #1
 80043ac:	e7c1      	b.n	8004332 <_printf_common+0x3e>
 80043ae:	2030      	movs	r0, #48	@ 0x30
 80043b0:	18e1      	adds	r1, r4, r3
 80043b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80043bc:	4422      	add	r2, r4
 80043be:	3302      	adds	r3, #2
 80043c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80043c4:	e7c2      	b.n	800434c <_printf_common+0x58>
 80043c6:	2301      	movs	r3, #1
 80043c8:	4622      	mov	r2, r4
 80043ca:	4641      	mov	r1, r8
 80043cc:	4638      	mov	r0, r7
 80043ce:	47c8      	blx	r9
 80043d0:	3001      	adds	r0, #1
 80043d2:	d0e6      	beq.n	80043a2 <_printf_common+0xae>
 80043d4:	3601      	adds	r6, #1
 80043d6:	e7d9      	b.n	800438c <_printf_common+0x98>

080043d8 <_printf_i>:
 80043d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043dc:	7e0f      	ldrb	r7, [r1, #24]
 80043de:	4691      	mov	r9, r2
 80043e0:	2f78      	cmp	r7, #120	@ 0x78
 80043e2:	4680      	mov	r8, r0
 80043e4:	460c      	mov	r4, r1
 80043e6:	469a      	mov	sl, r3
 80043e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80043ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80043ee:	d807      	bhi.n	8004400 <_printf_i+0x28>
 80043f0:	2f62      	cmp	r7, #98	@ 0x62
 80043f2:	d80a      	bhi.n	800440a <_printf_i+0x32>
 80043f4:	2f00      	cmp	r7, #0
 80043f6:	f000 80d3 	beq.w	80045a0 <_printf_i+0x1c8>
 80043fa:	2f58      	cmp	r7, #88	@ 0x58
 80043fc:	f000 80ba 	beq.w	8004574 <_printf_i+0x19c>
 8004400:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004404:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004408:	e03a      	b.n	8004480 <_printf_i+0xa8>
 800440a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800440e:	2b15      	cmp	r3, #21
 8004410:	d8f6      	bhi.n	8004400 <_printf_i+0x28>
 8004412:	a101      	add	r1, pc, #4	@ (adr r1, 8004418 <_printf_i+0x40>)
 8004414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004418:	08004471 	.word	0x08004471
 800441c:	08004485 	.word	0x08004485
 8004420:	08004401 	.word	0x08004401
 8004424:	08004401 	.word	0x08004401
 8004428:	08004401 	.word	0x08004401
 800442c:	08004401 	.word	0x08004401
 8004430:	08004485 	.word	0x08004485
 8004434:	08004401 	.word	0x08004401
 8004438:	08004401 	.word	0x08004401
 800443c:	08004401 	.word	0x08004401
 8004440:	08004401 	.word	0x08004401
 8004444:	08004587 	.word	0x08004587
 8004448:	080044af 	.word	0x080044af
 800444c:	08004541 	.word	0x08004541
 8004450:	08004401 	.word	0x08004401
 8004454:	08004401 	.word	0x08004401
 8004458:	080045a9 	.word	0x080045a9
 800445c:	08004401 	.word	0x08004401
 8004460:	080044af 	.word	0x080044af
 8004464:	08004401 	.word	0x08004401
 8004468:	08004401 	.word	0x08004401
 800446c:	08004549 	.word	0x08004549
 8004470:	6833      	ldr	r3, [r6, #0]
 8004472:	1d1a      	adds	r2, r3, #4
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6032      	str	r2, [r6, #0]
 8004478:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800447c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004480:	2301      	movs	r3, #1
 8004482:	e09e      	b.n	80045c2 <_printf_i+0x1ea>
 8004484:	6833      	ldr	r3, [r6, #0]
 8004486:	6820      	ldr	r0, [r4, #0]
 8004488:	1d19      	adds	r1, r3, #4
 800448a:	6031      	str	r1, [r6, #0]
 800448c:	0606      	lsls	r6, r0, #24
 800448e:	d501      	bpl.n	8004494 <_printf_i+0xbc>
 8004490:	681d      	ldr	r5, [r3, #0]
 8004492:	e003      	b.n	800449c <_printf_i+0xc4>
 8004494:	0645      	lsls	r5, r0, #25
 8004496:	d5fb      	bpl.n	8004490 <_printf_i+0xb8>
 8004498:	f9b3 5000 	ldrsh.w	r5, [r3]
 800449c:	2d00      	cmp	r5, #0
 800449e:	da03      	bge.n	80044a8 <_printf_i+0xd0>
 80044a0:	232d      	movs	r3, #45	@ 0x2d
 80044a2:	426d      	negs	r5, r5
 80044a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044a8:	230a      	movs	r3, #10
 80044aa:	4859      	ldr	r0, [pc, #356]	@ (8004610 <_printf_i+0x238>)
 80044ac:	e011      	b.n	80044d2 <_printf_i+0xfa>
 80044ae:	6821      	ldr	r1, [r4, #0]
 80044b0:	6833      	ldr	r3, [r6, #0]
 80044b2:	0608      	lsls	r0, r1, #24
 80044b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80044b8:	d402      	bmi.n	80044c0 <_printf_i+0xe8>
 80044ba:	0649      	lsls	r1, r1, #25
 80044bc:	bf48      	it	mi
 80044be:	b2ad      	uxthmi	r5, r5
 80044c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80044c2:	6033      	str	r3, [r6, #0]
 80044c4:	bf14      	ite	ne
 80044c6:	230a      	movne	r3, #10
 80044c8:	2308      	moveq	r3, #8
 80044ca:	4851      	ldr	r0, [pc, #324]	@ (8004610 <_printf_i+0x238>)
 80044cc:	2100      	movs	r1, #0
 80044ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80044d2:	6866      	ldr	r6, [r4, #4]
 80044d4:	2e00      	cmp	r6, #0
 80044d6:	bfa8      	it	ge
 80044d8:	6821      	ldrge	r1, [r4, #0]
 80044da:	60a6      	str	r6, [r4, #8]
 80044dc:	bfa4      	itt	ge
 80044de:	f021 0104 	bicge.w	r1, r1, #4
 80044e2:	6021      	strge	r1, [r4, #0]
 80044e4:	b90d      	cbnz	r5, 80044ea <_printf_i+0x112>
 80044e6:	2e00      	cmp	r6, #0
 80044e8:	d04b      	beq.n	8004582 <_printf_i+0x1aa>
 80044ea:	4616      	mov	r6, r2
 80044ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80044f0:	fb03 5711 	mls	r7, r3, r1, r5
 80044f4:	5dc7      	ldrb	r7, [r0, r7]
 80044f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044fa:	462f      	mov	r7, r5
 80044fc:	42bb      	cmp	r3, r7
 80044fe:	460d      	mov	r5, r1
 8004500:	d9f4      	bls.n	80044ec <_printf_i+0x114>
 8004502:	2b08      	cmp	r3, #8
 8004504:	d10b      	bne.n	800451e <_printf_i+0x146>
 8004506:	6823      	ldr	r3, [r4, #0]
 8004508:	07df      	lsls	r7, r3, #31
 800450a:	d508      	bpl.n	800451e <_printf_i+0x146>
 800450c:	6923      	ldr	r3, [r4, #16]
 800450e:	6861      	ldr	r1, [r4, #4]
 8004510:	4299      	cmp	r1, r3
 8004512:	bfde      	ittt	le
 8004514:	2330      	movle	r3, #48	@ 0x30
 8004516:	f806 3c01 	strble.w	r3, [r6, #-1]
 800451a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800451e:	1b92      	subs	r2, r2, r6
 8004520:	6122      	str	r2, [r4, #16]
 8004522:	464b      	mov	r3, r9
 8004524:	4621      	mov	r1, r4
 8004526:	4640      	mov	r0, r8
 8004528:	f8cd a000 	str.w	sl, [sp]
 800452c:	aa03      	add	r2, sp, #12
 800452e:	f7ff fee1 	bl	80042f4 <_printf_common>
 8004532:	3001      	adds	r0, #1
 8004534:	d14a      	bne.n	80045cc <_printf_i+0x1f4>
 8004536:	f04f 30ff 	mov.w	r0, #4294967295
 800453a:	b004      	add	sp, #16
 800453c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	f043 0320 	orr.w	r3, r3, #32
 8004546:	6023      	str	r3, [r4, #0]
 8004548:	2778      	movs	r7, #120	@ 0x78
 800454a:	4832      	ldr	r0, [pc, #200]	@ (8004614 <_printf_i+0x23c>)
 800454c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	6831      	ldr	r1, [r6, #0]
 8004554:	061f      	lsls	r7, r3, #24
 8004556:	f851 5b04 	ldr.w	r5, [r1], #4
 800455a:	d402      	bmi.n	8004562 <_printf_i+0x18a>
 800455c:	065f      	lsls	r7, r3, #25
 800455e:	bf48      	it	mi
 8004560:	b2ad      	uxthmi	r5, r5
 8004562:	6031      	str	r1, [r6, #0]
 8004564:	07d9      	lsls	r1, r3, #31
 8004566:	bf44      	itt	mi
 8004568:	f043 0320 	orrmi.w	r3, r3, #32
 800456c:	6023      	strmi	r3, [r4, #0]
 800456e:	b11d      	cbz	r5, 8004578 <_printf_i+0x1a0>
 8004570:	2310      	movs	r3, #16
 8004572:	e7ab      	b.n	80044cc <_printf_i+0xf4>
 8004574:	4826      	ldr	r0, [pc, #152]	@ (8004610 <_printf_i+0x238>)
 8004576:	e7e9      	b.n	800454c <_printf_i+0x174>
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	f023 0320 	bic.w	r3, r3, #32
 800457e:	6023      	str	r3, [r4, #0]
 8004580:	e7f6      	b.n	8004570 <_printf_i+0x198>
 8004582:	4616      	mov	r6, r2
 8004584:	e7bd      	b.n	8004502 <_printf_i+0x12a>
 8004586:	6833      	ldr	r3, [r6, #0]
 8004588:	6825      	ldr	r5, [r4, #0]
 800458a:	1d18      	adds	r0, r3, #4
 800458c:	6961      	ldr	r1, [r4, #20]
 800458e:	6030      	str	r0, [r6, #0]
 8004590:	062e      	lsls	r6, r5, #24
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	d501      	bpl.n	800459a <_printf_i+0x1c2>
 8004596:	6019      	str	r1, [r3, #0]
 8004598:	e002      	b.n	80045a0 <_printf_i+0x1c8>
 800459a:	0668      	lsls	r0, r5, #25
 800459c:	d5fb      	bpl.n	8004596 <_printf_i+0x1be>
 800459e:	8019      	strh	r1, [r3, #0]
 80045a0:	2300      	movs	r3, #0
 80045a2:	4616      	mov	r6, r2
 80045a4:	6123      	str	r3, [r4, #16]
 80045a6:	e7bc      	b.n	8004522 <_printf_i+0x14a>
 80045a8:	6833      	ldr	r3, [r6, #0]
 80045aa:	2100      	movs	r1, #0
 80045ac:	1d1a      	adds	r2, r3, #4
 80045ae:	6032      	str	r2, [r6, #0]
 80045b0:	681e      	ldr	r6, [r3, #0]
 80045b2:	6862      	ldr	r2, [r4, #4]
 80045b4:	4630      	mov	r0, r6
 80045b6:	f000 f859 	bl	800466c <memchr>
 80045ba:	b108      	cbz	r0, 80045c0 <_printf_i+0x1e8>
 80045bc:	1b80      	subs	r0, r0, r6
 80045be:	6060      	str	r0, [r4, #4]
 80045c0:	6863      	ldr	r3, [r4, #4]
 80045c2:	6123      	str	r3, [r4, #16]
 80045c4:	2300      	movs	r3, #0
 80045c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045ca:	e7aa      	b.n	8004522 <_printf_i+0x14a>
 80045cc:	4632      	mov	r2, r6
 80045ce:	4649      	mov	r1, r9
 80045d0:	4640      	mov	r0, r8
 80045d2:	6923      	ldr	r3, [r4, #16]
 80045d4:	47d0      	blx	sl
 80045d6:	3001      	adds	r0, #1
 80045d8:	d0ad      	beq.n	8004536 <_printf_i+0x15e>
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	079b      	lsls	r3, r3, #30
 80045de:	d413      	bmi.n	8004608 <_printf_i+0x230>
 80045e0:	68e0      	ldr	r0, [r4, #12]
 80045e2:	9b03      	ldr	r3, [sp, #12]
 80045e4:	4298      	cmp	r0, r3
 80045e6:	bfb8      	it	lt
 80045e8:	4618      	movlt	r0, r3
 80045ea:	e7a6      	b.n	800453a <_printf_i+0x162>
 80045ec:	2301      	movs	r3, #1
 80045ee:	4632      	mov	r2, r6
 80045f0:	4649      	mov	r1, r9
 80045f2:	4640      	mov	r0, r8
 80045f4:	47d0      	blx	sl
 80045f6:	3001      	adds	r0, #1
 80045f8:	d09d      	beq.n	8004536 <_printf_i+0x15e>
 80045fa:	3501      	adds	r5, #1
 80045fc:	68e3      	ldr	r3, [r4, #12]
 80045fe:	9903      	ldr	r1, [sp, #12]
 8004600:	1a5b      	subs	r3, r3, r1
 8004602:	42ab      	cmp	r3, r5
 8004604:	dcf2      	bgt.n	80045ec <_printf_i+0x214>
 8004606:	e7eb      	b.n	80045e0 <_printf_i+0x208>
 8004608:	2500      	movs	r5, #0
 800460a:	f104 0619 	add.w	r6, r4, #25
 800460e:	e7f5      	b.n	80045fc <_printf_i+0x224>
 8004610:	08004d83 	.word	0x08004d83
 8004614:	08004d94 	.word	0x08004d94

08004618 <memmove>:
 8004618:	4288      	cmp	r0, r1
 800461a:	b510      	push	{r4, lr}
 800461c:	eb01 0402 	add.w	r4, r1, r2
 8004620:	d902      	bls.n	8004628 <memmove+0x10>
 8004622:	4284      	cmp	r4, r0
 8004624:	4623      	mov	r3, r4
 8004626:	d807      	bhi.n	8004638 <memmove+0x20>
 8004628:	1e43      	subs	r3, r0, #1
 800462a:	42a1      	cmp	r1, r4
 800462c:	d008      	beq.n	8004640 <memmove+0x28>
 800462e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004632:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004636:	e7f8      	b.n	800462a <memmove+0x12>
 8004638:	4601      	mov	r1, r0
 800463a:	4402      	add	r2, r0
 800463c:	428a      	cmp	r2, r1
 800463e:	d100      	bne.n	8004642 <memmove+0x2a>
 8004640:	bd10      	pop	{r4, pc}
 8004642:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004646:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800464a:	e7f7      	b.n	800463c <memmove+0x24>

0800464c <_sbrk_r>:
 800464c:	b538      	push	{r3, r4, r5, lr}
 800464e:	2300      	movs	r3, #0
 8004650:	4d05      	ldr	r5, [pc, #20]	@ (8004668 <_sbrk_r+0x1c>)
 8004652:	4604      	mov	r4, r0
 8004654:	4608      	mov	r0, r1
 8004656:	602b      	str	r3, [r5, #0]
 8004658:	f7fc fbac 	bl	8000db4 <_sbrk>
 800465c:	1c43      	adds	r3, r0, #1
 800465e:	d102      	bne.n	8004666 <_sbrk_r+0x1a>
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	b103      	cbz	r3, 8004666 <_sbrk_r+0x1a>
 8004664:	6023      	str	r3, [r4, #0]
 8004666:	bd38      	pop	{r3, r4, r5, pc}
 8004668:	20000678 	.word	0x20000678

0800466c <memchr>:
 800466c:	4603      	mov	r3, r0
 800466e:	b510      	push	{r4, lr}
 8004670:	b2c9      	uxtb	r1, r1
 8004672:	4402      	add	r2, r0
 8004674:	4293      	cmp	r3, r2
 8004676:	4618      	mov	r0, r3
 8004678:	d101      	bne.n	800467e <memchr+0x12>
 800467a:	2000      	movs	r0, #0
 800467c:	e003      	b.n	8004686 <memchr+0x1a>
 800467e:	7804      	ldrb	r4, [r0, #0]
 8004680:	3301      	adds	r3, #1
 8004682:	428c      	cmp	r4, r1
 8004684:	d1f6      	bne.n	8004674 <memchr+0x8>
 8004686:	bd10      	pop	{r4, pc}

08004688 <_realloc_r>:
 8004688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800468c:	4680      	mov	r8, r0
 800468e:	4615      	mov	r5, r2
 8004690:	460c      	mov	r4, r1
 8004692:	b921      	cbnz	r1, 800469e <_realloc_r+0x16>
 8004694:	4611      	mov	r1, r2
 8004696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800469a:	f7ff bc47 	b.w	8003f2c <_malloc_r>
 800469e:	b92a      	cbnz	r2, 80046ac <_realloc_r+0x24>
 80046a0:	f7ff fbda 	bl	8003e58 <_free_r>
 80046a4:	2400      	movs	r4, #0
 80046a6:	4620      	mov	r0, r4
 80046a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046ac:	f000 f81a 	bl	80046e4 <_malloc_usable_size_r>
 80046b0:	4285      	cmp	r5, r0
 80046b2:	4606      	mov	r6, r0
 80046b4:	d802      	bhi.n	80046bc <_realloc_r+0x34>
 80046b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80046ba:	d8f4      	bhi.n	80046a6 <_realloc_r+0x1e>
 80046bc:	4629      	mov	r1, r5
 80046be:	4640      	mov	r0, r8
 80046c0:	f7ff fc34 	bl	8003f2c <_malloc_r>
 80046c4:	4607      	mov	r7, r0
 80046c6:	2800      	cmp	r0, #0
 80046c8:	d0ec      	beq.n	80046a4 <_realloc_r+0x1c>
 80046ca:	42b5      	cmp	r5, r6
 80046cc:	462a      	mov	r2, r5
 80046ce:	4621      	mov	r1, r4
 80046d0:	bf28      	it	cs
 80046d2:	4632      	movcs	r2, r6
 80046d4:	f7ff fbb2 	bl	8003e3c <memcpy>
 80046d8:	4621      	mov	r1, r4
 80046da:	4640      	mov	r0, r8
 80046dc:	f7ff fbbc 	bl	8003e58 <_free_r>
 80046e0:	463c      	mov	r4, r7
 80046e2:	e7e0      	b.n	80046a6 <_realloc_r+0x1e>

080046e4 <_malloc_usable_size_r>:
 80046e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046e8:	1f18      	subs	r0, r3, #4
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	bfbc      	itt	lt
 80046ee:	580b      	ldrlt	r3, [r1, r0]
 80046f0:	18c0      	addlt	r0, r0, r3
 80046f2:	4770      	bx	lr

080046f4 <_init>:
 80046f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f6:	bf00      	nop
 80046f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fa:	bc08      	pop	{r3}
 80046fc:	469e      	mov	lr, r3
 80046fe:	4770      	bx	lr

08004700 <_fini>:
 8004700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004702:	bf00      	nop
 8004704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004706:	bc08      	pop	{r3}
 8004708:	469e      	mov	lr, r3
 800470a:	4770      	bx	lr
